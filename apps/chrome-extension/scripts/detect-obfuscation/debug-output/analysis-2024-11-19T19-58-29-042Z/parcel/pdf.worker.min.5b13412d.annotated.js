var A, t;
'function' == typeof (A = globalThis.define) && ((t = A), (A = null)),
  (function (t, i, a, s, g) {
    var r =
        'undefined' != typeof globalThis
          ? globalThis
          : 'undefined' != typeof self
            ? self
            : 'undefined' != typeof window
              ? window
              : 'undefined' != typeof global
                ? global
                : {},
      n = 'function' == typeof r[s] && r[s],
      o = n.cache || {},
      I =
        'undefined' != typeof module &&
        'function' == typeof module.require &&
        module.require.bind(module);
    function l(A, i) {
      if (!o[A]) {
        if (!t[A]) {
          var a = 'function' == typeof r[s] && r[s];
          if (!i && a) return a(A, !0);
          if (n) return n(A, !0);
          if (I && 'string' == typeof A) return I(A);
          var g = Error("Cannot find module '" + A + "'");
          throw ((g.code = 'MODULE_NOT_FOUND'), g);
        }
        (B.resolve = function (i) {
          var a = t[A][1][i];
          return null != a ? a : i;
        }),
          (B.cache = {});
        var C = (o[A] = new l.Module(A));
        t[A][0].call(C.exports, B, C, C.exports, this);
      }
      return o[A].exports;
      function B(A) {
        var t = B.resolve(A);
        return !1 === t ? {} : l(t);
      }
    }
    (l.isParcelRequire = !0),
      (l.Module = function (A) {
        (this.id = A), (this.bundle = l), (this.exports = {});
      }),
      (l.modules = t),
      (l.cache = o),
      (l.parent = n),
      (l.register = function (A, i) {
        t[A] = [
          function (A, t) {
            t.exports = i;
          },
          {},
        ];
      }),
      Object.defineProperty(l, 'root', {
        get: function () {
          return r[s];
        },
      }),
      (r[s] = l);
    for (var C = 0; C < i.length; C++) l(i[C]);
    if (a) {
      var B = l(a);
      'object' == typeof exports && 'undefined' != typeof module
        ? (module.exports = B)
        : 'function' == typeof A && A.amd
          ? A(function () {
              return B;
            })
          : g && (this[g] = B);
    }
  })(
    {
      fAhLJ: [
        function (A, t, i) {
          /**
           * @licstart The following is the entire license notice for the
           * JavaScript code in this page
           *
           * Copyright 2024 Mozilla Foundation
           *
           * Licensed under the Apache License, Version 2.0 (the "License");
           * you may not use this file except in compliance with the License.
           * You may obtain a copy of the License at
           *
           *     http://www.apache.org/licenses/LICENSE-2.0
           *
           * Unless required by applicable law or agreed to in writing, software
           * distributed under the License is distributed on an "AS IS" BASIS,
           * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           * See the License for the specific language governing permissions and
           * limitations under the License.
           *
           * @licend The above is the entire license notice for the
           * JavaScript code in this page
           */ var a,
            s = A('@parcel/transformer-js/src/esmodule-helpers.js');
          s.defineInteropFlag(i), s.export(i, 'WorkerMessageHandler', () => Qu);
          var g = A('54ed68488cd0215b'),
            r = {
              d: (A, t) => {
                for (var i in t)
                  r.o(t, i) &&
                    !r.o(A, i) &&
                    Object.defineProperty(A, i, { enumerable: !0, get: t[i] });
              },
              o: (A, t) => Object.prototype.hasOwnProperty.call(A, t),
            },
            n = (globalThis.pdfjsWorker = {});
          r.d(n, { WorkerMessageHandler: () => QE });
          let o = !(
              'object' != typeof g ||
              g + '' != '[object process]' ||
              g.versions.nw ||
              (g.versions.electron && g.type && 'browser' !== g.type)
            ),
            I = [1, 0, 0, 1, 0, 0],
            l = [0.001, 0, 0, 0.001, 0, 0],
            C = 'pdfjs_internal_editor_',
            B = {
              PRINT: 4,
              MODIFY_CONTENTS: 8,
              COPY: 16,
              MODIFY_ANNOTATIONS: 32,
              FILL_INTERACTIVE_FORMS: 256,
              COPY_FOR_ACCESSIBILITY: 512,
              ASSEMBLE: 1024,
              PRINT_HIGH_QUALITY: 2048,
            },
            h = 'Group',
            Q = {
              E: 'Mouse Enter',
              X: 'Mouse Exit',
              D: 'Mouse Down',
              U: 'Mouse Up',
              Fo: 'Focus',
              Bl: 'Blur',
              PO: 'PageOpen',
              PC: 'PageClose',
              PV: 'PageVisible',
              PI: 'PageInvisible',
              K: 'Keystroke',
              F: 'Format',
              V: 'Validate',
              C: 'Calculate',
            },
            c = {
              WC: 'WillClose',
              WS: 'WillSave',
              DS: 'DidSave',
              WP: 'WillPrint',
              DP: 'DidPrint',
            },
            E = { O: 'PageOpen', C: 'PageClose' },
            u = { WARNINGS: 1, INFOS: 5 },
            d = { NONE: 0, BINARY: 1 },
            f = u.WARNINGS;
          function p(A) {
            f >= u.INFOS && console.log(`Info: ${A}`);
          }
          function m(A) {
            f >= u.WARNINGS && console.log(`Warning: ${A}`);
          }
          function y(A) {
            throw Error(A);
          }
          function w(A, t) {
            A || y(t);
          }
          function D(A, t = null, i = null) {
            if (!A) return null;
            try {
              if (i && 'string' == typeof A) {
                if (i.addDefaultProtocol && A.startsWith('www.')) {
                  let t = A.match(/\./g);
                  t?.length >= 2 && (A = `http://${A}`);
                }
                if (i.tryConvertEncoding)
                  try {
                    A = P(A);
                  } catch {}
              }
              let a = t ? new URL(A, t) : new URL(A);
              if (
                (function (A) {
                  switch (A?.protocol) {
                    case 'http:':
                    case 'https:':
                    case 'ftp:':
                    case 'mailto:':
                    case 'tel:':
                      return !0;
                    default:
                      return !1;
                  }
                })(a)
              )
                return a;
            } catch {}
            return null;
          }
          function b(A, t, i, a = !1) {
            return (
              Object.defineProperty(A, t, {
                value: i,
                enumerable: !a,
                configurable: !0,
                writable: !1,
              }),
              i
            );
          }
          let k = (function () {
            function A(A, t) {
              (this.message = A), (this.name = t);
            }
            return (A.prototype = Error()), (A.constructor = A), A;
          })();
          class F extends k {
            constructor(A, t) {
              super(A, 'PasswordException'), (this.code = t);
            }
          }
          class S extends k {
            constructor(A, t) {
              super(A, 'UnknownErrorException'), (this.details = t);
            }
          }
          class R extends k {
            constructor(A) {
              super(A, 'InvalidPDFException');
            }
          }
          class G extends k {
            constructor(A) {
              super(A, 'MissingPDFException');
            }
          }
          class N extends k {
            constructor(A, t) {
              super(A, 'UnexpectedResponseException'), (this.status = t);
            }
          }
          class x extends k {
            constructor(A) {
              super(A, 'FormatError');
            }
          }
          class U extends k {
            constructor(A) {
              super(A, 'AbortException');
            }
          }
          function M(A) {
            ('object' == typeof A && void 0 !== A?.length) ||
              y('Invalid argument for bytesToString');
            let t = A.length;
            if (t < 8192) return String.fromCharCode.apply(null, A);
            let i = [];
            for (let a = 0; a < t; a += 8192) {
              let s = Math.min(a + 8192, t),
                g = A.subarray(a, s);
              i.push(String.fromCharCode.apply(null, g));
            }
            return i.join('');
          }
          function J(A) {
            'string' != typeof A && y('Invalid argument for stringToBytes');
            let t = A.length,
              i = new Uint8Array(t);
            for (let a = 0; a < t; ++a) i[a] = 255 & A.charCodeAt(a);
            return i;
          }
          function L(A) {
            return String.fromCharCode(
              (A >> 24) & 255,
              (A >> 16) & 255,
              (A >> 8) & 255,
              255 & A
            );
          }
          function H(A) {
            return Object.keys(A).length;
          }
          class Y {
            static get isLittleEndian() {
              return b(
                this,
                'isLittleEndian',
                (function () {
                  let A = new Uint8Array(4);
                  return (A[0] = 1), 1 === new Uint32Array(A.buffer, 0, 1)[0];
                })()
              );
            }
            static get isEvalSupported() {
              return b(
                this,
                'isEvalSupported',
                (function () {
                  try {
/*
  Pattern: functionConstruction
*/
                    return Function(''), !0;
                  } catch {
                    return !1;
                  }
                })()
              );
            }
            static get isOffscreenCanvasSupported() {
              return b(
                this,
                'isOffscreenCanvasSupported',
                'undefined' != typeof OffscreenCanvas
              );
            }
            static get platform() {
              return 'undefined' != typeof navigator &&
                'string' == typeof navigator?.platform
                ? b(this, 'platform', {
                    isMac: navigator.platform.includes('Mac'),
                    isWindows: navigator.platform.includes('Win'),
                    isFirefox:
                      'string' == typeof navigator?.userAgent &&
                      navigator.userAgent.includes('Firefox'),
                  })
                : b(this, 'platform', {
                    isMac: !1,
                    isWindows: !1,
                    isFirefox: !1,
                  });
            }
            static get isCSSRoundSupported() {
              return b(
                this,
                'isCSSRoundSupported',
                globalThis.CSS?.supports?.('width: round(1.5px, 1px)')
              );
            }
          }
          let K = Array.from(Array(256).keys(), (A) =>
            A.toString(16).padStart(2, '0')
          );
          class v {
            static makeHexColor(A, t, i) {
              return `#${K[A]}${K[t]}${K[i]}`;
            }
            static scaleMinMax(A, t) {
              let i;
              A[0]
                ? (A[0] < 0 && ((i = t[0]), (t[0] = t[2]), (t[2] = i)),
                  (t[0] *= A[0]),
                  (t[2] *= A[0]),
                  A[3] < 0 && ((i = t[1]), (t[1] = t[3]), (t[3] = i)),
                  (t[1] *= A[3]),
                  (t[3] *= A[3]))
                : ((i = t[0]),
                  (t[0] = t[1]),
                  (t[1] = i),
                  (i = t[2]),
                  (t[2] = t[3]),
                  (t[3] = i),
                  A[1] < 0 && ((i = t[1]), (t[1] = t[3]), (t[3] = i)),
                  (t[1] *= A[1]),
                  (t[3] *= A[1]),
                  A[2] < 0 && ((i = t[0]), (t[0] = t[2]), (t[2] = i)),
                  (t[0] *= A[2]),
                  (t[2] *= A[2])),
                (t[0] += A[4]),
                (t[1] += A[5]),
                (t[2] += A[4]),
                (t[3] += A[5]);
            }
            static transform(A, t) {
              return [
                A[0] * t[0] + A[2] * t[1],
                A[1] * t[0] + A[3] * t[1],
                A[0] * t[2] + A[2] * t[3],
                A[1] * t[2] + A[3] * t[3],
                A[0] * t[4] + A[2] * t[5] + A[4],
                A[1] * t[4] + A[3] * t[5] + A[5],
              ];
            }
            static applyTransform(A, t) {
              return [
                A[0] * t[0] + A[1] * t[2] + t[4],
                A[0] * t[1] + A[1] * t[3] + t[5],
              ];
            }
            static applyInverseTransform(A, t) {
              let i = t[0] * t[3] - t[1] * t[2];
              return [
                (A[0] * t[3] - A[1] * t[2] + t[2] * t[5] - t[4] * t[3]) / i,
                (-A[0] * t[1] + A[1] * t[0] + t[4] * t[1] - t[5] * t[0]) / i,
              ];
            }
            static getAxialAlignedBoundingBox(A, t) {
              let i = this.applyTransform(A, t),
                a = this.applyTransform(A.slice(2, 4), t),
                s = this.applyTransform([A[0], A[3]], t),
                g = this.applyTransform([A[2], A[1]], t);
              return [
                Math.min(i[0], a[0], s[0], g[0]),
                Math.min(i[1], a[1], s[1], g[1]),
                Math.max(i[0], a[0], s[0], g[0]),
                Math.max(i[1], a[1], s[1], g[1]),
              ];
            }
            static inverseTransform(A) {
              let t = A[0] * A[3] - A[1] * A[2];
              return [
                A[3] / t,
                -A[1] / t,
                -A[2] / t,
                A[0] / t,
                (A[2] * A[5] - A[4] * A[3]) / t,
                (A[4] * A[1] - A[5] * A[0]) / t,
              ];
            }
            static singularValueDecompose2dScale(A) {
              let t = [A[0], A[2], A[1], A[3]],
                i = A[0] * t[0] + A[1] * t[2],
                a = A[0] * t[1] + A[1] * t[3],
                s = A[2] * t[0] + A[3] * t[2],
                g = A[2] * t[1] + A[3] * t[3],
                r = (i + g) / 2,
                n = Math.sqrt((i + g) ** 2 - 4 * (i * g - s * a)) / 2;
              return [Math.sqrt(r + n || 1), Math.sqrt(r - n || 1)];
            }
            static normalizeRect(A) {
              let t = A.slice(0);
              return (
                A[0] > A[2] && ((t[0] = A[2]), (t[2] = A[0])),
                A[1] > A[3] && ((t[1] = A[3]), (t[3] = A[1])),
                t
              );
            }
            static intersect(A, t) {
              let i = Math.max(Math.min(A[0], A[2]), Math.min(t[0], t[2])),
                a = Math.min(Math.max(A[0], A[2]), Math.max(t[0], t[2]));
              if (i > a) return null;
              let s = Math.max(Math.min(A[1], A[3]), Math.min(t[1], t[3])),
                g = Math.min(Math.max(A[1], A[3]), Math.max(t[1], t[3]));
              return s > g ? null : [i, s, a, g];
            }
            static #A(A, t, i, a, s, g, r, n, o, I) {
              if (o <= 0 || o >= 1) return;
              let l = 1 - o,
                C = o * o,
                B = C * o,
                h = l * (l * (l * A + 3 * o * t) + 3 * C * i) + B * a,
                Q = l * (l * (l * s + 3 * o * g) + 3 * C * r) + B * n;
              (I[0] = Math.min(I[0], h)),
                (I[1] = Math.min(I[1], Q)),
                (I[2] = Math.max(I[2], h)),
                (I[3] = Math.max(I[3], Q));
            }
            static #e(A, t, i, a, s, g, r, n, o, I, l, C) {
              if (1e-12 > Math.abs(o)) {
                Math.abs(I) >= 1e-12 &&
                  this.#A(A, t, i, a, s, g, r, n, -l / I, C);
                return;
              }
              let B = I ** 2 - 4 * l * o;
              if (B < 0) return;
              let h = Math.sqrt(B),
                Q = 2 * o;
              this.#A(A, t, i, a, s, g, r, n, (-I + h) / Q, C),
                this.#A(A, t, i, a, s, g, r, n, (-I - h) / Q, C);
            }
            static bezierBoundingBox(A, t, i, a, s, g, r, n, o) {
              return (
                o
                  ? ((o[0] = Math.min(o[0], A, r)),
                    (o[1] = Math.min(o[1], t, n)),
                    (o[2] = Math.max(o[2], A, r)),
                    (o[3] = Math.max(o[3], t, n)))
                  : (o = [
                      Math.min(A, r),
                      Math.min(t, n),
                      Math.max(A, r),
                      Math.max(t, n),
                    ]),
                this.#e(
                  A,
                  i,
                  s,
                  r,
                  t,
                  a,
                  g,
                  n,
                  3 * (3 * (i - s) - A + r),
                  6 * (A - 2 * i + s),
                  3 * (i - A),
                  o
                ),
                this.#e(
                  A,
                  i,
                  s,
                  r,
                  t,
                  a,
                  g,
                  n,
                  3 * (3 * (a - g) - t + n),
                  6 * (t - 2 * a + g),
                  3 * (a - t),
                  o
                ),
                o
              );
            }
          }
          let q = [
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 728, 711, 710, 729, 733, 731, 730, 732, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8226, 8224,
            8225, 8230, 8212, 8211, 402, 8260, 8249, 8250, 8722, 8240, 8222,
            8220, 8221, 8216, 8217, 8218, 8482, 64257, 64258, 321, 338, 352,
            376, 381, 305, 322, 339, 353, 382, 0, 8364,
          ];
          function T(A) {
            if (A[0] >= '\xef') {
              let t;
              if (
                ('\xfe' === A[0] && '\xff' === A[1]
                  ? ((t = 'utf-16be'),
                    A.length % 2 == 1 && (A = A.slice(0, -1)))
                  : '\xff' === A[0] && '\xfe' === A[1]
                    ? ((t = 'utf-16le'),
                      A.length % 2 == 1 && (A = A.slice(0, -1)))
                    : '\xef' === A[0] &&
                      '\xbb' === A[1] &&
                      '\xbf' === A[2] &&
                      (t = 'utf-8'),
                t)
              )
                try {
                  let i = new TextDecoder(t, { fatal: !0 }),
                    a = J(A),
                    s = i.decode(a);
                  return s.includes('\x1b')
                    ? s.replaceAll(/\x1b[^\x1b]*(?:\x1b|$)/g, '')
                    : s;
                } catch (A) {
                  m(`stringToPDFString: "${A}".`);
                }
            }
            let t = [];
            for (let i = 0, a = A.length; i < a; i++) {
              let s = A.charCodeAt(i);
              if (27 === s) {
                for (; ++i < a && 27 !== A.charCodeAt(i); );
                continue;
              }
              let g = q[s];
              t.push(g ? String.fromCharCode(g) : A.charAt(i));
            }
            return t.join('');
          }
          function P(A) {
            return decodeURIComponent(escape(A));
          }
          function W(A) {
            return unescape(encodeURIComponent(A));
          }
          function Z(A, t) {
            if (A.length !== t.length) return !1;
            for (let i = 0, a = A.length; i < a; i++)
              if (A[i] !== t[i]) return !1;
            return !0;
          }
          function O(A = new Date()) {
            return [
              A.getUTCFullYear().toString(),
              (A.getUTCMonth() + 1).toString().padStart(2, '0'),
              A.getUTCDate().toString().padStart(2, '0'),
              A.getUTCHours().toString().padStart(2, '0'),
              A.getUTCMinutes().toString().padStart(2, '0'),
              A.getUTCSeconds().toString().padStart(2, '0'),
            ].join('');
          }
          let X = null,
            V = null,
            j = Symbol('CIRCULAR_REF'),
            z = Symbol('EOF'),
            _ = Object.create(null),
            $ = Object.create(null),
            AA = Object.create(null);
          class Ae {
            constructor(A) {
              this.name = A;
            }
            static get(A) {
              return ($[A] ||= new Ae(A));
            }
          }
          class At {
            constructor(A) {
              this.cmd = A;
            }
            static get(A) {
              return (_[A] ||= new At(A));
            }
          }
          let Ai = function () {
            return Ai;
          };
          class Aa {
            constructor(A = null) {
              (this._map = Object.create(null)),
                (this.xref = A),
                (this.objId = null),
                (this.suppressEncryption = !1),
                (this.__nonSerializable__ = Ai);
            }
            assignXref(A) {
              this.xref = A;
            }
            get size() {
              return Object.keys(this._map).length;
            }
            get(A, t, i) {
              let a = this._map[A];
              return (
                void 0 === a &&
                  void 0 !== t &&
                  void 0 === (a = this._map[t]) &&
                  void 0 !== i &&
                  (a = this._map[i]),
                a instanceof As && this.xref
                  ? this.xref.fetch(a, this.suppressEncryption)
                  : a
              );
            }
            async getAsync(A, t, i) {
              let a = this._map[A];
              return (
                void 0 === a &&
                  void 0 !== t &&
                  void 0 === (a = this._map[t]) &&
                  void 0 !== i &&
                  (a = this._map[i]),
                a instanceof As && this.xref
                  ? this.xref.fetchAsync(a, this.suppressEncryption)
                  : a
              );
            }
            getArray(A, t, i) {
              let a = this._map[A];
              if (
                (void 0 === a &&
                  void 0 !== t &&
                  void 0 === (a = this._map[t]) &&
                  void 0 !== i &&
                  (a = this._map[i]),
                a instanceof As &&
                  this.xref &&
                  (a = this.xref.fetch(a, this.suppressEncryption)),
                Array.isArray(a))
              ) {
                a = a.slice();
                for (let A = 0, t = a.length; A < t; A++)
                  a[A] instanceof As &&
                    this.xref &&
                    (a[A] = this.xref.fetch(a[A], this.suppressEncryption));
              }
              return a;
            }
            getRaw(A) {
              return this._map[A];
            }
            getKeys() {
              return Object.keys(this._map);
            }
            getRawValues() {
              return Object.values(this._map);
            }
            set(A, t) {
              this._map[A] = t;
            }
            has(A) {
              return void 0 !== this._map[A];
            }
            forEach(A) {
              for (let t in this._map) A(t, this.get(t));
            }
            static get empty() {
              let A = new Aa(null);
              return (
                (A.set = (A, t) => {
                  y('Should not call `set` on the empty dictionary.');
                }),
                b(this, 'empty', A)
              );
            }
            static merge({ xref: A, dictArray: t, mergeSubDicts: i = !1 }) {
              let a = new Aa(A),
                s = new Map();
              for (let A of t)
                if (A instanceof Aa)
                  for (let [t, a] of Object.entries(A._map)) {
                    let A = s.get(t);
                    if (void 0 === A) (A = []), s.set(t, A);
                    else if (!(i && a instanceof Aa)) continue;
                    A.push(a);
                  }
              for (let [t, i] of s) {
                if (1 === i.length || !(i[0] instanceof Aa)) {
                  a._map[t] = i[0];
                  continue;
                }
                let s = new Aa(A);
                for (let A of i)
                  for (let [t, i] of Object.entries(A._map))
                    void 0 === s._map[t] && (s._map[t] = i);
                s.size > 0 && (a._map[t] = s);
              }
              return s.clear(), a.size > 0 ? a : Aa.empty;
            }
            clone() {
              let A = new Aa(this.xref);
              for (let t of this.getKeys()) A.set(t, this.getRaw(t));
              return A;
            }
            delete(A) {
              delete this._map[A];
            }
          }
          class As {
            constructor(A, t) {
              (this.num = A), (this.gen = t);
            }
            toString() {
              return 0 === this.gen
                ? `${this.num}R`
                : `${this.num}R${this.gen}`;
            }
            static fromString(A) {
              let t = AA[A];
              if (t) return t;
              let i = /^(\d+)R(\d*)$/.exec(A);
              return i && '0' !== i[1]
                ? (AA[A] = new As(parseInt(i[1]), i[2] ? parseInt(i[2]) : 0))
                : null;
            }
            static get(A, t) {
              let i = 0 === t ? `${A}R` : `${A}R${t}`;
              return (AA[i] ||= new As(A, t));
            }
          }
          class Ag {
            constructor(A = null) {
              this._set = new Set(A?._set);
            }
            has(A) {
              return this._set.has(A.toString());
            }
            put(A) {
              this._set.add(A.toString());
            }
            remove(A) {
              this._set.delete(A.toString());
            }
            [Symbol.iterator]() {
              return this._set.values();
            }
            clear() {
              this._set.clear();
            }
          }
          class Ar {
            constructor() {
              this._map = new Map();
            }
            get size() {
              return this._map.size;
            }
            get(A) {
              return this._map.get(A.toString());
            }
            has(A) {
              return this._map.has(A.toString());
            }
            put(A, t) {
              this._map.set(A.toString(), t);
            }
            putAlias(A, t) {
              this._map.set(A.toString(), this.get(t));
            }
            [Symbol.iterator]() {
              return this._map.values();
            }
            clear() {
              this._map.clear();
            }
            *items() {
              for (let [A, t] of this._map) yield [As.fromString(A), t];
            }
          }
          function An(A, t) {
            return A instanceof Ae && (void 0 === t || A.name === t);
          }
          function Ao(A, t) {
            return A instanceof At && (void 0 === t || A.cmd === t);
          }
          function AI(A, t) {
            return A instanceof Aa && (void 0 === t || An(A.get('Type'), t));
          }
          function Al(A, t) {
            return A.num === t.num && A.gen === t.gen;
          }
          class AC {
            get length() {
              y('Abstract getter `length` accessed');
            }
            get isEmpty() {
              y('Abstract getter `isEmpty` accessed');
            }
            get isDataLoaded() {
              return b(this, 'isDataLoaded', !0);
            }
            getByte() {
              y('Abstract method `getByte` called');
            }
            getBytes(A) {
              y('Abstract method `getBytes` called');
            }
            async getImageData(A, t) {
              return this.getBytes(A, t);
            }
            async asyncGetBytes() {
              y('Abstract method `asyncGetBytes` called');
            }
            get isAsync() {
              return !1;
            }
            get canAsyncDecodeImageFromBuffer() {
              return !1;
            }
            peekByte() {
              let A = this.getByte();
              return -1 !== A && this.pos--, A;
            }
            peekBytes(A) {
              let t = this.getBytes(A);
              return (this.pos -= t.length), t;
            }
            getUint16() {
              let A = this.getByte(),
                t = this.getByte();
              return -1 === A || -1 === t ? -1 : (A << 8) + t;
            }
            getInt32() {
              return (
                (this.getByte() << 24) +
                (this.getByte() << 16) +
                (this.getByte() << 8) +
                this.getByte()
              );
            }
            getByteRange(A, t) {
              y('Abstract method `getByteRange` called');
            }
            getString(A) {
              return M(this.getBytes(A));
            }
            skip(A) {
              this.pos += A || 1;
            }
            reset() {
              y('Abstract method `reset` called');
            }
            moveStart() {
              y('Abstract method `moveStart` called');
            }
            makeSubStream(A, t, i = null) {
              y('Abstract method `makeSubStream` called');
            }
            getBaseStreams() {
              return null;
            }
          }
          let AB = /^[1-9]\.\d$/;
          function Ah(A) {
            let t;
            return function () {
              return A && ((t = Object.create(null)), A(t), (A = null)), t;
            };
          }
          class AQ extends k {
            constructor(A, t) {
              super(`Missing data [${A}, ${t})`, 'MissingDataException'),
                (this.begin = A),
                (this.end = t);
            }
          }
          class Ac extends k {
            constructor(A) {
              super(A, 'ParserEOFException');
            }
          }
          class AE extends k {
            constructor(A) {
              super(A, 'XRefEntryException');
            }
          }
          class Au extends k {
            constructor(A) {
              super(A, 'XRefParseException');
            }
          }
          function Ad(A) {
            let t = A.length;
            if (0 === t) return new Uint8Array(0);
            if (1 === t) return new Uint8Array(A[0]);
            let i = 0;
            for (let a = 0; a < t; a++) i += A[a].byteLength;
            let a = new Uint8Array(i),
              s = 0;
            for (let i = 0; i < t; i++) {
              let t = new Uint8Array(A[i]);
              a.set(t, s), (s += t.byteLength);
            }
            return a;
          }
          function Af({
            dict: A,
            key: t,
            getArray: i = !1,
            stopWhenFound: a = !0,
          }) {
            let s;
            let g = new Ag();
            for (; A instanceof Aa && (!A.objId || !g.has(A.objId)); ) {
              A.objId && g.put(A.objId);
              let r = i ? A.getArray(t) : A.get(t);
              if (void 0 !== r) {
                if (a) return r;
                (s ||= []).push(r);
              }
              A = A.get('Parent');
            }
            return s;
          }
          let Ap = [
            '',
            'C',
            'CC',
            'CCC',
            'CD',
            'D',
            'DC',
            'DCC',
            'DCCC',
            'CM',
            '',
            'X',
            'XX',
            'XXX',
            'XL',
            'L',
            'LX',
            'LXX',
            'LXXX',
            'XC',
            '',
            'I',
            'II',
            'III',
            'IV',
            'V',
            'VI',
            'VII',
            'VIII',
            'IX',
          ];
          function Am(A) {
            return A <= 0 ? 0 : Math.ceil(Math.log2(A));
          }
          function Ay(A, t) {
            return (A[t] << 24) >> 24;
          }
          function Aw(A, t) {
            return (A[t] << 8) | A[t + 1];
          }
          function AD(A, t) {
            return (
              ((A[t] << 24) | (A[t + 1] << 16) | (A[t + 2] << 8) | A[t + 3]) >>>
              0
            );
          }
          function Ab(A) {
            return 32 === A || 9 === A || 13 === A || 10 === A;
          }
          function Ak(A, t) {
            return Array.isArray(A)
              ? (null === t || A.length === t) &&
                  A.every((A) => 'number' == typeof A)
              : ArrayBuffer.isView(A) &&
                  (0 === A.length || 'number' == typeof A[0]) &&
                  (null === t || A.length === t);
          }
          function AF(A, t) {
            return Ak(A, 6) ? A : t;
          }
          function AS(A, t) {
            return Ak(A, 4) ? A : t;
          }
          function AR(A, t) {
            return Ak(A, 4) ? v.normalizeRect(A) : t;
          }
          function AG(A) {
            let t = /(.+)\[(\d+)\]$/;
            return A.split('.').map((A) => {
              let i = A.match(t);
              return i
                ? { name: i[1], pos: parseInt(i[2], 10) }
                : { name: A, pos: 0 };
            });
          }
          function AN(A) {
            let t = [],
              i = 0;
            for (let a = 0, s = A.length; a < s; a++) {
              let s = A.charCodeAt(a);
              (s < 33 ||
                s > 126 ||
                35 === s ||
                40 === s ||
                41 === s ||
                60 === s ||
                62 === s ||
                91 === s ||
                93 === s ||
                123 === s ||
                125 === s ||
                47 === s ||
                37 === s) &&
                (i < a && t.push(A.substring(i, a)),
                t.push(`#${s.toString(16)}`),
                (i = a + 1));
            }
            return 0 === t.length
              ? A
              : (i < A.length && t.push(A.substring(i, A.length)), t.join(''));
          }
          function Ax(A) {
            return A.replaceAll(/([()\\\n\r])/g, (A) =>
              '\n' === A ? '\\n' : '\r' === A ? '\\r' : `\\${A}`
            );
          }
          function AU(A, t, i, a) {
            if (!A) return;
            let s = null;
            if (A instanceof As) {
              if (a.has(A)) return;
              (s = A), a.put(s), (A = t.fetch(A));
            }
            if (Array.isArray(A)) for (let s of A) AU(s, t, i, a);
            else if (A instanceof Aa) {
              if (An(A.get('S'), 'JavaScript')) {
                let t;
                let a = A.get('JS');
                a instanceof AC
                  ? (t = a.getString())
                  : 'string' == typeof a && (t = a),
                  (t &&= T(t).replaceAll('\x00', '')) && i.push(t);
              }
              AU(A.getRaw('Next'), t, i, a);
            }
            s && a.remove(s);
          }
          function AM(A, t, i) {
            let a = Object.create(null),
              s = Af({ dict: t, key: 'AA', stopWhenFound: !1 });
            if (s)
              for (let t = s.length - 1; t >= 0; t--) {
                let g = s[t];
                if (g instanceof Aa)
                  for (let t of g.getKeys()) {
                    let s = i[t];
                    if (!s) continue;
                    let r = [];
                    AU(g.getRaw(t), A, r, new Ag()), r.length > 0 && (a[s] = r);
                  }
              }
            if (t.has('A')) {
              let i = [];
              AU(t.get('A'), A, i, new Ag()), i.length > 0 && (a.Action = i);
            }
            return H(a) > 0 ? a : null;
          }
          let AJ = {
            60: '&lt;',
            62: '&gt;',
            38: '&amp;',
            34: '&quot;',
            39: '&apos;',
          };
          function AL(A) {
            let t = [],
              i = 0;
            for (let a = 0, s = A.length; a < s; a++) {
              let s = A.codePointAt(a);
              if (32 <= s && s <= 126) {
                let g = AJ[s];
                g &&
                  (i < a && t.push(A.substring(i, a)), t.push(g), (i = a + 1));
              } else
                i < a && t.push(A.substring(i, a)),
                  t.push(`&#x${s.toString(16).toUpperCase()};`),
                  s > 55295 && (s < 57344 || s > 65533) && a++,
                  (i = a + 1);
            }
            return 0 === t.length
              ? A
              : (i < A.length && t.push(A.substring(i, A.length)), t.join(''));
          }
          function AH(A, t = !1) {
            let i = /^("|').*("|')$/.exec(A);
            if (i && i[1] === i[2]) {
              if (RegExp(`[^\\\\]${i[1]}`).test(A.slice(1, -1)))
                return (
                  t && m(`FontFamily contains unescaped ${i[1]}: ${A}.`), !1
                );
            } else
              for (let i of A.split(/[ \t]+/))
                if (/^(\d|(-(\d|-)))/.test(i) || !/^[\w-\\]+$/.test(i))
                  return (
                    t && m(`FontFamily contains invalid <custom-ident>: ${A}.`),
                    !1
                  );
            return !0;
          }
          function AY(A) {
            let t = RegExp(
              '^\\s*(' +
                'app.launchURL|window.open|xfa.host.gotoURL'.replaceAll(
                  '.',
                  '\\.'
                ) +
                ')\\((?:\'|")([^\'"]*)(?:\'|")(?:,\\s*(\\w+)\\)|\\))',
              'i'
            ).exec(A);
            if (t?.[2]) {
              let A = t[2],
                i = !1;
              return (
                'true' === t[3] && 'app.launchURL' === t[1] && (i = !0),
                { url: A, newWindow: i }
              );
            }
            return null;
          }
          function AK(A) {
            if (Number.isInteger(A)) return A.toString();
            let t = Math.round(100 * A);
            return t % 100 == 0
              ? (t / 100).toString()
              : t % 10 == 0
                ? A.toFixed(1)
                : A.toFixed(2);
          }
          function Av(A) {
            if (!A) return null;
            let t = new Map();
            for (let [i, a] of A) {
              if (!i.startsWith(C)) continue;
              let A = t.get(a.pageIndex);
              A || ((A = []), t.set(a.pageIndex, A)), A.push(a);
            }
            return t.size > 0 ? t : null;
          }
          function Aq(A) {
            return /^[\x00-\x7F]*$/.test(A) ? A : AT(A, !0);
          }
          function AT(A, t = !1) {
            let i = [];
            t && i.push('\xfe\xff');
            for (let t = 0, a = A.length; t < a; t++) {
              let a = A.charCodeAt(t);
              i.push(
                String.fromCharCode((a >> 8) & 255),
                String.fromCharCode(255 & a)
              );
            }
            return i.join('');
          }
          function AP(A, t, i) {
            switch (A) {
              case 90:
                return [0, 1, -1, 0, t, 0];
              case 180:
                return [-1, 0, 0, -1, t, i];
              case 270:
                return [0, -1, 1, 0, 0, i];
              default:
                throw Error('Invalid rotation');
            }
          }
          function AW(A) {
            return Math.ceil(Math.ceil(Math.log2(1 + A)) / 8);
          }
          class AZ extends AC {
            constructor(A, t, i, a) {
              super(),
                (this.bytes = A instanceof Uint8Array ? A : new Uint8Array(A)),
                (this.start = t || 0),
                (this.pos = this.start),
                (this.end = t + i || this.bytes.length),
                (this.dict = a);
            }
            get length() {
              return this.end - this.start;
            }
            get isEmpty() {
              return 0 === this.length;
            }
            getByte() {
              return this.pos >= this.end ? -1 : this.bytes[this.pos++];
            }
            getBytes(A) {
              let t = this.bytes,
                i = this.pos,
                a = this.end;
              if (!A) return t.subarray(i, a);
              let s = i + A;
              return s > a && (s = a), (this.pos = s), t.subarray(i, s);
            }
            getByteRange(A, t) {
              return (
                A < 0 && (A = 0),
                t > this.end && (t = this.end),
                this.bytes.subarray(A, t)
              );
            }
            reset() {
              this.pos = this.start;
            }
            moveStart() {
              this.start = this.pos;
            }
            makeSubStream(A, t, i = null) {
              return new AZ(this.bytes.buffer, A, t, i);
            }
          }
          class AO extends AZ {
            constructor(A) {
              super(J(A));
            }
          }
          class AX extends AZ {
            constructor() {
              super(new Uint8Array(0));
            }
          }
          class AV extends AZ {
            constructor(A, t, i) {
              super(new Uint8Array(A), 0, A, null),
                (this.chunkSize = t),
                (this._loadedChunks = new Set()),
                (this.numChunks = Math.ceil(A / t)),
                (this.manager = i),
                (this.progressiveDataLength = 0),
                (this.lastSuccessfulEnsureByteChunk = -1);
            }
            getMissingChunks() {
              let A = [];
              for (let t = 0, i = this.numChunks; t < i; ++t)
                this._loadedChunks.has(t) || A.push(t);
              return A;
            }
            get numChunksLoaded() {
              return this._loadedChunks.size;
            }
            get isDataLoaded() {
              return this.numChunksLoaded === this.numChunks;
            }
            onReceiveData(A, t) {
              let i = this.chunkSize;
              if (A % i != 0) throw Error(`Bad begin offset: ${A}`);
              let a = A + t.byteLength;
              if (a % i != 0 && a !== this.bytes.length)
                throw Error(`Bad end offset: ${a}`);
              this.bytes.set(new Uint8Array(t), A);
              let s = Math.floor(A / i),
                g = Math.floor((a - 1) / i) + 1;
              for (let A = s; A < g; ++A) this._loadedChunks.add(A);
            }
            onReceiveProgressiveData(A) {
              let t = this.progressiveDataLength,
                i = Math.floor(t / this.chunkSize);
              this.bytes.set(new Uint8Array(A), t),
                (t += A.byteLength),
                (this.progressiveDataLength = t);
              let a =
                t >= this.end ? this.numChunks : Math.floor(t / this.chunkSize);
              for (let A = i; A < a; ++A) this._loadedChunks.add(A);
            }
            ensureByte(A) {
              if (A < this.progressiveDataLength) return;
              let t = Math.floor(A / this.chunkSize);
              if (
                !(t > this.numChunks) &&
                t !== this.lastSuccessfulEnsureByteChunk
              ) {
                if (!this._loadedChunks.has(t)) throw new AQ(A, A + 1);
                this.lastSuccessfulEnsureByteChunk = t;
              }
            }
            ensureRange(A, t) {
              if (A >= t || t <= this.progressiveDataLength) return;
              let i = Math.floor(A / this.chunkSize);
              if (i > this.numChunks) return;
              let a = Math.min(
                Math.floor((t - 1) / this.chunkSize) + 1,
                this.numChunks
              );
              for (let s = i; s < a; ++s)
                if (!this._loadedChunks.has(s)) throw new AQ(A, t);
            }
            nextEmptyChunk(A) {
              let t = this.numChunks;
              for (let i = 0; i < t; ++i) {
                let a = (A + i) % t;
                if (!this._loadedChunks.has(a)) return a;
              }
              return null;
            }
            hasChunk(A) {
              return this._loadedChunks.has(A);
            }
            getByte() {
              let A = this.pos;
              return A >= this.end
                ? -1
                : (A >= this.progressiveDataLength && this.ensureByte(A),
                  this.bytes[this.pos++]);
            }
            getBytes(A) {
              let t = this.bytes,
                i = this.pos,
                a = this.end;
              if (!A)
                return (
                  a > this.progressiveDataLength && this.ensureRange(i, a),
                  t.subarray(i, a)
                );
              let s = i + A;
              return (
                s > a && (s = a),
                s > this.progressiveDataLength && this.ensureRange(i, s),
                (this.pos = s),
                t.subarray(i, s)
              );
            }
            getByteRange(A, t) {
              return (
                A < 0 && (A = 0),
                t > this.end && (t = this.end),
                t > this.progressiveDataLength && this.ensureRange(A, t),
                this.bytes.subarray(A, t)
              );
            }
            makeSubStream(A, t, i = null) {
              function a() {}
              t
                ? A + t > this.progressiveDataLength &&
                  this.ensureRange(A, A + t)
                : A >= this.progressiveDataLength && this.ensureByte(A),
                (a.prototype = Object.create(this)),
                (a.prototype.getMissingChunks = function () {
                  let A = this.chunkSize,
                    t = Math.floor(this.start / A),
                    i = Math.floor((this.end - 1) / A) + 1,
                    a = [];
                  for (let A = t; A < i; ++A)
                    this._loadedChunks.has(A) || a.push(A);
                  return a;
                }),
                Object.defineProperty(a.prototype, 'isDataLoaded', {
                  get() {
                    return (
                      this.numChunksLoaded === this.numChunks ||
                      0 === this.getMissingChunks().length
                    );
                  },
                  configurable: !0,
                });
              let s = new a();
              return (
                (s.pos = s.start = A),
                (s.end = A + t || this.end),
                (s.dict = i),
                s
              );
            }
            getBaseStreams() {
              return [this];
            }
          }
          class Aj {
            constructor(A, t) {
              (this.length = t.length),
                (this.chunkSize = t.rangeChunkSize),
                (this.stream = new AV(this.length, this.chunkSize, this)),
                (this.pdfNetworkStream = A),
                (this.disableAutoFetch = t.disableAutoFetch),
                (this.msgHandler = t.msgHandler),
                (this.currRequestId = 0),
                (this._chunksNeededByRequest = new Map()),
                (this._requestsByChunk = new Map()),
                (this._promisesByRequest = new Map()),
                (this.progressiveDataLength = 0),
                (this.aborted = !1),
                (this._loadedStreamCapability = Promise.withResolvers());
            }
            sendRequest(A, t) {
              let i = this.pdfNetworkStream.getRangeReader(A, t);
              i.isStreamingSupported ||
                (i.onProgress = this.onProgress.bind(this));
              let a = [],
                s = 0;
              return new Promise((A, t) => {
                let g = ({ value: r, done: n }) => {
                  try {
                    if (n) {
                      let t = Ad(a);
                      (a = null), A(t);
                      return;
                    }
                    (s += r.byteLength),
                      i.isStreamingSupported && this.onProgress({ loaded: s }),
                      a.push(r),
                      i.read().then(g, t);
                  } catch (A) {
                    t(A);
                  }
                };
                i.read().then(g, t);
              }).then((t) => {
                this.aborted || this.onReceiveData({ chunk: t, begin: A });
              });
            }
            requestAllChunks(A = !1) {
              if (!A) {
                let A = this.stream.getMissingChunks();
                this._requestChunks(A);
              }
              return this._loadedStreamCapability.promise;
            }
            _requestChunks(A) {
              let t = this.currRequestId++,
                i = new Set();
              for (let a of (this._chunksNeededByRequest.set(t, i), A))
                this.stream.hasChunk(a) || i.add(a);
              if (0 === i.size) return Promise.resolve();
              let a = Promise.withResolvers();
              this._promisesByRequest.set(t, a);
              let s = [];
              for (let A of i) {
                let i = this._requestsByChunk.get(A);
                i || ((i = []), this._requestsByChunk.set(A, i), s.push(A)),
                  i.push(t);
              }
              if (s.length > 0) {
                let A = this.groupChunks(s);
                for (let t of A) {
                  let A = t.beginChunk * this.chunkSize,
                    i = Math.min(t.endChunk * this.chunkSize, this.length);
                  this.sendRequest(A, i).catch(a.reject);
                }
              }
              return a.promise.catch((A) => {
                if (!this.aborted) throw A;
              });
            }
            getStream() {
              return this.stream;
            }
            requestRange(A, t) {
              t = Math.min(t, this.length);
              let i = this.getBeginChunk(A),
                a = this.getEndChunk(t),
                s = [];
              for (let A = i; A < a; ++A) s.push(A);
              return this._requestChunks(s);
            }
            requestRanges(A = []) {
              let t = [];
              for (let i of A) {
                let A = this.getBeginChunk(i.begin),
                  a = this.getEndChunk(i.end);
                for (let i = A; i < a; ++i) t.includes(i) || t.push(i);
              }
              return (
                t.sort(function (A, t) {
                  return A - t;
                }),
                this._requestChunks(t)
              );
            }
            groupChunks(A) {
              let t = [],
                i = -1,
                a = -1;
              for (let s = 0, g = A.length; s < g; ++s) {
                let g = A[s];
                i < 0 && (i = g),
                  a >= 0 &&
                    a + 1 !== g &&
                    (t.push({ beginChunk: i, endChunk: a + 1 }), (i = g)),
                  s + 1 === A.length &&
                    t.push({ beginChunk: i, endChunk: g + 1 }),
                  (a = g);
              }
              return t;
            }
            onProgress(A) {
              this.msgHandler.send('DocProgress', {
                loaded: this.stream.numChunksLoaded * this.chunkSize + A.loaded,
                total: this.length,
              });
            }
            onReceiveData(A) {
              let t = A.chunk,
                i = void 0 === A.begin,
                a = i ? this.progressiveDataLength : A.begin,
                s = a + t.byteLength,
                g = Math.floor(a / this.chunkSize),
                r =
                  s < this.length
                    ? Math.floor(s / this.chunkSize)
                    : Math.ceil(s / this.chunkSize);
              i
                ? (this.stream.onReceiveProgressiveData(t),
                  (this.progressiveDataLength = s))
                : this.stream.onReceiveData(a, t),
                this.stream.isDataLoaded &&
                  this._loadedStreamCapability.resolve(this.stream);
              let n = [];
              for (let A = g; A < r; ++A) {
                let t = this._requestsByChunk.get(A);
                if (t)
                  for (let i of (this._requestsByChunk.delete(A), t)) {
                    let t = this._chunksNeededByRequest.get(i);
                    t.has(A) && t.delete(A), t.size > 0 || n.push(i);
                  }
              }
              if (!this.disableAutoFetch && 0 === this._requestsByChunk.size) {
                let A;
                if (1 === this.stream.numChunksLoaded) {
                  let t = this.stream.numChunks - 1;
                  this.stream.hasChunk(t) || (A = t);
                } else A = this.stream.nextEmptyChunk(r);
                Number.isInteger(A) && this._requestChunks([A]);
              }
              for (let A of n) {
                let t = this._promisesByRequest.get(A);
                this._promisesByRequest.delete(A), t.resolve();
              }
              this.msgHandler.send('DocProgress', {
                loaded: this.stream.numChunksLoaded * this.chunkSize,
                total: this.length,
              });
            }
            onError(A) {
              this._loadedStreamCapability.reject(A);
            }
            getBeginChunk(A) {
              return Math.floor(A / this.chunkSize);
            }
            getEndChunk(A) {
              return Math.floor((A - 1) / this.chunkSize) + 1;
            }
            abort(A) {
              for (let t of ((this.aborted = !0),
              this.pdfNetworkStream?.cancelAllRequests(A),
              this._promisesByRequest.values()))
                t.reject(A);
            }
          }
          class Az {
            constructor(A, t) {
              (this.name = A), (this.numComps = t);
            }
            getRgb(A, t) {
              let i = new Uint8ClampedArray(3);
              return this.getRgbItem(A, t, i, 0), i;
            }
            getRgbItem(A, t, i, a) {
              y('Should not call ColorSpace.getRgbItem');
            }
            getRgbBuffer(A, t, i, a, s, g, r) {
              y('Should not call ColorSpace.getRgbBuffer');
            }
            getOutputLength(A, t) {
              y('Should not call ColorSpace.getOutputLength');
            }
            isPassthrough(A) {
              return !1;
            }
            isDefaultDecode(A, t) {
              return Az.isDefaultDecode(A, this.numComps);
            }
            fillRgb(A, t, i, a, s, g, r, n, o) {
              let I = t * i,
                l = null,
                C = 1 << r,
                B = i !== s || t !== a;
              if (this.isPassthrough(r)) l = n;
              else if (
                1 === this.numComps &&
                I > C &&
                'DeviceGray' !== this.name &&
                'DeviceRGB' !== this.name
              ) {
                let t = r <= 8 ? new Uint8Array(C) : new Uint16Array(C);
                for (let A = 0; A < C; A++) t[A] = A;
                let i = new Uint8ClampedArray(3 * C);
                if ((this.getRgbBuffer(t, 0, C, i, 0, r, 0), B)) {
                  l = new Uint8Array(3 * I);
                  let A = 0;
                  for (let t = 0; t < I; ++t) {
                    let a = 3 * n[t];
                    (l[A++] = i[a]), (l[A++] = i[a + 1]), (l[A++] = i[a + 2]);
                  }
                } else {
                  let t = 0;
                  for (let a = 0; a < I; ++a) {
                    let s = 3 * n[a];
                    (A[t++] = i[s]),
                      (A[t++] = i[s + 1]),
                      (A[t++] = i[s + 2]),
                      (t += o);
                  }
                }
              } else
                B
                  ? ((l = new Uint8ClampedArray(3 * I)),
                    this.getRgbBuffer(n, 0, I, l, 0, r, 0))
                  : this.getRgbBuffer(n, 0, a * g, A, 0, r, o);
              if (l) {
                if (B)
                  !(function (A, t, i, a, s, g, r) {
                    r = 1 !== r ? 0 : r;
                    let n = i / s,
                      o = a / g,
                      I,
                      l = 0,
                      C = new Uint16Array(s),
                      B = 3 * i;
                    for (let A = 0; A < s; A++) C[A] = 3 * Math.floor(A * n);
                    for (let i = 0; i < g; i++) {
                      let a = Math.floor(i * o) * B;
                      for (let i = 0; i < s; i++)
                        (I = a + C[i]),
                          (t[l++] = A[I++]),
                          (t[l++] = A[I++]),
                          (t[l++] = A[I++]),
                          (l += r);
                    }
                  })(l, A, t, i, a, s, o);
                else {
                  let t = 0,
                    i = 0;
                  for (let s = 0, r = a * g; s < r; s++)
                    (A[t++] = l[i++]),
                      (A[t++] = l[i++]),
                      (A[t++] = l[i++]),
                      (t += o);
                }
              }
            }
            get usesZeroToOneRange() {
              return b(this, 'usesZeroToOneRange', !0);
            }
            static _cache(A, t, i, a) {
              let s, g;
              if (!i)
                throw Error(
                  'ColorSpace._cache - expected "localColorSpaceCache" argument.'
                );
              if (!a)
                throw Error(
                  'ColorSpace._cache - expected "parsedColorSpace" argument.'
                );
              A instanceof As && ((g = A), (A = t.fetch(A))),
                A instanceof Ae && (s = A.name),
                (s || g) && i.set(s, g, a);
            }
            static getCached(A, t, i) {
              if (!i)
                throw Error(
                  'ColorSpace.getCached - expected "localColorSpaceCache" argument.'
                );
              if (A instanceof As) {
                let a = i.getByRef(A);
                if (a) return a;
                try {
                  A = t.fetch(A);
                } catch (A) {
                  if (A instanceof AQ) throw A;
                }
              }
              if (A instanceof Ae) {
                let t = i.getByName(A.name);
                if (t) return t;
              }
              return null;
            }
            static async parseAsync({
              cs: A,
              xref: t,
              resources: i = null,
              pdfFunctionFactory: a,
              localColorSpaceCache: s,
            }) {
              let g = this._parse(A, t, i, a);
              return this._cache(A, t, s, g), g;
            }
            static parse({
              cs: A,
              xref: t,
              resources: i = null,
              pdfFunctionFactory: a,
              localColorSpaceCache: s,
            }) {
              let g = this.getCached(A, t, s);
              if (g) return g;
              let r = this._parse(A, t, i, a);
              return this._cache(A, t, s, r), r;
            }
            static _parse(A, t, i = null, a) {
              if ((A = t.fetchIfRef(A)) instanceof Ae)
                switch (A.name) {
                  case 'G':
                  case 'DeviceGray':
                    return this.singletons.gray;
                  case 'RGB':
                  case 'DeviceRGB':
                    return this.singletons.rgb;
                  case 'DeviceRGBA':
                    return this.singletons.rgba;
                  case 'CMYK':
                  case 'DeviceCMYK':
                    return this.singletons.cmyk;
                  case 'Pattern':
                    return new A$(null);
                  default:
                    if (i instanceof Aa) {
                      let s = i.get('ColorSpace');
                      if (s instanceof Aa) {
                        let g = s.get(A.name);
                        if (g) {
                          if (g instanceof Ae) return this._parse(g, t, i, a);
                          A = g;
                          break;
                        }
                      }
                    }
                    return (
                      m(`Unrecognized ColorSpace: ${A.name}`),
                      this.singletons.gray
                    );
                }
              if (Array.isArray(A)) {
                let s, g, r, n, o, I;
                let l = t.fetchIfRef(A[0]).name;
                switch (l) {
                  case 'G':
                  case 'DeviceGray':
                    return this.singletons.gray;
                  case 'RGB':
                  case 'DeviceRGB':
                    return this.singletons.rgb;
                  case 'CMYK':
                  case 'DeviceCMYK':
                    return this.singletons.cmyk;
                  case 'CalGray':
                    return new A5(
                      (n = (s = t.fetchIfRef(A[1])).getArray('WhitePoint')),
                      (o = s.getArray('BlackPoint')),
                      (I = s.get('Gamma'))
                    );
                  case 'CalRGB':
                    (n = (s = t.fetchIfRef(A[1])).getArray('WhitePoint')),
                      (o = s.getArray('BlackPoint')),
                      (I = s.getArray('Gamma'));
                    let C = s.getArray('Matrix');
                    return new A8(n, o, I, C);
                  case 'ICCBased':
                    let B = t.fetchIfRef(A[1]).dict;
                    g = B.get('N');
                    let h = B.get('Alternate');
                    if (h) {
                      let A = this._parse(h, t, i, a);
                      if (A.numComps === g) return A;
                      m(
                        'ICCBased color space: Ignoring incorrect /Alternate entry.'
                      );
                    }
                    if (1 === g) return this.singletons.gray;
                    if (3 === g) return this.singletons.rgb;
                    if (4 === g) return this.singletons.cmyk;
                    break;
                  case 'Pattern':
                    return (
                      (r = A[1] || null) && (r = this._parse(r, t, i, a)),
                      new A$(r)
                    );
                  case 'I':
                  case 'Indexed':
                    r = this._parse(A[1], t, i, a);
                    let Q = t.fetchIfRef(A[2]) + 1,
                      c = t.fetchIfRef(A[3]);
                    return new A0(r, Q, c);
                  case 'Separation':
                  case 'DeviceN':
                    let E = t.fetchIfRef(A[1]);
                    (g = Array.isArray(E) ? E.length : 1),
                      (r = this._parse(A[2], t, i, a));
                    let u = a.create(A[3]);
                    return new A_(g, r, u);
                  case 'Lab':
                    (n = (s = t.fetchIfRef(A[1])).getArray('WhitePoint')),
                      (o = s.getArray('BlackPoint'));
                    let d = s.getArray('Range');
                    return new A6(n, o, d);
                  default:
                    return (
                      m(`Unimplemented ColorSpace object: ${l}`),
                      this.singletons.gray
                    );
                }
              }
              return (
                m(`Unrecognized ColorSpace object: ${A}`), this.singletons.gray
              );
            }
            static isDefaultDecode(A, t) {
              if (!Array.isArray(A)) return !0;
              if (2 * t !== A.length)
                return m('The decode map is not the correct length'), !0;
              for (let t = 0, i = A.length; t < i; t += 2)
                if (0 !== A[t] || 1 !== A[t + 1]) return !1;
              return !0;
            }
            static get singletons() {
              return b(this, 'singletons', {
                get gray() {
                  return b(this, 'gray', new A1());
                },
                get rgb() {
                  return b(this, 'rgb', new A2());
                },
                get rgba() {
                  return b(this, 'rgba', new A9());
                },
                get cmyk() {
                  return b(this, 'cmyk', new A3());
                },
              });
            }
          }
          class A_ extends Az {
            constructor(A, t, i) {
              super('Alternate', A),
                (this.base = t),
                (this.tintFn = i),
                (this.tmpBuf = new Float32Array(t.numComps));
            }
            getRgbItem(A, t, i, a) {
              let s = this.tmpBuf;
              this.tintFn(A, t, s, 0), this.base.getRgbItem(s, 0, i, a);
            }
            getRgbBuffer(A, t, i, a, s, g, r) {
              let n, o;
              let I = this.tintFn,
                l = this.base,
                C = 1 / ((1 << g) - 1),
                B = l.numComps,
                h = l.usesZeroToOneRange,
                Q = (l.isPassthrough(8) || !h) && 0 === r,
                c = Q ? s : 0,
                E = Q ? a : new Uint8ClampedArray(B * i),
                u = this.numComps,
                d = new Float32Array(u),
                f = new Float32Array(B);
              for (n = 0; n < i; n++) {
                for (o = 0; o < u; o++) d[o] = A[t++] * C;
                if ((I(d, 0, f, 0), h))
                  for (o = 0; o < B; o++) E[c++] = 255 * f[o];
                else l.getRgbItem(f, 0, E, c), (c += B);
              }
              Q || l.getRgbBuffer(E, 0, i, a, s, 8, r);
            }
            getOutputLength(A, t) {
              return this.base.getOutputLength(
                (A * this.base.numComps) / this.numComps,
                t
              );
            }
          }
          class A$ extends Az {
            constructor(A) {
              super('Pattern', null), (this.base = A);
            }
            isDefaultDecode(A, t) {
              y('Should not call PatternCS.isDefaultDecode');
            }
          }
          class A0 extends Az {
            constructor(A, t, i) {
              super('Indexed', 1), (this.base = A), (this.highVal = t);
              let a = A.numComps * t;
              if (((this.lookup = new Uint8Array(a)), i instanceof AC)) {
                let A = i.getBytes(a);
                this.lookup.set(A);
              } else {
                if ('string' != typeof i)
                  throw new x(`IndexedCS - unrecognized lookup table: ${i}`);
                for (let A = 0; A < a; ++A)
                  this.lookup[A] = 255 & i.charCodeAt(A);
              }
            }
            getRgbItem(A, t, i, a) {
              let s = this.base.numComps,
                g = A[t] * s;
              this.base.getRgbBuffer(this.lookup, g, 1, i, a, 8, 0);
            }
            getRgbBuffer(A, t, i, a, s, g, r) {
              let n = this.base,
                o = n.numComps,
                I = n.getOutputLength(o, r),
                l = this.lookup;
              for (let g = 0; g < i; ++g) {
                let i = A[t++] * o;
                n.getRgbBuffer(l, i, 1, a, s, 8, r), (s += I);
              }
            }
            getOutputLength(A, t) {
              return this.base.getOutputLength(A * this.base.numComps, t);
            }
            isDefaultDecode(A, t) {
              return (
                !Array.isArray(A) ||
                (2 !== A.length
                  ? (m('Decode map length is not correct'), !0)
                  : !Number.isInteger(t) || t < 1
                    ? (m('Bits per component is not correct'), !0)
                    : 0 === A[0] && A[1] === (1 << t) - 1)
              );
            }
          }
          class A1 extends Az {
            constructor() {
              super('DeviceGray', 1);
            }
            getRgbItem(A, t, i, a) {
              let s = 255 * A[t];
              i[a] = i[a + 1] = i[a + 2] = s;
            }
            getRgbBuffer(A, t, i, a, s, g, r) {
              let n = 255 / ((1 << g) - 1),
                o = t,
                I = s;
              for (let t = 0; t < i; ++t) {
                let t = n * A[o++];
                (a[I++] = t), (a[I++] = t), (a[I++] = t), (I += r);
              }
            }
            getOutputLength(A, t) {
              return A * (3 + t);
            }
          }
          class A2 extends Az {
            constructor() {
              super('DeviceRGB', 3);
            }
            getRgbItem(A, t, i, a) {
              (i[a] = 255 * A[t]),
                (i[a + 1] = 255 * A[t + 1]),
                (i[a + 2] = 255 * A[t + 2]);
            }
            getRgbBuffer(A, t, i, a, s, g, r) {
              if (8 === g && 0 === r) {
                a.set(A.subarray(t, t + 3 * i), s);
                return;
              }
              let n = 255 / ((1 << g) - 1),
                o = t,
                I = s;
              for (let t = 0; t < i; ++t)
                (a[I++] = n * A[o++]),
                  (a[I++] = n * A[o++]),
                  (a[I++] = n * A[o++]),
                  (I += r);
            }
            getOutputLength(A, t) {
              return ((A * (3 + t)) / 3) | 0;
            }
            isPassthrough(A) {
              return 8 === A;
            }
          }
          class A9 extends Az {
            constructor() {
              super('DeviceRGBA', 4);
            }
            getOutputLength(A, t) {
              return 4 * A;
            }
            isPassthrough(A) {
              return 8 === A;
            }
          }
          class A3 extends Az {
            constructor() {
              super('DeviceCMYK', 4);
            }
            #t(A, t, i, a, s) {
              let g = A[t] * i,
                r = A[t + 1] * i,
                n = A[t + 2] * i,
                o = A[t + 3] * i;
              (a[s] =
                255 +
                g *
                  (-4.387332384609988 * g +
                    54.48615194189176 * r +
                    18.82290502165302 * n +
                    212.25662451639585 * o -
                    285.2331026137004) +
                r *
                  (1.7149763477362134 * r -
                    5.6096736904047315 * n +
                    -17.873870861415444 * o -
                    5.497006427196366) +
                n *
                  (-2.5217340131683033 * n -
                    21.248923337353073 * o +
                    17.5119270841813) +
                o * (-21.86122147463605 * o - 189.48180835922747)),
                (a[s + 1] =
                  255 +
                  g *
                    (8.841041422036149 * g +
                      60.118027045597366 * r +
                      6.871425592049007 * n +
                      31.159100130055922 * o -
                      79.2970844816548) +
                  r *
                    (-15.310361306967817 * r +
                      17.575251261109482 * n +
                      131.35250912493976 * o -
                      190.9453302588951) +
                  n *
                    (4.444339102852739 * n +
                      9.8632861493405 * o -
                      24.86741582555878) +
                  o * (-20.737325471181034 * o - 187.80453709719578)),
                (a[s + 2] =
                  255 +
                  g *
                    (0.8842522430003296 * g +
                      8.078677503112928 * r +
                      30.89978309703729 * n -
                      0.23883238689178934 * o -
                      14.183576799673286) +
                  r *
                    (10.49593273432072 * r +
                      63.02378494754052 * n +
                      50.606957656360734 * o -
                      112.23884253719248) +
                  n *
                    (0.03296041114873217 * n +
                      115.60384449646641 * o -
                      193.58209356861505) +
                  o * (-22.33816807309886 * o - 180.12613974708367));
            }
            getRgbItem(A, t, i, a) {
              this.#t(A, t, 1, i, a);
            }
            getRgbBuffer(A, t, i, a, s, g, r) {
              let n = 1 / ((1 << g) - 1);
              for (let g = 0; g < i; g++)
                this.#t(A, t, n, a, s), (t += 4), (s += 3 + r);
            }
            getOutputLength(A, t) {
              return ((A / 4) * (3 + t)) | 0;
            }
          }
          class A5 extends Az {
            constructor(A, t, i) {
              if ((super('CalGray', 1), !A))
                throw new x(
                  'WhitePoint missing - required for color space CalGray'
                );
              if (
                (([this.XW, this.YW, this.ZW] = A),
                ([this.XB, this.YB, this.ZB] = t || [0, 0, 0]),
                (this.G = i || 1),
                this.XW < 0 || this.ZW < 0 || 1 !== this.YW)
              )
                throw new x(
                  `Invalid WhitePoint components for ${this.name}, no fallback available`
                );
              (this.XB < 0 || this.YB < 0 || this.ZB < 0) &&
                (p(
                  `Invalid BlackPoint for ${this.name}, falling back to default.`
                ),
                (this.XB = this.YB = this.ZB = 0)),
                (0 === this.XB && 0 === this.YB && 0 === this.ZB) ||
                  m(
                    `${this.name}, BlackPoint: XB: ${this.XB}, YB: ${this.YB}, ZB: ${this.ZB}, only default values are supported.`
                  ),
                this.G < 1 &&
                  (p(
                    `Invalid Gamma: ${this.G} for ${this.name}, falling back to default.`
                  ),
                  (this.G = 1));
            }
            #t(A, t, i, a, s) {
              let g = (A[t] * s) ** this.G,
                r = this.YW * g,
                n = Math.max(295.8 * r ** 0.3333333333333333 - 40.8, 0);
              (i[a] = n), (i[a + 1] = n), (i[a + 2] = n);
            }
            getRgbItem(A, t, i, a) {
              this.#t(A, t, i, a, 1);
            }
            getRgbBuffer(A, t, i, a, s, g, r) {
              let n = 1 / ((1 << g) - 1);
              for (let g = 0; g < i; ++g)
                this.#t(A, t, a, s, n), (t += 1), (s += 3 + r);
            }
            getOutputLength(A, t) {
              return A * (3 + t);
            }
          }
          class A8 extends Az {
            static #i = new Float32Array([
              0.8951, 0.2664, -0.1614, -0.7502, 1.7135, 0.0367, 0.0389, -0.0685,
              1.0296,
            ]);
            static #a = new Float32Array([
              0.9869929, -0.1470543, 0.1599627, 0.4323053, 0.5183603, 0.0492912,
              -0.0085287, 0.0400428, 0.9684867,
            ]);
            static #s = new Float32Array([
              3.2404542, -1.5371385, -0.4985314, -0.969266, 1.8760108, 0.041556,
              0.0556434, -0.2040259, 1.0572252,
            ]);
            static #g = new Float32Array([1, 1, 1]);
            static #r = new Float32Array(3);
            static #n = new Float32Array(3);
            static #o = new Float32Array(3);
            static #I = (24 / 116) ** 3 / 8;
            constructor(A, t, i, a) {
              if ((super('CalRGB', 3), !A))
                throw new x(
                  'WhitePoint missing - required for color space CalRGB'
                );
              let [s, g, r] = (this.whitePoint = A),
                [n, o, I] = (this.blackPoint = t || new Float32Array(3));
              if (
                (([this.GR, this.GG, this.GB] =
                  i || new Float32Array([1, 1, 1])),
                ([
                  this.MXA,
                  this.MYA,
                  this.MZA,
                  this.MXB,
                  this.MYB,
                  this.MZB,
                  this.MXC,
                  this.MYC,
                  this.MZC,
                ] = a || new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1])),
                s < 0 || r < 0 || 1 !== g)
              )
                throw new x(
                  `Invalid WhitePoint components for ${this.name}, no fallback available`
                );
              (n < 0 || o < 0 || I < 0) &&
                (p(
                  `Invalid BlackPoint for ${this.name} [${n}, ${o}, ${I}], falling back to default.`
                ),
                (this.blackPoint = new Float32Array(3))),
                (this.GR < 0 || this.GG < 0 || this.GB < 0) &&
                  (p(
                    `Invalid Gamma [${this.GR}, ${this.GG}, ${this.GB}] for ${this.name}, falling back to default.`
                  ),
                  (this.GR = this.GG = this.GB = 1));
            }
            #l(A, t, i) {
              (i[0] = A[0] * t[0] + A[1] * t[1] + A[2] * t[2]),
                (i[1] = A[3] * t[0] + A[4] * t[1] + A[5] * t[2]),
                (i[2] = A[6] * t[0] + A[7] * t[1] + A[8] * t[2]);
            }
            #C(A, t, i) {
              (i[0] = (1 * t[0]) / A[0]),
                (i[1] = (1 * t[1]) / A[1]),
                (i[2] = (1 * t[2]) / A[2]);
            }
            #B(A, t, i) {
              (i[0] = (0.95047 * t[0]) / A[0]),
                (i[1] = (1 * t[1]) / A[1]),
                (i[2] = (1.08883 * t[2]) / A[2]);
            }
            #h(A) {
              return A <= 0.0031308
                ? this.#Q(0, 1, 12.92 * A)
                : A >= 0.99554525
                  ? 1
                  : this.#Q(0, 1, 1.055 * A ** (1 / 2.4) - 0.055);
            }
            #Q(A, t, i) {
              return Math.max(A, Math.min(t, i));
            }
            #c(A) {
              return A < 0
                ? -this.#c(-A)
                : A > 8
                  ? ((A + 16) / 116) ** 3
                  : A * A8.#I;
            }
            #E(A, t, i) {
              if (0 === A[0] && 0 === A[1] && 0 === A[2]) {
                (i[0] = t[0]), (i[1] = t[1]), (i[2] = t[2]);
                return;
              }
              let a = this.#c(0),
                s = (1 - a) / (1 - this.#c(A[0])),
                g = (1 - a) / (1 - this.#c(A[1])),
                r = (1 - a) / (1 - this.#c(A[2]));
              (i[0] = t[0] * s + (1 - s)),
                (i[1] = t[1] * g + (1 - g)),
                (i[2] = t[2] * r + (1 - r));
            }
            #u(A, t, i) {
              if (1 === A[0] && 1 === A[2]) {
                (i[0] = t[0]), (i[1] = t[1]), (i[2] = t[2]);
                return;
              }
              this.#l(A8.#i, t, i);
              let a = A8.#r;
              this.#C(A, i, a), this.#l(A8.#a, a, i);
            }
            #d(A, t, i) {
              this.#l(A8.#i, t, i);
              let a = A8.#r;
              this.#B(A, i, a), this.#l(A8.#a, a, i);
            }
            #t(A, t, i, a, s) {
              let g = this.#Q(0, 1, A[t] * s),
                r = this.#Q(0, 1, A[t + 1] * s),
                n = this.#Q(0, 1, A[t + 2] * s),
                o = 1 === g ? 1 : g ** this.GR,
                I = 1 === r ? 1 : r ** this.GG,
                l = 1 === n ? 1 : n ** this.GB,
                C = this.MXA * o + this.MXB * I + this.MXC * l,
                B = this.MYA * o + this.MYB * I + this.MYC * l,
                h = this.MZA * o + this.MZB * I + this.MZC * l,
                Q = A8.#n;
              (Q[0] = C), (Q[1] = B), (Q[2] = h);
              let c = A8.#o;
              this.#u(this.whitePoint, Q, c);
              let E = A8.#n;
              this.#E(this.blackPoint, c, E);
              let u = A8.#o;
              this.#d(A8.#g, E, u);
              let d = A8.#n;
              this.#l(A8.#s, u, d),
                (i[a] = 255 * this.#h(d[0])),
                (i[a + 1] = 255 * this.#h(d[1])),
                (i[a + 2] = 255 * this.#h(d[2]));
            }
            getRgbItem(A, t, i, a) {
              this.#t(A, t, i, a, 1);
            }
            getRgbBuffer(A, t, i, a, s, g, r) {
              let n = 1 / ((1 << g) - 1);
              for (let g = 0; g < i; ++g)
                this.#t(A, t, a, s, n), (t += 3), (s += 3 + r);
            }
            getOutputLength(A, t) {
              return ((A * (3 + t)) / 3) | 0;
            }
          }
          class A6 extends Az {
            constructor(A, t, i) {
              if ((super('Lab', 3), !A))
                throw new x(
                  'WhitePoint missing - required for color space Lab'
                );
              if (
                (([this.XW, this.YW, this.ZW] = A),
                ([this.amin, this.amax, this.bmin, this.bmax] = i || [
                  -100, 100, -100, 100,
                ]),
                ([this.XB, this.YB, this.ZB] = t || [0, 0, 0]),
                this.XW < 0 || this.ZW < 0 || 1 !== this.YW)
              )
                throw new x(
                  'Invalid WhitePoint components, no fallback available'
                );
              (this.XB < 0 || this.YB < 0 || this.ZB < 0) &&
                (p('Invalid BlackPoint, falling back to default'),
                (this.XB = this.YB = this.ZB = 0)),
                (this.amin > this.amax || this.bmin > this.bmax) &&
                  (p('Invalid Range, falling back to defaults'),
                  (this.amin = -100),
                  (this.amax = 100),
                  (this.bmin = -100),
                  (this.bmax = 100));
            }
            #f(A) {
              return A >= 6 / 29 ? A ** 3 : (108 / 841) * (A - 4 / 29);
            }
            #p(A, t, i, a) {
              return i + (A * (a - i)) / t;
            }
            #t(A, t, i, a, s) {
              let g,
                r,
                n,
                o = A[t],
                I = A[t + 1],
                l = A[t + 2];
              !1 !== i &&
                ((o = this.#p(o, i, 0, 100)),
                (I = this.#p(I, i, this.amin, this.amax)),
                (l = this.#p(l, i, this.bmin, this.bmax))),
                I > this.amax
                  ? (I = this.amax)
                  : I < this.amin && (I = this.amin),
                l > this.bmax
                  ? (l = this.bmax)
                  : l < this.bmin && (l = this.bmin);
              let C = (o + 16) / 116,
                B = C + I / 500,
                h = C - l / 200,
                Q = this.XW * this.#f(B),
                c = this.YW * this.#f(C),
                E = this.ZW * this.#f(h);
              this.ZW < 1
                ? ((g = 3.1339 * Q + -1.617 * c + -0.4906 * E),
                  (r = -0.9785 * Q + 1.916 * c + 0.0333 * E),
                  (n = 0.072 * Q + -0.229 * c + 1.4057 * E))
                : ((g = 3.2406 * Q + -1.5372 * c + -0.4986 * E),
                  (r = -0.9689 * Q + 1.8758 * c + 0.0415 * E),
                  (n = 0.0557 * Q + -0.204 * c + 1.057 * E)),
                (a[s] = 255 * Math.sqrt(g)),
                (a[s + 1] = 255 * Math.sqrt(r)),
                (a[s + 2] = 255 * Math.sqrt(n));
            }
            getRgbItem(A, t, i, a) {
              this.#t(A, t, !1, i, a);
            }
            getRgbBuffer(A, t, i, a, s, g, r) {
              let n = (1 << g) - 1;
              for (let g = 0; g < i; g++)
                this.#t(A, t, n, a, s), (t += 3), (s += 3 + r);
            }
            getOutputLength(A, t) {
              return ((A * (3 + t)) / 3) | 0;
            }
            isDefaultDecode(A, t) {
              return !0;
            }
            get usesZeroToOneRange() {
              return b(this, 'usesZeroToOneRange', !1);
            }
          }
          function A7(A, t) {
            let i = 0;
            for (let a = 0; a <= t; a++) i = (i << 8) | A[a];
            return i >>> 0;
          }
          function A4(A, t) {
            return 1 === t
              ? String.fromCharCode(A[0], A[1])
              : 3 === t
                ? String.fromCharCode(A[0], A[1], A[2], A[3])
                : String.fromCharCode(...A.subarray(0, t + 1));
          }
          function eA(A, t, i) {
            let a = 0;
            for (let s = i; s >= 0; s--)
              (a += A[s] + t[s]), (A[s] = 255 & a), (a >>= 8);
          }
          function ee(A, t) {
            let i = 1;
            for (let a = t; a >= 0 && i > 0; a--)
              (i += A[a]), (A[a] = 255 & i), (i >>= 8);
          }
          class et {
            constructor(A) {
              (this.buffer = A),
                (this.pos = 0),
                (this.end = A.length),
                (this.tmpBuf = new Uint8Array(19));
            }
            readByte() {
              return this.pos >= this.end ? -1 : this.buffer[this.pos++];
            }
            readNumber() {
              let A,
                t = 0;
              do {
                let i = this.readByte();
                if (i < 0) throw new x('unexpected EOF in bcmap');
                (A = !(128 & i)), (t = (t << 7) | (127 & i));
              } while (!A);
              return t;
            }
            readSigned() {
              let A = this.readNumber();
              return 1 & A ? ~(A >>> 1) : A >>> 1;
            }
            readHex(A, t) {
              A.set(this.buffer.subarray(this.pos, this.pos + t + 1)),
                (this.pos += t + 1);
            }
            readHexNumber(A, t) {
              let i;
              let a = this.tmpBuf,
                s = 0;
              do {
                let A = this.readByte();
                if (A < 0) throw new x('unexpected EOF in bcmap');
                (i = !(128 & A)), (a[s++] = 127 & A);
              } while (!i);
              let g = t,
                r = 0,
                n = 0;
              for (; g >= 0; ) {
                for (; n < 8 && a.length > 0; ) (r |= a[--s] << n), (n += 7);
                (A[g] = 255 & r), g--, (r >>= 8), (n -= 8);
              }
            }
            readHexSigned(A, t) {
              this.readHexNumber(A, t);
              let i = 1 & A[t] ? 255 : 0,
                a = 0;
              for (let s = 0; s <= t; s++)
                (a = ((1 & a) << 8) | A[s]), (A[s] = (a >> 1) ^ i);
            }
            readString() {
              let A = this.readNumber(),
                t = Array(A);
              for (let i = 0; i < A; i++) t[i] = this.readNumber();
              return String.fromCharCode(...t);
            }
          }
          class ei {
            async process(A, t, i) {
              let a, s;
              let g = new et(A),
                r = g.readByte();
              t.vertical = !!(1 & r);
              let n = null,
                o = new Uint8Array(16),
                I = new Uint8Array(16),
                l = new Uint8Array(16),
                C = new Uint8Array(16),
                B = new Uint8Array(16);
              for (; (s = g.readByte()) >= 0; ) {
                let A = s >> 5;
                if (7 === A) {
                  switch (31 & s) {
                    case 0:
                      g.readString();
                      break;
                    case 1:
                      n = g.readString();
                  }
                  continue;
                }
                let i = !!(16 & s),
                  r = 15 & s;
                if (r + 1 > 16)
                  throw Error('BinaryCMapReader.process: Invalid dataSize.');
                let h = g.readNumber();
                switch (A) {
                  case 0:
                    g.readHex(o, r),
                      g.readHexNumber(I, r),
                      eA(I, o, r),
                      t.addCodespaceRange(r + 1, A7(o, r), A7(I, r));
                    for (let A = 1; A < h; A++)
                      ee(I, r),
                        g.readHexNumber(o, r),
                        eA(o, I, r),
                        g.readHexNumber(I, r),
                        eA(I, o, r),
                        t.addCodespaceRange(r + 1, A7(o, r), A7(I, r));
                    break;
                  case 1:
                    g.readHex(o, r),
                      g.readHexNumber(I, r),
                      eA(I, o, r),
                      g.readNumber();
                    for (let A = 1; A < h; A++)
                      ee(I, r),
                        g.readHexNumber(o, r),
                        eA(o, I, r),
                        g.readHexNumber(I, r),
                        eA(I, o, r),
                        g.readNumber();
                    break;
                  case 2:
                    g.readHex(l, r),
                      (a = g.readNumber()),
                      t.mapOne(A7(l, r), a);
                    for (let A = 1; A < h; A++)
                      ee(l, r),
                        i || (g.readHexNumber(B, r), eA(l, B, r)),
                        (a = g.readSigned() + (a + 1)),
                        t.mapOne(A7(l, r), a);
                    break;
                  case 3:
                    g.readHex(o, r),
                      g.readHexNumber(I, r),
                      eA(I, o, r),
                      (a = g.readNumber()),
                      t.mapCidRange(A7(o, r), A7(I, r), a);
                    for (let A = 1; A < h; A++)
                      ee(I, r),
                        i ? o.set(I) : (g.readHexNumber(o, r), eA(o, I, r)),
                        g.readHexNumber(I, r),
                        eA(I, o, r),
                        (a = g.readNumber()),
                        t.mapCidRange(A7(o, r), A7(I, r), a);
                    break;
                  case 4:
                    g.readHex(l, 1),
                      g.readHex(C, r),
                      t.mapOne(A7(l, 1), A4(C, r));
                    for (let A = 1; A < h; A++)
                      ee(l, 1),
                        i || (g.readHexNumber(B, 1), eA(l, B, 1)),
                        ee(C, r),
                        g.readHexSigned(B, r),
                        eA(C, B, r),
                        t.mapOne(A7(l, 1), A4(C, r));
                    break;
                  case 5:
                    g.readHex(o, 1),
                      g.readHexNumber(I, 1),
                      eA(I, o, 1),
                      g.readHex(C, r),
                      t.mapBfRange(A7(o, 1), A7(I, 1), A4(C, r));
                    for (let A = 1; A < h; A++)
                      ee(I, 1),
                        i ? o.set(I) : (g.readHexNumber(o, 1), eA(o, I, 1)),
                        g.readHexNumber(I, 1),
                        eA(I, o, 1),
                        g.readHex(C, r),
                        t.mapBfRange(A7(o, 1), A7(I, 1), A4(C, r));
                    break;
                  default:
                    throw Error(
                      `BinaryCMapReader.process - unknown type: ${A}`
                    );
                }
              }
              return n ? i(n) : t;
            }
          }
          let ea = new Uint8Array(0);
          class es extends AC {
            constructor(A) {
              if (
                (super(),
                (this._rawMinBufferLength = A || 0),
                (this.pos = 0),
                (this.bufferLength = 0),
                (this.eof = !1),
                (this.buffer = ea),
                (this.minBufferLength = 512),
                A)
              )
                for (; this.minBufferLength < A; ) this.minBufferLength *= 2;
            }
            get isEmpty() {
              for (; !this.eof && 0 === this.bufferLength; ) this.readBlock();
              return 0 === this.bufferLength;
            }
            ensureBuffer(A) {
              let t = this.buffer;
              if (A <= t.byteLength) return t;
              let i = this.minBufferLength;
              for (; i < A; ) i *= 2;
              let a = new Uint8Array(i);
              return a.set(t), (this.buffer = a);
            }
            getByte() {
              let A = this.pos;
              for (; this.bufferLength <= A; ) {
                if (this.eof) return -1;
                this.readBlock();
              }
              return this.buffer[this.pos++];
            }
            getBytes(A, t = null) {
              let i;
              let a = this.pos;
              if (A) {
                for (
                  this.ensureBuffer(a + A), i = a + A;
                  !this.eof && this.bufferLength < i;

                )
                  this.readBlock(t);
                let s = this.bufferLength;
                i > s && (i = s);
              } else {
                for (; !this.eof; ) this.readBlock(t);
                i = this.bufferLength;
              }
              return (this.pos = i), this.buffer.subarray(a, i);
            }
            async getImageData(A, t = null) {
              if (!this.canAsyncDecodeImageFromBuffer)
                return this.getBytes(A, t);
              let i = await this.stream.asyncGetBytes();
              return this.decodeImage(i, t);
            }
            reset() {
              this.pos = 0;
            }
            makeSubStream(A, t, i = null) {
              if (void 0 === t) for (; !this.eof; ) this.readBlock();
              else {
                let i = A + t;
                for (; this.bufferLength <= i && !this.eof; ) this.readBlock();
              }
              return new AZ(this.buffer, A, t, i);
            }
            getBaseStreams() {
              return this.str ? this.str.getBaseStreams() : null;
            }
          }
          class eg extends es {
            constructor(A, t = null) {
              let i = 0;
              for (let t of A)
                i += t instanceof es ? t._rawMinBufferLength : t.length;
              super(i), (this.streams = A), (this._onError = t);
            }
            readBlock() {
              let A;
              let t = this.streams;
              if (0 === t.length) {
                this.eof = !0;
                return;
              }
              let i = t.shift();
              try {
                A = i.getBytes();
              } catch (A) {
                if (this._onError) {
                  this._onError(A, i.dict?.objId);
                  return;
                }
                throw A;
              }
              let a = this.bufferLength,
                s = a + A.length;
              this.ensureBuffer(s).set(A, a), (this.bufferLength = s);
            }
            getBaseStreams() {
              let A = [];
              for (let t of this.streams) {
                let i = t.getBaseStreams();
                i && A.push(...i);
              }
              return A.length > 0 ? A : null;
            }
          }
          class er extends es {
            constructor(A, t) {
              t && (t *= 0.8),
                super(t),
                (this.str = A),
                (this.dict = A.dict),
                (this.input = new Uint8Array(5));
            }
            readBlock() {
              let A, t;
              let i = this.str,
                a = i.getByte();
              for (; Ab(a); ) a = i.getByte();
              if (-1 === a || 126 === a) {
                this.eof = !0;
                return;
              }
              let s = this.bufferLength;
              if (122 === a) {
                for (t = 0, A = this.ensureBuffer(s + 4); t < 4; ++t)
                  A[s + t] = 0;
                this.bufferLength += 4;
              } else {
                let g = this.input;
                for (t = 1, g[0] = a; t < 5; ++t) {
                  for (a = i.getByte(); Ab(a); ) a = i.getByte();
                  if (((g[t] = a), -1 === a || 126 === a)) break;
                }
                if (
                  ((A = this.ensureBuffer(s + t - 1)),
                  (this.bufferLength += t - 1),
                  t < 5)
                ) {
                  for (; t < 5; ++t) g[t] = 117;
                  this.eof = !0;
                }
                let r = 0;
                for (t = 0; t < 5; ++t) r = 85 * r + (g[t] - 33);
                for (t = 3; t >= 0; --t) (A[s + t] = 255 & r), (r >>= 8);
              }
            }
          }
          class en extends es {
            constructor(A, t) {
              t && (t *= 0.5),
                super(t),
                (this.str = A),
                (this.dict = A.dict),
                (this.firstDigit = -1);
            }
            readBlock() {
              let A = this.str.getBytes(8e3);
              if (!A.length) {
                this.eof = !0;
                return;
              }
              let t = (A.length + 1) >> 1,
                i = this.ensureBuffer(this.bufferLength + t),
                a = this.bufferLength,
                s = this.firstDigit;
              for (let t of A) {
                let A;
                if (t >= 48 && t <= 57) A = 15 & t;
                else {
                  if (!((t >= 65 && t <= 70) || (t >= 97 && t <= 102))) {
                    if (62 === t) {
                      this.eof = !0;
                      break;
                    }
                    continue;
                  }
                  A = 9 + (15 & t);
                }
                s < 0 ? (s = A) : ((i[a++] = (s << 4) | A), (s = -1));
              }
              s >= 0 && this.eof && ((i[a++] = s << 4), (s = -1)),
                (this.firstDigit = s),
                (this.bufferLength = a);
            }
          }
          let eo = [
              [-1, -1],
              [-1, -1],
              [7, 8],
              [7, 7],
              [6, 6],
              [6, 6],
              [6, 5],
              [6, 5],
              [4, 0],
              [4, 0],
              [4, 0],
              [4, 0],
              [4, 0],
              [4, 0],
              [4, 0],
              [4, 0],
              [3, 1],
              [3, 1],
              [3, 1],
              [3, 1],
              [3, 1],
              [3, 1],
              [3, 1],
              [3, 1],
              [3, 1],
              [3, 1],
              [3, 1],
              [3, 1],
              [3, 1],
              [3, 1],
              [3, 1],
              [3, 1],
              [3, 4],
              [3, 4],
              [3, 4],
              [3, 4],
              [3, 4],
              [3, 4],
              [3, 4],
              [3, 4],
              [3, 4],
              [3, 4],
              [3, 4],
              [3, 4],
              [3, 4],
              [3, 4],
              [3, 4],
              [3, 4],
              [3, 3],
              [3, 3],
              [3, 3],
              [3, 3],
              [3, 3],
              [3, 3],
              [3, 3],
              [3, 3],
              [3, 3],
              [3, 3],
              [3, 3],
              [3, 3],
              [3, 3],
              [3, 3],
              [3, 3],
              [3, 3],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
              [1, 2],
            ],
            eI = [
              [-1, -1],
              [12, -2],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [11, 1792],
              [11, 1792],
              [12, 1984],
              [12, 2048],
              [12, 2112],
              [12, 2176],
              [12, 2240],
              [12, 2304],
              [11, 1856],
              [11, 1856],
              [11, 1920],
              [11, 1920],
              [12, 2368],
              [12, 2432],
              [12, 2496],
              [12, 2560],
            ],
            el = [
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [8, 29],
              [8, 29],
              [8, 30],
              [8, 30],
              [8, 45],
              [8, 45],
              [8, 46],
              [8, 46],
              [7, 22],
              [7, 22],
              [7, 22],
              [7, 22],
              [7, 23],
              [7, 23],
              [7, 23],
              [7, 23],
              [8, 47],
              [8, 47],
              [8, 48],
              [8, 48],
              [6, 13],
              [6, 13],
              [6, 13],
              [6, 13],
              [6, 13],
              [6, 13],
              [6, 13],
              [6, 13],
              [7, 20],
              [7, 20],
              [7, 20],
              [7, 20],
              [8, 33],
              [8, 33],
              [8, 34],
              [8, 34],
              [8, 35],
              [8, 35],
              [8, 36],
              [8, 36],
              [8, 37],
              [8, 37],
              [8, 38],
              [8, 38],
              [7, 19],
              [7, 19],
              [7, 19],
              [7, 19],
              [8, 31],
              [8, 31],
              [8, 32],
              [8, 32],
              [6, 1],
              [6, 1],
              [6, 1],
              [6, 1],
              [6, 1],
              [6, 1],
              [6, 1],
              [6, 1],
              [6, 12],
              [6, 12],
              [6, 12],
              [6, 12],
              [6, 12],
              [6, 12],
              [6, 12],
              [6, 12],
              [8, 53],
              [8, 53],
              [8, 54],
              [8, 54],
              [7, 26],
              [7, 26],
              [7, 26],
              [7, 26],
              [8, 39],
              [8, 39],
              [8, 40],
              [8, 40],
              [8, 41],
              [8, 41],
              [8, 42],
              [8, 42],
              [8, 43],
              [8, 43],
              [8, 44],
              [8, 44],
              [7, 21],
              [7, 21],
              [7, 21],
              [7, 21],
              [7, 28],
              [7, 28],
              [7, 28],
              [7, 28],
              [8, 61],
              [8, 61],
              [8, 62],
              [8, 62],
              [8, 63],
              [8, 63],
              [8, 0],
              [8, 0],
              [8, 320],
              [8, 320],
              [8, 384],
              [8, 384],
              [5, 10],
              [5, 10],
              [5, 10],
              [5, 10],
              [5, 10],
              [5, 10],
              [5, 10],
              [5, 10],
              [5, 10],
              [5, 10],
              [5, 10],
              [5, 10],
              [5, 10],
              [5, 10],
              [5, 10],
              [5, 10],
              [5, 11],
              [5, 11],
              [5, 11],
              [5, 11],
              [5, 11],
              [5, 11],
              [5, 11],
              [5, 11],
              [5, 11],
              [5, 11],
              [5, 11],
              [5, 11],
              [5, 11],
              [5, 11],
              [5, 11],
              [5, 11],
              [7, 27],
              [7, 27],
              [7, 27],
              [7, 27],
              [8, 59],
              [8, 59],
              [8, 60],
              [8, 60],
              [9, 1472],
              [9, 1536],
              [9, 1600],
              [9, 1728],
              [7, 18],
              [7, 18],
              [7, 18],
              [7, 18],
              [7, 24],
              [7, 24],
              [7, 24],
              [7, 24],
              [8, 49],
              [8, 49],
              [8, 50],
              [8, 50],
              [8, 51],
              [8, 51],
              [8, 52],
              [8, 52],
              [7, 25],
              [7, 25],
              [7, 25],
              [7, 25],
              [8, 55],
              [8, 55],
              [8, 56],
              [8, 56],
              [8, 57],
              [8, 57],
              [8, 58],
              [8, 58],
              [6, 192],
              [6, 192],
              [6, 192],
              [6, 192],
              [6, 192],
              [6, 192],
              [6, 192],
              [6, 192],
              [6, 1664],
              [6, 1664],
              [6, 1664],
              [6, 1664],
              [6, 1664],
              [6, 1664],
              [6, 1664],
              [6, 1664],
              [8, 448],
              [8, 448],
              [8, 512],
              [8, 512],
              [9, 704],
              [9, 768],
              [8, 640],
              [8, 640],
              [8, 576],
              [8, 576],
              [9, 832],
              [9, 896],
              [9, 960],
              [9, 1024],
              [9, 1088],
              [9, 1152],
              [9, 1216],
              [9, 1280],
              [9, 1344],
              [9, 1408],
              [7, 256],
              [7, 256],
              [7, 256],
              [7, 256],
              [4, 2],
              [4, 2],
              [4, 2],
              [4, 2],
              [4, 2],
              [4, 2],
              [4, 2],
              [4, 2],
              [4, 2],
              [4, 2],
              [4, 2],
              [4, 2],
              [4, 2],
              [4, 2],
              [4, 2],
              [4, 2],
              [4, 2],
              [4, 2],
              [4, 2],
              [4, 2],
              [4, 2],
              [4, 2],
              [4, 2],
              [4, 2],
              [4, 2],
              [4, 2],
              [4, 2],
              [4, 2],
              [4, 2],
              [4, 2],
              [4, 2],
              [4, 2],
              [4, 3],
              [4, 3],
              [4, 3],
              [4, 3],
              [4, 3],
              [4, 3],
              [4, 3],
              [4, 3],
              [4, 3],
              [4, 3],
              [4, 3],
              [4, 3],
              [4, 3],
              [4, 3],
              [4, 3],
              [4, 3],
              [4, 3],
              [4, 3],
              [4, 3],
              [4, 3],
              [4, 3],
              [4, 3],
              [4, 3],
              [4, 3],
              [4, 3],
              [4, 3],
              [4, 3],
              [4, 3],
              [4, 3],
              [4, 3],
              [4, 3],
              [4, 3],
              [5, 128],
              [5, 128],
              [5, 128],
              [5, 128],
              [5, 128],
              [5, 128],
              [5, 128],
              [5, 128],
              [5, 128],
              [5, 128],
              [5, 128],
              [5, 128],
              [5, 128],
              [5, 128],
              [5, 128],
              [5, 128],
              [5, 8],
              [5, 8],
              [5, 8],
              [5, 8],
              [5, 8],
              [5, 8],
              [5, 8],
              [5, 8],
              [5, 8],
              [5, 8],
              [5, 8],
              [5, 8],
              [5, 8],
              [5, 8],
              [5, 8],
              [5, 8],
              [5, 9],
              [5, 9],
              [5, 9],
              [5, 9],
              [5, 9],
              [5, 9],
              [5, 9],
              [5, 9],
              [5, 9],
              [5, 9],
              [5, 9],
              [5, 9],
              [5, 9],
              [5, 9],
              [5, 9],
              [5, 9],
              [6, 16],
              [6, 16],
              [6, 16],
              [6, 16],
              [6, 16],
              [6, 16],
              [6, 16],
              [6, 16],
              [6, 17],
              [6, 17],
              [6, 17],
              [6, 17],
              [6, 17],
              [6, 17],
              [6, 17],
              [6, 17],
              [4, 4],
              [4, 4],
              [4, 4],
              [4, 4],
              [4, 4],
              [4, 4],
              [4, 4],
              [4, 4],
              [4, 4],
              [4, 4],
              [4, 4],
              [4, 4],
              [4, 4],
              [4, 4],
              [4, 4],
              [4, 4],
              [4, 4],
              [4, 4],
              [4, 4],
              [4, 4],
              [4, 4],
              [4, 4],
              [4, 4],
              [4, 4],
              [4, 4],
              [4, 4],
              [4, 4],
              [4, 4],
              [4, 4],
              [4, 4],
              [4, 4],
              [4, 4],
              [4, 5],
              [4, 5],
              [4, 5],
              [4, 5],
              [4, 5],
              [4, 5],
              [4, 5],
              [4, 5],
              [4, 5],
              [4, 5],
              [4, 5],
              [4, 5],
              [4, 5],
              [4, 5],
              [4, 5],
              [4, 5],
              [4, 5],
              [4, 5],
              [4, 5],
              [4, 5],
              [4, 5],
              [4, 5],
              [4, 5],
              [4, 5],
              [4, 5],
              [4, 5],
              [4, 5],
              [4, 5],
              [4, 5],
              [4, 5],
              [4, 5],
              [4, 5],
              [6, 14],
              [6, 14],
              [6, 14],
              [6, 14],
              [6, 14],
              [6, 14],
              [6, 14],
              [6, 14],
              [6, 15],
              [6, 15],
              [6, 15],
              [6, 15],
              [6, 15],
              [6, 15],
              [6, 15],
              [6, 15],
              [5, 64],
              [5, 64],
              [5, 64],
              [5, 64],
              [5, 64],
              [5, 64],
              [5, 64],
              [5, 64],
              [5, 64],
              [5, 64],
              [5, 64],
              [5, 64],
              [5, 64],
              [5, 64],
              [5, 64],
              [5, 64],
              [4, 6],
              [4, 6],
              [4, 6],
              [4, 6],
              [4, 6],
              [4, 6],
              [4, 6],
              [4, 6],
              [4, 6],
              [4, 6],
              [4, 6],
              [4, 6],
              [4, 6],
              [4, 6],
              [4, 6],
              [4, 6],
              [4, 6],
              [4, 6],
              [4, 6],
              [4, 6],
              [4, 6],
              [4, 6],
              [4, 6],
              [4, 6],
              [4, 6],
              [4, 6],
              [4, 6],
              [4, 6],
              [4, 6],
              [4, 6],
              [4, 6],
              [4, 6],
              [4, 7],
              [4, 7],
              [4, 7],
              [4, 7],
              [4, 7],
              [4, 7],
              [4, 7],
              [4, 7],
              [4, 7],
              [4, 7],
              [4, 7],
              [4, 7],
              [4, 7],
              [4, 7],
              [4, 7],
              [4, 7],
              [4, 7],
              [4, 7],
              [4, 7],
              [4, 7],
              [4, 7],
              [4, 7],
              [4, 7],
              [4, 7],
              [4, 7],
              [4, 7],
              [4, 7],
              [4, 7],
              [4, 7],
              [4, 7],
              [4, 7],
              [4, 7],
            ],
            eC = [
              [-1, -1],
              [-1, -1],
              [12, -2],
              [12, -2],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [11, 1792],
              [11, 1792],
              [11, 1792],
              [11, 1792],
              [12, 1984],
              [12, 1984],
              [12, 2048],
              [12, 2048],
              [12, 2112],
              [12, 2112],
              [12, 2176],
              [12, 2176],
              [12, 2240],
              [12, 2240],
              [12, 2304],
              [12, 2304],
              [11, 1856],
              [11, 1856],
              [11, 1856],
              [11, 1856],
              [11, 1920],
              [11, 1920],
              [11, 1920],
              [11, 1920],
              [12, 2368],
              [12, 2368],
              [12, 2432],
              [12, 2432],
              [12, 2496],
              [12, 2496],
              [12, 2560],
              [12, 2560],
              [10, 18],
              [10, 18],
              [10, 18],
              [10, 18],
              [10, 18],
              [10, 18],
              [10, 18],
              [10, 18],
              [12, 52],
              [12, 52],
              [13, 640],
              [13, 704],
              [13, 768],
              [13, 832],
              [12, 55],
              [12, 55],
              [12, 56],
              [12, 56],
              [13, 1280],
              [13, 1344],
              [13, 1408],
              [13, 1472],
              [12, 59],
              [12, 59],
              [12, 60],
              [12, 60],
              [13, 1536],
              [13, 1600],
              [11, 24],
              [11, 24],
              [11, 24],
              [11, 24],
              [11, 25],
              [11, 25],
              [11, 25],
              [11, 25],
              [13, 1664],
              [13, 1728],
              [12, 320],
              [12, 320],
              [12, 384],
              [12, 384],
              [12, 448],
              [12, 448],
              [13, 512],
              [13, 576],
              [12, 53],
              [12, 53],
              [12, 54],
              [12, 54],
              [13, 896],
              [13, 960],
              [13, 1024],
              [13, 1088],
              [13, 1152],
              [13, 1216],
              [10, 64],
              [10, 64],
              [10, 64],
              [10, 64],
              [10, 64],
              [10, 64],
              [10, 64],
              [10, 64],
            ],
            eB = [
              [8, 13],
              [8, 13],
              [8, 13],
              [8, 13],
              [8, 13],
              [8, 13],
              [8, 13],
              [8, 13],
              [8, 13],
              [8, 13],
              [8, 13],
              [8, 13],
              [8, 13],
              [8, 13],
              [8, 13],
              [8, 13],
              [11, 23],
              [11, 23],
              [12, 50],
              [12, 51],
              [12, 44],
              [12, 45],
              [12, 46],
              [12, 47],
              [12, 57],
              [12, 58],
              [12, 61],
              [12, 256],
              [10, 16],
              [10, 16],
              [10, 16],
              [10, 16],
              [10, 17],
              [10, 17],
              [10, 17],
              [10, 17],
              [12, 48],
              [12, 49],
              [12, 62],
              [12, 63],
              [12, 30],
              [12, 31],
              [12, 32],
              [12, 33],
              [12, 40],
              [12, 41],
              [11, 22],
              [11, 22],
              [8, 14],
              [8, 14],
              [8, 14],
              [8, 14],
              [8, 14],
              [8, 14],
              [8, 14],
              [8, 14],
              [8, 14],
              [8, 14],
              [8, 14],
              [8, 14],
              [8, 14],
              [8, 14],
              [8, 14],
              [8, 14],
              [7, 10],
              [7, 10],
              [7, 10],
              [7, 10],
              [7, 10],
              [7, 10],
              [7, 10],
              [7, 10],
              [7, 10],
              [7, 10],
              [7, 10],
              [7, 10],
              [7, 10],
              [7, 10],
              [7, 10],
              [7, 10],
              [7, 10],
              [7, 10],
              [7, 10],
              [7, 10],
              [7, 10],
              [7, 10],
              [7, 10],
              [7, 10],
              [7, 10],
              [7, 10],
              [7, 10],
              [7, 10],
              [7, 10],
              [7, 10],
              [7, 10],
              [7, 10],
              [7, 11],
              [7, 11],
              [7, 11],
              [7, 11],
              [7, 11],
              [7, 11],
              [7, 11],
              [7, 11],
              [7, 11],
              [7, 11],
              [7, 11],
              [7, 11],
              [7, 11],
              [7, 11],
              [7, 11],
              [7, 11],
              [7, 11],
              [7, 11],
              [7, 11],
              [7, 11],
              [7, 11],
              [7, 11],
              [7, 11],
              [7, 11],
              [7, 11],
              [7, 11],
              [7, 11],
              [7, 11],
              [7, 11],
              [7, 11],
              [7, 11],
              [7, 11],
              [9, 15],
              [9, 15],
              [9, 15],
              [9, 15],
              [9, 15],
              [9, 15],
              [9, 15],
              [9, 15],
              [12, 128],
              [12, 192],
              [12, 26],
              [12, 27],
              [12, 28],
              [12, 29],
              [11, 19],
              [11, 19],
              [11, 20],
              [11, 20],
              [12, 34],
              [12, 35],
              [12, 36],
              [12, 37],
              [12, 38],
              [12, 39],
              [11, 21],
              [11, 21],
              [12, 42],
              [12, 43],
              [10, 0],
              [10, 0],
              [10, 0],
              [10, 0],
              [7, 12],
              [7, 12],
              [7, 12],
              [7, 12],
              [7, 12],
              [7, 12],
              [7, 12],
              [7, 12],
              [7, 12],
              [7, 12],
              [7, 12],
              [7, 12],
              [7, 12],
              [7, 12],
              [7, 12],
              [7, 12],
              [7, 12],
              [7, 12],
              [7, 12],
              [7, 12],
              [7, 12],
              [7, 12],
              [7, 12],
              [7, 12],
              [7, 12],
              [7, 12],
              [7, 12],
              [7, 12],
              [7, 12],
              [7, 12],
              [7, 12],
              [7, 12],
            ],
            eh = [
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [-1, -1],
              [6, 9],
              [6, 8],
              [5, 7],
              [5, 7],
              [4, 6],
              [4, 6],
              [4, 6],
              [4, 6],
              [4, 5],
              [4, 5],
              [4, 5],
              [4, 5],
              [3, 1],
              [3, 1],
              [3, 1],
              [3, 1],
              [3, 1],
              [3, 1],
              [3, 1],
              [3, 1],
              [3, 4],
              [3, 4],
              [3, 4],
              [3, 4],
              [3, 4],
              [3, 4],
              [3, 4],
              [3, 4],
              [2, 3],
              [2, 3],
              [2, 3],
              [2, 3],
              [2, 3],
              [2, 3],
              [2, 3],
              [2, 3],
              [2, 3],
              [2, 3],
              [2, 3],
              [2, 3],
              [2, 3],
              [2, 3],
              [2, 3],
              [2, 3],
              [2, 2],
              [2, 2],
              [2, 2],
              [2, 2],
              [2, 2],
              [2, 2],
              [2, 2],
              [2, 2],
              [2, 2],
              [2, 2],
              [2, 2],
              [2, 2],
              [2, 2],
              [2, 2],
              [2, 2],
              [2, 2],
            ];
          class eQ {
            constructor(A, t = {}) {
              let i;
              if (!A || 'function' != typeof A.next)
                throw Error('CCITTFaxDecoder - invalid "source" parameter.');
              for (
                this.source = A,
                  this.eof = !1,
                  this.encoding = t.K || 0,
                  this.eoline = t.EndOfLine || !1,
                  this.byteAlign = t.EncodedByteAlign || !1,
                  this.columns = t.Columns || 1728,
                  this.rows = t.Rows || 0,
                  this.eoblock = t.EndOfBlock ?? !0,
                  this.black = t.BlackIs1 || !1,
                  this.codingLine = new Uint32Array(this.columns + 1),
                  this.refLine = new Uint32Array(this.columns + 2),
                  this.codingLine[0] = this.columns,
                  this.codingPos = 0,
                  this.row = 0,
                  this.nextLine2D = this.encoding < 0,
                  this.inputBits = 0,
                  this.inputBuf = 0,
                  this.outputBits = 0,
                  this.rowsDone = !1;
                0 === (i = this._lookBits(12));

              )
                this._eatBits(1);
              1 === i && this._eatBits(12),
                this.encoding > 0 &&
                  ((this.nextLine2D = !this._lookBits(1)), this._eatBits(1));
            }
            readNextChar() {
              let A, t, i, a, s;
              if (this.eof) return -1;
              let g = this.refLine,
                r = this.codingLine,
                n = this.columns;
              if (0 === this.outputBits) {
                let i, s, o;
                if ((this.rowsDone && (this.eof = !0), this.eof)) return -1;
                if (((this.err = !1), this.nextLine2D)) {
                  for (a = 0; r[a] < n; ++a) g[a] = r[a];
                  for (
                    g[a++] = n,
                      g[a] = n,
                      r[0] = 0,
                      this.codingPos = 0,
                      A = 0,
                      t = 0;
                    r[this.codingPos] < n;

                  )
                    switch ((i = this._getTwoDimCode())) {
                      case 0:
                        this._addPixels(g[A + 1], t), g[A + 1] < n && (A += 2);
                        break;
                      case 1:
                        if (((i = s = 0), t)) {
                          do i += o = this._getBlackCode();
                          while (o >= 64);
                          do s += o = this._getWhiteCode();
                          while (o >= 64);
                        } else {
                          do i += o = this._getWhiteCode();
                          while (o >= 64);
                          do s += o = this._getBlackCode();
                          while (o >= 64);
                        }
                        for (
                          this._addPixels(r[this.codingPos] + i, t),
                            r[this.codingPos] < n &&
                              this._addPixels(r[this.codingPos] + s, 1 ^ t);
                          g[A] <= r[this.codingPos] && g[A] < n;

                        )
                          A += 2;
                        break;
                      case 7:
                        if (
                          (this._addPixels(g[A] + 3, t),
                          (t ^= 1),
                          r[this.codingPos] < n)
                        )
                          for (++A; g[A] <= r[this.codingPos] && g[A] < n; )
                            A += 2;
                        break;
                      case 5:
                        if (
                          (this._addPixels(g[A] + 2, t),
                          (t ^= 1),
                          r[this.codingPos] < n)
                        )
                          for (++A; g[A] <= r[this.codingPos] && g[A] < n; )
                            A += 2;
                        break;
                      case 3:
                        if (
                          (this._addPixels(g[A] + 1, t),
                          (t ^= 1),
                          r[this.codingPos] < n)
                        )
                          for (++A; g[A] <= r[this.codingPos] && g[A] < n; )
                            A += 2;
                        break;
                      case 2:
                        if (
                          (this._addPixels(g[A], t),
                          (t ^= 1),
                          r[this.codingPos] < n)
                        )
                          for (++A; g[A] <= r[this.codingPos] && g[A] < n; )
                            A += 2;
                        break;
                      case 8:
                        if (
                          (this._addPixelsNeg(g[A] - 3, t),
                          (t ^= 1),
                          r[this.codingPos] < n)
                        )
                          for (
                            A > 0 ? --A : ++A;
                            g[A] <= r[this.codingPos] && g[A] < n;

                          )
                            A += 2;
                        break;
                      case 6:
                        if (
                          (this._addPixelsNeg(g[A] - 2, t),
                          (t ^= 1),
                          r[this.codingPos] < n)
                        )
                          for (
                            A > 0 ? --A : ++A;
                            g[A] <= r[this.codingPos] && g[A] < n;

                          )
                            A += 2;
                        break;
                      case 4:
                        if (
                          (this._addPixelsNeg(g[A] - 1, t),
                          (t ^= 1),
                          r[this.codingPos] < n)
                        )
                          for (
                            A > 0 ? --A : ++A;
                            g[A] <= r[this.codingPos] && g[A] < n;

                          )
                            A += 2;
                        break;
                      case -1:
                        this._addPixels(n, 0), (this.eof = !0);
                        break;
                      default:
                        p('bad 2d code'),
                          this._addPixels(n, 0),
                          (this.err = !0);
                    }
                } else
                  for (
                    r[0] = 0, this.codingPos = 0, t = 0;
                    r[this.codingPos] < n;

                  ) {
                    if (((i = 0), t))
                      do i += o = this._getBlackCode();
                      while (o >= 64);
                    else
                      do i += o = this._getWhiteCode();
                      while (o >= 64);
                    this._addPixels(r[this.codingPos] + i, t), (t ^= 1);
                  }
                let I = !1;
                if (
                  (this.byteAlign && (this.inputBits &= -8),
                  this.eoblock || this.row !== this.rows - 1)
                ) {
                  if (((i = this._lookBits(12)), this.eoline))
                    for (; -1 !== i && 1 !== i; )
                      this._eatBits(1), (i = this._lookBits(12));
                  else
                    for (; 0 === i; )
                      this._eatBits(1), (i = this._lookBits(12));
                  1 === i
                    ? (this._eatBits(12), (I = !0))
                    : -1 === i && (this.eof = !0);
                } else this.rowsDone = !0;
                if (
                  (this.eof ||
                    !(this.encoding > 0) ||
                    this.rowsDone ||
                    ((this.nextLine2D = !this._lookBits(1)), this._eatBits(1)),
                  this.eoblock && I && this.byteAlign)
                ) {
                  if (1 === (i = this._lookBits(12))) {
                    if (
                      (this._eatBits(12),
                      this.encoding > 0 &&
                        (this._lookBits(1), this._eatBits(1)),
                      this.encoding >= 0)
                    )
                      for (a = 0; a < 4; ++a)
                        1 !== (i = this._lookBits(12)) &&
                          p('bad rtc code: ' + i),
                          this._eatBits(12),
                          this.encoding > 0 &&
                            (this._lookBits(1), this._eatBits(1));
                    this.eof = !0;
                  }
                } else if (this.err && this.eoline) {
                  for (;;) {
                    if (-1 === (i = this._lookBits(13)))
                      return (this.eof = !0), -1;
                    if (i >> 1 == 1) break;
                    this._eatBits(1);
                  }
                  this._eatBits(12),
                    this.encoding > 0 &&
                      (this._eatBits(1), (this.nextLine2D = !(1 & i)));
                }
                (this.outputBits =
                  r[0] > 0 ? r[(this.codingPos = 0)] : r[(this.codingPos = 1)]),
                  this.row++;
              }
              if (this.outputBits >= 8)
                (s = 1 & this.codingPos ? 0 : 255),
                  (this.outputBits -= 8),
                  0 === this.outputBits &&
                    r[this.codingPos] < n &&
                    (this.codingPos++,
                    (this.outputBits =
                      r[this.codingPos] - r[this.codingPos - 1]));
              else {
                (i = 8), (s = 0);
                do {
                  if ('number' != typeof this.outputBits)
                    throw new x(
                      'Invalid /CCITTFaxDecode data, "outputBits" must be a number.'
                    );
                  this.outputBits > i
                    ? ((s <<= i),
                      1 & this.codingPos || (s |= 255 >> (8 - i)),
                      (this.outputBits -= i),
                      (i = 0))
                    : ((s <<= this.outputBits),
                      1 & this.codingPos || (s |= 255 >> (8 - this.outputBits)),
                      (i -= this.outputBits),
                      (this.outputBits = 0),
                      r[this.codingPos] < n
                        ? (this.codingPos++,
                          (this.outputBits =
                            r[this.codingPos] - r[this.codingPos - 1]))
                        : i > 0 && ((s <<= i), (i = 0)));
                } while (i);
              }
              return this.black && (s ^= 255), s;
            }
            _addPixels(A, t) {
              let i = this.codingLine,
                a = this.codingPos;
              A > i[a] &&
                (A > this.columns &&
                  (p('row is wrong length'),
                  (this.err = !0),
                  (A = this.columns)),
                (1 & a) ^ t && ++a,
                (i[a] = A)),
                (this.codingPos = a);
            }
            _addPixelsNeg(A, t) {
              let i = this.codingLine,
                a = this.codingPos;
              if (A > i[a])
                A > this.columns &&
                  (p('row is wrong length'),
                  (this.err = !0),
                  (A = this.columns)),
                  (1 & a) ^ t && ++a,
                  (i[a] = A);
              else if (A < i[a]) {
                for (
                  A < 0 && (p('invalid code'), (this.err = !0), (A = 0));
                  a > 0 && A < i[a - 1];

                )
                  --a;
                i[a] = A;
              }
              this.codingPos = a;
            }
            _findTableCode(A, t, i, a) {
              let s = a || 0;
              for (let a = A; a <= t; ++a) {
                let A = this._lookBits(a);
                if (-1 === A) return [!0, 1, !1];
                if ((a < t && (A <<= t - a), !s || A >= s)) {
                  let t = i[A - s];
                  if (t[0] === a) return this._eatBits(a), [!0, t[1], !0];
                }
              }
              return [!1, 0, !1];
            }
            _getTwoDimCode() {
              let A;
              if (this.eoblock) {
                if (((A = eo[this._lookBits(7)]), A?.[0] > 0))
                  return this._eatBits(A[0]), A[1];
              } else {
                let A = this._findTableCode(1, 7, eo);
                if (A[0] && A[2]) return A[1];
              }
              return p('Bad two dim code'), -1;
            }
            _getWhiteCode() {
              let A,
                t = 0;
              if (this.eoblock) {
                if (-1 === (t = this._lookBits(12))) return 1;
                if ((A = t >> 5 == 0 ? eI[t] : el[t >> 3])[0] > 0)
                  return this._eatBits(A[0]), A[1];
              } else {
                let A = this._findTableCode(1, 9, el);
                if (A[0] || (A = this._findTableCode(11, 12, eI))[0])
                  return A[1];
              }
              return p('bad white code'), this._eatBits(1), 1;
            }
            _getBlackCode() {
              let A, t;
              if (this.eoblock) {
                if (-1 === (A = this._lookBits(13))) return 1;
                if (
                  (t =
                    A >> 7 == 0
                      ? eC[A]
                      : A >> 9 == 0 && A >> 7 != 0
                        ? eB[(A >> 1) - 64]
                        : eh[A >> 7])[0] > 0
                )
                  return this._eatBits(t[0]), t[1];
              } else {
                let A = this._findTableCode(2, 6, eh);
                if (
                  A[0] ||
                  (A = this._findTableCode(7, 12, eB, 64))[0] ||
                  (A = this._findTableCode(10, 13, eC))[0]
                )
                  return A[1];
              }
              return p('bad black code'), this._eatBits(1), 1;
            }
            _lookBits(A) {
              let t;
              for (; this.inputBits < A; ) {
                if (-1 === (t = this.source.next()))
                  return 0 === this.inputBits
                    ? -1
                    : (this.inputBuf << (A - this.inputBits)) &
                        (65535 >> (16 - A));
                (this.inputBuf = (this.inputBuf << 8) | t),
                  (this.inputBits += 8);
              }
              return (
                (this.inputBuf >> (this.inputBits - A)) & (65535 >> (16 - A))
              );
            }
            _eatBits(A) {
              (this.inputBits -= A) < 0 && (this.inputBits = 0);
            }
          }
          class ec extends es {
            constructor(A, t, i) {
              super(t),
                (this.str = A),
                (this.dict = A.dict),
                i instanceof Aa || (i = Aa.empty),
                (this.ccittFaxDecoder = new eQ(
                  { next: () => A.getByte() },
                  {
                    K: i.get('K'),
                    EndOfLine: i.get('EndOfLine'),
                    EncodedByteAlign: i.get('EncodedByteAlign'),
                    Columns: i.get('Columns'),
                    Rows: i.get('Rows'),
                    EndOfBlock: i.get('EndOfBlock'),
                    BlackIs1: i.get('BlackIs1'),
                  }
                ));
            }
            readBlock() {
              for (; !this.eof; ) {
                let A = this.ccittFaxDecoder.readNextChar();
                if (-1 === A) {
                  this.eof = !0;
                  return;
                }
                this.ensureBuffer(this.bufferLength + 1),
                  (this.buffer[this.bufferLength++] = A);
              }
            }
          }
          let eE = new Int32Array([
              16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15,
            ]),
            eu = new Int32Array([
              3, 4, 5, 6, 7, 8, 9, 10, 65547, 65549, 65551, 65553, 131091,
              131095, 131099, 131103, 196643, 196651, 196659, 196667, 262211,
              262227, 262243, 262259, 327811, 327843, 327875, 327907, 258, 258,
              258,
            ]),
            ed = new Int32Array([
              1, 2, 3, 4, 65541, 65543, 131081, 131085, 196625, 196633, 262177,
              262193, 327745, 327777, 393345, 393409, 459009, 459137, 524801,
              525057, 590849, 591361, 657409, 658433, 724993, 727041, 794625,
              798721, 868353, 876545,
            ]),
            ef = [
              new Int32Array([
                459008, 524368, 524304, 524568, 459024, 524400, 524336, 590016,
                459016, 524384, 524320, 589984, 524288, 524416, 524352, 590048,
                459012, 524376, 524312, 589968, 459028, 524408, 524344, 590032,
                459020, 524392, 524328, 59e4, 524296, 524424, 524360, 590064,
                459010, 524372, 524308, 524572, 459026, 524404, 524340, 590024,
                459018, 524388, 524324, 589992, 524292, 524420, 524356, 590056,
                459014, 524380, 524316, 589976, 459030, 524412, 524348, 590040,
                459022, 524396, 524332, 590008, 524300, 524428, 524364, 590072,
                459009, 524370, 524306, 524570, 459025, 524402, 524338, 590020,
                459017, 524386, 524322, 589988, 524290, 524418, 524354, 590052,
                459013, 524378, 524314, 589972, 459029, 524410, 524346, 590036,
                459021, 524394, 524330, 590004, 524298, 524426, 524362, 590068,
                459011, 524374, 524310, 524574, 459027, 524406, 524342, 590028,
                459019, 524390, 524326, 589996, 524294, 524422, 524358, 590060,
                459015, 524382, 524318, 589980, 459031, 524414, 524350, 590044,
                459023, 524398, 524334, 590012, 524302, 524430, 524366, 590076,
                459008, 524369, 524305, 524569, 459024, 524401, 524337, 590018,
                459016, 524385, 524321, 589986, 524289, 524417, 524353, 590050,
                459012, 524377, 524313, 589970, 459028, 524409, 524345, 590034,
                459020, 524393, 524329, 590002, 524297, 524425, 524361, 590066,
                459010, 524373, 524309, 524573, 459026, 524405, 524341, 590026,
                459018, 524389, 524325, 589994, 524293, 524421, 524357, 590058,
                459014, 524381, 524317, 589978, 459030, 524413, 524349, 590042,
                459022, 524397, 524333, 590010, 524301, 524429, 524365, 590074,
                459009, 524371, 524307, 524571, 459025, 524403, 524339, 590022,
                459017, 524387, 524323, 589990, 524291, 524419, 524355, 590054,
                459013, 524379, 524315, 589974, 459029, 524411, 524347, 590038,
                459021, 524395, 524331, 590006, 524299, 524427, 524363, 590070,
                459011, 524375, 524311, 524575, 459027, 524407, 524343, 590030,
                459019, 524391, 524327, 589998, 524295, 524423, 524359, 590062,
                459015, 524383, 524319, 589982, 459031, 524415, 524351, 590046,
                459023, 524399, 524335, 590014, 524303, 524431, 524367, 590078,
                459008, 524368, 524304, 524568, 459024, 524400, 524336, 590017,
                459016, 524384, 524320, 589985, 524288, 524416, 524352, 590049,
                459012, 524376, 524312, 589969, 459028, 524408, 524344, 590033,
                459020, 524392, 524328, 590001, 524296, 524424, 524360, 590065,
                459010, 524372, 524308, 524572, 459026, 524404, 524340, 590025,
                459018, 524388, 524324, 589993, 524292, 524420, 524356, 590057,
                459014, 524380, 524316, 589977, 459030, 524412, 524348, 590041,
                459022, 524396, 524332, 590009, 524300, 524428, 524364, 590073,
                459009, 524370, 524306, 524570, 459025, 524402, 524338, 590021,
                459017, 524386, 524322, 589989, 524290, 524418, 524354, 590053,
                459013, 524378, 524314, 589973, 459029, 524410, 524346, 590037,
                459021, 524394, 524330, 590005, 524298, 524426, 524362, 590069,
                459011, 524374, 524310, 524574, 459027, 524406, 524342, 590029,
                459019, 524390, 524326, 589997, 524294, 524422, 524358, 590061,
                459015, 524382, 524318, 589981, 459031, 524414, 524350, 590045,
                459023, 524398, 524334, 590013, 524302, 524430, 524366, 590077,
                459008, 524369, 524305, 524569, 459024, 524401, 524337, 590019,
                459016, 524385, 524321, 589987, 524289, 524417, 524353, 590051,
                459012, 524377, 524313, 589971, 459028, 524409, 524345, 590035,
                459020, 524393, 524329, 590003, 524297, 524425, 524361, 590067,
                459010, 524373, 524309, 524573, 459026, 524405, 524341, 590027,
                459018, 524389, 524325, 589995, 524293, 524421, 524357, 590059,
                459014, 524381, 524317, 589979, 459030, 524413, 524349, 590043,
                459022, 524397, 524333, 590011, 524301, 524429, 524365, 590075,
                459009, 524371, 524307, 524571, 459025, 524403, 524339, 590023,
                459017, 524387, 524323, 589991, 524291, 524419, 524355, 590055,
                459013, 524379, 524315, 589975, 459029, 524411, 524347, 590039,
                459021, 524395, 524331, 590007, 524299, 524427, 524363, 590071,
                459011, 524375, 524311, 524575, 459027, 524407, 524343, 590031,
                459019, 524391, 524327, 589999, 524295, 524423, 524359, 590063,
                459015, 524383, 524319, 589983, 459031, 524415, 524351, 590047,
                459023, 524399, 524335, 590015, 524303, 524431, 524367, 590079,
              ]),
              9,
            ],
            ep = [
              new Int32Array([
                327680, 327696, 327688, 327704, 327684, 327700, 327692, 327708,
                327682, 327698, 327690, 327706, 327686, 327702, 327694, 0,
                327681, 327697, 327689, 327705, 327685, 327701, 327693, 327709,
                327683, 327699, 327691, 327707, 327687, 327703, 327695, 0,
              ]),
              5,
            ];
          class em extends es {
            constructor(A, t) {
              super(t), (this.str = A), (this.dict = A.dict);
              let i = A.getByte(),
                a = A.getByte();
              if (-1 === i || -1 === a)
                throw new x(`Invalid header in flate stream: ${i}, ${a}`);
              if (8 != (15 & i))
                throw new x(
                  `Unknown compression method in flate stream: ${i}, ${a}`
                );
              if (((i << 8) + a) % 31 != 0)
                throw new x(`Bad FCHECK in flate stream: ${i}, ${a}`);
              if (32 & a)
                throw new x(`FDICT bit set in flate stream: ${i}, ${a}`);
              (this.codeSize = 0), (this.codeBuf = 0);
            }
            async getImageData(A, t) {
              let i = await this.asyncGetBytes();
              return i?.subarray(0, A) || this.getBytes(A);
            }
            async asyncGetBytes() {
              this.str.reset();
              let A = this.str.getBytes();
              try {
                let { readable: t, writable: i } = new DecompressionStream(
                    'deflate'
                  ),
                  a = i.getWriter();
                a.write(A), a.close();
                let s = [],
                  g = 0;
                for await (let A of t) s.push(A), (g += A.byteLength);
                let r = new Uint8Array(g),
                  n = 0;
                for (let A of s) r.set(A, n), (n += A.byteLength);
                return r;
              } catch {
                return (
                  (this.str = new AZ(A, 2, A.length, this.str.dict)),
                  this.reset(),
                  null
                );
              }
            }
            get isAsync() {
              return !0;
            }
            getBits(A) {
              let t = this.str,
                i,
                a = this.codeSize,
                s = this.codeBuf;
              for (; a < A; ) {
                if (-1 === (i = t.getByte()))
                  throw new x('Bad encoding in flate stream');
                (s |= i << a), (a += 8);
              }
              return (
                (i = s & ((1 << A) - 1)),
                (this.codeBuf = s >> A),
                (this.codeSize = a -= A),
                i
              );
            }
            getCode(A) {
              let t = this.str,
                i = A[0],
                a = A[1],
                s,
                g = this.codeSize,
                r = this.codeBuf;
              for (; g < a && -1 !== (s = t.getByte()); )
                (r |= s << g), (g += 8);
              let n = i[r & ((1 << a) - 1)],
                o = n >> 16;
              if (o < 1 || g < o) throw new x('Bad encoding in flate stream');
              return (
                (this.codeBuf = r >> o), (this.codeSize = g - o), 65535 & n
              );
            }
            generateHuffmanTable(A) {
              let t = A.length,
                i,
                a = 0;
              for (i = 0; i < t; ++i) A[i] > a && (a = A[i]);
              let s = 1 << a,
                g = new Int32Array(s);
              for (let r = 1, n = 0, o = 2; r <= a; ++r, n <<= 1, o <<= 1)
                for (let a = 0; a < t; ++a)
                  if (A[a] === r) {
                    let A = 0,
                      t = n;
                    for (i = 0; i < r; ++i) (A = (A << 1) | (1 & t)), (t >>= 1);
                    for (i = A; i < s; i += o) g[i] = (r << 16) | a;
                    ++n;
                  }
              return [g, a];
            }
            #m(A) {
              p(A), (this.eof = !0);
            }
            readBlock() {
              let A, t, i, a, s;
              let g = this.str;
              try {
                t = this.getBits(3);
              } catch (A) {
                this.#m(A.message);
                return;
              }
              if ((1 & t && (this.eof = !0), 0 == (t >>= 1))) {
                let t;
                if (-1 === (t = g.getByte())) {
                  this.#m('Bad block header in flate stream');
                  return;
                }
                let i = t;
                if (
                  -1 === (t = g.getByte()) ||
                  ((i |= t << 8), -1 === (t = g.getByte()))
                ) {
                  this.#m('Bad block header in flate stream');
                  return;
                }
                let a = t;
                if (-1 === (t = g.getByte())) {
                  this.#m('Bad block header in flate stream');
                  return;
                }
                if ((a |= t << 8) != (65535 & ~i) && (0 !== i || 0 !== a))
                  throw new x('Bad uncompressed block length in flate stream');
                (this.codeBuf = 0), (this.codeSize = 0);
                let s = this.bufferLength,
                  r = s + i;
                if (
                  ((A = this.ensureBuffer(r)), (this.bufferLength = r), 0 === i)
                )
                  -1 === g.peekByte() && (this.eof = !0);
                else {
                  let t = g.getBytes(i);
                  A.set(t, s), t.length < i && (this.eof = !0);
                }
                return;
              }
              if (1 === t) (a = ef), (s = ep);
              else {
                if (2 !== t) throw new x('Unknown block type in flate stream');
                {
                  let A, t, g, r;
                  let n = this.getBits(5) + 257,
                    o = this.getBits(5) + 1,
                    I = this.getBits(4) + 4,
                    l = new Uint8Array(eE.length);
                  for (A = 0; A < I; ++A) l[eE[A]] = this.getBits(3);
                  let C = this.generateHuffmanTable(l);
                  (i = 0), (A = 0);
                  let B = n + o,
                    h = new Uint8Array(B);
                  for (; A < B; ) {
                    let a = this.getCode(C);
                    if (16 === a) (t = 2), (g = 3), (r = i);
                    else if (17 === a) (t = 3), (g = 3), (r = i = 0);
                    else {
                      if (18 !== a) {
                        h[A++] = i = a;
                        continue;
                      }
                      (t = 7), (g = 11), (r = i = 0);
                    }
                    let s = this.getBits(t) + g;
                    for (; s-- > 0; ) h[A++] = r;
                  }
                  (a = this.generateHuffmanTable(h.subarray(0, n))),
                    (s = this.generateHuffmanTable(h.subarray(n, B)));
                }
              }
              let r = (A = this.buffer) ? A.length : 0,
                n = this.bufferLength;
              for (;;) {
                let t = this.getCode(a);
                if (t < 256) {
                  n + 1 >= r && (r = (A = this.ensureBuffer(n + 1)).length),
                    (A[n++] = t);
                  continue;
                }
                if (256 === t) {
                  this.bufferLength = n;
                  return;
                }
                t -= 257;
                let g = (t = eu[t]) >> 16;
                g > 0 && (g = this.getBits(g)),
                  (i = (65535 & t) + g),
                  (g = (t = ed[(t = this.getCode(s))]) >> 16) > 0 &&
                    (g = this.getBits(g));
                let o = (65535 & t) + g;
                n + i >= r && (r = (A = this.ensureBuffer(n + i)).length);
                for (let t = 0; t < i; ++t, ++n) A[n] = A[n - o];
              }
            }
          }
          let ey = [
            { qe: 22017, nmps: 1, nlps: 1, switchFlag: 1 },
            { qe: 13313, nmps: 2, nlps: 6, switchFlag: 0 },
            { qe: 6145, nmps: 3, nlps: 9, switchFlag: 0 },
            { qe: 2753, nmps: 4, nlps: 12, switchFlag: 0 },
            { qe: 1313, nmps: 5, nlps: 29, switchFlag: 0 },
            { qe: 545, nmps: 38, nlps: 33, switchFlag: 0 },
            { qe: 22017, nmps: 7, nlps: 6, switchFlag: 1 },
            { qe: 21505, nmps: 8, nlps: 14, switchFlag: 0 },
            { qe: 18433, nmps: 9, nlps: 14, switchFlag: 0 },
            { qe: 14337, nmps: 10, nlps: 14, switchFlag: 0 },
            { qe: 12289, nmps: 11, nlps: 17, switchFlag: 0 },
            { qe: 9217, nmps: 12, nlps: 18, switchFlag: 0 },
            { qe: 7169, nmps: 13, nlps: 20, switchFlag: 0 },
            { qe: 5633, nmps: 29, nlps: 21, switchFlag: 0 },
            { qe: 22017, nmps: 15, nlps: 14, switchFlag: 1 },
            { qe: 21505, nmps: 16, nlps: 14, switchFlag: 0 },
            { qe: 20737, nmps: 17, nlps: 15, switchFlag: 0 },
            { qe: 18433, nmps: 18, nlps: 16, switchFlag: 0 },
            { qe: 14337, nmps: 19, nlps: 17, switchFlag: 0 },
            { qe: 13313, nmps: 20, nlps: 18, switchFlag: 0 },
            { qe: 12289, nmps: 21, nlps: 19, switchFlag: 0 },
            { qe: 10241, nmps: 22, nlps: 19, switchFlag: 0 },
            { qe: 9217, nmps: 23, nlps: 20, switchFlag: 0 },
            { qe: 8705, nmps: 24, nlps: 21, switchFlag: 0 },
            { qe: 7169, nmps: 25, nlps: 22, switchFlag: 0 },
            { qe: 6145, nmps: 26, nlps: 23, switchFlag: 0 },
            { qe: 5633, nmps: 27, nlps: 24, switchFlag: 0 },
            { qe: 5121, nmps: 28, nlps: 25, switchFlag: 0 },
            { qe: 4609, nmps: 29, nlps: 26, switchFlag: 0 },
            { qe: 4353, nmps: 30, nlps: 27, switchFlag: 0 },
            { qe: 2753, nmps: 31, nlps: 28, switchFlag: 0 },
            { qe: 2497, nmps: 32, nlps: 29, switchFlag: 0 },
            { qe: 2209, nmps: 33, nlps: 30, switchFlag: 0 },
            { qe: 1313, nmps: 34, nlps: 31, switchFlag: 0 },
            { qe: 1089, nmps: 35, nlps: 32, switchFlag: 0 },
            { qe: 673, nmps: 36, nlps: 33, switchFlag: 0 },
            { qe: 545, nmps: 37, nlps: 34, switchFlag: 0 },
            { qe: 321, nmps: 38, nlps: 35, switchFlag: 0 },
            { qe: 273, nmps: 39, nlps: 36, switchFlag: 0 },
            { qe: 133, nmps: 40, nlps: 37, switchFlag: 0 },
            { qe: 73, nmps: 41, nlps: 38, switchFlag: 0 },
            { qe: 37, nmps: 42, nlps: 39, switchFlag: 0 },
            { qe: 21, nmps: 43, nlps: 40, switchFlag: 0 },
            { qe: 9, nmps: 44, nlps: 41, switchFlag: 0 },
            { qe: 5, nmps: 45, nlps: 42, switchFlag: 0 },
            { qe: 1, nmps: 45, nlps: 43, switchFlag: 0 },
            { qe: 22017, nmps: 46, nlps: 46, switchFlag: 0 },
          ];
          class ew {
            constructor(A, t, i) {
              (this.data = A),
                (this.bp = t),
                (this.dataEnd = i),
                (this.chigh = A[t]),
                (this.clow = 0),
                this.byteIn(),
                (this.chigh =
                  ((this.chigh << 7) & 65535) | ((this.clow >> 9) & 127)),
                (this.clow = (this.clow << 7) & 65535),
                (this.ct -= 7),
                (this.a = 32768);
            }
            byteIn() {
              let A = this.data,
                t = this.bp;
              255 === A[t]
                ? A[t + 1] > 143
                  ? ((this.clow += 65280), (this.ct = 8))
                  : (t++,
                    (this.clow += A[t] << 9),
                    (this.ct = 7),
                    (this.bp = t))
                : (t++,
                  (this.clow += t < this.dataEnd ? A[t] << 8 : 65280),
                  (this.ct = 8),
                  (this.bp = t)),
                this.clow > 65535 &&
                  ((this.chigh += this.clow >> 16), (this.clow &= 65535));
            }
            readBit(A, t) {
              let i = A[t] >> 1,
                a = 1 & A[t],
                s = ey[i],
                g = s.qe,
                r,
                n = this.a - g;
              if (this.chigh < g)
                n < g
                  ? ((n = g), (r = a), (i = s.nmps))
                  : ((n = g),
                    (r = 1 ^ a),
                    1 === s.switchFlag && (a = r),
                    (i = s.nlps));
              else {
                if (((this.chigh -= g), 0 != (32768 & n)))
                  return (this.a = n), a;
                n < g
                  ? ((r = 1 ^ a), 1 === s.switchFlag && (a = r), (i = s.nlps))
                  : ((r = a), (i = s.nmps));
              }
              do
                0 === this.ct && this.byteIn(),
                  (n <<= 1),
                  (this.chigh =
                    ((this.chigh << 1) & 65535) | ((this.clow >> 15) & 1)),
                  (this.clow = (this.clow << 1) & 65535),
                  this.ct--;
              while (0 == (32768 & n));
              return (this.a = n), (A[t] = (i << 1) | a), r;
            }
          }
          class eD extends k {
            constructor(A) {
              super(A, 'Jbig2Error');
            }
          }
          class eb {
            getContexts(A) {
              return A in this ? this[A] : (this[A] = new Int8Array(65536));
            }
          }
          class ek {
            constructor(A, t, i) {
              (this.data = A), (this.start = t), (this.end = i);
            }
            get decoder() {
              return b(
                this,
                'decoder',
                new ew(this.data, this.start, this.end)
              );
            }
            get contextCache() {
              return b(this, 'contextCache', new eb());
            }
          }
          let eF = 2147483648 - 1;
          function eS(A, t, i) {
            let a;
            let s = A.getContexts(t),
              g = 1;
            function r(A) {
              let t = 0;
              for (let a = 0; a < A; a++) {
                let A = i.readBit(s, g);
                (g = g < 256 ? (g << 1) | A : (511 & ((g << 1) | A)) | 256),
                  (t = (t << 1) | A);
              }
              return t >>> 0;
            }
            let n = r(1),
              o = r(1)
                ? r(1)
                  ? r(1)
                    ? r(1)
                      ? r(1)
                        ? r(32) + 4436
                        : r(12) + 340
                      : r(8) + 84
                    : r(6) + 20
                  : r(4) + 4
                : r(2);
            return (
              0 === n ? (a = o) : o > 0 && (a = -o),
              a >= -2147483648 && a <= eF ? a : null
            );
          }
          function eR(A, t, i) {
            let a = A.getContexts('IAID'),
              s = 1;
            for (let A = 0; A < i; A++) s = (s << 1) | t.readBit(a, s);
            return i < 31 ? s & ((1 << i) - 1) : 2147483647 & s;
          }
          let eG = [
              'SymbolDictionary',
              null,
              null,
              null,
              'IntermediateTextRegion',
              null,
              'ImmediateTextRegion',
              'ImmediateLosslessTextRegion',
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              'PatternDictionary',
              null,
              null,
              null,
              'IntermediateHalftoneRegion',
              null,
              'ImmediateHalftoneRegion',
              'ImmediateLosslessHalftoneRegion',
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              'IntermediateGenericRegion',
              null,
              'ImmediateGenericRegion',
              'ImmediateLosslessGenericRegion',
              'IntermediateGenericRefinementRegion',
              null,
              'ImmediateGenericRefinementRegion',
              'ImmediateLosslessGenericRefinementRegion',
              null,
              null,
              null,
              null,
              'PageInformation',
              'EndOfPage',
              'EndOfStripe',
              'EndOfFile',
              'Profiles',
              'Tables',
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              null,
              'Extension',
            ],
            eN = [
              [
                { x: -1, y: -2 },
                { x: 0, y: -2 },
                { x: 1, y: -2 },
                { x: -2, y: -1 },
                { x: -1, y: -1 },
                { x: 0, y: -1 },
                { x: 1, y: -1 },
                { x: 2, y: -1 },
                { x: -4, y: 0 },
                { x: -3, y: 0 },
                { x: -2, y: 0 },
                { x: -1, y: 0 },
              ],
              [
                { x: -1, y: -2 },
                { x: 0, y: -2 },
                { x: 1, y: -2 },
                { x: 2, y: -2 },
                { x: -2, y: -1 },
                { x: -1, y: -1 },
                { x: 0, y: -1 },
                { x: 1, y: -1 },
                { x: 2, y: -1 },
                { x: -3, y: 0 },
                { x: -2, y: 0 },
                { x: -1, y: 0 },
              ],
              [
                { x: -1, y: -2 },
                { x: 0, y: -2 },
                { x: 1, y: -2 },
                { x: -2, y: -1 },
                { x: -1, y: -1 },
                { x: 0, y: -1 },
                { x: 1, y: -1 },
                { x: -2, y: 0 },
                { x: -1, y: 0 },
              ],
              [
                { x: -3, y: -1 },
                { x: -2, y: -1 },
                { x: -1, y: -1 },
                { x: 0, y: -1 },
                { x: 1, y: -1 },
                { x: -4, y: 0 },
                { x: -3, y: 0 },
                { x: -2, y: 0 },
                { x: -1, y: 0 },
              ],
            ],
            ex = [
              {
                coding: [
                  { x: 0, y: -1 },
                  { x: 1, y: -1 },
                  { x: -1, y: 0 },
                ],
                reference: [
                  { x: 0, y: -1 },
                  { x: 1, y: -1 },
                  { x: -1, y: 0 },
                  { x: 0, y: 0 },
                  { x: 1, y: 0 },
                  { x: -1, y: 1 },
                  { x: 0, y: 1 },
                  { x: 1, y: 1 },
                ],
              },
              {
                coding: [
                  { x: -1, y: -1 },
                  { x: 0, y: -1 },
                  { x: 1, y: -1 },
                  { x: -1, y: 0 },
                ],
                reference: [
                  { x: 0, y: -1 },
                  { x: -1, y: 0 },
                  { x: 0, y: 0 },
                  { x: 1, y: 0 },
                  { x: 0, y: 1 },
                  { x: 1, y: 1 },
                ],
              },
            ],
            eU = [39717, 1941, 229, 405],
            eM = [32, 8];
          function eJ(A, t, i, a, s, g, r, n) {
            if (A) return eX(new eZ(n.data, n.start, n.end), t, i, !1);
            if (
              0 === a &&
              !g &&
              !s &&
              4 === r.length &&
              3 === r[0].x &&
              -1 === r[0].y &&
              -3 === r[1].x &&
              -1 === r[1].y &&
              2 === r[2].x &&
              -2 === r[2].y &&
              -2 === r[3].x &&
              -2 === r[3].y
            )
              return (function (A, t, i) {
                let a, s, g, r, n, o, I;
                let l = i.decoder,
                  C = i.contextCache.getContexts('GB'),
                  B = [];
                for (s = 0; s < t; s++)
                  for (
                    g = 0,
                      n = B[s] = new Uint8Array(A),
                      o = s < 1 ? n : B[s - 1],
                      a =
                        ((I = s < 2 ? n : B[s - 2])[0] << 13) |
                        (I[1] << 12) |
                        (I[2] << 11) |
                        (o[0] << 7) |
                        (o[1] << 6) |
                        (o[2] << 5) |
                        (o[3] << 4);
                    g < A;
                    g++
                  )
                    (n[g] = r = l.readBit(C, a)),
                      (a =
                        ((31735 & a) << 1) |
                        (g + 3 < A ? I[g + 3] << 11 : 0) |
                        (g + 4 < A ? o[g + 4] << 4 : 0) |
                        r);
                return B;
              })(t, i, n);
            let o = !!g,
              I = eN[a].concat(r);
            I.sort(function (A, t) {
              return A.y - t.y || A.x - t.x;
            });
            let l = I.length,
              C = new Int8Array(l),
              B = new Int8Array(l),
              h = [],
              Q,
              c,
              E = 0,
              u = 0,
              d = 0,
              f = 0;
            for (c = 0; c < l; c++)
              (C[c] = I[c].x),
                (B[c] = I[c].y),
                (u = Math.min(u, I[c].x)),
                (d = Math.max(d, I[c].x)),
                (f = Math.min(f, I[c].y)),
                c < l - 1 && I[c].y === I[c + 1].y && I[c].x === I[c + 1].x - 1
                  ? (E |= 1 << (l - 1 - c))
                  : h.push(c);
            let p = h.length,
              m = new Int8Array(p),
              y = new Int8Array(p),
              w = new Uint16Array(p);
            for (Q = 0; Q < p; Q++)
              (c = h[Q]),
                (m[Q] = I[c].x),
                (y[Q] = I[c].y),
                (w[Q] = 1 << (l - 1 - c));
            let D = -u,
              b = -f,
              k = t - d,
              F = eU[a],
              S = new Uint8Array(t),
              R = [],
              G = n.decoder,
              N = n.contextCache.getContexts('GB'),
              x,
              U,
              M,
              J,
              L,
              H = 0,
              Y = 0;
            for (let A = 0; A < i; A++) {
              if (s && (H ^= G.readBit(N, F))) {
                R.push(S);
                continue;
              }
              for (S = new Uint8Array(S), R.push(S), x = 0; x < t; x++) {
                if (o && g[A][x]) {
                  S[x] = 0;
                  continue;
                }
                if (x >= D && x < k && A >= b)
                  for (c = 0, Y = (Y << 1) & E; c < p; c++)
                    (U = A + y[c]),
                      (M = x + m[c]),
                      (J = R[U][M]) && (Y |= J = w[c]);
                else
                  for (c = 0, Y = 0, L = l - 1; c < l; c++, L--)
                    (M = x + C[c]) >= 0 &&
                      M < t &&
                      (U = A + B[c]) >= 0 &&
                      (J = R[U][M]) &&
                      (Y |= J << L);
                let i = G.readBit(N, Y);
                S[x] = i;
              }
            }
            return R;
          }
          function eL(A, t, i, a, s, g, r, n, o) {
            let I,
              l = ex[i].coding;
            0 === i && (l = l.concat([n[0]]));
            let C = l.length,
              B = new Int32Array(C),
              h = new Int32Array(C);
            for (I = 0; I < C; I++) (B[I] = l[I].x), (h[I] = l[I].y);
            let Q = ex[i].reference;
            0 === i && (Q = Q.concat([n[1]]));
            let c = Q.length,
              E = new Int32Array(c),
              u = new Int32Array(c);
            for (I = 0; I < c; I++) (E[I] = Q[I].x), (u[I] = Q[I].y);
            let d = a[0].length,
              f = a.length,
              p = eM[i],
              m = [],
              y = o.decoder,
              w = o.contextCache.getContexts('GR'),
              D = 0;
            for (let i = 0; i < t; i++) {
              if (r && (D ^= y.readBit(w, p)))
                throw new eD('prediction is not supported');
              let t = new Uint8Array(A);
              m.push(t);
              for (let r = 0; r < A; r++) {
                let n,
                  o,
                  l = 0;
                for (I = 0; I < C; I++)
                  (n = i + h[I]),
                    (o = r + B[I]),
                    n < 0 || o < 0 || o >= A
                      ? (l <<= 1)
                      : (l = (l << 1) | m[n][o]);
                for (I = 0; I < c; I++)
                  (n = i + u[I] - g),
                    (o = r + E[I] - s),
                    n < 0 || n >= f || o < 0 || o >= d
                      ? (l <<= 1)
                      : (l = (l << 1) | a[n][o]);
                let Q = y.readBit(w, l);
                t[r] = Q;
              }
            }
            return m;
          }
          function eH(A, t, i, a, s, g, r, n, o, I, l, C, B, h, Q, c, E, u, d) {
            let f, p;
            if (A && t)
              throw new eD('refinement with Huffman is not supported');
            let m = [];
            for (f = 0; f < a; f++) {
              if (((p = new Uint8Array(i)), s))
                for (let A = 0; A < i; A++) p[A] = s;
              m.push(p);
            }
            let y = E.decoder,
              w = E.contextCache,
              D = A ? -h.tableDeltaT.decode(d) : -eS(w, 'IADT', y),
              b = 0;
            for (f = 0; f < g; ) {
              D += A ? h.tableDeltaT.decode(d) : eS(w, 'IADT', y);
              let a = (b += A ? h.tableFirstS.decode(d) : eS(w, 'IAFS', y));
              for (;;) {
                let s,
                  g,
                  b,
                  k = 0;
                r > 1 && (k = A ? d.readBits(u) : eS(w, 'IAIT', y));
                let F = r * D + k,
                  S = A ? h.symbolIDTable.decode(d) : eR(w, y, o),
                  R = t && (A ? d.readBit() : eS(w, 'IARI', y)),
                  G = n[S],
                  N = G[0].length,
                  x = G.length;
                if (R) {
                  let A = eS(w, 'IARDW', y),
                    t = eS(w, 'IARDH', y);
                  (N += A),
                    (x += t),
                    (G = eL(
                      N,
                      x,
                      Q,
                      G,
                      (A >> 1) + eS(w, 'IARDX', y),
                      (t >> 1) + eS(w, 'IARDY', y),
                      !1,
                      c,
                      E
                    ));
                }
                let U = 0;
                I
                  ? 1 & C
                    ? (U = x - 1)
                    : (a += x - 1)
                  : C > 1
                    ? (a += N - 1)
                    : (U = N - 1);
                let M = F - (1 & C ? 0 : x - 1),
                  J = a - (2 & C ? N - 1 : 0);
                if (I)
                  for (s = 0; s < x; s++) {
                    if (!(p = m[J + s])) continue;
                    b = G[s];
                    let A = Math.min(i - M, N);
                    switch (B) {
                      case 0:
                        for (g = 0; g < A; g++) p[M + g] |= b[g];
                        break;
                      case 2:
                        for (g = 0; g < A; g++) p[M + g] ^= b[g];
                        break;
                      default:
                        throw new eD(`operator ${B} is not supported`);
                    }
                  }
                else
                  for (g = 0; g < x; g++)
                    if ((p = m[M + g]))
                      switch (((b = G[g]), B)) {
                        case 0:
                          for (s = 0; s < N; s++) p[J + s] |= b[s];
                          break;
                        case 2:
                          for (s = 0; s < N; s++) p[J + s] ^= b[s];
                          break;
                        default:
                          throw new eD(`operator ${B} is not supported`);
                      }
                f++;
                let L = A ? h.tableDeltaS.decode(d) : eS(w, 'IADS', y);
                if (null === L) break;
                a += U + L + l;
              }
            }
            return m;
          }
          function eY(A, t) {
            return {
              width: AD(A, t),
              height: AD(A, t + 4),
              x: AD(A, t + 8),
              y: AD(A, t + 12),
              combinationOperator: 7 & A[t + 16],
            };
          }
          class eK {
            onPageInformation(A) {
              this.currentPageInfo = A;
              let t = (A.width + 7) >> 3,
                i = new Uint8ClampedArray(t * A.height);
              A.defaultPixelValue && i.fill(255), (this.buffer = i);
            }
            drawBitmap(A, t) {
              let i = this.currentPageInfo,
                a = A.width,
                s = A.height,
                g = (i.width + 7) >> 3,
                r = i.combinationOperatorOverride
                  ? A.combinationOperator
                  : i.combinationOperator,
                n = this.buffer,
                o = 128 >> (7 & A.x),
                I,
                l,
                C,
                B,
                h = A.y * g + (A.x >> 3);
              switch (r) {
                case 0:
                  for (I = 0; I < s; I++) {
                    for (l = 0, C = o, B = h; l < a; l++)
                      t[I][l] && (n[B] |= C), !(C >>= 1) && ((C = 128), B++);
                    h += g;
                  }
                  break;
                case 2:
                  for (I = 0; I < s; I++) {
                    for (l = 0, C = o, B = h; l < a; l++)
                      t[I][l] && (n[B] ^= C), !(C >>= 1) && ((C = 128), B++);
                    h += g;
                  }
                  break;
                default:
                  throw new eD(`operator ${r} is not supported`);
              }
            }
            onImmediateGenericRegion(A, t, i, a) {
              let s = A.info,
                g = new ek(t, i, a),
                r = eJ(
                  A.mmr,
                  s.width,
                  s.height,
                  A.template,
                  A.prediction,
                  null,
                  A.at,
                  g
                );
              this.drawBitmap(s, r);
            }
            onImmediateLosslessGenericRegion() {
              this.onImmediateGenericRegion(...arguments);
            }
            onSymbolDictionary(A, t, i, a, s, g) {
              let r, n;
              A.huffman &&
                ((r = (function (A, t, i) {
                  let a,
                    s,
                    g,
                    r = 0;
                  switch (A.huffmanDHSelector) {
                    case 0:
                    case 1:
                      a = eW(A.huffmanDHSelector + 4);
                      break;
                    case 3:
                      (a = eO(r, t, i)), r++;
                      break;
                    default:
                      throw new eD('invalid Huffman DH selector');
                  }
                  switch (A.huffmanDWSelector) {
                    case 0:
                    case 1:
                      s = eW(A.huffmanDWSelector + 2);
                      break;
                    case 3:
                      (s = eO(r, t, i)), r++;
                      break;
                    default:
                      throw new eD('invalid Huffman DW selector');
                  }
                  return (
                    A.bitmapSizeSelector
                      ? ((g = eO(r, t, i)), r++)
                      : (g = eW(1)),
                    {
                      tableDeltaHeight: a,
                      tableDeltaWidth: s,
                      tableBitmapSize: g,
                      tableAggregateInstances: A.aggregationInstancesSelector
                        ? eO(r, t, i)
                        : eW(1),
                    }
                  );
                })(A, i, this.customTables)),
                (n = new eZ(a, s, g)));
              let o = this.symbols;
              o || (this.symbols = o = {});
              let I = [];
              for (let A of i) {
                let t = o[A];
                t && I.push(...t);
              }
              let l = new ek(a, s, g);
              o[t] = (function (A, t, i, a, s, g, r, n, o, I, l, C) {
                let B, h;
                if (A && t)
                  throw new eD(
                    'symbol refinement with Huffman is not supported'
                  );
                let Q = [],
                  c = 0,
                  E = Am(i.length + a),
                  u = l.decoder,
                  d = l.contextCache;
                for (
                  A && ((B = eW(1)), (h = []), (E = Math.max(E, 1)));
                  Q.length < a;

                ) {
                  c += A ? g.tableDeltaHeight.decode(C) : eS(d, 'IADH', u);
                  let a = 0,
                    s = 0,
                    B = A ? h.length : 0;
                  for (;;) {
                    let B;
                    let f = A ? g.tableDeltaWidth.decode(C) : eS(d, 'IADW', u);
                    if (null === f) break;
                    if (((a += f), (s += a), t)) {
                      let s = eS(d, 'IAAI', u);
                      if (s > 1)
                        B = eH(
                          A,
                          t,
                          a,
                          c,
                          0,
                          s,
                          1,
                          i.concat(Q),
                          E,
                          0,
                          0,
                          1,
                          0,
                          g,
                          o,
                          I,
                          l,
                          0,
                          C
                        );
                      else {
                        let A = eR(d, u, E),
                          t = eS(d, 'IARDX', u),
                          s = eS(d, 'IARDY', u);
                        B = eL(
                          a,
                          c,
                          o,
                          A < i.length ? i[A] : Q[A - i.length],
                          t,
                          s,
                          !1,
                          I,
                          l
                        );
                      }
                      Q.push(B);
                    } else
                      A
                        ? h.push(a)
                        : ((B = eJ(!1, a, c, r, !1, null, n, l)), Q.push(B));
                  }
                  if (A && !t) {
                    let A;
                    let t = g.tableBitmapSize.decode(C);
                    if ((C.byteAlign(), 0 === t))
                      A = (function (A, t, i) {
                        let a = [];
                        for (let s = 0; s < i; s++) {
                          let i = new Uint8Array(t);
                          a.push(i);
                          for (let a = 0; a < t; a++) i[a] = A.readBit();
                          A.byteAlign();
                        }
                        return a;
                      })(C, s, c);
                    else {
                      let i = C.end,
                        a = C.position + t;
                      (C.end = a),
                        (A = eX(C, s, c, !1)),
                        (C.end = i),
                        (C.position = a);
                    }
                    let i = h.length;
                    if (B === i - 1) Q.push(A);
                    else {
                      let t,
                        a,
                        s,
                        g,
                        r = 0;
                      for (t = B; t < i; t++) {
                        for (a = 0, s = r + h[t], g = []; a < c; a++)
                          g.push(A[a].subarray(r, s));
                        Q.push(g), (r = s);
                      }
                    }
                  }
                }
                let f = [],
                  p = [],
                  m,
                  y,
                  w = !1,
                  D = i.length + a;
                for (; p.length < D; ) {
                  let t = A ? B.decode(C) : eS(d, 'IAEX', u);
                  for (; t--; ) p.push(w);
                  w = !w;
                }
                for (m = 0, y = i.length; m < y; m++) p[m] && f.push(i[m]);
                for (let A = 0; A < a; m++, A++) p[m] && f.push(Q[A]);
                return f;
              })(
                A.huffman,
                A.refinement,
                I,
                A.numberOfNewSymbols,
                A.numberOfExportedSymbols,
                r,
                A.template,
                A.at,
                A.refinementTemplate,
                A.refinementAt,
                l,
                n
              );
            }
            onImmediateTextRegion(A, t, i, a, s) {
              let g, r;
              let n = A.info,
                o = this.symbols,
                I = [];
              for (let A of t) {
                let t = o[A];
                t && I.push(...t);
              }
              let l = Am(I.length);
              A.huffman &&
                ((r = new eZ(i, a, s)),
                (g = (function (A, t, i, a, s) {
                  let g = [];
                  for (let A = 0; A <= 34; A++) {
                    let t = s.readBits(4);
                    g.push(new ev([A, t, 0, 0]));
                  }
                  let r = new eT(g, !1);
                  g.length = 0;
                  for (let A = 0; A < a; ) {
                    let t = r.decode(s);
                    if (t >= 32) {
                      let i, a, r;
                      switch (t) {
                        case 32:
                          if (0 === A)
                            throw new eD(
                              'no previous value in symbol ID table'
                            );
                          (a = s.readBits(2) + 3), (i = g[A - 1].prefixLength);
                          break;
                        case 33:
                          (a = s.readBits(3) + 3), (i = 0);
                          break;
                        case 34:
                          (a = s.readBits(7) + 11), (i = 0);
                          break;
                        default:
                          throw new eD(
                            'invalid code length in symbol ID table'
                          );
                      }
                      for (r = 0; r < a; r++) g.push(new ev([A, i, 0, 0])), A++;
                    } else g.push(new ev([A, t, 0, 0])), A++;
                  }
                  s.byteAlign();
                  let n = new eT(g, !1),
                    o,
                    I,
                    l,
                    C = 0;
                  switch (A.huffmanFS) {
                    case 0:
                    case 1:
                      o = eW(A.huffmanFS + 6);
                      break;
                    case 3:
                      (o = eO(C, t, i)), C++;
                      break;
                    default:
                      throw new eD('invalid Huffman FS selector');
                  }
                  switch (A.huffmanDS) {
                    case 0:
                    case 1:
                    case 2:
                      I = eW(A.huffmanDS + 8);
                      break;
                    case 3:
                      (I = eO(C, t, i)), C++;
                      break;
                    default:
                      throw new eD('invalid Huffman DS selector');
                  }
                  switch (A.huffmanDT) {
                    case 0:
                    case 1:
                    case 2:
                      l = eW(A.huffmanDT + 11);
                      break;
                    case 3:
                      (l = eO(C, t, i)), C++;
                      break;
                    default:
                      throw new eD('invalid Huffman DT selector');
                  }
                  if (A.refinement)
                    throw new eD('refinement with Huffman is not supported');
                  return {
                    symbolIDTable: n,
                    tableFirstS: o,
                    tableDeltaS: I,
                    tableDeltaT: l,
                  };
                })(A, t, this.customTables, I.length, r)));
              let C = new ek(i, a, s),
                B = eH(
                  A.huffman,
                  A.refinement,
                  n.width,
                  n.height,
                  A.defaultPixelValue,
                  A.numberOfSymbolInstances,
                  A.stripSize,
                  I,
                  l,
                  A.transposed,
                  A.dsOffset,
                  A.referenceCorner,
                  A.combinationOperator,
                  g,
                  A.refinementTemplate,
                  A.refinementAt,
                  C,
                  A.logStripSize,
                  r
                );
              this.drawBitmap(n, B);
            }
            onImmediateLosslessTextRegion() {
              this.onImmediateTextRegion(...arguments);
            }
            onPatternDictionary(A, t, i, a, s) {
              let g = this.patterns;
              g || (this.patterns = g = {});
              let r = new ek(i, a, s);
              g[t] = (function (A, t, i, a, s, g) {
                let r = [];
                A ||
                  (r.push({ x: -t, y: 0 }),
                  0 === s &&
                    r.push(
                      { x: -3, y: -1 },
                      { x: 2, y: -2 },
                      { x: -2, y: -2 }
                    ));
                let n = eJ(A, (a + 1) * t, i, s, !1, null, r, g),
                  o = [];
                for (let A = 0; A <= a; A++) {
                  let a = [],
                    s = t * A,
                    g = s + t;
                  for (let A = 0; A < i; A++) a.push(n[A].subarray(s, g));
                  o.push(a);
                }
                return o;
              })(
                A.mmr,
                A.patternWidth,
                A.patternHeight,
                A.maxPatternIndex,
                A.template,
                r
              );
            }
            onImmediateHalftoneRegion(A, t, i, a, s) {
              let g = this.patterns[t[0]],
                r = A.info,
                n = new ek(i, a, s),
                o = (function (A, t, i, a, s, g, r, n, o, I, l, C, B, h, Q) {
                  let c, E, u, d, f, p, m, y, w, D, b, k, F, S;
                  if (r) throw new eD('skip is not supported');
                  if (0 !== n)
                    throw new eD(
                      `operator "${n}" is not supported in halftone region`
                    );
                  let R = [];
                  for (c = 0; c < s; c++) {
                    if (((u = new Uint8Array(a)), g))
                      for (E = 0; E < a; E++) u[E] = g;
                    R.push(u);
                  }
                  let G = t.length,
                    N = t[0],
                    x = N[0].length,
                    U = N.length,
                    M = Am(G),
                    J = [];
                  A ||
                    (J.push({ x: i <= 1 ? 3 : 2, y: -1 }),
                    0 === i &&
                      J.push(
                        { x: -3, y: -1 },
                        { x: 2, y: -2 },
                        { x: -2, y: -2 }
                      ));
                  let L = [];
                  for (
                    A && (d = new eZ(Q.data, Q.start, Q.end)), c = M - 1;
                    c >= 0;
                    c--
                  )
                    (f = A ? eX(d, o, I, !0) : eJ(!1, o, I, i, !1, null, J, Q)),
                      (L[c] = f);
                  for (p = 0; p < I; p++)
                    for (m = 0; m < o; m++) {
                      for (y = 0, w = 0, E = M - 1; E >= 0; E--)
                        (y ^= L[E][p][m]), (w |= y << E);
                      if (
                        ((D = t[w]),
                        (b = (l + p * h + m * B) >> 8),
                        (k = (C + p * B - m * h) >> 8),
                        b >= 0 && b + x <= a && k >= 0 && k + U <= s)
                      )
                        for (c = 0; c < U; c++)
                          for (E = 0, S = R[k + c], F = D[c]; E < x; E++)
                            S[b + E] |= F[E];
                      else {
                        let A, t;
                        for (c = 0; c < U; c++)
                          if (!((t = k + c) < 0 || t >= s))
                            for (E = 0, S = R[t], F = D[c]; E < x; E++)
                              (A = b + E) >= 0 && A < a && (S[A] |= F[E]);
                      }
                    }
                  return R;
                })(
                  A.mmr,
                  g,
                  A.template,
                  r.width,
                  r.height,
                  A.defaultPixelValue,
                  A.enableSkip,
                  A.combinationOperator,
                  A.gridWidth,
                  A.gridHeight,
                  A.gridOffsetX,
                  A.gridOffsetY,
                  A.gridVectorX,
                  A.gridVectorY,
                  n
                );
              this.drawBitmap(r, o);
            }
            onImmediateLosslessHalftoneRegion() {
              this.onImmediateHalftoneRegion(...arguments);
            }
            onTables(A, t, i, a) {
              let s = this.customTables;
              s || (this.customTables = s = {}),
                (s[A] = (function (A, t, i) {
                  let a = A[t],
                    s = 4294967295 & AD(A, t + 1),
                    g = 4294967295 & AD(A, t + 5),
                    r = new eZ(A, t + 9, i),
                    n = 1 + ((a >> 1) & 7),
                    o = 1 + ((a >> 4) & 7),
                    I = [],
                    l,
                    C,
                    B = s;
                  do
                    (l = r.readBits(n)),
                      (C = r.readBits(o)),
                      I.push(new ev([B, l, C, 0])),
                      (B += 1 << C);
                  while (B < g);
                  return (
                    (l = r.readBits(n)),
                    I.push(new ev([s - 1, l, 32, 0, 'lower'])),
                    (l = r.readBits(n)),
                    I.push(new ev([g, l, 32, 0])),
                    1 & a && ((l = r.readBits(n)), I.push(new ev([l, 0]))),
                    new eT(I, !1)
                  );
                })(t, i, a));
            }
          }
          class ev {
            constructor(A) {
              2 === A.length
                ? ((this.isOOB = !0),
                  (this.rangeLow = 0),
                  (this.prefixLength = A[0]),
                  (this.rangeLength = 0),
                  (this.prefixCode = A[1]),
                  (this.isLowerRange = !1))
                : ((this.isOOB = !1),
                  (this.rangeLow = A[0]),
                  (this.prefixLength = A[1]),
                  (this.rangeLength = A[2]),
                  (this.prefixCode = A[3]),
                  (this.isLowerRange = 'lower' === A[4]));
            }
          }
          class eq {
            constructor(A) {
              (this.children = []),
                A
                  ? ((this.isLeaf = !0),
                    (this.rangeLength = A.rangeLength),
                    (this.rangeLow = A.rangeLow),
                    (this.isLowerRange = A.isLowerRange),
                    (this.isOOB = A.isOOB))
                  : (this.isLeaf = !1);
            }
            buildTree(A, t) {
              let i = (A.prefixCode >> t) & 1;
              if (t <= 0) this.children[i] = new eq(A);
              else {
                let a = this.children[i];
                a || (this.children[i] = a = new eq(null)),
                  a.buildTree(A, t - 1);
              }
            }
            decodeNode(A) {
              if (this.isLeaf) {
                if (this.isOOB) return null;
                let t = A.readBits(this.rangeLength);
                return this.rangeLow + (this.isLowerRange ? -t : t);
              }
              let t = this.children[A.readBit()];
              if (!t) throw new eD('invalid Huffman data');
              return t.decodeNode(A);
            }
          }
          class eT {
            constructor(A, t) {
              t || this.assignPrefixCodes(A), (this.rootNode = new eq(null));
              for (let t = 0, i = A.length; t < i; t++) {
                let i = A[t];
                i.prefixLength > 0 &&
                  this.rootNode.buildTree(i, i.prefixLength - 1);
              }
            }
            decode(A) {
              return this.rootNode.decodeNode(A);
            }
            assignPrefixCodes(A) {
              let t = A.length,
                i = 0;
              for (let a = 0; a < t; a++) i = Math.max(i, A[a].prefixLength);
              let a = new Uint32Array(i + 1);
              for (let i = 0; i < t; i++) a[A[i].prefixLength]++;
              let s,
                g,
                r,
                n = 1,
                o = 0;
              for (a[0] = 0; n <= i; ) {
                for (s = o = (o + a[n - 1]) << 1, g = 0; g < t; )
                  (r = A[g]).prefixLength === n && ((r.prefixCode = s), s++),
                    g++;
                n++;
              }
            }
          }
          let eP = {};
          function eW(A) {
            let t,
              i = eP[A];
            if (i) return i;
            switch (A) {
              case 1:
                t = [
                  [0, 1, 4, 0],
                  [16, 2, 8, 2],
                  [272, 3, 16, 6],
                  [65808, 3, 32, 7],
                ];
                break;
              case 2:
                t = [
                  [0, 1, 0, 0],
                  [1, 2, 0, 2],
                  [2, 3, 0, 6],
                  [3, 4, 3, 14],
                  [11, 5, 6, 30],
                  [75, 6, 32, 62],
                  [6, 63],
                ];
                break;
              case 3:
                t = [
                  [-256, 8, 8, 254],
                  [0, 1, 0, 0],
                  [1, 2, 0, 2],
                  [2, 3, 0, 6],
                  [3, 4, 3, 14],
                  [11, 5, 6, 30],
                  [-257, 8, 32, 255, 'lower'],
                  [75, 7, 32, 126],
                  [6, 62],
                ];
                break;
              case 4:
                t = [
                  [1, 1, 0, 0],
                  [2, 2, 0, 2],
                  [3, 3, 0, 6],
                  [4, 4, 3, 14],
                  [12, 5, 6, 30],
                  [76, 5, 32, 31],
                ];
                break;
              case 5:
                t = [
                  [-255, 7, 8, 126],
                  [1, 1, 0, 0],
                  [2, 2, 0, 2],
                  [3, 3, 0, 6],
                  [4, 4, 3, 14],
                  [12, 5, 6, 30],
                  [-256, 7, 32, 127, 'lower'],
                  [76, 6, 32, 62],
                ];
                break;
              case 6:
                t = [
                  [-2048, 5, 10, 28],
                  [-1024, 4, 9, 8],
                  [-512, 4, 8, 9],
                  [-256, 4, 7, 10],
                  [-128, 5, 6, 29],
                  [-64, 5, 5, 30],
                  [-32, 4, 5, 11],
                  [0, 2, 7, 0],
                  [128, 3, 7, 2],
                  [256, 3, 8, 3],
                  [512, 4, 9, 12],
                  [1024, 4, 10, 13],
                  [-2049, 6, 32, 62, 'lower'],
                  [2048, 6, 32, 63],
                ];
                break;
              case 7:
                t = [
                  [-1024, 4, 9, 8],
                  [-512, 3, 8, 0],
                  [-256, 4, 7, 9],
                  [-128, 5, 6, 26],
                  [-64, 5, 5, 27],
                  [-32, 4, 5, 10],
                  [0, 4, 5, 11],
                  [32, 5, 5, 28],
                  [64, 5, 6, 29],
                  [128, 4, 7, 12],
                  [256, 3, 8, 1],
                  [512, 3, 9, 2],
                  [1024, 3, 10, 3],
                  [-1025, 5, 32, 30, 'lower'],
                  [2048, 5, 32, 31],
                ];
                break;
              case 8:
                t = [
                  [-15, 8, 3, 252],
                  [-7, 9, 1, 508],
                  [-5, 8, 1, 253],
                  [-3, 9, 0, 509],
                  [-2, 7, 0, 124],
                  [-1, 4, 0, 10],
                  [0, 2, 1, 0],
                  [2, 5, 0, 26],
                  [3, 6, 0, 58],
                  [4, 3, 4, 4],
                  [20, 6, 1, 59],
                  [22, 4, 4, 11],
                  [38, 4, 5, 12],
                  [70, 5, 6, 27],
                  [134, 5, 7, 28],
                  [262, 6, 7, 60],
                  [390, 7, 8, 125],
                  [646, 6, 10, 61],
                  [-16, 9, 32, 510, 'lower'],
                  [1670, 9, 32, 511],
                  [2, 1],
                ];
                break;
              case 9:
                t = [
                  [-31, 8, 4, 252],
                  [-15, 9, 2, 508],
                  [-11, 8, 2, 253],
                  [-7, 9, 1, 509],
                  [-5, 7, 1, 124],
                  [-3, 4, 1, 10],
                  [-1, 3, 1, 2],
                  [1, 3, 1, 3],
                  [3, 5, 1, 26],
                  [5, 6, 1, 58],
                  [7, 3, 5, 4],
                  [39, 6, 2, 59],
                  [43, 4, 5, 11],
                  [75, 4, 6, 12],
                  [139, 5, 7, 27],
                  [267, 5, 8, 28],
                  [523, 6, 8, 60],
                  [779, 7, 9, 125],
                  [1291, 6, 11, 61],
                  [-32, 9, 32, 510, 'lower'],
                  [3339, 9, 32, 511],
                  [2, 0],
                ];
                break;
              case 10:
                t = [
                  [-21, 7, 4, 122],
                  [-5, 8, 0, 252],
                  [-4, 7, 0, 123],
                  [-3, 5, 0, 24],
                  [-2, 2, 2, 0],
                  [2, 5, 0, 25],
                  [3, 6, 0, 54],
                  [4, 7, 0, 124],
                  [5, 8, 0, 253],
                  [6, 2, 6, 1],
                  [70, 5, 5, 26],
                  [102, 6, 5, 55],
                  [134, 6, 6, 56],
                  [198, 6, 7, 57],
                  [326, 6, 8, 58],
                  [582, 6, 9, 59],
                  [1094, 6, 10, 60],
                  [2118, 7, 11, 125],
                  [-22, 8, 32, 254, 'lower'],
                  [4166, 8, 32, 255],
                  [2, 2],
                ];
                break;
              case 11:
                t = [
                  [1, 1, 0, 0],
                  [2, 2, 1, 2],
                  [4, 4, 0, 12],
                  [5, 4, 1, 13],
                  [7, 5, 1, 28],
                  [9, 5, 2, 29],
                  [13, 6, 2, 60],
                  [17, 7, 2, 122],
                  [21, 7, 3, 123],
                  [29, 7, 4, 124],
                  [45, 7, 5, 125],
                  [77, 7, 6, 126],
                  [141, 7, 32, 127],
                ];
                break;
              case 12:
                t = [
                  [1, 1, 0, 0],
                  [2, 2, 0, 2],
                  [3, 3, 1, 6],
                  [5, 5, 0, 28],
                  [6, 5, 1, 29],
                  [8, 6, 1, 60],
                  [10, 7, 0, 122],
                  [11, 7, 1, 123],
                  [13, 7, 2, 124],
                  [17, 7, 3, 125],
                  [25, 7, 4, 126],
                  [41, 8, 5, 254],
                  [73, 8, 32, 255],
                ];
                break;
              case 13:
                t = [
                  [1, 1, 0, 0],
                  [2, 3, 0, 4],
                  [3, 4, 0, 12],
                  [4, 5, 0, 28],
                  [5, 4, 1, 13],
                  [7, 3, 3, 5],
                  [15, 6, 1, 58],
                  [17, 6, 2, 59],
                  [21, 6, 3, 60],
                  [29, 6, 4, 61],
                  [45, 6, 5, 62],
                  [77, 7, 6, 126],
                  [141, 7, 32, 127],
                ];
                break;
              case 14:
                t = [
                  [-2, 3, 0, 4],
                  [-1, 3, 0, 5],
                  [0, 1, 0, 0],
                  [1, 3, 0, 6],
                  [2, 3, 0, 7],
                ];
                break;
              case 15:
                t = [
                  [-24, 7, 4, 124],
                  [-8, 6, 2, 60],
                  [-4, 5, 1, 28],
                  [-2, 4, 0, 12],
                  [-1, 3, 0, 4],
                  [0, 1, 0, 0],
                  [1, 3, 0, 5],
                  [2, 4, 0, 13],
                  [3, 5, 1, 29],
                  [5, 6, 2, 61],
                  [9, 7, 4, 125],
                  [-25, 7, 32, 126, 'lower'],
                  [25, 7, 32, 127],
                ];
                break;
              default:
                throw new eD(`standard table B.${A} does not exist`);
            }
            for (let A = 0, i = t.length; A < i; A++) t[A] = new ev(t[A]);
            return (i = new eT(t, !0)), (eP[A] = i), i;
          }
          class eZ {
            constructor(A, t, i) {
              (this.data = A),
                (this.start = t),
                (this.end = i),
                (this.position = t),
                (this.shift = -1),
                (this.currentByte = 0);
            }
            readBit() {
              if (this.shift < 0) {
                if (this.position >= this.end)
                  throw new eD('end of data while reading bit');
                (this.currentByte = this.data[this.position++]),
                  (this.shift = 7);
              }
              let A = (this.currentByte >> this.shift) & 1;
              return this.shift--, A;
            }
            readBits(A) {
              let t,
                i = 0;
              for (t = A - 1; t >= 0; t--) i |= this.readBit() << t;
              return i;
            }
            byteAlign() {
              this.shift = -1;
            }
            next() {
              return this.position >= this.end
                ? -1
                : this.data[this.position++];
            }
          }
          function eO(A, t, i) {
            let a = 0;
            for (let s = 0, g = t.length; s < g; s++) {
              let g = i[t[s]];
              if (g) {
                if (A === a) return g;
                a++;
              }
            }
            throw new eD("can't find custom Huffman table");
          }
          function eX(A, t, i, a) {
            let s = new eQ(A, {
                K: -1,
                Columns: t,
                Rows: i,
                BlackIs1: !0,
                EndOfBlock: a,
              }),
              g = [],
              r,
              n = !1;
            for (let A = 0; A < i; A++) {
              let A = new Uint8Array(t);
              g.push(A);
              let i = -1;
              for (let a = 0; a < t; a++)
                i < 0 &&
                  (-1 === (r = s.readNextChar()) && ((r = 0), (n = !0)),
                  (i = 7)),
                  (A[a] = (r >> i) & 1),
                  i--;
            }
            if (a && !n) for (let A = 0; A < 5 && -1 !== s.readNextChar(); A++);
            return g;
          }
          class eV {
            parseChunks(A) {
              return (function (A) {
                let t = new eK();
                for (let i = 0, a = A.length; i < a; i++) {
                  let a = A[i];
                  !(function (A, t) {
                    for (let i = 0, a = A.length; i < a; i++)
                      !(function (A, t) {
                        let i = A.header,
                          a = A.data,
                          s = A.end,
                          g,
                          r,
                          n,
                          o,
                          I = A.start;
                        switch (i.type) {
                          case 0:
                            let l = {},
                              C = Aw(a, I);
                            if (
                              ((l.huffman = !!(1 & C)),
                              (l.refinement = !!(2 & C)),
                              (l.huffmanDHSelector = (C >> 2) & 3),
                              (l.huffmanDWSelector = (C >> 4) & 3),
                              (l.bitmapSizeSelector = (C >> 6) & 1),
                              (l.aggregationInstancesSelector = (C >> 7) & 1),
                              (l.bitmapCodingContextUsed = !!(256 & C)),
                              (l.bitmapCodingContextRetained = !!(512 & C)),
                              (l.template = (C >> 10) & 3),
                              (l.refinementTemplate = (C >> 12) & 1),
                              (I += 2),
                              !l.huffman)
                            ) {
                              for (
                                n = 0, o = 0 === l.template ? 4 : 1, r = [];
                                n < o;
                                n++
                              )
                                r.push({ x: Ay(a, I), y: Ay(a, I + 1) }),
                                  (I += 2);
                              l.at = r;
                            }
                            if (l.refinement && !l.refinementTemplate) {
                              for (n = 0, r = []; n < 2; n++)
                                r.push({ x: Ay(a, I), y: Ay(a, I + 1) }),
                                  (I += 2);
                              l.refinementAt = r;
                            }
                            (l.numberOfExportedSymbols = AD(a, I)),
                              (I += 4),
                              (l.numberOfNewSymbols = AD(a, I)),
                              (I += 4),
                              (g = [l, i.number, i.referredTo, a, I, s]);
                            break;
                          case 6:
                          case 7:
                            let B = {};
                            (B.info = eY(a, I)), (I += 17);
                            let h = Aw(a, I);
                            if (
                              ((I += 2),
                              (B.huffman = !!(1 & h)),
                              (B.refinement = !!(2 & h)),
                              (B.logStripSize = (h >> 2) & 3),
                              (B.stripSize = 1 << B.logStripSize),
                              (B.referenceCorner = (h >> 4) & 3),
                              (B.transposed = !!(64 & h)),
                              (B.combinationOperator = (h >> 7) & 3),
                              (B.defaultPixelValue = (h >> 9) & 1),
                              (B.dsOffset = (h << 17) >> 27),
                              (B.refinementTemplate = (h >> 15) & 1),
                              B.huffman)
                            ) {
                              let A = Aw(a, I);
                              (I += 2),
                                (B.huffmanFS = 3 & A),
                                (B.huffmanDS = (A >> 2) & 3),
                                (B.huffmanDT = (A >> 4) & 3),
                                (B.huffmanRefinementDW = (A >> 6) & 3),
                                (B.huffmanRefinementDH = (A >> 8) & 3),
                                (B.huffmanRefinementDX = (A >> 10) & 3),
                                (B.huffmanRefinementDY = (A >> 12) & 3),
                                (B.huffmanRefinementSizeSelector = !!(
                                  16384 & A
                                ));
                            }
                            if (B.refinement && !B.refinementTemplate) {
                              for (n = 0, r = []; n < 2; n++)
                                r.push({ x: Ay(a, I), y: Ay(a, I + 1) }),
                                  (I += 2);
                              B.refinementAt = r;
                            }
                            (B.numberOfSymbolInstances = AD(a, I)),
                              (I += 4),
                              (g = [B, i.referredTo, a, I, s]);
                            break;
                          case 16:
                            let Q = {},
                              c = a[I++];
                            (Q.mmr = !!(1 & c)),
                              (Q.template = (c >> 1) & 3),
                              (Q.patternWidth = a[I++]),
                              (Q.patternHeight = a[I++]),
                              (Q.maxPatternIndex = AD(a, I)),
                              (I += 4),
                              (g = [Q, i.number, a, I, s]);
                            break;
                          case 22:
                          case 23:
                            let E = {};
                            (E.info = eY(a, I)), (I += 17);
                            let u = a[I++];
                            (E.mmr = !!(1 & u)),
                              (E.template = (u >> 1) & 3),
                              (E.enableSkip = !!(8 & u)),
                              (E.combinationOperator = (u >> 4) & 7),
                              (E.defaultPixelValue = (u >> 7) & 1),
                              (E.gridWidth = AD(a, I)),
                              (I += 4),
                              (E.gridHeight = AD(a, I)),
                              (I += 4),
                              (E.gridOffsetX = 4294967295 & AD(a, I)),
                              (I += 4),
                              (E.gridOffsetY = 4294967295 & AD(a, I)),
                              (I += 4),
                              (E.gridVectorX = Aw(a, I)),
                              (I += 2),
                              (E.gridVectorY = Aw(a, I)),
                              (I += 2),
                              (g = [E, i.referredTo, a, I, s]);
                            break;
                          case 38:
                          case 39:
                            let d = {};
                            (d.info = eY(a, I)), (I += 17);
                            let f = a[I++];
                            if (
                              ((d.mmr = !!(1 & f)),
                              (d.template = (f >> 1) & 3),
                              (d.prediction = !!(8 & f)),
                              !d.mmr)
                            ) {
                              for (
                                n = 0, o = 0 === d.template ? 4 : 1, r = [];
                                n < o;
                                n++
                              )
                                r.push({ x: Ay(a, I), y: Ay(a, I + 1) }),
                                  (I += 2);
                              d.at = r;
                            }
                            g = [d, a, I, s];
                            break;
                          case 48:
                            let p = {
                              width: AD(a, I),
                              height: AD(a, I + 4),
                              resolutionX: AD(a, I + 8),
                              resolutionY: AD(a, I + 12),
                            };
                            4294967295 === p.height && delete p.height;
                            let m = a[I + 16];
                            Aw(a, I + 17),
                              (p.lossless = !!(1 & m)),
                              (p.refinement = !!(2 & m)),
                              (p.defaultPixelValue = (m >> 2) & 1),
                              (p.combinationOperator = (m >> 3) & 3),
                              (p.requiresBuffer = !!(32 & m)),
                              (p.combinationOperatorOverride = !!(64 & m)),
                              (g = [p]);
                            break;
                          case 49:
                          case 50:
                          case 51:
                          case 62:
                            break;
                          case 53:
                            g = [i.number, a, I, s];
                            break;
                          default:
                            throw new eD(
                              `segment type ${i.typeName}(${i.type}) is not implemented`
                            );
                        }
                        let y = 'on' + i.typeName;
                        y in t && t[y].apply(t, g);
                      })(A[i], t);
                  })(
                    (function (A, t, i, a) {
                      let s = [],
                        g = i;
                      for (; g < a; ) {
                        let i = (function (A, t) {
                          let i, a;
                          let s = {};
                          s.number = AD(A, t);
                          let g = A[t + 4],
                            r = 63 & g;
                          if (!eG[r])
                            throw new eD('invalid segment type: ' + r);
                          (s.type = r),
                            (s.typeName = eG[r]),
                            (s.deferredNonRetain = !!(128 & g));
                          let n = A[t + 5],
                            o = (n >> 5) & 7,
                            I = [31 & n],
                            l = t + 6;
                          if (7 === n) {
                            (o = 536870911 & AD(A, l - 1)), (l += 3);
                            let t = (o + 7) >> 3;
                            for (I[0] = A[l++]; --t > 0; ) I.push(A[l++]);
                          } else if (5 === n || 6 === n)
                            throw new eD('invalid referred-to flags');
                          s.retainBits = I;
                          let C = 4;
                          s.number <= 256
                            ? (C = 1)
                            : s.number <= 65536 && (C = 2);
                          let B = [];
                          for (i = 0; i < o; i++) {
                            let t;
                            (t =
                              1 === C ? A[l] : 2 === C ? Aw(A, l) : AD(A, l)),
                              B.push(t),
                              (l += C);
                          }
                          if (
                            ((s.referredTo = B),
                            64 & g
                              ? ((s.pageAssociation = AD(A, l)), (l += 4))
                              : (s.pageAssociation = A[l++]),
                            (s.length = AD(A, l)),
                            (l += 4),
                            4294967295 === s.length)
                          ) {
                            if (38 !== r)
                              throw new eD('invalid unknown segment length');
                            {
                              let t = eY(A, l),
                                g = !!(1 & A[l + 17]),
                                r = new Uint8Array(6);
                              for (
                                g || ((r[0] = 255), (r[1] = 172)),
                                  r[2] = (t.height >>> 24) & 255,
                                  r[3] = (t.height >> 16) & 255,
                                  r[4] = (t.height >> 8) & 255,
                                  r[5] = 255 & t.height,
                                  i = l,
                                  a = A.length;
                                i < a;
                                i++
                              ) {
                                let t = 0;
                                for (; t < 6 && r[t] === A[i + t]; ) t++;
                                if (6 === t) {
                                  s.length = i + 6;
                                  break;
                                }
                              }
                              if (4294967295 === s.length)
                                throw new eD('segment end was not found');
                            }
                          }
                          return (s.headerEnd = l), s;
                        })(t, g);
                        g = i.headerEnd;
                        let a = { header: i, data: t };
                        if (
                          (A.randomAccess ||
                            ((a.start = g), (g += i.length), (a.end = g)),
                          s.push(a),
                          51 === i.type)
                        )
                          break;
                      }
                      if (A.randomAccess)
                        for (let A = 0, t = s.length; A < t; A++)
                          (s[A].start = g),
                            (g += s[A].header.length),
                            (s[A].end = g);
                      return s;
                    })({}, a.data, a.start, a.end),
                    t
                  );
                }
                return t.buffer;
              })(A);
            }
            parse(A) {
              throw Error('Not implemented: Jbig2Image.parse');
            }
          }
          class ej extends es {
            constructor(A, t, i) {
              super(t),
                (this.stream = A),
                (this.dict = A.dict),
                (this.maybeLength = t),
                (this.params = i);
            }
            get bytes() {
              return b(this, 'bytes', this.stream.getBytes(this.maybeLength));
            }
            ensureBuffer(A) {}
            readBlock() {
              this.decodeImage();
            }
            decodeImage(A) {
              if (this.eof) return this.buffer;
              A ||= this.bytes;
              let t = new eV(),
                i = [];
              if (this.params instanceof Aa) {
                let A = this.params.get('JBIG2Globals');
                if (A instanceof AC) {
                  let t = A.getBytes();
                  i.push({ data: t, start: 0, end: t.length });
                }
              }
              i.push({ data: A, start: 0, end: A.length });
              let a = t.parseChunks(i),
                s = a.length;
              for (let A = 0; A < s; A++) a[A] ^= 255;
              return (
                (this.buffer = a),
                (this.bufferLength = s),
                (this.eof = !0),
                this.buffer
              );
            }
            get canAsyncDecodeImageFromBuffer() {
              return this.stream.isAsync;
            }
          }
          function ez({
            src: A,
            srcPos: t = 0,
            dest: i,
            width: a,
            height: s,
            nonBlackColor: g = 4294967295,
            inverseDecode: r = !1,
          }) {
            let n = Y.isLittleEndian ? 4278190080 : 255,
              [o, I] = r ? [g, n] : [n, g],
              l = a >> 3,
              C = 7 & a,
              B = A.length;
            i = new Uint32Array(i.buffer);
            let h = 0;
            for (let a = 0; a < s; a++) {
              for (let a = t + l; t < a; t++) {
                let a = t < B ? A[t] : 255;
                (i[h++] = 128 & a ? I : o),
                  (i[h++] = 64 & a ? I : o),
                  (i[h++] = 32 & a ? I : o),
                  (i[h++] = 16 & a ? I : o),
                  (i[h++] = 8 & a ? I : o),
                  (i[h++] = 4 & a ? I : o),
                  (i[h++] = 2 & a ? I : o),
                  (i[h++] = 1 & a ? I : o);
              }
              if (0 === C) continue;
              let a = t < B ? A[t++] : 255;
              for (let A = 0; A < C; A++) i[h++] = a & (1 << (7 - A)) ? I : o;
            }
            return { srcPos: t, destPos: h };
          }
          class e_ extends k {
            constructor(A) {
              super(A, 'JpegError');
            }
          }
          class e$ extends k {
            constructor(A, t) {
              super(A, 'DNLMarkerError'), (this.scanLines = t);
            }
          }
          class e0 extends k {
            constructor(A) {
              super(A, 'EOIMarkerError');
            }
          }
          let e1 = new Uint8Array([
            0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26,
            33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56,
            57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38,
            31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63,
          ]);
          function e2(A, t, i) {
            return 64 * ((A.blocksPerLine + 1) * t + i);
          }
          function e9(A, t, i = t) {
            let a = A.length - 1,
              s = i < t ? i : t;
            if (t >= a) return null;
            let g = Aw(A, t);
            if (g >= 65472 && g <= 65534)
              return { invalid: null, marker: g, offset: t };
            let r = Aw(A, s);
            for (; !(r >= 65472 && r <= 65534); ) {
              if (++s >= a) return null;
              r = Aw(A, s);
            }
            return { invalid: g.toString(16), marker: r, offset: s };
          }
          class e3 {
            constructor({
              decodeTransform: A = null,
              colorTransform: t = -1,
            } = {}) {
              (this._decodeTransform = A), (this._colorTransform = t);
            }
            parse(A, { dnlScanLines: t = null } = {}) {
              let i,
                a,
                s = 0,
                g = null,
                r = null,
                n = 0,
                o = [],
                I = [],
                l = [],
                C = Aw(A, s);
              if (((s += 2), 65496 !== C)) throw new e_('SOI not found');
              (C = Aw(A, s)), (s += 2);
              A: for (; 65497 !== C; ) {
                let B, h, Q;
                switch (C) {
                  case 65504:
                  case 65505:
                  case 65506:
                  case 65507:
                  case 65508:
                  case 65509:
                  case 65510:
                  case 65511:
                  case 65512:
                  case 65513:
                  case 65514:
                  case 65515:
                  case 65516:
                  case 65517:
                  case 65518:
                  case 65519:
                  case 65534:
                    let c = (function () {
                      let t = Aw(A, s),
                        i = (s += 2) + t - 2,
                        a = e9(A, i, s);
                      a?.invalid &&
                        (m(
                          'readDataBlock - incorrect length, current marker is: ' +
                            a.invalid
                        ),
                        (i = a.offset));
                      let g = A.subarray(s, i);
                      return (s += g.length), g;
                    })();
                    65504 === C &&
                      74 === c[0] &&
                      70 === c[1] &&
                      73 === c[2] &&
                      70 === c[3] &&
                      0 === c[4] &&
                      (g = {
                        version: { major: c[5], minor: c[6] },
                        densityUnits: c[7],
                        xDensity: (c[8] << 8) | c[9],
                        yDensity: (c[10] << 8) | c[11],
                        thumbWidth: c[12],
                        thumbHeight: c[13],
                        thumbData: c.subarray(14, 14 + 3 * c[12] * c[13]),
                      }),
                      65518 === C &&
                        65 === c[0] &&
                        100 === c[1] &&
                        111 === c[2] &&
                        98 === c[3] &&
                        101 === c[4] &&
                        (r = {
                          version: (c[5] << 8) | c[6],
                          flags0: (c[7] << 8) | c[8],
                          flags1: (c[9] << 8) | c[10],
                          transformCode: c[11],
                        });
                    break;
                  case 65499:
                    let E = Aw(A, s);
                    s += 2;
                    let u = E + s - 2;
                    for (; s < u; ) {
                      let t = A[s++],
                        i = new Uint16Array(64);
                      if (t >> 4 == 0)
                        for (h = 0; h < 64; h++) i[e1[h]] = A[s++];
                      else {
                        if (t >> 4 != 1)
                          throw new e_('DQT - invalid table spec');
                        for (h = 0; h < 64; h++)
                          (i[e1[h]] = Aw(A, s)), (s += 2);
                      }
                      o[15 & t] = i;
                    }
                    break;
                  case 65472:
                  case 65473:
                  case 65474:
                    if (i) throw new e_('Only single frame JPEGs supported');
                    (s += 2),
                      ((i = {}).extended = 65473 === C),
                      (i.progressive = 65474 === C),
                      (i.precision = A[s++]);
                    let d = Aw(A, s);
                    (s += 2),
                      (i.scanLines = t || d),
                      (i.samplesPerLine = Aw(A, s)),
                      (s += 2),
                      (i.components = []),
                      (i.componentIds = {});
                    let f = A[s++],
                      p = 0,
                      y = 0;
                    for (B = 0; B < f; B++) {
                      let t = A[s],
                        a = A[s + 1] >> 4,
                        g = 15 & A[s + 1];
                      p < a && (p = a), y < g && (y = g);
                      let r = A[s + 2];
                      (Q = i.components.push({
                        h: a,
                        v: g,
                        quantizationId: r,
                        quantizationTable: null,
                      })),
                        (i.componentIds[t] = Q - 1),
                        (s += 3);
                    }
                    (i.maxH = p),
                      (i.maxV = y),
                      (function (A) {
                        let t = Math.ceil(A.samplesPerLine / 8 / A.maxH),
                          i = Math.ceil(A.scanLines / 8 / A.maxV);
                        for (let a of A.components) {
                          let s = Math.ceil(
                              (Math.ceil(A.samplesPerLine / 8) * a.h) / A.maxH
                            ),
                            g = Math.ceil(
                              (Math.ceil(A.scanLines / 8) * a.v) / A.maxV
                            ),
                            r = t * a.h,
                            n = 64 * (i * a.v) * (r + 1);
                          (a.blockData = new Int16Array(n)),
                            (a.blocksPerLine = s),
                            (a.blocksPerColumn = g);
                        }
                        (A.mcusPerLine = t), (A.mcusPerColumn = i);
                      })(i);
                    break;
                  case 65476:
                    let w = Aw(A, s);
                    for (s += 2, B = 2; B < w; ) {
                      let t = A[s++],
                        i = new Uint8Array(16),
                        a = 0;
                      for (h = 0; h < 16; h++, s++) a += i[h] = A[s];
                      let g = new Uint8Array(a);
                      for (h = 0; h < a; h++, s++) g[h] = A[s];
                      (B += 17 + a),
                        ((t >> 4 == 0 ? l : I)[15 & t] = (function (A, t) {
                          let i,
                            a,
                            s = 0,
                            g = 16;
                          for (; g > 0 && !A[g - 1]; ) g--;
                          let r = [{ children: [], index: 0 }],
                            n,
                            o = r[0];
                          for (i = 0; i < g; i++) {
                            for (a = 0; a < A[i]; a++) {
                              for (
                                (o = r.pop()).children[o.index] = t[s];
                                o.index > 0;

                              )
                                o = r.pop();
                              for (o.index++, r.push(o); r.length <= i; )
                                r.push((n = { children: [], index: 0 })),
                                  (o.children[o.index] = n.children),
                                  (o = n);
                              s++;
                            }
                            i + 1 < g &&
                              (r.push((n = { children: [], index: 0 })),
                              (o.children[o.index] = n.children),
                              (o = n));
                          }
                          return r[0].children;
                        })(i, g));
                    }
                    break;
                  case 65501:
                    (s += 2), (a = Aw(A, s)), (s += 2);
                    break;
                  case 65498:
                    let D = 1 == ++n && !t;
                    s += 2;
                    let b = A[s++],
                      k = [];
                    for (B = 0; B < b; B++) {
                      let t = A[s++],
                        a = i.componentIds[t],
                        g = i.components[a];
                      g.index = t;
                      let r = A[s++];
                      (g.huffmanTableDC = l[r >> 4]),
                        (g.huffmanTableAC = I[15 & r]),
                        k.push(g);
                    }
                    let F = A[s++],
                      S = A[s++],
                      R = A[s++];
                    try {
                      let t = (function (A, t, i, a, s, g, r, n, o, I = !1) {
                        let l, C, B, h, Q, c, E, u;
                        let d = i.mcusPerLine,
                          f = i.progressive,
                          p = t,
                          y = 0,
                          w = 0;
                        function D() {
                          if (w > 0) return w--, (y >> w) & 1;
                          if (255 === (y = A[t++])) {
                            let a = A[t++];
                            if (a) {
                              if (220 === a && I) {
                                let a = Aw(A, (t += 2));
                                if (((t += 2), a > 0 && a !== i.scanLines))
                                  throw new e$(
                                    'Found DNL marker (0xFFDC) while parsing scan data',
                                    a
                                  );
                              } else if (217 === a) {
                                if (I) {
                                  let A = N * (8 === i.precision ? 8 : 0);
                                  if (A > 0 && Math.round(i.scanLines / A) >= 5)
                                    throw new e$(
                                      'Found EOI marker (0xFFD9) while parsing scan data, possibly caused by incorrect `scanLines` parameter',
                                      A
                                    );
                                }
                                throw new e0(
                                  'Found EOI marker (0xFFD9) while parsing scan data'
                                );
                              }
                              throw new e_(
                                `unexpected marker ${((y << 8) | a).toString(16)}`
                              );
                            }
                          }
                          return (w = 7), y >>> 7;
                        }
                        function b(A) {
                          let t = A;
                          for (;;) {
                            switch (typeof (t = t[D()])) {
                              case 'number':
                                return t;
                              case 'object':
                                continue;
                            }
                            throw new e_('invalid huffman sequence');
                          }
                        }
                        function k(A) {
                          let t = 0;
                          for (; A > 0; ) (t = (t << 1) | D()), A--;
                          return t;
                        }
                        function F(A) {
                          if (1 === A) return 1 === D() ? 1 : -1;
                          let t = k(A);
                          return t >= 1 << (A - 1) ? t : t + (-1 << A) + 1;
                        }
                        let S = 0,
                          R,
                          G = 0,
                          N = 0,
                          x = a.length;
                        c = f
                          ? 0 === g
                            ? 0 === n
                              ? function (A, t) {
                                  let i = b(A.huffmanTableDC),
                                    a = 0 === i ? 0 : F(i) << o;
                                  A.blockData[t] = A.pred += a;
                                }
                              : function (A, t) {
                                  A.blockData[t] |= D() << o;
                                }
                            : 0 === n
                              ? function (A, t) {
                                  if (S > 0) {
                                    S--;
                                    return;
                                  }
                                  let i = g;
                                  for (; i <= r; ) {
                                    let a = b(A.huffmanTableAC),
                                      s = 15 & a,
                                      g = a >> 4;
                                    if (0 === s) {
                                      if (g < 15) {
                                        S = k(g) + (1 << g) - 1;
                                        break;
                                      }
                                      i += 16;
                                      continue;
                                    }
                                    i += g;
                                    let r = e1[i];
                                    (A.blockData[t + r] = F(s) * (1 << o)), i++;
                                  }
                                }
                              : function (A, t) {
                                  let i = g,
                                    a,
                                    s,
                                    n = 0;
                                  for (; i <= r; ) {
                                    let g = t + e1[i],
                                      r = A.blockData[g] < 0 ? -1 : 1;
                                    switch (G) {
                                      case 0:
                                        if (
                                          ((a = 15 & (s = b(A.huffmanTableAC))),
                                          (n = s >> 4),
                                          0 === a)
                                        )
                                          n < 15
                                            ? ((S = k(n) + (1 << n)), (G = 4))
                                            : ((n = 16), (G = 1));
                                        else {
                                          if (1 !== a)
                                            throw new e_(
                                              'invalid ACn encoding'
                                            );
                                          (R = F(a)), (G = n ? 2 : 3);
                                        }
                                        continue;
                                      case 1:
                                      case 2:
                                        A.blockData[g]
                                          ? (A.blockData[g] += r * (D() << o))
                                          : 0 == --n && (G = 2 === G ? 3 : 0);
                                        break;
                                      case 3:
                                        A.blockData[g]
                                          ? (A.blockData[g] += r * (D() << o))
                                          : ((A.blockData[g] = R << o),
                                            (G = 0));
                                        break;
                                      case 4:
                                        A.blockData[g] &&
                                          (A.blockData[g] += r * (D() << o));
                                    }
                                    i++;
                                  }
                                  4 === G && 0 == --S && (G = 0);
                                }
                          : function (A, t) {
                              let i = b(A.huffmanTableDC),
                                a = 0 === i ? 0 : F(i);
                              A.blockData[t] = A.pred += a;
                              let s = 1;
                              for (; s < 64; ) {
                                let i = b(A.huffmanTableAC),
                                  a = 15 & i,
                                  g = i >> 4;
                                if (0 === a) {
                                  if (g < 15) break;
                                  s += 16;
                                  continue;
                                }
                                s += g;
                                let r = e1[s];
                                (A.blockData[t + r] = F(a)), s++;
                              }
                            };
                        let U,
                          M = 0,
                          J =
                            1 === x
                              ? a[0].blocksPerLine * a[0].blocksPerColumn
                              : d * i.mcusPerColumn;
                        for (; M <= J; ) {
                          let i = s ? Math.min(J - M, s) : J;
                          if (i > 0) {
                            for (C = 0; C < x; C++) a[C].pred = 0;
                            if (((S = 0), 1 === x))
                              for (Q = 0, l = a[0]; Q < i; Q++)
                                (function (A, t, i) {
                                  N = (i / A.blocksPerLine) | 0;
                                  let a = i % A.blocksPerLine;
                                  t(A, e2(A, N, a));
                                })(l, c, M),
                                  M++;
                            else
                              for (Q = 0; Q < i; Q++) {
                                for (C = 0; C < x; C++)
                                  for (
                                    B = 0, E = (l = a[C]).h, u = l.v;
                                    B < u;
                                    B++
                                  )
                                    for (h = 0; h < E; h++)
                                      !(function (A, t, i, a, s) {
                                        N = ((i / d) | 0) * A.v + a;
                                        let g = (i % d) * A.h + s;
                                        t(A, e2(A, N, g));
                                      })(l, c, M, B, h);
                                M++;
                              }
                          }
                          if (
                            ((w = 0),
                            !(U = e9(A, t)) ||
                              (U.invalid &&
                                (m(
                                  `decodeScan - ${i > 0 ? 'unexpected' : 'excessive'} MCU data, current marker is: ${U.invalid}`
                                ),
                                (t = U.offset)),
                              !(U.marker >= 65488 && U.marker <= 65495)))
                          )
                            break;
                          t += 2;
                        }
                        return t - p;
                      })(A, s, i, k, a, F, S, R >> 4, 15 & R, D);
                      s += t;
                    } catch (t) {
                      if (t instanceof e$)
                        return (
                          m(
                            `${t.message} -- attempting to re-parse the JPEG image.`
                          ),
                          this.parse(A, { dnlScanLines: t.scanLines })
                        );
                      if (t instanceof e0) {
                        m(
                          `${t.message} -- ignoring the rest of the image data.`
                        );
                        break A;
                      }
                      throw t;
                    }
                    break;
                  case 65500:
                    s += 4;
                    break;
                  case 65535:
                    255 !== A[s] && s--;
                    break;
                  default:
                    let G = e9(A, s - 2, s - 3);
                    if (G?.invalid) {
                      m(
                        'JpegImage.parse - unexpected data, current marker is: ' +
                          G.invalid
                      ),
                        (s = G.offset);
                      break;
                    }
                    if (!G || s >= A.length - 1) {
                      m(
                        'JpegImage.parse - reached the end of the image data without finding an EOI marker (0xFFD9).'
                      );
                      break A;
                    }
                    throw new e_(
                      'JpegImage.parse - unknown marker: ' + C.toString(16)
                    );
                }
                (C = Aw(A, s)), (s += 2);
              }
              if (!i) throw new e_('JpegImage.parse - no frame data found.');
              for (let A of ((this.width = i.samplesPerLine),
              (this.height = i.scanLines),
              (this.jfif = g),
              (this.adobe = r),
              (this.components = []),
              i.components)) {
                let t = o[A.quantizationId];
                t && (A.quantizationTable = t),
                  this.components.push({
                    index: A.index,
                    output: (function (A, t) {
                      let i = t.blocksPerLine,
                        a = t.blocksPerColumn,
                        s = new Int16Array(64);
                      for (let A = 0; A < a; A++)
                        for (let a = 0; a < i; a++)
                          !(function (A, t, i) {
                            let a,
                              s,
                              g,
                              r,
                              n,
                              o,
                              I,
                              l,
                              C,
                              B,
                              h,
                              Q,
                              c,
                              E,
                              u,
                              d,
                              f;
                            let p = A.quantizationTable,
                              m = A.blockData;
                            if (!p)
                              throw new e_(
                                'missing required Quantization Table.'
                              );
                            for (let A = 0; A < 64; A += 8)
                              (C = m[t + A]),
                                (B = m[t + A + 1]),
                                (h = m[t + A + 2]),
                                (Q = m[t + A + 3]),
                                (c = m[t + A + 4]),
                                (E = m[t + A + 5]),
                                (u = m[t + A + 6]),
                                (d = m[t + A + 7]),
                                (C *= p[A]),
                                0 != (B | h | Q | c | E | u | d)
                                  ? ((B *= p[A + 1]),
                                    (h *= p[A + 2]),
                                    (Q *= p[A + 3]),
                                    (c *= p[A + 4]),
                                    (E *= p[A + 5]),
                                    (u *= p[A + 6]),
                                    (d *= p[A + 7]),
                                    (a = (5793 * C + 128) >> 8),
                                    (s = (5793 * c + 128) >> 8),
                                    (g = h),
                                    (r = u),
                                    (n = (2896 * (B - d) + 128) >> 8),
                                    (l = (2896 * (B + d) + 128) >> 8),
                                    (o = Q << 4),
                                    (I = E << 4),
                                    (s = (a = (a + s + 1) >> 1) - s),
                                    (f = (3784 * g + 1567 * r + 128) >> 8),
                                    (g = (1567 * g - 3784 * r + 128) >> 8),
                                    (r = f),
                                    (I = (n = (n + I + 1) >> 1) - I),
                                    (o = (l = (l + o + 1) >> 1) - o),
                                    (r = (a = (a + r + 1) >> 1) - r),
                                    (g = (s = (s + g + 1) >> 1) - g),
                                    (f = (2276 * n + 3406 * l + 2048) >> 12),
                                    (n = (3406 * n - 2276 * l + 2048) >> 12),
                                    (l = f),
                                    (f = (799 * o + 4017 * I + 2048) >> 12),
                                    (o = (4017 * o - 799 * I + 2048) >> 12),
                                    (I = f),
                                    (i[A] = a + l),
                                    (i[A + 7] = a - l),
                                    (i[A + 1] = s + I),
                                    (i[A + 6] = s - I),
                                    (i[A + 2] = g + o),
                                    (i[A + 5] = g - o),
                                    (i[A + 3] = r + n),
                                    (i[A + 4] = r - n))
                                  : ((f = (5793 * C + 512) >> 10),
                                    (i[A] = f),
                                    (i[A + 1] = f),
                                    (i[A + 2] = f),
                                    (i[A + 3] = f),
                                    (i[A + 4] = f),
                                    (i[A + 5] = f),
                                    (i[A + 6] = f),
                                    (i[A + 7] = f));
                            for (let A = 0; A < 8; ++A)
                              (C = i[A]),
                                (B = i[A + 8]),
                                (h = i[A + 16]),
                                (Q = i[A + 24]),
                                (c = i[A + 32]),
                                0 !=
                                (B |
                                  h |
                                  Q |
                                  c |
                                  (E = i[A + 40]) |
                                  (u = i[A + 48]) |
                                  (d = i[A + 56]))
                                  ? ((a = (5793 * C + 2048) >> 12),
                                    (s = (5793 * c + 2048) >> 12),
                                    (g = h),
                                    (r = u),
                                    (n = (2896 * (B - d) + 2048) >> 12),
                                    (l = (2896 * (B + d) + 2048) >> 12),
                                    (o = Q),
                                    (I = E),
                                    (s = (a = 4112 + ((a + s + 1) >> 1)) - s),
                                    (f = (3784 * g + 1567 * r + 2048) >> 12),
                                    (g = (1567 * g - 3784 * r + 2048) >> 12),
                                    (r = f),
                                    (I = (n = (n + I + 1) >> 1) - I),
                                    (o = (l = (l + o + 1) >> 1) - o),
                                    (r = (a = (a + r + 1) >> 1) - r),
                                    (g = (s = (s + g + 1) >> 1) - g),
                                    (f = (2276 * n + 3406 * l + 2048) >> 12),
                                    (n = (3406 * n - 2276 * l + 2048) >> 12),
                                    (l = f),
                                    (f = (799 * o + 4017 * I + 2048) >> 12),
                                    (o = (4017 * o - 799 * I + 2048) >> 12),
                                    (I = f),
                                    (C = a + l),
                                    (d = a - l),
                                    (B = s + I),
                                    (u = s - I),
                                    (h = g + o),
                                    (E = g - o),
                                    C < 16
                                      ? (C = 0)
                                      : C >= 4080
                                        ? (C = 255)
                                        : (C >>= 4),
                                    B < 16
                                      ? (B = 0)
                                      : B >= 4080
                                        ? (B = 255)
                                        : (B >>= 4),
                                    h < 16
                                      ? (h = 0)
                                      : h >= 4080
                                        ? (h = 255)
                                        : (h >>= 4),
                                    (Q = r + n) < 16
                                      ? (Q = 0)
                                      : Q >= 4080
                                        ? (Q = 255)
                                        : (Q >>= 4),
                                    (c = r - n) < 16
                                      ? (c = 0)
                                      : c >= 4080
                                        ? (c = 255)
                                        : (c >>= 4),
                                    E < 16
                                      ? (E = 0)
                                      : E >= 4080
                                        ? (E = 255)
                                        : (E >>= 4),
                                    u < 16
                                      ? (u = 0)
                                      : u >= 4080
                                        ? (u = 255)
                                        : (u >>= 4),
                                    d < 16
                                      ? (d = 0)
                                      : d >= 4080
                                        ? (d = 255)
                                        : (d >>= 4),
                                    (m[t + A] = C),
                                    (m[t + A + 8] = B),
                                    (m[t + A + 16] = h),
                                    (m[t + A + 24] = Q),
                                    (m[t + A + 32] = c),
                                    (m[t + A + 40] = E),
                                    (m[t + A + 48] = u),
                                    (m[t + A + 56] = d))
                                  : ((f =
                                      (f = (5793 * C + 8192) >> 14) < -2040
                                        ? 0
                                        : f >= 2024
                                          ? 255
                                          : (f + 2056) >> 4),
                                    (m[t + A] = f),
                                    (m[t + A + 8] = f),
                                    (m[t + A + 16] = f),
                                    (m[t + A + 24] = f),
                                    (m[t + A + 32] = f),
                                    (m[t + A + 40] = f),
                                    (m[t + A + 48] = f),
                                    (m[t + A + 56] = f));
                          })(t, e2(t, A, a), s);
                      return t.blockData;
                    })(0, A),
                    scaleX: A.h / i.maxH,
                    scaleY: A.v / i.maxV,
                    blocksPerLine: A.blocksPerLine,
                    blocksPerColumn: A.blocksPerColumn,
                  });
              }
              this.numComponents = this.components.length;
            }
            _getLinearizedBlockData(A, t, i = !1) {
              let a;
              let s = this.width / A,
                g = this.height / t,
                r,
                n,
                o,
                I,
                l,
                C,
                B,
                h,
                Q,
                c,
                E,
                u = 0,
                d = this.components.length,
                f = A * t * d,
                p = new Uint8ClampedArray(f),
                m = new Uint32Array(A);
              for (B = 0; B < d; B++) {
                if (
                  ((n = (r = this.components[B]).scaleX * s),
                  (o = r.scaleY * g),
                  (u = B),
                  (E = r.output),
                  (I = (r.blocksPerLine + 1) << 3),
                  n !== a)
                ) {
                  for (l = 0; l < A; l++)
                    (h = 0 | (l * n)),
                      (m[l] = ((4294967288 & h) << 3) | (7 & h));
                  a = n;
                }
                for (C = 0; C < t; C++)
                  for (
                    l = 0,
                      c =
                        (I * (4294967288 & (h = 0 | (C * o)))) | ((7 & h) << 3);
                    l < A;
                    l++
                  )
                    (p[u] = E[c + m[l]]), (u += d);
              }
              let y = this._decodeTransform;
              if (
                (i ||
                  4 !== d ||
                  y ||
                  (y = new Int32Array([
                    -256, 255, -256, 255, -256, 255, -256, 255,
                  ])),
                y)
              )
                for (B = 0; B < f; )
                  for (h = 0, Q = 0; h < d; h++, B++, Q += 2)
                    p[B] = ((p[B] * y[Q]) >> 8) + y[Q + 1];
              return p;
            }
            get _isColorConversionNeeded() {
              return this.adobe
                ? !!this.adobe.transformCode
                : 3 === this.numComponents
                  ? 0 !== this._colorTransform &&
                    (82 !== this.components[0].index ||
                      71 !== this.components[1].index ||
                      66 !== this.components[2].index)
                  : 1 === this._colorTransform;
            }
            _convertYccToRgb(A) {
              let t, i, a;
              for (let s = 0, g = A.length; s < g; s += 3)
                (t = A[s]),
                  (i = A[s + 1]),
                  (a = A[s + 2]),
                  (A[s] = t - 179.456 + 1.402 * a),
                  (A[s + 1] = t + 135.459 - 0.344 * i - 0.714 * a),
                  (A[s + 2] = t - 226.816 + 1.772 * i);
              return A;
            }
            _convertYccToRgba(A, t) {
              for (let i = 0, a = 0, s = A.length; i < s; i += 3, a += 4) {
                let s = A[i],
                  g = A[i + 1],
                  r = A[i + 2];
                (t[a] = s - 179.456 + 1.402 * r),
                  (t[a + 1] = s + 135.459 - 0.344 * g - 0.714 * r),
                  (t[a + 2] = s - 226.816 + 1.772 * g),
                  (t[a + 3] = 255);
              }
              return t;
            }
            _convertYcckToRgb(A) {
              let t,
                i,
                a,
                s,
                g = 0;
              for (let r = 0, n = A.length; r < n; r += 4)
                (t = A[r]),
                  (i = A[r + 1]),
                  (a = A[r + 2]),
                  (s = A[r + 3]),
                  (A[g++] =
                    i *
                      (-0.0000660635669420364 * i +
                        437130475926232e-18 * a -
                        54080610064599e-18 * t +
                        48449797120281e-17 * s -
                        0.154362151871126) -
                    122.67195406894 +
                    a *
                      (-0.000957964378445773 * a +
                        817076911346625e-18 * t -
                        0.00477271405408747 * s +
                        1.53380253221734) +
                    t *
                      (961250184130688e-18 * t -
                        0.00266257332283933 * s +
                        0.48357088451265) +
                    s * (-0.000336197177618394 * s + 0.484791561490776)),
                  (A[g++] =
                    107.268039397724 +
                    i *
                      (219927104525741e-19 * i -
                        640992018297945e-18 * a +
                        659397001245577e-18 * t +
                        426105652938837e-18 * s -
                        0.176491792462875) +
                    a *
                      (-0.000778269941513683 * a +
                        0.00130872261408275 * t +
                        770482631801132e-18 * s -
                        0.151051492775562) +
                    t *
                      (0.00126935368114843 * t -
                        0.00265090189010898 * s +
                        0.25802910206845) +
                    s * (-0.000318913117588328 * s - 0.213742400323665)),
                  (A[g++] =
                    i *
                      (-0.000570115196973677 * i -
                        263409051004589e-19 * a +
                        0.0020741088115012 * t -
                        0.00288260236853442 * s +
                        0.814272968359295) -
                    20.810012546947 +
                    a *
                      (-0.0000153496057440975 * a -
                        132689043961446e-18 * t +
                        560833691242812e-18 * s -
                        0.195152027534049) +
                    t *
                      (0.00174418132927582 * t -
                        0.00255243321439347 * s +
                        0.116935020465145) +
                    s * (-0.000343531996510555 * s + 0.24165260232407));
              return A.subarray(0, g);
            }
            _convertYcckToRgba(A) {
              for (let t = 0, i = A.length; t < i; t += 4) {
                let i = A[t],
                  a = A[t + 1],
                  s = A[t + 2],
                  g = A[t + 3];
                (A[t] =
                  a *
                    (-0.0000660635669420364 * a +
                      437130475926232e-18 * s -
                      54080610064599e-18 * i +
                      48449797120281e-17 * g -
                      0.154362151871126) -
                  122.67195406894 +
                  s *
                    (-0.000957964378445773 * s +
                      817076911346625e-18 * i -
                      0.00477271405408747 * g +
                      1.53380253221734) +
                  i *
                    (961250184130688e-18 * i -
                      0.00266257332283933 * g +
                      0.48357088451265) +
                  g * (-0.000336197177618394 * g + 0.484791561490776)),
                  (A[t + 1] =
                    107.268039397724 +
                    a *
                      (219927104525741e-19 * a -
                        640992018297945e-18 * s +
                        659397001245577e-18 * i +
                        426105652938837e-18 * g -
                        0.176491792462875) +
                    s *
                      (-0.000778269941513683 * s +
                        0.00130872261408275 * i +
                        770482631801132e-18 * g -
                        0.151051492775562) +
                    i *
                      (0.00126935368114843 * i -
                        0.00265090189010898 * g +
                        0.25802910206845) +
                    g * (-0.000318913117588328 * g - 0.213742400323665)),
                  (A[t + 2] =
                    a *
                      (-0.000570115196973677 * a -
                        263409051004589e-19 * s +
                        0.0020741088115012 * i -
                        0.00288260236853442 * g +
                        0.814272968359295) -
                    20.810012546947 +
                    s *
                      (-0.0000153496057440975 * s -
                        132689043961446e-18 * i +
                        560833691242812e-18 * g -
                        0.195152027534049) +
                    i *
                      (0.00174418132927582 * i -
                        0.00255243321439347 * g +
                        0.116935020465145) +
                    g * (-0.000343531996510555 * g + 0.24165260232407)),
                  (A[t + 3] = 255);
              }
              return A;
            }
            _convertYcckToCmyk(A) {
              let t, i, a;
              for (let s = 0, g = A.length; s < g; s += 4)
                (t = A[s]),
                  (i = A[s + 1]),
                  (a = A[s + 2]),
                  (A[s] = 434.456 - t - 1.402 * a),
                  (A[s + 1] = 119.541 - t + 0.344 * i + 0.714 * a),
                  (A[s + 2] = 481.816 - t - 1.772 * i);
              return A;
            }
            _convertCmykToRgb(A) {
              let t,
                i,
                a,
                s,
                g = 0;
              for (let r = 0, n = A.length; r < n; r += 4)
                (t = A[r]),
                  (i = A[r + 1]),
                  (a = A[r + 2]),
                  (s = A[r + 3]),
                  (A[g++] =
                    255 +
                    t *
                      (-0.00006747147073602441 * t +
                        8379262121013727e-19 * i +
                        2894718188643294e-19 * a +
                        0.003264231057537806 * s -
                        1.1185611867203937) +
                    i *
                      (26374107616089405e-21 * i -
                        8626949158638572e-20 * a -
                        2748769067499491e-19 * s -
                        0.02155688794978967) +
                    a *
                      (-0.00003878099212869363 * a -
                        3267808279485286e-19 * s +
                        0.0686742238595345) -
                    s * (3361971776183937e-19 * s + 0.7430659151342254)),
                  (A[g++] =
                    255 +
                    t *
                      (13596372813588848e-20 * t +
                        924537132573585e-18 * i +
                        10567359618683593e-20 * a +
                        4791864687436512e-19 * s -
                        0.3109689587515875) +
                    i *
                      (-0.00023545346108370344 * i +
                        2702845253534714e-19 * a +
                        0.0020200308977307156 * s -
                        0.7488052167015494) +
                    a *
                      (6834815998235662e-20 * a +
                        15168452363460973e-20 * s -
                        0.09751927774728933) -
                    s * (3189131175883281e-19 * s + 0.7364883807733168)),
                  (A[g++] =
                    255 +
                    t *
                      (13598650411385307e-21 * t +
                        12423956175490851e-20 * i +
                        4751985097583589e-19 * a -
                        36729317476630422e-22 * s -
                        0.05562186980264034) +
                    i *
                      (16141380598724676e-20 * i +
                        9692239130725186e-19 * a +
                        7782692450036253e-19 * s -
                        0.44015232367526463) +
                    a *
                      (5068882914068769e-22 * a +
                        0.0017778369011375071 * s -
                        0.7591454649749609) -
                    s * (3435319965105553e-19 * s + 0.7063770186160144));
              return A.subarray(0, g);
            }
            _convertCmykToRgba(A) {
              for (let t = 0, i = A.length; t < i; t += 4) {
                let i = A[t],
                  a = A[t + 1],
                  s = A[t + 2],
                  g = A[t + 3];
                (A[t] =
                  255 +
                  i *
                    (-0.00006747147073602441 * i +
                      8379262121013727e-19 * a +
                      2894718188643294e-19 * s +
                      0.003264231057537806 * g -
                      1.1185611867203937) +
                  a *
                    (26374107616089405e-21 * a -
                      8626949158638572e-20 * s -
                      2748769067499491e-19 * g -
                      0.02155688794978967) +
                  s *
                    (-0.00003878099212869363 * s -
                      3267808279485286e-19 * g +
                      0.0686742238595345) -
                  g * (3361971776183937e-19 * g + 0.7430659151342254)),
                  (A[t + 1] =
                    255 +
                    i *
                      (13596372813588848e-20 * i +
                        924537132573585e-18 * a +
                        10567359618683593e-20 * s +
                        4791864687436512e-19 * g -
                        0.3109689587515875) +
                    a *
                      (-0.00023545346108370344 * a +
                        2702845253534714e-19 * s +
                        0.0020200308977307156 * g -
                        0.7488052167015494) +
                    s *
                      (6834815998235662e-20 * s +
                        15168452363460973e-20 * g -
                        0.09751927774728933) -
                    g * (3189131175883281e-19 * g + 0.7364883807733168)),
                  (A[t + 2] =
                    255 +
                    i *
                      (13598650411385307e-21 * i +
                        12423956175490851e-20 * a +
                        4751985097583589e-19 * s -
                        36729317476630422e-22 * g -
                        0.05562186980264034) +
                    a *
                      (16141380598724676e-20 * a +
                        9692239130725186e-19 * s +
                        7782692450036253e-19 * g -
                        0.44015232367526463) +
                    s *
                      (5068882914068769e-22 * s +
                        0.0017778369011375071 * g -
                        0.7591454649749609) -
                    g * (3435319965105553e-19 * g + 0.7063770186160144)),
                  (A[t + 3] = 255);
              }
              return A;
            }
            getData({
              width: A,
              height: t,
              forceRGBA: i = !1,
              forceRGB: a = !1,
              isSourcePDF: s = !1,
            }) {
              if (this.numComponents > 4)
                throw new e_('Unsupported color mode');
              let g = this._getLinearizedBlockData(A, t, s);
              if (1 === this.numComponents && (i || a)) {
                let A = g.length * (i ? 4 : 3),
                  t = new Uint8ClampedArray(A),
                  a = 0;
                if (i)
                  !(function (A, t) {
                    if (Y.isLittleEndian)
                      for (let i = 0, a = A.length; i < a; i++)
                        t[i] = (65793 * A[i]) | 4278190080;
                    else
                      for (let i = 0, a = A.length; i < a; i++)
                        t[i] = (16843008 * A[i]) | 255;
                  })(g, new Uint32Array(t.buffer));
                else for (let A of g) (t[a++] = A), (t[a++] = A), (t[a++] = A);
                return t;
              }
              if (3 === this.numComponents && this._isColorConversionNeeded) {
                if (i) {
                  let A = new Uint8ClampedArray((g.length / 3) * 4);
                  return this._convertYccToRgba(g, A);
                }
                return this._convertYccToRgb(g);
              }
              if (4 === this.numComponents) {
                if (this._isColorConversionNeeded)
                  return i
                    ? this._convertYcckToRgba(g)
                    : a
                      ? this._convertYcckToRgb(g)
                      : this._convertYcckToCmyk(g);
                if (i) return this._convertCmykToRgba(g);
                if (a) return this._convertCmykToRgb(g);
              }
              return g;
            }
          }
          class e5 extends es {
            constructor(A, t, i) {
              super(t),
                (this.stream = A),
                (this.dict = A.dict),
                (this.maybeLength = t),
                (this.params = i);
            }
            get bytes() {
              return b(this, 'bytes', this.stream.getBytes(this.maybeLength));
            }
            ensureBuffer(A) {}
            readBlock() {
              this.decodeImage();
            }
            decodeImage(A) {
              if (this.eof) return this.buffer;
              A ||= this.bytes;
              for (let t = 0, i = A.length - 1; t < i; t++)
                if (255 === A[t] && 216 === A[t + 1]) {
                  t > 0 && (A = A.subarray(t));
                  break;
                }
              let t = { decodeTransform: void 0, colorTransform: void 0 },
                i = this.dict.getArray('D', 'Decode');
              if ((this.forceRGBA || this.forceRGB) && Array.isArray(i)) {
                let A = this.dict.get('BPC', 'BitsPerComponent') || 8,
                  a = i.length,
                  s = new Int32Array(a),
                  g = !1,
                  r = (1 << A) - 1;
                for (let A = 0; A < a; A += 2)
                  (s[A] = (256 * (i[A + 1] - i[A])) | 0),
                    (s[A + 1] = (i[A] * r) | 0),
                    (256 === s[A] && 0 === s[A + 1]) || (g = !0);
                g && (t.decodeTransform = s);
              }
              if (this.params instanceof Aa) {
                let A = this.params.get('ColorTransform');
                Number.isInteger(A) && (t.colorTransform = A);
              }
              let a = new e3(t);
              a.parse(A);
              let s = a.getData({
                width: this.drawWidth,
                height: this.drawHeight,
                forceRGBA: this.forceRGBA,
                forceRGB: this.forceRGB,
                isSourcePDF: !0,
              });
              return (
                (this.buffer = s),
                (this.bufferLength = s.length),
                (this.eof = !0),
                this.buffer
              );
            }
            get canAsyncDecodeImageFromBuffer() {
              return this.stream.isAsync;
            }
          }
          var e8,
            e6 =
              ((e8 =
                'undefined' != typeof document
                  ? document.currentScript?.src
                  : void 0),
              function (A = {}) {
                new Promise((A, a) => {
                  (t = A), (i = a);
                }),
                  (A.decode = function (
                    t,
                    {
                      numComponents: i = 4,
                      isIndexedColormap: a = !1,
                      smaskInData: s = !1,
                    }
                  ) {
                    let g = t.length,
                      r = A._malloc(g);
                    A.HEAPU8.set(t, r);
                    let n = A._jp2_decode(r, g, i > 0 ? i : 0, !!a, !!s);
                    if ((A._free(r), n)) {
                      let { errorMessages: t } = A;
                      return t ? (delete A.errorMessages, t) : 'Unknown error';
                    }
                    let { imageData: o } = A;
                    return (A.imageData = null), o;
                  });
                var t,
                  i,
                  a,
                  s = Object.assign({}, A),
                  g = './this.program',
                  r = '';
                'undefined' != typeof document &&
                  document.currentScript &&
                  (r = document.currentScript.src),
                  e8 && (r = e8),
                  (r = r.startsWith('blob:')
                    ? ''
                    : r.substr(
                        0,
                        r.replace(/[?#].*/, '').lastIndexOf('/') + 1
                      ));
                var n,
                  o,
                  I,
                  l,
                  C,
                  B = A.print || console.log.bind(console),
                  h = A.printErr || console.error.bind(console);
                function Q() {
                  var t = o.buffer;
                  (A.HEAP8 = I = new Int8Array(t)),
                    (A.HEAP16 = new Int16Array(t)),
                    (A.HEAPU8 = l = new Uint8Array(t)),
                    (A.HEAPU16 = new Uint16Array(t)),
                    (A.HEAP32 = new Int32Array(t)),
                    (A.HEAPU32 = C = new Uint32Array(t)),
                    (A.HEAPF32 = new Float32Array(t)),
                    (A.HEAPF64 = new Float64Array(t));
                }
                Object.assign(A, s),
                  (s = null),
                  A.arguments && A.arguments,
                  A.thisProgram && (g = A.thisProgram),
                  A.quit && A.quit,
                  A.wasmBinary && (n = A.wasmBinary);
                var c,
                  E = [],
                  u = [],
                  d = [],
                  f = 0,
                  p = null,
                  m = null,
                  y = 'data:application/octet-stream;base64,',
                  w = (A) => A.startsWith(y),
                  D = (t) => {
                    for (; t.length > 0; ) t.shift()(A);
                  };
                A.noExitRuntime;
                var b,
                  k = (A) => {
                    var t = (A - o.buffer.byteLength + 65535) / 65536;
                    try {
                      return o.grow(t), Q(), 1;
                    } catch (A) {}
                  },
                  F = {},
                  S = () => {
                    if (!S.strings) {
                      var A = {
                        USER: 'web_user',
                        LOGNAME: 'web_user',
                        PATH: '/',
                        PWD: '/',
                        HOME: '/home/web_user',
                        LANG:
                          (
                            ('object' == typeof navigator &&
                              navigator.languages &&
                              navigator.languages[0]) ||
                            'C'
                          ).replace('-', '_') + '.UTF-8',
                        _: g || './this.program',
                      };
                      for (var t in F)
                        void 0 === F[t] ? delete A[t] : (A[t] = F[t]);
                      var i = [];
                      for (var t in A) i.push(`${t}=${A[t]}`);
                      S.strings = i;
                    }
                    return S.strings;
                  },
                  R = [null, [], []],
                  G =
                    'undefined' != typeof TextDecoder
                      ? new TextDecoder('utf8')
                      : void 0,
                  N = (A, t, i) => {
                    for (var a = t + i, s = t; A[s] && !(s >= a); ) ++s;
                    if (s - t > 16 && A.buffer && G)
                      return G.decode(A.subarray(t, s));
                    for (var g = ''; t < s; ) {
                      var r = A[t++];
                      if (128 & r) {
                        var n = 63 & A[t++];
                        if (192 != (224 & r)) {
                          var o = 63 & A[t++];
                          if (
                            (r =
                              224 == (240 & r)
                                ? ((15 & r) << 12) | (n << 6) | o
                                : ((7 & r) << 18) |
                                  (n << 12) |
                                  (o << 6) |
                                  (63 & A[t++])) < 65536
                          )
                            g += String.fromCharCode(r);
                          else {
                            var I = r - 65536;
                            g += String.fromCharCode(
                              55296 | (I >> 10),
                              56320 | (1023 & I)
                            );
                          }
                        } else g += String.fromCharCode(((31 & r) << 6) | n);
                      } else g += String.fromCharCode(r);
                    }
                    return g;
                  },
                  x = (A, t) => {
                    var i = R[A];
                    0 === t || 10 === t
                      ? ((1 === A ? B : h)(N(i, 0)), (i.length = 0))
                      : i.push(t);
                  },
                  U = (A, t) => (A ? N(l, A, t) : ''),
                  M = {
                    c: (A, t, i) => l.copyWithin(A, t, t + i),
                    g: function (t, i) {
                      t >>= 2;
                      let a = (A.imageData = new Uint8ClampedArray(i)),
                        s = A.HEAP32.subarray(t, t + i);
                      a.set(s);
                    },
                    f: function (t, i, a, s) {
                      (t >>= 2), (i >>= 2), (a >>= 2);
                      let g = (A.imageData = new Uint8ClampedArray(3 * s)),
                        r = A.HEAP32.subarray(t, t + s),
                        n = A.HEAP32.subarray(i, i + s),
                        o = A.HEAP32.subarray(a, a + s);
                      for (let A = 0; A < s; A++)
                        (g[3 * A] = r[A]),
                          (g[3 * A + 1] = n[A]),
                          (g[3 * A + 2] = o[A]);
                    },
                    e: function (t, i, a, s, g) {
                      (t >>= 2), (i >>= 2), (a >>= 2), (s >>= 2);
                      let r = (A.imageData = new Uint8ClampedArray(4 * g)),
                        n = A.HEAP32.subarray(t, t + g),
                        o = A.HEAP32.subarray(i, i + g),
                        I = A.HEAP32.subarray(a, a + g),
                        l = A.HEAP32.subarray(s, s + g);
                      for (let A = 0; A < g; A++)
                        (r[4 * A] = n[A]),
                          (r[4 * A + 1] = o[A]),
                          (r[4 * A + 2] = I[A]),
                          (r[4 * A + 3] = l[A]);
                    },
                    k: (A) => {
                      var t = l.length;
                      if ((A >>>= 0) > 2147483648) return !1;
                      for (var i, a = 1; a <= 4; a *= 2) {
                        var s = t * (1 + 0.2 / a);
                        if (
                          ((s = Math.min(s, A + 100663296)),
                          k(
                            Math.min(
                              2147483648,
                              (i = Math.max(A, s)) +
                                ((65536 - (i % 65536)) % 65536)
                            )
                          ))
                        )
                          return !0;
                      }
                      return !1;
                    },
                    l: (A, t) => {
                      var i = 0;
                      return (
                        S().forEach((a, s) => {
                          var g = t + i;
                          (C[(A + 4 * s) >> 2] = g),
                            ((A, t) => {
                              for (var i = 0; i < A.length; ++i)
                                I[t++] = A.charCodeAt(i);
                              I[t] = 0;
                            })(a, g),
                            (i += a.length + 1);
                        }),
                        0
                      );
                    },
                    m: (A, t) => {
                      var i = S();
                      C[A >> 2] = i.length;
                      var a = 0;
                      return (
                        i.forEach((A) => (a += A.length + 1)),
                        (C[t >> 2] = a),
                        0
                      );
                    },
                    n: (A) => 52,
                    j: function (A, t, i, a, s) {
                      return 70;
                    },
                    b: (A, t, i, a) => {
                      for (var s = 0, g = 0; g < i; g++) {
                        var r = C[t >> 2],
                          n = C[(t + 4) >> 2];
                        t += 8;
                        for (var o = 0; o < n; o++) x(A, l[r + o]);
                        s += n;
                      }
                      return (C[a >> 2] = s), 0;
                    },
                    o: function (t, i) {
                      t >>= 2;
                      let a = (A.imageData = new Uint8ClampedArray(4 * i)),
                        s = A.HEAP32.subarray(t, t + i);
                      for (let A = 0; A < i; A++)
                        (a[4 * A] = a[4 * A + 1] = a[4 * A + 2] = s[A]),
                          (a[4 * A + 3] = 255);
                    },
                    i: function (t, i, a) {
                      (t >>= 2), (i >>= 2);
                      let s = (A.imageData = new Uint8ClampedArray(4 * a)),
                        g = A.HEAP32.subarray(t, t + a),
                        r = A.HEAP32.subarray(i, i + a);
                      for (let A = 0; A < a; A++)
                        (s[4 * A] = s[4 * A + 1] = s[4 * A + 2] = g[A]),
                          (s[4 * A + 3] = r[A]);
                    },
                    d: function (t) {
                      let i = U(t);
                      (A.warn || console.warn)(`OpenJPEG: ${i}`);
                    },
                    h: function (t, i, a, s) {
                      (t >>= 2), (i >>= 2), (a >>= 2);
                      let g = (A.imageData = new Uint8ClampedArray(4 * s)),
                        r = A.HEAP32.subarray(t, t + s),
                        n = A.HEAP32.subarray(i, i + s),
                        o = A.HEAP32.subarray(a, a + s);
                      for (let A = 0; A < s; A++)
                        (g[4 * A] = r[A]),
                          (g[4 * A + 1] = n[A]),
                          (g[4 * A + 2] = o[A]),
                          (g[4 * A + 3] = 255);
                    },
                    a: function (t) {
                      let i = U(t);
                      A.errorMessages
                        ? (A.errorMessages += '\n' + i)
                        : (A.errorMessages = i);
                    },
                  },
                  J = (function () {
                    var t,
                      s,
                      g = { a: M };
                    function r(t, i) {
                      var a;
                      return (
                        (o = (J = t.exports).p),
                        Q(),
                        (a = J.q),
                        u.unshift(a),
                        (function () {
                          if (
                            (f--,
                            A.monitorRunDependencies?.(f),
                            0 == f &&
                              (null !== p && (clearInterval(p), (p = null)), m))
                          ) {
                            var t = m;
                            (m = null), t();
                          }
                        })(),
                        J
                      );
                    }
                    if ((f++, A.monitorRunDependencies?.(f), A.instantiateWasm))
                      try {
                        return A.instantiateWasm(g, r);
                      } catch (A) {
                        h(
                          `Module.instantiateWasm callback failed with error: ${A}`
                        ),
                          i(A);
                      }
                    return (
                      c ||
                        (c =
                          'data:application/octet-stream;base64,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A0kNAAsLAkAgA0F8cSIEQcAASQ0AIAIgBEFAaiIFSw0AA0AgAiABKAIANgIAIAIgASgCBDYCBCACIAEoAgg2AgggAiABKAIMNgIMIAIgASgCEDYCECACIAEoAhQ2AhQgAiABKAIYNgIYIAIgASgCHDYCHCACIAEoAiA2AiAgAiABKAIkNgIkIAIgASgCKDYCKCACIAEoAiw2AiwgAiABKAIwNgIwIAIgASgCNDYCNCACIAEoAjg2AjggAiABKAI8NgI8IAFBQGshASACQUBrIgIgBU0NAAsLIAIgBE8NAQNAIAIgASgCADYCACABQQRqIQEgAkEEaiICIARJDQALDAELIANBBEkEQCAAIQIMAQsgACADQQRrIgRLBEAgACECDAELIAAhAgNAIAIgAS0AADoAACACIAEtAAE6AAEgAiABLQACOgACIAIgAS0AAzoAAyABQQRqIQEgAkEEaiICIARNDQALCyACIANJBEADQCACIAEtAAA6AAAgAUEBaiEBIAJBAWoiAiADRw0ACwsgAAswAQF/AkAgAEUNACABRQ0AQQggACABbCIBECUiAARAIABBACABEBUaCyAAIQILIAILEQAgAEUEQEEADwtBCCAAECUL8gICAn8BfgJAIAJFDQAgACABOgAAIAAgAmoiA0EBayABOgAAIAJBA0kNACAAIAE6AAIgACABOgABIANBA2sgAToAACADQQJrIAE6AAAgAkEHSQ0AIAAgAToAAyADQQRrIAE6AAAgAkEJSQ0AIABBACAAa0EDcSIEaiIDIAFB/wFxQYGChAhsIgE2AgAgAyACIARrQXxxIgRqIgJBBGsgATYCACAEQQlJDQAgAyABNgIIIAMgATYCBCACQQhrIAE2AgAgAkEMayABNgIAIARBGUkNACADIAE2AhggAyABNgIUIAMgATYCECADIAE2AgwgAkEQayABNgIAIAJBFGsgATYCACACQRhrIAE2AgAgAkEcayABNgIAIAQgA0EEcUEYciIEayICQSBJDQAgAa1CgYCAgBB+IQUgAyAEaiEBA0AgASAFNwMYIAEgBTcDECABIAU3AwggASAFNwMAIAFBIGohASACQSBrIgJBH0sNAAsLIAALJwEBfyMAQRBrIgMkACADIAI2AgwgACABIAJBAEEAEGsgA0EQaiQAC+gFAQl/IAFFBEBBAA8LAn8gAEUE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ACAEIE5BCmpBAiAFEBpBAkcEQCAFQQFBAiAAKAK4ARtBlhJBABAPIAAoArgBRSFnDAELIE5BCmogTkEMakECEBEgTigCDCIBQZD/A0YNACABQdn/A0YEQCAAQYACNgIIIABBADYCzAEMAQsgBCkDCCKGAVAEfkIABSCGASAEKQM4fQtQBEAgAEHAADYCCCAFQQJBrD9BABAPDAELQQAhZyAFQQFB7D5BABAPCyBOQRBqJAAgZwsLACAABEAgABAQCwu0AQEBfyAAKAIMRQRAIAIgACgCJCABEQMADwsCQEEIEBQiA0UNACADIAI2AgQgAyABNgIAQQgQFCIBRQRAIAMQEA8LIAEgAzYCACAAIAAoAgRB5ABsIgI2AigDQCAAKAIYIAJKDQALIAEgACgCFDYCBCAAIAE2AhQgACAAKAIYQQFqNgIYIAAoAhwiAUUNACABKAIAQQA2AgggACABKAIENgIcIAAgACgCIEEBazYCICABEBALC/oCAQR/AkAgAEUNACAAKAKsKCIBBEAgACgCqCgiAgRAQQAhAQNAIAAoAqwoIAFBA3RqKAIAIgMEQCADEBAgACgCqCghAgsgAUEBaiIBIAJJDQALIAAoAqwoIQELIABBADYCqCggARAQIABBADYCrCgLIAAoArQoIgEEQCABEBAgAEEANgK0KAsgACgC0CsiAQRAIAEQECAAQQA2AtArCyAAKALsKyIBBEAgARAQIABBADYC7CsLIAAoAugrIgEEQCABEBAgAEEANgLoKwsgACgC/CsiAQRAIAEQECAAQQA2AoQsIABCADcC/CsLIAAoAvArIgEEQCAAKAL0KyIDBH9BACECA0AgASgCDCIEBEAgBBAQIAFBADYCDCAAKAL0KyEDCyABQRRqIQEgAkEBaiICIANJDQALIAAoAvArBSABCxAQIABBADYC8CsLIAAoAuQrIgEEQCABEBAgAEEANgLkKwsgACgC3CsiAUUNACABEBAgAEIANwLcKwsLyAcCEX8BfiAAKAIQIghBIE8EQCAAKQMIpw8LAkAgACgCFCIDQQROBEAgACgCACICQQNrKAIAIQEgACADQQRrIgM2AhQgACACQQRrNgIADAELIANBAEwEQAwBCyADQQFxIQ0gACgCACECAkAgA0EBRgRAQRghBAwBCyADQf7///8HcSEJQRghBANAIAAgAkEB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IABBADYCiAEgACgCZBAQIABBADYCZCAALQC8AUECcUUEQCAAKAKoARAQCyAAQdAAakEAQfAAEBUaIAAoAsABEDIgAEEANgLAASAAKALEARAyIABBADYCwAEgACgCyAEiAQRAIAEoAhwiAgRAIAIQECABQQA2AhwLIAEoAigiAgRAIAEoAiQEQANAIAIgBUEobCIDaigCJCIEBEAgBBAQIAEoAigiAiADakEANgIkCyACIANqKAIQIgQEQCAEEBAgASgCKCICIANqQQA2AhALIAIgA2ooAhgiBARAIAQQECABKAIoIgIgA2pBADYCGAsgBUEBaiIFIAEoAiRJDQALCyACEBAgAUEANgIoCyABEBALIABBADYCyAEgACgCSBAhIABBADYCSCAAKAJMECEgAEEANgJMIAAoAtQBIgMEQAJAIAMoAghFDQAgAygCDARAIANBADYCKANAIAMoAhhBAEoNAAsLIANBATYCECADKAIAEBAgAygCHCICRQ0AA0AgAigCBCEBIAIQECADIAE2AhwgASICDQALCyADKAIkIgIEQCACKAIEIgVBAEoEQEEAIQEDQCACKAIAIAFBDGxqIgQoAggiBgRAIAQoAgQgBhECACACKAIEIQULIAFBAWoiASAFSA0ACwsgAigCABAQIAIQEAsgAxAQCyAAQQA2AtQBIAAQEAsL5gMCCH8EfiAAKAIUKAIAKAIUIAFBzABsaiIJKAIMIgggACgCGCgCGCABQTRsaiIKNQIEIhBCAX0iEiAANQI8fCAQgKciCyAIIAtJGyEMIAkoAggiCCAKNQIAIhFCAX0iEyAANQI4fCARgKciCiAIIApJGyEKIAkoAgQiCCASIAA1AjR8IBCApyILIAggC0sbIQsgCSgCACIIIBMgADUCMHwgEYCnIg0gCCANSxshDUEAIQggACgCICgC0CsgAUG4CGxqKAIUIQ4CQCAJKAIUQQAgAmtBfyACG2oiAkUEQCAKIQAgDSEIIAshAQwBCyADQQFxIAJBAWsiD3QiCSANSQRAIA0gCWutQn8gAq0iEIZCf4V8IBCIpyEIC0EAIQBBACEBIANBAXYgD3QiAyALSQRAIAsgA2utQn8gAq0iEIZCf4V8IBCIpyEBCyAJIApJBEAgCiAJa61CfyACrSIQhkJ/hXwgEIinIQALIAMgDE8EQEEAIQwMAQsgDCAD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IABBADYCPCAAQucHNwI0IABBADYCLCAAQucHNwIkIABBADYCHCAAQucHNwIUIABBADYCDCAAQucHNwIEIABBQGshACACQQRqIgIgA0cNAAsLIAFBA3EiAUUNAEEAIQIDQCAAQQA2AgwgAELnBzcCBCAAQRBqIQAgAkEBaiICIAFHDQALCwv7BQEQfyMAQYACayIIJAACf0EBQRQQEyIGRQRAIAJBAUH0MEEAEA9BAAwBCyAGIAE2AgQgBiAANgIAIAggATYCACAIIAA2AoABA0AgCCAFIg1BAWoiBUECdCIHaiABQQFqQQJtIgM2AgAgCEGAAWogB2ogAEEBakECbSIHNgIAIAQgACABbCIJaiEEIAMhASAHIQAgCUEBSw0ACyAGIAQ2AgggBEUEQCAGEBBBAAwBCyAGIARBEBATIgM2AgwgA0UEQCACQQFB2hpBABAPIAYQEEEADAELIAYgBigCCCILQQR0NgIQIAMhACANBEAgAyAGKAIEIAYoAgBsQQR0aiIEIQEDQAJAIAggDkECdCICaigCACIJQQBMDQAgCUEBayEMQQAhBwJAIAhBgAFqIAJqKAIAIgJBAEwEQEEAIQUgCUEBRwRAIAlB/v///wdxIQoDQCAFIAxGIQ8gBUECaiEFIAEgBCAPGyIEIQEgB0ECaiIHIApHDQALCyAJQQFxDQEgBCEBDAILA0AgBCEFIAIhBANAAkAgACABNgIAIARBAUYEQCAAQRBqIQAgAUEQaiEBDAELIAAgATYCECABQRBqIQEgAEEgaiEAIARBAkohECAEQQJrIQQgEA0BCwsgASAFIAJBBHRqIAcgByAMRnJBAXEiChshBCABIAUgChshASAHQQFqIgcgCUcNAAsMAQsgASAEIAJBBHRqIAUgBSAMRnJBAXEiBRshESABIAQgBRshASARIQQLIA5BAWoiDiANRw0ACwsgAEEANgIAAkAgC0UNACALQQRPBEAgC0F8cSEAQQAhAQNAIANBADYCPCADQucHNwI0IANBADYCLCADQucHNwIkIANBADYCHCADQucHNwIUIANBADYCDCADQucHNwIEIANBQGshAyABQQRqIgEgAEcNAAsLIAtBA3EiAEUNAEEAIQEDQCADQQA2AgwgA0LnBzcCBCADQRBqIQMgAUEBaiIBIABHDQALCyAGCyESIAhBgAJqJAAgEgtTAQF/An8gAC0ADEH/AUYEQCAAQoD+g4DwADcCDEEAIAAoAggiASAAKAIETw0BGiAAIAFBAWo2AgggACABLQAAQYD+A3I2AgwLIABBADYCEEEBCwt+AgF/AX4gAL0iA0I0iKdB/w9xIgJB/w9HBHwgAkUEQCABIABEAAAAAAAAAABhBH9BAAUgAEQAAAAAAADwQ6IgARBlIQAgASgCAEFAags2AgAgAA8LIAEgAkH+B2s2AgAgA0L/////////h4B/g0KAgICAgICA8D+EvwUgAAsLSQEBfwJAQQFBLBATIgEEQCABQQA2AhACQCAAQQBMBEAgAUEBQQgQEyIANgIkIABFDQEMAwsgAUEANgIMCyABEBALQQAhAQsgAQuRAgAgAEUEQEEADwsCfwJAIAFB/wBNDQACQEGU0AEoAgAoAgBFBEAgAUGAf3FBgL8DRg0CDAELIAFB/w9NBEAgACABQT9xQYABcjoAASAAIAFBBnZBwAFyOgAAQQIMAwsgAUGAQHFBgMADRyABQYCwA09xRQRAIAAgAUE/cUGAAXI6AAIgACABQQx2QeABcjoAACAAIAFBBnZBP3FBgAFyOgABQQMMAwsgAUGAgARrQf//P00EQCAAIAFBP3FBgAFyOgADIAAgAUESdkHwAXI6AAAgACABQQZ2QT9xQYABcjoAAiAAIAFBDHZBP3FBgAFyOgABQQQMAwsLQZTHAUEZNgIAQX8MAQsgACABOgAAQQELC7wCAAJAAkACQAJAAkACQAJAAkACQAJAAkAgAUEJaw4SAAgJCggJAQIDBAoJCgoICQUGBwsgAiACKAIAIgFBBGo2AgAgACABKAIANgIADwsgAiACKAIAIgFBBGo2AgAgACABMgEANwMADwsgAiACKAIAIgFBBGo2AgAgACABMwEANwMADwsgAiACKAIAIgFBBGo2AgAgACABMAAANwMADwsgAiACKAIAIgFBBGo2AgAgACABMQAANwMADwsgAiACKAIAQQdqQXhxIgFBCGo2AgAgACABKwMAOQMADwsgACACIAMRAwALDwsgAiACKAIAIgFBBGo2AgAgACABNAIANwMADwsgAiACKAIAIgFBBGo2AgAgACABNQIANwMADwsgAiACKAIAQQdqQXhxIgFBCGo2AgAgACABKQMANwMAC3MBBn8gACgCACIDLAAAQTBrIgFBCUsE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AyAAQRh2NgIUIAMgBDYCECADIABBCHZB/wFxNgIcIAMgAEEQdkH/AXE2AhggAkEBQc31ACADQRBqEA8MBwsgBSAITQRAIAYhBAwECyAFIQggBiAFEBciBA0DIAYQECACQQFB/w9BABAPQQAMBwsgBEECcUUEQCACQQFBwg9BABAPIAYQEEEADAcLIAAgBEH/////B3I2AmQgASAHIAVrrSINIAIgASgCKBEIACANUQ0DIAAtAGRBCHFFDQEgAkECQZIcQQAQDwsgBhAQQQEMBQsgAkEBQZIcQQAQDyAGEBBBAAwECyABIAQgBSACEBogBUcEQCACQQFBxBxBABAPIAQQEEEADAQLIAAgBCIGIAUgAiAKKAIEEQEADQALIAQQEEEADAILIAJBAUGiJUEAEA9BAAwBCyAGEBBBAAshDCADQfAAaiQAIAwL5gEBBn8gACgCCEE1IAIQJARAAkAgACgCCCIGKAIAIQMgBigCCCEFAkACQAJ/AkAgAwRAQQEhBCADQQFxIQcgA0EBRw0BQQAMAgsgBkEANgIADAILIANBfnEhAwNAAn9BACAERQ0AGkEAIAAgASACIAUoAgARAABFDQAaIAAgASACIAUoAgQRAABBAEcLIQQgBUEIaiEFIAhBAmoiCCADRw0ACyAERQshAyAHBEAgAw0CIAAgASACIAUoAgARAABBAEchBAsgBkEANgIAIARFDQILIAAoAgAaQQEPCyAGQQA2AgALC0EACwoAIAAoAgAaQQALFAAgACgCACIABEAgACABNgK4AQsLIQAgACgCACABEFMgAEEAOgB8IAAgASgCuEBBAXE2AoABCzIAIAJFBEBBAA8LIAAoAgAgASACIAMQSEUEQCADQQFBqS9BABAPQQAPCyAAIAIgAxBxC2kCAn8BfCMAQRBrIgMkACACBEADQCAAIANBCGoQRCABAn8gAysDCCIFmUQAAAAAAADgQWMEQCAFqgwBC0GAgICAeAs2AgAgAUEEaiEBIABBCGohACAEQQFqIgQgAkcNAAsLIANBEGokAAuEAQICfwF9IwBBEGsiAyQAIAIEQANAIAMgAC0AADoADyADIAAtAAE6AA4gAyAALQACOgANIAMgAC0AAzoADCABAn8gAyoCDCIFi0MAAABPXQRAIAWoDAELQYCAgIB4CzYCACABQQRqIQEgAEEEaiEAIARBAWoiBCACRw0ACwsgA0EQaiQAC0sBAn8jAEEQayIDJAAgAgRAA0AgACADQQxqQQQQESABIAMoAgw2AgAgAUEEaiEBIABBBGohACAEQQFqIgQgAkcNAAsLIANBEGokAAtLAQJ/IwBBEGsiAyQAIAIEQANAIAAgA0EMakECEBEgASADKAIMNgIAIAFBBGohASAAQQJqIQAgBEEBaiIEIAJHDQALCyADQRBqJAALSgECfyMAQRBrIgMkACACBEADQCAAIANBCGoQRCABIAMrAwi2OAIAIAFBBGohASAAQQhqIQAgBEEBaiIEIAJHDQALCyADQRBqJAALaAECfyMAQRBrIgMkACACBEADQCADIAAtAAA6AA8gAyAALQABOgAOIAMgAC0AAjoADSADIAAtAAM6AAwgASADKgIMOAIAIAFBBGohASAAQQRqIQAgBEEBaiIEIAJHDQALCyADQRBqJAALTAECfyMAQRBrIgMkACACBEADQCAAIANBDGpBBBARIAEgAygCDLM4AgAgAUEEaiEBIABBBGohACAEQQFqIgQgAkcNAAsLIANBEGokAAtMAQJ/IwBBEGsiAyQAIAIEQANAIAAgA0EMakECEBEgASADKAIMszgCACABQQRqIQEgAEECaiEAIARBAWoiBCACRw0ACwsgA0EQaiQAC6oIAg1/AXsjAEEQayIIJAACfyAAKAIIQRBGBEAgACgCnAEgACgCzAFBjCxsagwBCyAAKAIMCyEJAkAgAkUEQCADQQFB8B9BABAPDAELIAAoAkghBkEBIQQgASAIQQhqQQEQESAIKAIIIgVBAk8EQCADQQJBxsgAQQAQDwwBCyACIAVBAWpHBEBBACEEIANBAkHwH0EAEA8MAQsCQCAGKAIQIgNFDQAgCSgC0CshBCADQQhPBEAgA0F4cSEGQQAhAgNAIARBADYCvEMgBEEANgKEOyAEQQA2AswyIARBADYClCogBEEANgLcISAEQQA2AqQZIARBADYC7BAgBEEANgK0CCAEQcDDAGohBCACQQhqIgIgBkcNAAsLIANBB3EiA0UNAEEAIQIDQCAEQQA2ArQIIARBuAhqIQQgAkEBaiICIANHDQALCyAJKALoKyICBH8gAhAQIAlBADYC6CsgCCgCCAUgBQtFBEBBASEEDAELA0AgAUEBaiIBIAhBDGpBARARAkAgCSgCgCxF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KT0ALgAobnVsbCkAKCVkLCVkKSAAJXN9CgAJCSB9CgBbREVWXSBEdW1wIGFuIGltYWdlX2NvbXBfaGVhZGVyIHN0cnVjdCB7CgBbREVWXSBEdW1wIGFuIGltYWdlX2hlYWRlciBzdHJ1Y3QgewoASW1hZ2UgaW5mbyB7CgAJIGRlZmF1bHQgdGlsZSB7CgAlcwkgY29tcG9uZW50ICVkIHsKAAkJIGNvbXAgJWQgewoACSBUaWxlIGluZGV4OiB7CgAJIE1hcmtlciBsaXN0OiB7CgBDb2Rlc3RyZWFtIGluZGV4IGZyb20gbWFpbiBoZWFkZXI6IHsKAENvZGVzdHJlYW0gaW5mbyBmcm9tIG1haW4gaGVhZGVyOiB7CgBTdHJlYW0gZXJyb3Igd2hpbGUgcmVhZGluZyBKUDIgSGVhZGVyIGJveAoARm91bmQgYSBtaXNwbGFjZWQgJyVjJWMlYyVjJyBib3ggb3V0c2lkZSBqcDJoIGJveAoATWFsZm9ybWVkIEpQMiBmaWxlIGZvcm1hdDogZmlyc3QgYm94IG11c3QgYmUgSlBFRyAyMDAwIHNpZ25hdHVyZSBib3gKAE1hbGZvcm1lZCBKUDIgZmlsZSBmb3JtYXQ6IHNlY29uZCBib3ggbXVzdCBiZSBmaWxlIHR5cGUgYm94CgBOb3QgZW5vdWdoIG1lbW9yeSB0byBoYW5kbGUganBlZzIwMDAgYm94CgBOb3QgZW5vdWdoIG1lbW9yeSB3aXRoIEZUWVAgQm94CgBBIG1hcmtlciBJRCB3YXMgZXhwZWN0ZWQgKDB4ZmYtLSkgaW5zdGVhZCBvZiAlLjh4CgAJCSBtY3Q9JXgKAAkJCSBjYmxrc3R5PSUjeAoACQkJIGNzdHk9JSN4CgAJCSBwcmc9JSN4CgBJbnRlZ2VyIG92ZXJmbG93CgAJIHRkeD0ldSwgdGR5PSV1CgAJIHR3PSV1LCB0aD0ldQoACSB0eDA9JXUsIHR5MD0ldQoASW52YWxpZCBjb21wb25lbnQgaW5kZXg6ICV1CgBTdHJlYW0gdG9vIHNob3J0CgBNYXJrZXIgaGFuZGxlciBmdW5jdGlvbiBmYWlsZWQgdG8gcmVhZCB0aGUgbWFya2VyIHNlZ21lbnQKAE5vdCBlbm91Z2ggbWVtb3J5IGZvciBjdXJyZW50IHByZWNpbmN0IGNvZGVibG9jayBlbGVtZW50CgBFcnJvciByZWFkaW5nIFNQQ29kIFNQQ29jIGVsZW1lbnQKAEVycm9yIHJlYWRpbmcgU1FjZCBvciBTUWNjIGVsZW1lbnQKAEEgQlBDQyBoZWFkZXIgYm94IGlzIGF2YWlsYWJsZSBhbHRob3VnaCBCUEMgZ2l2ZW4gYnkgdGhlIElIRFIgYm94ICglZCkgaW5kaWNhdGUgY29tcG9uZW50cyBiaXQgZGVwdGggaXMgY29uc3RhbnQKAEVycm9yIHdpdGggU0laIG1hcmtlcjogaWxsZWdhbCB0aWxlIG9mZnNldAoASW52YWxpZCBwcmVjaW5jdAoATm90IGVub3VnaCBtZW1vcnkgdG8gaGFuZGxlIGJhbmQgcHJlY2ludHMKAEZhaWxlZCB0byBkZWNvZGUgYWxsIHVzZWQgY29tcG9uZW50cwoAU2l6ZSBvZiBjb2RlIGJsb2NrIGRhdGEgZXhjZWVkcyBzeXN0ZW0gbGltaXRzCgBTaXplIG9mIHRpbGUgZGF0YSBleGNlZWRzIHN5c3RlbSBsaW1pdHMKAENhbm5vdCB0YWtlIGluIGNoYXJnZSBtdWx0aXBsZSBNQ1QgbWFya2VycwoAQ29ycnVwdGVkIFBQTSBtYXJrZXJzCgBOb3QgZW5vdWdoIG1lbW9yeSBmb3IgdGlsZSByZXNvbHV0aW9ucwoAQ2Fubm90IHRha2UgaW4gY2hhcmdlIG11bHRpcGxlIGNvbGxlY3Rpb25zCgBJbnZhbGlkIFBDTFIgYm94LiBSZXBvcnRzIDAgcGFsZXR0ZSBjb2x1bW5zCgBXZSBkbyBub3Qgc3VwcG9ydCBST0kgaW4gZGVjb2RpbmcgSFQgY29kZWJsb2NrcwoAQ2Fubm90IGhhbmRsZSBib3ggb2YgdW5kZWZpbmVkIHNpemVzCgBDYW5ub3QgdGFrZSBpbiBjaGFyZ2UgY29sbGVjdGlvbnMgd2l0aG91dCBzYW1lIG51bWJlciBvZiBpbmRpeGVzCgBJbnZhbGlkIHRpbGVjLT53aW5feHh4IHZhbHVlcwoAQ2Fubm90IGhhbmRsZSBib3ggb2YgbGVzcyB0aGFuIDggYnl0ZXMKAENhbm5vdCBoYW5kbGUgWEwgYm94IG9mIGxlc3MgdGhhbiAxNiBieXRlcwoAQ29tcG9uZW50IGluZGV4ICV1IHVzZWQgc2V2ZXJhbCB0aW1lcwoASW52YWxpZCBQQ0xSIGJveC4gUmVwb3J0cyAlZCBlbnRyaWVzCgBOb3QgZW5vdWdoIG1lbW9yeSB0byBjcmVhdGUgVGFnLXRyZWUgbm9kZXMKAENhbm5vdCB0YWtlIGluIGNoYXJnZSBtY3QgZGF0YSB3aXRoaW4gbXVsdGlwbGUgTUNUIHJlY29yZHMKAENhbm5vdCBkZWNvZGUgdGlsZSwgbWVtb3J5IGVycm9yCgBvcGpfajJrX2FwcGx5X25iX3RpbGVfcGFydHNfY29ycmVjdGlvbiBlcnJvcgoAUHJvYmxlbSB3aXRoIHNraXBwaW5nIEpQRUcyMDAwIGJveCwgc3RyZWFtIGVycm9yCgBQcm9ibGVtIHdpdGggcmVhZGluZyBKUEVHMjAwMCBib3gsIHN0cmVhbSBlcnJvcgoAVW5rbm93biBtYXJrZXIKAE5vdCBlbm91Z2ggbWVtb3J5IHRvIGFkZCB0bCBtYXJrZXIKAE5vdCBlbm91Z2ggbWVtb3J5IHRvIGFkZCBtaCBtYXJrZXIKAE5vdCBlbm91Z2ggbWVtb3J5IHRvIHRha2UgaW4gY2hhcmdlIFNJWiBtYXJrZXIKAEVycm9yIHJlYWRpbmcgUFBUIG1hcmtlcgoATm90IGVub3VnaCBtZW1vcnkgdG8gcmVhZCBQUFQgbWFya2VyCgBFcnJvciByZWFkaW5nIFNPVCBtYXJrZXIKAEVycm9yIHJlYWRpbmcgUExUIG1hcmtlcgoARXJyb3IgcmVhZGluZyBNQ1QgbWFya2VyCgBOb3QgZW5vdWdoIG1lbW9yeSB0byByZWFkIE1DVCBtYXJrZXIKAE5vdCBlbm91Z2ggc3BhY2UgZm9yIGV4cGVjdGVkIFNPUCBtYXJrZXIKAEV4cGVjdGVkIFNPUCBtYXJrZXIKAEVycm9yIHJlYWRpbmcgTUNPIG1hcmtlcgoARXJyb3IgcmVhZGluZyBSR04gbWFya2VyCgBFcnJvciByZWFkaW5nIFBQTSBtYXJrZXIKAE5vdCBlbm91Z2ggbWVtb3J5IHRvIHJlYWQgUFBNIG1hcmtlcgoARXJyb3IgcmVhZGluZyBUTE0gbWFya2VyCgBFcnJvciByZWFkaW5nIFBMTSBtYXJrZXIKAE5vdCBlbm91Z2ggc3BhY2UgZm9yIGV4cGVjdGVkIEVQSCBtYXJrZXIKAEV4cGVjdGVkIEVQSCBtYXJrZXIKAEVycm9yIHJlYWRpbmcgQ1JHIG1hcmtlcgoAVW5rbm93biBwcm9ncmVzc2lvbiBvcmRlciBpbiBDT0QgbWFya2VyCgBVbmtub3duIFNjb2QgdmFsdWUgaW4gQ09EIG1hcmtlcgoARXJyb3IgcmVhZGluZyBDT0QgbWFya2VyCgBFcnJvciByZWFkaW5nIFFDRCBtYXJrZXIKAENycm9yIHJlYWRpbmcgQ0JEIG1hcmtlcgoARXJyb3IgcmVhZGluZyBQT0MgbWFya2VyCgBFcnJvciByZWFkaW5nIENPQyBtYXJrZXIKAEVycm9yIHJlYWRpbmcgUUNDIG1hcmtlcgoARXJyb3IgcmVhZGluZyBNQ0MgbWFya2VyCgBOb3QgZW5vdWdoIG1lbW9yeSB0byByZWFkIE1DQyBtYXJrZXIKAHJlcXVpcmVkIFNJWiBtYXJrZXIgbm90IGZvdW5kIGluIG1haW4gaGVhZGVyCgByZXF1aXJlZCBDT0QgbWFya2VyIG5vdCBmb3VuZCBpbiBtYWluIGhlYWRlcgoAcmVxdWlyZWQgUUNEIG1hcmtlciBub3QgZm91bmQgaW4gbWFpbiBoZWFkZXIKAE5vdCBlbm91Z2ggbWVtb3J5IHRvIGhhbmRsZSBqcGVnMjAwMCBmaWxlIGhlYWRlcgoATm90IGVub3VnaCBtZW1vcnkgdG8gcmVhZCBoZWFkZXIKAEVycm9yIHdpdGggSlAgU2lnbmF0dXJlIDogYmFkIG1hZ2ljIG51bWJlcgoASW4gU09UIG1hcmtlciwgVFBTb3QgKCVkKSBpcyBub3QgdmFsaWQgcmVnYXJkcyB0byB0aGUgY3VycmVudCBudW1iZXIgb2YgdGlsZS1wYXJ0ICglZCksIGdpdmluZyB1cAoASW4gU09UIG1hcmtlciwgVFBTb3QgKCVkKSBpcyBub3QgdmFsaWQgcmVnYXJkcyB0byB0aGUgcHJldmlvdXMgbnVtYmVyIG9mIHRpbGUtcGFydCAoJWQpLCBnaXZpbmcgdXAKAEluIFNPVCBtYXJrZXIsIFRQU290ICglZCkgaXMgbm90IHZhbGlkIHJlZ2FyZHMgdG8gdGhlIGN1cnJlbnQgbnVtYmVyIG9mIHRpbGUtcGFydCAoaGVhZGVyKSAoJWQpLCBnaXZpbmcgdXAKAHRpbGVzIHJlcXVpcmUgYXQgbGVhc3Qgb25lIHJlc29sdXRpb24KAE1hcmtlciBpcyBub3QgY29tcGxpYW50IHdpdGggaXRzIHBvc2l0aW9uCgBQcm9ibGVtIHdpdGggc2VlayBmdW5jdGlvbgoARXJyb3IgcmVhZGluZyBTUENvZCBTUENvYyBlbGVtZW50LCBJbnZhbGlkIGNibGt3L2NibGtoIGNvbWJpbmF0aW9uCgBJbnZhbGlkIG11bHRpcGxlIGNvbXBvbmVudCB0cmFuc2Zvcm1hdGlvbgoAQ2Fubm90IHRha2UgaW4gY2hhcmdlIGNvbGxlY3Rpb25zIG90aGVyIHRoYW4gYXJyYXkgZGVjb3JyZWxhdGlvbgoAVG9vIGxhcmdlIHZhbHVlIGZvciBOcHBtCgBOb3QgZW5vdWdoIGJ5dGVzIHRvIHJlYWQgTnBwbQoAYmFkIHBsYWNlZCBqcGVnIGNvZGVzdHJlYW0KAAkgTWFpbiBoZWFkZXIgc3RhcnQgcG9zaXRpb249JWxsaQoJIE1haW4gaGVhZGVyIGVuZCBwb3NpdGlvbj0lbGxpCgBNYXJrZXIgc2l6ZSBpbmNvbnNpc3RlbnQgd2l0aCBzdHJlYW0gbGVuZ3RoCgBUaWxlIHBhcnQgbGVuZ3RoIHNpemUgaW5jb25zaXN0ZW50IHdpdGggc3RyZWFtIGxlbmd0aAoAQ2Fubm90IHRha2UgaW4gY2hhcmdlIG11bHRpcGxlIGRhdGEgc3Bhbm5pbmcKAFdyb25nIGZsYWcKAEVycm9yIHdpdGggRlRZUCBzaWduYXR1cmUgQm94IHNpemUKAEVycm9yIHdpdGggSlAgc2lnbmF0dXJlIEJveCBzaXplCgBJbnZhbGlkIHByZWNpbmN0IHNpemUKAEluY29uc2lzdGVudCBtYXJrZXIgc2l6ZQoASW52YWxpZCBtYXJrZXIgc2l6ZQoARXJyb3Igd2l0aCBTSVogbWFya2VyIHNpemUKAE5vdCBlbm91Z2ggbWVtb3J5IHRvIGFkZCBhIG5ldyB2YWxpZGF0aW9uIHByb2NlZHVyZQoATm90IGVub3VnaCBtZW1vcnkgdG8gZGVjb2RlIHRpbGUKAEZhaWxlZCB0byBkZWNvZGUgdGhlIGNvZGVzdHJlYW0gaW4gdGhlIEpQMiBmaWxlCgBDYW5ub3QgdGFrZSBpbiBjaGFyZ2UgY29sbGVjdGlvbnMgd2l0aCBpbmRpeCBzaHVmZmxlCgBDYW5ub3QgYWxsb2NhdGUgVGllciAxIGhhbmRsZQoATm8gZGVjb2RlZCBhcmVhIHBhcmFtZXRlcnMsIHNldCB0aGUgZGVjb2RlZCBhcmVhIHRvIHRoZSB3aG9sZSBpbWFnZQoATm90IGVub3VnaCBtZW1vcnkgdG8gY3JlYXRlIFRhZy10cmVlCgBOb3QgZW5vdWdoIG1lbW9yeSB0byByZWluaXRpYWxpemUgdGhlIHRhZyB0cmVlCgBFcnJvciByZWFkaW5nIFNQQ29kIFNQQ29jIGVsZW1lbnQsIEludmFsaWQgdHJhbnNmb3JtYXRpb24gZm91bmQKAEVycm9yIHJlYWRpbmcgU1BDb2QgU1BDb2MgZWxlbWVudC4gVW5zdXBwb3J0ZWQgTWl4ZWQgSFQgY29kZS1ibG9jayBzdHlsZSBmb3VuZAoAVGlsZSBZIGNvb3JkaW5hdGVzIGFyZSBub3Qgc3VwcG9ydGVkCgBUaWxlIFggY29vcmRpbmF0ZXMgYXJlIG5vdCBzdXBwb3J0ZWQKAEltYWdlIGNvb3JkaW5hdGVzIGFib3ZlIElOVF9NQVggYXJlIG5vdCBzdXBwb3J0ZWQKAEpQRUcyMDAwIEhlYWRlciBib3ggbm90IHJlYWQgeWV0LCAnJWMlYyVjJWMnIGJveCB3aWxsIGJlIGlnbm9yZWQKAG9wal9qMmtfbWVyZ2VfcHB0KCkgaGFzIGFscmVhZHkgYmVlbiBjYWxsZWQKAE5vdCBlbm91Z2ggbWVtb3J5IHRvIHJlYWQgU09UIG1hcmtlci4gVGlsZSBpbmRleCBhbGxvY2F0aW9uIGZhaWxlZAoASWdub3JpbmcgaWhkciBib3guIEZpcnN0IGloZHIgYm94IGFscmVhZHkgcmVhZAoAWnBwdCAldSBhbHJlYWR5IHJlYWQKAFpwcG0gJXUgYWxyZWFkeSByZWFkCgBQVEVSTSBjaGVjayBmYWlsdXJlOiAlZCBzeW50aGV0aXplZCAweEZGIG1hcmtlcnMgcmVhZAoACQkJIGNibGt3PTJeJWQKAAkJCSBjYmxraD0yXiVkCgAJCQkgcW50c3R5PSVkCgAlcyBkeD0lZCwgZHk9JWQKAAkJCSByb2lzaGlmdD0lZAoACQkJIG51bWdiaXRzPSVkCgAJCSBudW1sYXllcnM9JWQKACVzIG51bWNvbXBzPSVkCgBvcGpfanAyX2FwcGx5X2NkZWY6IGFjbj0lZCwgbnVtY29tcHM9JWQKAG9wal9qcDJfYXBwbHlfY2RlZjogY249JWQsIG51bWNvbXBzPSVkCgAJCQkgbnVtcmVzb2x1dGlvbnM9JWQKAAkJIHR5cGU9JSN4LCBwb3M9JWxsaSwgbGVuPSVkCgAlcyBzZ25kPSVkCgAJCQkgcW1mYmlkPSVkCgAlcyBwcmVjPSVkCgAJCSBuYiBvZiB0aWxlLXBhcnQgaW4gdGlsZSBbJWRdPSVkCgAlcyB4MT0lZCwgeTE9JWQKACVzIHgwPSVkLCB5MD0lZAoARmFpbGVkIHRvIGRlY29kZSB0aWxlICVkLyVkCgBTZXR0aW5nIGRlY29kaW5nIGFyZWEgdG8gJWQsJWQsJWQsJWQKAEZhaWxlZCB0byBkZWNvZGUgY29tcG9uZW50ICVkCgBJbnZhbGlkIHZhbHVlIGZvciBudW1yZXNvbHV0aW9ucyA6ICVkLCBtYXggdmFsdWUgaXMgc2V0IGluIG9wZW5qcGVnLmggYXQgJWQKAEludmFsaWQgY29tcG9uZW50IG51bWJlcjogJWQsIHJlZ2FyZGluZyB0aGUgbnVtYmVyIG9mIGNvbXBvbmVudHMgJWQKAFRvbyBtYW55IFBPQ3MgJWQKAEludmFsaWQgdGlsZSBudW1iZXIgJWQKAEludmFsaWQgdGlsZSBwYXJ0IGluZGV4IGZvciB0aWxlIG51bWJlciAlZC4gR290ICVkLCBleHBlY3RlZCAlZAoARXJyb3Igd2l0aCBTSVogbWFya2VyOiBudW1iZXIgb2YgY29tcG9uZW50IGlzIGlsbGVnYWwgLT4gJWQKAE5vdCBlbm91Z2ggbWVtb3J5IGZvciBjaWVsYWIKAENhbm5vdCBhbGxvY2F0ZSBjYmxrLT5kZWNvZGVkX2RhdGEKAEZhaWxlZCB0byBtZXJnZSBQUFQgZGF0YQoARmFpbGVkIHRvIG1lcmdlIFBQTSBkYXRhCgBJbnZhbGlkIG51bWJlciBvZiBsYXllcnMgaW4gQ09EIG1hcmtlciA6ICVkIG5vdCBpbiByYW5nZSBbMS02NTUzNV0KACVzOiVkOmNvbG9yX2NteWtfdG9fcmdiCglDQU4gTk9UIENPTlZFUlQKACVzOiVkOmNvbG9yX2VzeWNjX3RvX3JnYgoJQ0FOIE5PVCBDT05WRVJUCgAlczolZDpjb2xvcl9zeWNjX3RvX3JnYgoJQ0FOIE5PVCBDT05WRVJUCgBTdHJlYW0gdG9vIHNob3J0LCBleHBlY3RlZCBTT1QKAFVuYWJsZSB0byBzZXQgdDEgaGFuZGxlIGFzIFRMUwoAU3RyZWFtIGRvZXMgbm90IGVuZCB3aXRoIEVPQwoAQ2Fubm90IGhhbmRsZSBib3ggc2l6ZXMgaGlnaGVyIHRoYW4gMl4zMgoAb3BqX3BpX25leHRfbHJjcCgpOiBpbnZhbGlkIGNvbXBubzAvY29tcG5vMQoAb3BqX3BpX25leHRfcmxjcCgpOiBpbnZhbGlkIGNvbXBubzAvY29tcG5vMQoAb3BqX3BpX25leHRfY3BybCgpOiBpbnZhbGlkIGNvbXBubzAvY29tcG5vMQoAb3BqX3BpX25leHRfcGNybCgpOiBpbnZhbGlkIGNvbXBubzAvY29tcG5vMQoAb3BqX3BpX25leHRfcnBjbCgpOiBpbnZhbGlkIGNvbXBubzAvY29tcG5vMQoAb3BqX3QxX2RlY29kZV9jYmxrKCk6IHVuc3VwcG9ydGVkIGJwbm9fcGx1c19vbmUgPSAlZCA+PSAzMQoARmFpbGVkIHRvIGRlY29kZSB0aWxlIDEvMQoASW5zdWZmaWNpZW50IGRhdGEgZm9yIENNQVAgYm94LgoATmVlZCB0byByZWFkIGEgUENMUiBib3ggYmVmb3JlIHRoZSBDTUFQIGJveC4KAEluc3VmZmljaWVudCBkYXRhIGZvciBDREVGIGJveC4KAE51bWJlciBvZiBjaGFubmVsIGRlc2NyaXB0aW9uIGlzIGVxdWFsIHRvIHplcm8gaW4gQ0RFRiBib3guCgBTdHJlYW0gZXJyb3Igd2hpbGUgcmVhZGluZyBKUDIgSGVhZGVyIGJveDogbm8gJ2loZHInIGJveC4KAE5vbiBjb25mb3JtYW50IGNvZGVzdHJlYW0gVFBzb3Q9PVROc290LgoAU3RyZWFtIGVycm9yIHdoaWxlIHJlYWRpbmcgSlAyIEhlYWRlciBib3g6IGJveCBsZW5ndGggaXMgaW5jb25zaXN0ZW50LgoAQm94IGxlbmd0aCBpcyBpbmNvbnNpc3RlbnQuCgBSZXNvbHV0aW9uIGZhY3RvciBpcyBncmVhdGVyIHRoYW4gdGhlIG1heGltdW0gcmVzb2x1dGlvbiBpbiB0aGUgY29tcG9uZW50LgoAQ29tcG9uZW50IG1hcHBpbmcgc2VlbXMgd3JvbmcuIFRyeWluZyB0byBjb3JyZWN0LgoASW5jb21wbGV0ZSBjaGFubmVsIGRlZmluaXRpb25zLgoATWFsZm9ybWVkIEhUIGNvZGVibG9jay4gSW52YWxpZCBjb2RlYmxvY2sgbGVuZ3RoIHZhbHVlcy4KAFdlIGRvIG5vdCBzdXBwb3J0IG1vcmUgdGhhbiAzIGNvZGluZyBwYXNzZXMgaW4gYW4gSFQgY29kZWJsb2NrOyBUaGlzIGNvZGVibG9ja3MgaGFzICVkIHBhc3Nlcy4KAE1hbGZvcm1lZCBIVCBjb2RlYmxvY2suIERlY29kaW5nIHRoaXMgY29kZWJsb2NrIGlzIHN0b3BwZWQuIFRoZXJlIGFyZSAlZCB6ZXJvIGJpdHBsYW5lcyBpbiAlZCBiaXRwbGFuZXMuCgBDYW5ub3QgdGFrZSBpbiBjaGFyZ2UgbXVsdGlwbGUgdHJhbnNmb3JtYXRpb24gc3RhZ2VzLgoAVW5rbm93biBtYXJrZXIgaGFzIGJlZW4gZGV0ZWN0ZWQgYW5kIGdlbmVyYXRlZCBlcnJvci4KAENvZGVjIHByb3ZpZGVkIHRvIHRoZSBvcGpfc2V0dXBfZGVjb2RlciBmdW5jdGlvbiBpcyBub3QgYSBkZWNvbXByZXNzb3IgaGFuZGxlci4KAENvZGVjIHByb3ZpZGVkIHRvIHRoZSBvcGpfcmVhZF9oZWFkZXIgZnVuY3Rpb24gaXMgbm90IGEgZGVjb21wcmVzc29yIGhhbmRsZXIuCgBUaWxlcyBkb24ndCBhbGwgaGF2ZSB0aGUgc2FtZSBkaW1lbnNpb24uIFNraXAgdGhlIE1DVCBzdGVwLgoATnVtYmVyIG9mIGNvbXBvbmVudHMgKCVkKSBpcyBpbmNvbnNpc3RlbnQgd2l0aCBhIE1DVC4gU2tpcCB0aGUgTUNUIHN0ZXAuCgBKUDIgYm94IHdoaWNoIGFyZSBhZnRlciB0aGUgY29kZXN0cmVhbSB3aWxsIG5vdCBiZSByZWFkIGJ5IHRoaXMgZnVuY3Rpb24uCgBNYWxmb3JtZWQgSFQgY29kZWJsb2NrLiBXaGVuIHRoZSBudW1iZXIgb2YgemVybyBwbGFuZXMgYml0cGxhbmVzIGlzIGVxdWFsIHRvIHRoZSBudW1iZXIgb2YgYml0cGxhbmVzLCBvbmx5IHRoZSBjbGVhbnVwIHBhc3MgbWFrZXMgc2Vuc2UsIGJ1dCB3ZSBoYXZlICVkIHBhc3NlcyBpbiB0aGlzIGNvZGVibG9jay4gVGhlcmVmb3JlLCBvbmx5IHRoZSBjbGVhbnVwIHBhc3Mgd2lsbCBiZSBkZWNvZGVkLiBUaGlzIG1lc3NhZ2Ugd2lsbCBub3QgYmUgZGlzcGxheWVkIGFnYWluLgoASW1hZ2UgaGFzIGxlc3MgY29tcG9uZW50cyB0aGFuIGNvZGVzdHJlYW0uCgBOZWVkIHRvIGRlY29kZSB0aGUgbWFpbiBoZWFkZXIgYmVmb3JlIGJlZ2luIHRvIGRlY29kZSB0aGUgcmVtYWluaW5nIGNvZGVzdHJlYW0uCgBQc290IHZhbHVlIG9mIHRoZSBjdXJyZW50IHRpbGUtcGFydCBpcyBlcXVhbCB0byB6ZXJvLCB3ZSBhc3N1bWluZyBpdCBpcyB0aGUgbGFzdCB0aWxlLXBhcnQgb2YgdGhlIGNvZGVzdHJlYW0uCgBBIG1hbGZvcm1lZCBjb2RlYmxvY2sgdGhhdCBoYXMgbW9yZSB0aGFuIG9uZSBjb2RpbmcgcGFzcywgYnV0IHplcm8gbGVuZ3RoIGZvciAybmQgYW5kIHBvdGVudGlhbGx5IHRoZSAzcmQgcGFzcyBpbiBhbiBIVCBjb2RlYmxvY2suCgAJCQkgdGlsZS1wYXJ0WyVkXTogc3Rhcl9wb3M9JWxsaSwgZW5kX2hlYWRlcj0lbGxpLCBlbmRfcG9zPSVsbGkuCgBUaWxlICV1IGhhcyBUUHNvdCA9PSAwIGFuZCBUTnNvdCA9PSAwLCBidXQgbm8gb3RoZXIgdGlsZS1wYXJ0cyB3ZXJlIGZvdW5kLiBFT0MgaXMgYWxzbyBtaXNzaW5nLgoAQ29tcG9uZW50ICVkIGRvZXNuJ3QgaGF2ZSBhIG1hcHBpbmcuCgBBIGNvbmZvcm1pbmcgSlAyIHJlYWRlciBzaGFsbCBpZ25vcmUgYWxsIENvbG91ciBTcGVjaWZpY2F0aW9uIGJveGVzIGFmdGVyIHRoZSBmaXJzdCwgc28gd2UgaWdub3JlIHRoaXMgb25lLgoAVGhlIHNpZ25hdHVyZSBib3ggbXVzdCBiZSB0aGUgZmlyc3QgYm94IGluIHRoZSBmaWxlLgoAVGhlICBib3ggbXVzdCBiZSB0aGUgZmlyc3QgYm94IGluIHRoZSBmaWxlLgoAVGhlIGZ0eXAgYm94IG11c3QgYmUgdGhlIHNlY29uZCBib3ggaW4gdGhlIGZpbGUuCgBGYWlsZWQgdG8gZGVjb2RlLgoATWFsZm9ybWVkIEhUIGNvZGVibG9jay4gSW5jb3JyZWN0IE1FTCBzZWdtZW50IHNlcXVlbmNlLgoAQ29tcG9uZW50ICVkIGlzIG1hcHBlZCB0d2ljZS4KAE9ubHkgb25lIENNQVAgYm94IGlzIGFsbG93ZWQuCgBXZSBuZWVkIGFuIGltYWdlIHByZXZpb3VzbHkgY3JlYXRlZC4KAElIRFIgYm94X21pc3NpbmcuIFJlcXVpcmVkLgoASlAySCBib3ggbWlzc2luZy4gUmVxdWlyZWQuCgBOb3Qgc3VyZSBob3cgdGhhdCBoYXBwZW5lZC4KAE1haW4gaGVhZGVyIGhhcyBiZWVuIGNvcnJlY3RseSBkZWNvZGVkLgoAVGlsZSAlZC8lZCBoYXMgYmVlbiBkZWNvZGVkLgoASGVhZGVyIG9mIHRpbGUgJWQgLyAlZCBoYXMgYmVlbiByZWFkLgoARW1wdHkgU09UIG1hcmtlciBkZXRlY3RlZDogUHNvdD0lZC4KAERpcmVjdCB1c2UgYXQgIyVkIGhvd2V2ZXIgcGNvbD0lZC4KAEltcGxlbWVudGF0aW9uIGxpbWl0YXRpb246IGZvciBwYWxldHRlIG1hcHBpbmcsIHBjb2xbJWRdIHNob3VsZCBiZSBlcXVhbCB0byAlZCwgYnV0IGlzIGVxdWFsIHRvICVkLgoASW52YWxpZCBjb21wb25lbnQvcGFsZXR0ZSBpbmRleCBmb3IgZGlyZWN0IG1hcHBpbmcgJWQuCgBJbnZhbGlkIHZhbHVlIGZvciBjbWFwWyVkXS5tdHlwID0gJWQuCgBQc290IHZhbHVlIGlzIG5vdCBjb3JyZWN0IHJlZ2FyZHMgdG8gdGhlIEpQRUcyMDAwIG5vcm06ICVkLgoATWFsZm9ybWVkIEhUIGNvZGVibG9jay4gVkxDIGNvZGUgcHJvZHVjZXMgc2lnbmlmaWNhbnQgc2FtcGxlcyBvdXRzaWRlIHRoZSBjb2RlYmxvY2sgYXJlYS4KAFVuZXhwZWN0ZWQgT09NLgoAMzIgYml0cyBhcmUgbm90IGVub3VnaCB0byBkZWNvZGUgdGhpcyBjb2RlYmxvY2ssIHNpbmNlIHRoZSBudW1iZXIgb2YgYml0cGxhbmUsICVkLCBpcyBsYXJnZXIgdGhhbiAzMC4KAEJvdHRvbSBwb3NpdGlvbiBvZiB0aGUgZGVjb2RlZCBhcmVhIChyZWdpb25feTE9JWQpIHNob3VsZCBiZSA+IDAuCgBSaWdodCBwb3NpdGlvbiBvZiB0aGUgZGVjb2RlZCBhcmVhIChyZWdpb25feDE9JWQpIHNob3VsZCBiZSA+IDAuCgBVcCBwb3NpdGlvbiBvZiB0aGUgZGVjb2RlZCBhcmVhIChyZWdpb25feTA9JWQpIHNob3VsZCBiZSA+PSAwLgoATGVmdCBwb3NpdGlvbiBvZiB0aGUgZGVjb2RlZCBhcmVhIChyZWdpb25feDA9JWQpIHNob3VsZCBiZSA+PSAwLgoARXJyb3IgcmVhZGluZyBQUFQgbWFya2VyOiBwYWNrZXQgaGVhZGVyIGhhdmUgYmVlbiBwcmV2aW91c2x5IGZvdW5kIGluIHRoZSBtYWluIGhlYWRlciAoUFBNIG1hcmtlcikuCgBTdGFydCB0byByZWFkIGoyayBtYWluIGhlYWRlciAoJWxsZCkuCgBCb3R0b20gcG9zaXRpb24gb2YgdGhlIGRlY29kZWQgYXJlYSAocmVnaW9uX3kxPSVkKSBpcyBvdXRzaWRlIHRoZSBpbWFnZSBhcmVhIChZc2l6PSVkKS4KAFVwIHBvc2l0aW9uIG9mIHRoZSBkZWNvZGVkIGFyZWEgKHJlZ2lvbl95MD0lZCkgaXMgb3V0c2lkZSB0aGUgaW1hZ2UgYXJlYSAoWXNpej0lZCkuCgBSaWdodCBwb3NpdGlvbiBvZiB0aGUgZGVjb2RlZCBhcmVhIChyZWdpb25feDE9JWQpIGlzIG91dHNpZGUgdGhlIGltYWdlIGFyZWEgKFhzaXo9JWQpLgoATGVmdCBwb3NpdGlvbiBvZiB0aGUgZGVjb2RlZCBhcmVhIChyZWdpb25feDA9JWQpIGlzIG91dHNpZGUgdGhlIGltYWdlIGFyZWEgKFhzaXo9JWQpLgoAQm90dG9tIHBvc2l0aW9uIG9mIHRoZSBkZWNvZGVkIGFyZWEgKHJlZ2lvbl95MT0lZCkgaXMgb3V0c2lkZSB0aGUgaW1hZ2UgYXJlYSAoWU9zaXo9JWQpLgoAVXAgcG9zaXRpb24gb2YgdGhlIGRlY29kZWQgYXJlYSAocmVnaW9uX3kwPSVkKSBpcyBvdXRzaWRlIHRoZSBpbWFnZSBhcmVhIChZT3Npej0lZCkuCgBSaWdodCBwb3NpdGlvbiBvZiB0aGUgZGVjb2RlZCBhcmVhIChyZWdpb25feDE9JWQpIGlzIG91dHNpZGUgdGhlIGltYWdlIGFyZWEgKFhPc2l6PSVkKS4KAExlZnQgcG9zaXRpb24gb2YgdGhlIGRlY29kZWQgYXJlYSAocmVnaW9uX3gwPSVkKSBpcyBvdXRzaWRlIHRoZSBpbWFnZSBhcmVhIChYT3Npej0lZCkuCgBTaXplIHggb2YgdGhlIGRlY29kZWQgY29tcG9uZW50IGltYWdlIGlzIGluY29ycmVjdCAoY29tcFslZF0udz0lZCkuCgBTaXplIHkgb2YgdGhlIGRlY29kZWQgY29tcG9uZW50IGltYWdlIGlzIGluY29ycmVjdCAoY29tcFslZF0uaD0lZCkuCgBUaWxlIHJlYWQsIGRlY29kZWQgYW5kIHVwZGF0ZWQgaXMgbm90IHRoZSBkZXNpcmVkIG9uZSAoJWQgdnMgJWQpLgoASW52YWxpZCBjb21wb25lbnQgaW5kZXggJWQgKD49ICVkKS4KAG9wal9yZWFkX2hlYWRlcigpIHNob3VsZCBiZSBjYWxsZWQgYmVmb3JlIG9wal9zZXRfZGVjb2RlZF9jb21wb25lbnRzKCkuCgBNZW1vcnkgYWxsb2NhdGlvbiBmYWlsdXJlIGluIG9wal9qcDJfYXBwbHlfcGNscigpLgoAaW1hZ2UtPmNvbXBzWyVkXS5kYXRhID09IE5VTEwgaW4gb3BqX2pwMl9hcHBseV9wY2xyKCkuCgBpbnZhbGlkIGJveCBzaXplICVkICgleCkKAEZhaWwgdG8gcmVhZCB0aGUgY3VycmVudCBtYXJrZXIgc2VnbWVudCAoJSN4KQoARXJyb3Igd2l0aCBTSVogbWFya2VyOiBJSERSIHcoJXUpIGgoJXUpIHZzLiBTSVogdygldSkgaCgldSkKAEVycm9yIHJlYWRpbmcgQ09DIG1hcmtlciAoYmFkIG51bWJlciBvZiBjb21wb25lbnRzKQoASW52YWxpZCBudW1iZXIgb2YgdGlsZXMgOiAldSB4ICV1IChtYXhpbXVtIGZpeGVkIGJ5IGpwZWcyMDAwIG5vcm0gaXMgNjU1MzUgdGlsZXMpCgBJbnZhbGlkIG51bWJlciBvZiBjb21wb25lbnRzIChpaGRyKQoATm90IGVub3VnaCBtZW1vcnkgdG8gaGFuZGxlIGltYWdlIGhlYWRlciAoaWhkcikKAFdyb25nIHZhbHVlcyBmb3I6IHcoJWQpIGgoJWQpIG51bWNvbXBzKCVkKSAoaWhkcikKAEludmFsaWQgdmFsdWVzIGZvciBjb21wID0gJWQgOiBkeD0ldSBkeT0ldSAoc2hvdWxkIGJlIGJldHdlZW4gMSBhbmQgMjU1IGFjY29yZGluZyB0byB0aGUgSlBFRzIwMDAgbm9ybSkKAEJhZCBpbWFnZSBoZWFkZXIgYm94IChiYWQgc2l6ZSkKAEJhZCBDT0xSIGhlYWRlciBib3ggKGJhZCBzaXplKQoAQmFkIEJQQ0MgaGVhZGVyIGJveCAoYmFkIHNpemUpCgBFcnJvciB3aXRoIFNJWiBtYXJrZXI6IG5lZ2F0aXZlIG9yIHplcm8gaW1hZ2Ugc2l6ZSAoJWxsZCB4ICVsbGQpCgBza2lwOiBzZWdtZW50IHRvbyBsb25nICglZCkgd2l0aCBtYXggKCVkKSBmb3IgY29kZWJsb2NrICVkIChwPSVkLCBiPSVkLCByPSVkLCBjPSVkKQoAcmVhZDogc2VnbWVudCB0b28gbG9uZyAoJWQpIHdpdGggbWF4ICglZCkgZm9yIGNvZGVibG9jayAlZCAocD0lZCwgYj0lZCwgcj0lZCwgYz0lZCkKAERlc3BpdGUgSlAyIEJQQyE9MjU1LCBwcmVjaXNpb24gYW5kL29yIHNnbmQgdmFsdWVzIGZvciBjb21wWyVkXSBpcyBkaWZmZXJlbnQgdGhhbiBjb21wWzBdOgogICAgICAgIFswXSBwcmVjKCVkKSBzZ25kKCVkKSBbJWRdIHByZWMoJWQpIHNnbmQoJWQpCgBiYWQgY29tcG9uZW50IG51bWJlciBpbiBSR04gKCVkIHdoZW4gdGhlcmUgYXJlIG9ubHkgJWQpCgBFcnJvciB3aXRoIFNJWiBtYXJrZXI6IG51bWJlciBvZiBjb21wb25lbnQgaXMgbm90IGNvbXBhdGlibGUgd2l0aCB0aGUgcmVtYWluaW5nIG51bWJlciBvZiBwYXJhbWV0ZXJzICggJWQgdnMgJWQpCgBFcnJvciB3aXRoIFNJWiBtYXJrZXI6IGludmFsaWQgdGlsZSBzaXplICh0ZHg6ICVkLCB0ZHk6ICVkKQoAQmFkIENPTFIgaGVhZGVyIGJveCAoYmFkIHNpemU6ICVkKQoAQmFkIENPTFIgaGVhZGVyIGJveCAoQ0lFTGFiLCBiYWQgc2l6ZTogJWQpCgBQVEVSTSBjaGVjayBmYWlsdXJlOiAlZCByZW1haW5pbmcgYnl0ZXMgaW4gY29kZSBibG9jayAoJWQgdXNlZCAvICVkKQoATWFsZm9ybWVkIEhUIGNvZGVibG9jay4gT25lIG9mIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uIGlzIG5vdCBtZXQ6IDIgPD0gU2N1cCA8PSBtaW4oTGN1cCwgNDA3OSkKAEludmFsaWQgdmFsdWVzIGZvciBjb21wID0gJWQgOiBwcmVjPSV1IChzaG91bGQgYmUgYmV0d2VlbiAxIGFuZCAzOCBhY2NvcmRpbmcgdG8gdGhlIEpQRUcyMDAwIG5vcm0uIE9wZW5KcGVnIG9ubHkgc3VwcG9ydHMgdXAgdG8gMzEpCgBJbnZhbGlkIGJpdCBudW1iZXIgJWQgaW4gb3BqX3QyX3JlYWRfcGFja2V0X2hlYWRlcigpCgBTdHJlYW0gZXJyb3IhCgBFcnJvciBvbiB3cml0aW5nIHN0cmVhbSEKAFN0cmVhbSByZWFjaGVkIGl0cyBlbmQgIQoARXhwZWN0ZWQgYSBTT0MgbWFya2VyIAoASW52YWxpZCBib3ggc2l6ZSAlZCBmb3IgYm94ICclYyVjJWMlYycuIE5lZWQgJWQgYnl0ZXMsICVkIGJ5dGVzIHJlbWFpbmluZyAKAE1hbGZvcm1lZCBIVCBjb2RlYmxvY2suIERlY29kaW5nIHRoaXMgY29kZWJsb2NrIGlzIHN0b3BwZWQuIFVfcSBpcyBsYXJnZXIgdGhhbiB6ZXJvIGJpdHBsYW5lcyArIDEgCgBNYWxmb3JtZWQgSFQgY29kZWJsb2NrLiBEZWNvZGluZyB0aGlzIGNvZGVibG9jayBpcyBzdG9wcGVkLiBVX3EgaXNsYXJnZXIgdGhhbiBiaXRwbGFuZXMgKyAxIAoAQ09MUiBCT1ggbWV0aCB2YWx1ZSBpcyBub3QgYSByZWd1bGFyIHZhbHVlICglZCksIHNvIHdlIHdpbGwgaWdub3JlIHRoZSBlbnRpcmUgQ29sb3VyIFNwZWNpZmljYXRpb24gYm94LiAKAFdoaWxlIHJlYWRpbmcgQ0NQX1FOVFNUWSBlbGVtZW50IGluc2lkZSBRQ0Qgb3IgUUNDIG1hcmtlciBzZWdtZW50LCBudW1iZXIgb2Ygc3ViYmFuZHMgKCVkKSBpcyBncmVhdGVyIHRvIE9QSl9KMktfTUFYQkFORFMgKCVkKS4gU28gd2UgbGltaXQgdGhlIG51bWJlciBvZiBlbGVtZW50cyBzdG9yZWQgdG8gT1BKX0oyS19NQVhCQU5EUyAoJWQpIGFuZCBza2lwIHRoZSByZXN0LiAKAEpQMiBJSERSIGJveDogY29tcHJlc3Npb24gdHlwZSBpbmRpY2F0ZSB0aGF0IHRoZSBmaWxlIGlzIG5vdCBhIGNvbmZvcm1pbmcgSlAyIGZpbGUgKCVkKSAKAFRpbGUgaW5kZXggcHJvdmlkZWQgYnkgdGhlIHVzZXIgaXMgaW5jb3JyZWN0ICVkIChtYXggPSAlZCkgCgBFcnJvciBkZWNvZGluZyBjb21wb25lbnQgJWQuClRoZSBudW1iZXIgb2YgcmVzb2x1dGlvbnMgdG8gcmVtb3ZlICglZCkgaXMgZ3JlYXRlciBvciBlcXVhbCB0aGFuIHRoZSBudW1iZXIgb2YgcmVzb2x1dGlvbnMgb2YgdGhpcyBjb21wb25lbnQg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AAABVAAAAQAAAABQAADAUAAAAUgAAAAAAAAQUAAAsFAAAAFIAAABAAAAIFAAAMBQAAABOAAAAAAAADBQAACwUAAAATgAAAEAAABAUAAAwFAAAAEwAAAAAAAAUFAAABBRAAABMAAAAQAAAGBQAAAgUQAAASQAAAAAAABwUAAAMFEAAAEkAAABAAAAgFAAAEBRAAABHAAAAAAAAJBQAABwUQAAARwAAAEAAACgUAAAgFEAAAEWAAAAAAAAkFIAAJBRAAABFgAAAQAAAKBSAACgUQAAAVYAAAAAAADQUAAAwFAAAAFWAAABAAAA4FAAALBQAAABVAAAAAAAAPBQAACwUAAAAVQAAAEAAAAAUQAAwFAAAAFRAAAAAAAAEFEAANBQAAABUQAAAQAAACBRAADgUAAAAUgAAAAAAAAwUQAA8FAAAAFIAAABAAAAQFEAAABRAAABOAAAAAAAAFBRAAAQUQAAATgAAAEAAABgUQAAIFEAAAE0AAAAAAAAcFEAADBRAAABNAAAAQAAAIBRAABAUQAAATAAAAAAAACQUQAAUFEAAAEwAAABAAAAoFEAAGBRAAABKAAAAAAAALBRAABQUQAAASgAAAEAAADAUQAAYFEAAAEkAAAAAAAA0FEAAHBRAAABJAAAAQAAAOBRAACAUQAAASIAAAAAAADwUQAAkFEAAAEiAAABAAAAAFIAAKBRAAABHAAAAAAAABBSAACwUQAAARwAAAEAAAAgUgAAwFEAAAEYAAAAAAAAMFIAANBRAAABGAAAAQAAAEBSAADgUQAAARYAAAAAAABQUgAA8FEAAAEWAAABAAAAYFIAAABSAAABFAAAAAAAAHBSAAAQUgAAARQAAAEAAACAUgAAIFIAAAESAAAAAAAAkFIAADBSAAABEgAAAQAAAKBSAABAUgAAAREAAAAAAACwUgAAUFIAAAERAAABAAAAwFIAAGBSAADBCgAAAAAAANBSAABwUgAAwQoAAAEAAADgUgAAgFIAAMEJAAAAAAAA8FIAAJBSAADBCQAAAQAAAABTAACgUgAAoQgAAAAAAAAQUwAAsFIAAKEIAAABAAAAIFMAAMBSAAAhBQAAAAAAADBTAADQUgAAIQUAAAEAAABAUwAA4FIAAEEEAAAAAAAAUFMAAPBSAABBBAAAAQAAAGBTAAAAUwAAoQIAAAAAAABwUwAAEFMAAKECAAABAAAAgFMAACBTAAAhAgAAAAAAAJBTAAAwUwAAIQIAAAEAAACgUwAAQFMAAEEBAAAAAAAAsFMAAFBTAABBAQAAAQAAAMBTAABgUwAAEQEAAAAAAADQUwAAcFMAABEBAAABAAAA4FMAAIBTAACFAAAAAAAAAPBTAACQUwAAhQAAAAEAAAAAVAAAoFMAAEkAAAAAAAAAEFQAALBTAABJAAAAAQAAACBUAADAUwAAJQAAAAAAAAAwVAAA0FMAACUAAAABAAAAQFQAAOBTAAAVAAAAAAAAAFBUAADwUwAAFQAAAAEAAABgVAAAAFQAAAkAAAAAAAAAcFQAABBUAAAJAAAAAQAAAIBUAAAgVAAABQAAAAAAAACQVAAAMFQAAAUAAAABAAAAoFQAAEBUAAABAAAAAAAAAJBUAABQVAAAAQAAAAEAAACgVAAAYFQAAAFWAAAAAAAAsFQAALBUAAABVgAAAQAAAMBUAADAVAAAAAEDAwECAwMFBgcHBgYHBwABAwMBAgMDBQYHBwYGBwcFBgcHBgYHBwgICAgICAgIBQYHBwYGBwcICAgICAgICAECAwMCAgMDBgYHBwYGBwcBAgMDAgIDAwYGBwcGBgcHBgYHBwYGBwcICAgICAgICAYGBwcGBgcHCAgICAgICAgDAwQEAwMEBAcHBwcHBwcHAwMEBAMDBAQHBwcHBwcHBwcHBwcHBwcHCAgICAgICAgHBwcHBwcHBwgICAgICAgIAwMEBAMDBAQHBwcHBwcHBwMDBAQDAwQEBwcHBwcHBwcHBwcHBwcHBwgICAgICAgIBwcHBwcHBwcICAgICAgICAECAwMCAgMDBgYHBwYGBwcBAgMDAgIDAwYGBwcGBgcHBgYHBwYGBwcICAgICAgICAYGBwcGBgcHCAgICAgICAgCAgMDAgIDAwYGBwcGBgcHAgIDAwICAwMGBgcHBgYHBwYGBwcGBgcHCAgICAgICAgGBgcHBgYHBwgICAgICAgIAwMEBAMDBAQHBwcHBwcHBwMDBAQDAwQEBwcHBwcHBwcHBwcHBwcHBwgICAgICAgIBwcHBwcHBwcICAgICAgICAMDBAQDAwQEBwcHBwcHBwcDAwQEAwMEBAcHBwcHBwcHBwcHBwcHBwcICAgICAgICAcHBwcHBwcHCAgICAgICAgAAQUGAQIGBgMDBwcDAwcHAAEFBgECBgYDAwcHAwMHBwMDBwcDAwcHBAQHBwQEBwcDAwcHAwMHBwQEBwcEBAcHAQIGBgICBgYDAwcHAwMHBwECBgYCAgYGAwMHBwMDBwcDAwcHAwMHBwQEBwcEBAcHAwMHBwMDBwcEBAcHBAQHBwUGCAgGBggIBwcICAcHCAgFBggIBgYICAcHCAgHBwgIBwcICAcHCAgHBwgIBwcICAcHCAgHBwgIBwcICAcHCAgGBggIBgYICAcHCAgHBwgIBgYICAYGCAgHBwgIBwcICAcHCAgHBwgIBwcICAcHCAgHBwgIBwcICAcHCAgHBwgIAQIGBgICBgYDAwcHAwMHBwECBgYCAgYGAwMHBwMDBwcDAwcHAwMHBwQEBwcEBAcHAwMHBwMDBwcEBAcHBAQHBwICBgYCAgYGAwMHBwMDBwcCAgYGAgIGBgMDBwcDAwcHAwMHBwMDBwcEBAcHBAQHBwMDBwcDAwcHBAQHBwQEBwcGBggIBgYICAcHCAgHBwgIBgYICAYGCAgHBwgIBwcICAcHCAgHBwgIBwcICAcHCAgHBwgIBwcICAcHCAgHBwgIBgYICAYGCAgHBwgIBwcICAYGCAgGBggIBwcICAcHCAgHBwgIBwcICAcHCAgHBwgIBwcICAcHCAgHBwgIBwcICAABAwMBAgMDBQYHBwYGBwcAAQMDAQIDAwUGBwcGBgcHBQYHBwYGBwcICAgICAgICAUGBwcGBgcHCAgICAgICAgBAgMDAgIDAwYGBwcGBgcHAQIDAwICAwMGBgcHBgYHBwYGBwcGBgcHCAgICAgICAgGBgcHBgYHBwgICAgICAgIAwMEBAMDBAQHBwcHBwcHBwMDBAQDAwQEBwcHBwcHBwcHBwcHBwcHBwgICAgICAgIBwcHBwcHBwcICAgICAgICAMDBAQDAwQEBwcHBwcHBwcDAwQEAwMEBAcHBwcHBwcHBwcHBwcHBwcICAgICAgICAcHBwcHBwcHCAgICAgICAgBAgMDAgIDAwYGBwcGBgcHAQIDAwICAwMGBgcHBgYHBwYGBwcGBgcHCAgICAgICAgGBgcHBgYHBwgICAgICAgIAgIDAwICAwMGBgcHBgYHBwICAwMCAgMDBgYHBwYGBwcGBgcHBgYHBwgICAgICAgIBgYHBwYGBwcICAgICAgICAMDBAQDAwQEBwcHBwcHBwcDAwQEAwMEBAcHBwcHBwcHBwcHBwcHBwcICAgICAgICAcHBwcHBwcHCAgICAgICAgDAwQEAwMEBAcHBwcHBwcHAwMEBAMDBAQHBwcHBwcHBwcHBwcHBwcHCAgICAgICAgHBwcHBwcHBwgICAgICAgIAAMBBAMGBAcBBAIFBAcFBwADAQQDBgQHAQQCBQQHBQcBBAIFBAcFBwIFAgUFBwUHAQQCBQQHBQcCBQIFBQcFBwMGBAcGCAcIBAcFBwcIBwgDBgQHBggHCAQHBQcHCAcIBAcFBwcIBwgFBwUHBwgHCAQHBQcHCAcIBQcFBwcIBwgBBAIFBAcFBwIFAgUFBwUHAQQCBQQHBQcCBQIFBQcFBwIFAgUFBwUHAgUCBQUHBQcCBQIFBQcFBwIFAgUFBwUHBAcFBwcIBwgFBwUHBwgHCAQHBQcHCAcIBQcFBwcIBwgFBwUHBwgHCAUHBQcHCAcIBQcFBwcIBwgFBwUHBwgHCAMGBAcGCAcIBAcFBwcIBwgDBgQHBggHCAQHBQcHCAcIBAcFBwcIBwgFBwUHBwgHCAQHBQcHCAcIBQcFBwcIBwgGCAcICAgICAcIBwgICAgIBggHCAgICAgHCAcICAgICAcIBwgICAgIBwgHCAgICAgHCAcICAgICAcIBwgICAgIBAcFBwcIBwgFBwUHBwgHCAQHBQcHCAcIBQcFBwcIBwgFBwUHBwgHCAUHBQcHCAcIBQcFBwcIBwgFBwUHBwgHCAcIBwgICAgIBwgHCAgICAgHCAcICAgICAcIBwgICAgIBwgHCAgICAgHCAcICAgICAcIBwgICAgIBwgHCAgICAgJCQoKCQkKCgwMDQsMDA0LCQkKCgkJCgoMDAsNDAwLDQwMDQ0MDAsLDAkNCgkMCgsMDAsLDAwNDQwJCwoJDAoNCQkKCgkJCgoMDA0LDAwNCwkJCgoJCQoKDAwLDQwMCw0MDA0NDAwLCwwJDQoJDAoLDAwLCwwMDQ0MCQsKCQwKDQoKCgoKCgoKDQsNCw0LDQsKCgkJCgoJCQ0LDAwNCwwMDQ0NDQsLCwsNCg0KCgsKCw0NDAwLCwwMDQoMCQoLCQwKCgkJCgoJCQsNDAwLDQwMCgoKCgoKCgoLDQsNCw0LDQsLDAwNDQwMCwoMCQoNCQwLCwsLDQ0NDQsKCwoKDQoNAEHZuwELNwEAAQABAAEAAAEBAAABAQABAAEAAQABAAAAAAEBAQEAAAAAAAEAAQAAAAABAQEBAAAAAQABAQEAQZm8AQs3AQABAAEAAQAAAQEAAAEBAAEAAQABAAEAAAAAAQEBAQAAAAAAAQABAAAAAAEBAQEAAAABAAEBAQBB2bwBCwcBAAEAAQABAEHpvAELlQIBAAEAAQABAAAAAAEBAQEAAAAAAAEAAQAAAAABAQEBAAAAAAABAAEBAQAAAQEAAAABAAEAAQABAQEBAQEBAQEAAQABAAEAAQAAAAABAQEBAAEAAAEBAAEAAAAAAQEBAQABAAEBAQEBAgAAAAQAAAAEAAAACAAAAJD/AAAMAAAAGAAAAFL/AAAUAAAAGQAAAFP/AAAUAAAAGgAAAF7/AAAUAAAAGwAAAFz/AAAUAAAAHAAAAF3/AAAUAAAAHQAAAF//AAAUAAAAHgAAAFH/AAACAAAAHwAAAFX/AAAEAAAAIAAAAFf/AAAEAAAAIQAAAFj/AAAQAAAAIgAAAGD/AAAEAAAAIwAAAGH/AAAQAAAAJAAAAJH/AEGIvwELZWP/AAAEAAAAJQAAAGT/AAAUAAAAJgAAAHT/AAAUAAAAJwAAAHj/AAAEAAAAKAAAAFD/AAAEAAAAKQAAAFn/AAAEAAAAKgAAAHX/AAAUAAAAKwAAAHf/AAAUAAAALAAAAAAAAAAUAEGAwAELNS0AAAAuAAAALwAAADAAAAAxAAAAMgAAADMAAAA0AAAAICBQajYAAABweXRmNwAAAGgycGo4AEHAwAELMnJkaGk5AAAAcmxvYzoAAABjY3BiOwAAAHJsY3A8AAAAcGFtYz0AAABmZWRjPgAAAPhiAEGAwQELQRkACwAZGRkAAAAABQAAAAAAAAkAAAAACwAAAAAAAAAAGQAKChkZGQMKBwABAAkLGAAACQYLAAALAAYZAAAAGRkZAEHRwQELIQ4AAAAAAAAAABkACw0ZGRkADQAAAgAJDgAAAAkADgAADgBBi8IBCwEMAEGXwgELFRMAAAAAEwAAAAAJDAAAAAAADAAADABBxcIBCwEQAEHRwgELFQ8AAAAEDwAAAAAJEAAAAAAAEAAAEABB/8IBCwESAEGLwwELHhEAAAAAEQAAAAAJEgAAAAAAEgAAEgAAGgAAABoaGgBBwsMBCw4aAAAAGhoaAAAAAAAACQBB88MBCwEUAEH/wwELFRcAAAAAFwAAAAAJFAAAAAAAFAAAFABBrcQBCwEWAEG5xAELJxUAAAAAFQAAAAAJFgAAAAAAFgAAFgAAMDEyMzQ1Njc4OUFCQ0RFRgBB4MQBCwmQbAEAAAAAAAUAQfTEAQsBaQBBjMUBCwpqAAAAawAAAHhoAEGkxQELAQIAQbTFAQsI//////////8AQfjFAQsBBQBBhMYBCwFsAEGcxgELDmoAAABtAAAAiGgAAAAEAEG0xgELAQEAQcTGAQsF/////wo='),
                      r(
                        ((s = (function (A) {
                          if (A == c && n) return new Uint8Array(n);
                          var t = (function (A) {
                            if (w(A))
                              return (function (A) {
                                for (
                                  var t = atob(A),
                                    i = new Uint8Array(t.length),
                                    a = 0;
                                  a < t.length;
                                  ++a
                                )
                                  i[a] = t.charCodeAt(a);
                                return i;
                              })(A.slice(y.length));
                          })(A);
                          if (t) return t;
                          if (a) return a(A);
                          throw 'sync fetching of the wasm failed: you can preload it to Module["wasmBinary"] manually, or emcc.py will do that for you when generating HTML (but not JS)';
                        })(c)),
                        (t = new WebAssembly.Module(s)),
                        [new WebAssembly.Instance(t, g), t])[0]
                      )
                    );
                  })();
                function L() {
                  f > 0 ||
                    ((function () {
                      var t;
                      if (A.preRun)
                        for (
                          'function' == typeof A.preRun &&
                          (A.preRun = [A.preRun]);
                          A.preRun.length;

                        )
                          (t = A.preRun.shift()), E.unshift(t);
                      D(E);
                    })(),
                    f > 0 ||
                      (A.setStatus
                        ? (A.setStatus('Running...'),
                          setTimeout(function () {
                            setTimeout(function () {
                              A.setStatus('');
                            }, 1),
                              i();
                          }, 1))
                        : i()));
                  function i() {
                    b ||
                      ((b = !0),
                      (A.calledRun = !0),
                      D(u),
                      t(A),
                      A.onRuntimeInitialized && A.onRuntimeInitialized(),
                      (function () {
                        var t;
                        if (A.postRun)
                          for (
                            'function' == typeof A.postRun &&
                            (A.postRun = [A.postRun]);
                            A.postRun.length;

                          )
                            (t = A.postRun.shift()), d.unshift(t);
                        D(d);
                      })());
                  }
                }
                if (
                  (J.q,
                  (A._malloc = J.r),
                  (A._free = J.s),
                  (A._jp2_decode = J.u),
                  (m = function A() {
                    b || L(), b || (m = A);
                  }),
                  A.preInit)
                )
                  for (
                    'function' == typeof A.preInit && (A.preInit = [A.preInit]);
                    A.preInit.length > 0;

                  )
                    A.preInit.pop()();
                return L(), A;
              });
          class e7 extends k {
            constructor(A) {
              super(A, 'JpxError');
            }
          }
          class e4 {
            static #y = null;
            static decode(A, t) {
              (t ||= {}), (this.#y ||= e6({ warn: m }));
              let i = this.#y.decode(A, t);
              if ('string' == typeof i) throw new e7(i);
              return i;
            }
            static cleanup() {
              this.#y = null;
            }
            static parseImageProperties(A) {
              let t = A.getByte();
              for (; t >= 0; ) {
                let i = t;
                if (65361 == ((i << 8) | (t = A.getByte()))) {
                  A.skip(4);
                  let t = A.getInt32() >>> 0,
                    i = A.getInt32() >>> 0,
                    a = A.getInt32() >>> 0,
                    s = A.getInt32() >>> 0;
                  return (
                    A.skip(16),
                    {
                      width: t - a,
                      height: i - s,
                      bitsPerComponent: 8,
                      componentsCount: A.getUint16(),
                    }
                  );
                }
              }
              throw new e7('No size marker found in JPX stream');
            }
          }
          class tA extends es {
            constructor(A, t, i) {
              super(t),
                (this.stream = A),
                (this.dict = A.dict),
                (this.maybeLength = t),
                (this.params = i);
            }
            get bytes() {
              return b(this, 'bytes', this.stream.getBytes(this.maybeLength));
            }
            ensureBuffer(A) {}
            readBlock(A) {
              this.decodeImage(null, A);
            }
            decodeImage(A, t) {
              return (
                this.eof ||
                  ((A ||= this.bytes),
                  (this.buffer = e4.decode(A, t)),
                  (this.bufferLength = this.buffer.length),
                  (this.eof = !0)),
                this.buffer
              );
            }
            get canAsyncDecodeImageFromBuffer() {
              return this.stream.isAsync;
            }
          }
          class te extends es {
            constructor(A, t, i) {
              super(t),
                (this.str = A),
                (this.dict = A.dict),
                (this.cachedData = 0),
                (this.bitsCached = 0);
              let a = {
                earlyChange: i,
                codeLength: 9,
                nextCode: 258,
                dictionaryValues: new Uint8Array(4096),
                dictionaryLengths: new Uint16Array(4096),
                dictionaryPrevCodes: new Uint16Array(4096),
                currentSequence: new Uint8Array(4096),
                currentSequenceLength: 0,
              };
              for (let A = 0; A < 256; ++A)
                (a.dictionaryValues[A] = A), (a.dictionaryLengths[A] = 1);
              this.lzwState = a;
            }
            readBits(A) {
              let t = this.bitsCached,
                i = this.cachedData;
              for (; t < A; ) {
                let A = this.str.getByte();
                if (-1 === A) return (this.eof = !0), null;
                (i = (i << 8) | A), (t += 8);
              }
              return (
                (this.bitsCached = t -= A),
                (this.cachedData = i),
                (this.lastCode = null),
                (i >>> t) & ((1 << A) - 1)
              );
            }
            readBlock() {
              let A,
                t,
                i,
                a = 1024,
                s = this.lzwState;
              if (!s) return;
              let g = s.earlyChange,
                r = s.nextCode,
                n = s.dictionaryValues,
                o = s.dictionaryLengths,
                I = s.dictionaryPrevCodes,
                l = s.codeLength,
                C = s.prevCode,
                B = s.currentSequence,
                h = s.currentSequenceLength,
                Q = 0,
                c = this.bufferLength,
                E = this.ensureBuffer(this.bufferLength + a);
              for (A = 0; A < 512; A++) {
                let A = this.readBits(l),
                  s = h > 0;
                if (A < 256) (B[0] = A), (h = 1);
                else {
                  if (!(A >= 258)) {
                    if (256 === A) {
                      (l = 9), (r = 258), (h = 0);
                      continue;
                    }
                    (this.eof = !0), delete this.lzwState;
                    break;
                  }
                  if (A < r)
                    for (t = (h = o[A]) - 1, i = A; t >= 0; t--)
                      (B[t] = n[i]), (i = I[i]);
                  else B[h++] = B[0];
                }
                if (
                  (s &&
                    ((I[r] = C),
                    (o[r] = o[C] + 1),
                    (n[r] = B[0]),
                    (l =
                      (++r + g) & (r + g - 1)
                        ? l
                        : 0 |
                          Math.min(
                            Math.log(r + g) / 0.6931471805599453 + 1,
                            12
                          ))),
                  (C = A),
                  a < (Q += h))
                ) {
                  do a += 512;
                  while (a < Q);
                  E = this.ensureBuffer(this.bufferLength + a);
                }
                for (t = 0; t < h; t++) E[c++] = B[t];
              }
              (s.nextCode = r),
                (s.codeLength = l),
                (s.prevCode = C),
                (s.currentSequenceLength = h),
                (this.bufferLength = c);
            }
          }
          class tt extends es {
            constructor(A, t, i) {
              if ((super(t), !(i instanceof Aa))) return A;
              let a = (this.predictor = i.get('Predictor') || 1);
              if (a <= 1) return A;
              if (2 !== a && (a < 10 || a > 15))
                throw new x(`Unsupported predictor: ${a}`);
              (this.readBlock =
                2 === a ? this.readBlockTiff : this.readBlockPng),
                (this.str = A),
                (this.dict = A.dict);
              let s = (this.colors = i.get('Colors') || 1),
                g = (this.bits = i.get('BPC', 'BitsPerComponent') || 8),
                r = (this.columns = i.get('Columns') || 1);
              return (
                (this.pixBytes = (s * g + 7) >> 3),
                (this.rowBytes = (r * s * g + 7) >> 3),
                this
              );
            }
            readBlockTiff() {
              let A = this.rowBytes,
                t = this.bufferLength,
                i = this.ensureBuffer(t + A),
                a = this.bits,
                s = this.colors,
                g = this.str.getBytes(A);
              if (((this.eof = !g.length), this.eof)) return;
              let r,
                n = 0,
                o = 0,
                I = 0,
                l = 0,
                C = t;
              if (1 === a && 1 === s)
                for (r = 0; r < A; ++r) {
                  let A = g[r] ^ n;
                  (A ^= A >> 1),
                    (A ^= A >> 2),
                    (A ^= A >> 4),
                    (n = (1 & A) << 7),
                    (i[C++] = A);
                }
              else if (8 === a) {
                for (r = 0; r < s; ++r) i[C++] = g[r];
                for (; r < A; ++r) (i[C] = i[C - s] + g[r]), C++;
              } else if (16 === a) {
                let t = 2 * s;
                for (r = 0; r < t; ++r) i[C++] = g[r];
                for (; r < A; r += 2) {
                  let A =
                    ((255 & g[r]) << 8) +
                    (255 & g[r + 1]) +
                    ((255 & i[C - t]) << 8) +
                    (255 & i[C - t + 1]);
                  (i[C++] = (A >> 8) & 255), (i[C++] = 255 & A);
                }
              } else {
                let A = new Uint8Array(s + 1),
                  C = (1 << a) - 1,
                  B = 0,
                  h = t,
                  Q = this.columns;
                for (r = 0; r < Q; ++r)
                  for (let t = 0; t < s; ++t)
                    I < a && ((n = (n << 8) | (255 & g[B++])), (I += 8)),
                      (A[t] = (A[t] + (n >> (I - a))) & C),
                      (I -= a),
                      (o = (o << a) | A[t]),
                      (l += a) >= 8 &&
                        ((i[h++] = (o >> (l - 8)) & 255), (l -= 8));
                l > 0 && (i[h++] = (o << (8 - l)) + (n & ((1 << (8 - l)) - 1)));
              }
              this.bufferLength += A;
            }
            readBlockPng() {
              let A = this.rowBytes,
                t = this.pixBytes,
                i = this.str.getByte(),
                a = this.str.getBytes(A);
              if (((this.eof = !a.length), this.eof)) return;
              let s = this.bufferLength,
                g = this.ensureBuffer(s + A),
                r = g.subarray(s - A, s);
              0 === r.length && (r = new Uint8Array(A));
              let n,
                o,
                I,
                l = s;
              switch (i) {
                case 0:
                  for (n = 0; n < A; ++n) g[l++] = a[n];
                  break;
                case 1:
                  for (n = 0; n < t; ++n) g[l++] = a[n];
                  for (; n < A; ++n) (g[l] = (g[l - t] + a[n]) & 255), l++;
                  break;
                case 2:
                  for (n = 0; n < A; ++n) g[l++] = (r[n] + a[n]) & 255;
                  break;
                case 3:
                  for (n = 0; n < t; ++n) g[l++] = (r[n] >> 1) + a[n];
                  for (; n < A; ++n)
                    (g[l] = (((r[n] + g[l - t]) >> 1) + a[n]) & 255), l++;
                  break;
                case 4:
                  for (n = 0; n < t; ++n)
                    (o = r[n]), (I = a[n]), (g[l++] = o + I);
                  for (; n < A; ++n) {
                    o = r[n];
                    let A = r[n - t],
                      i = g[l - t],
                      s = i + o - A,
                      C = s - i;
                    C < 0 && (C = -C);
                    let B = s - o;
                    B < 0 && (B = -B);
                    let h = s - A;
                    h < 0 && (h = -h),
                      (I = a[n]),
                      (g[l++] =
                        C <= B && C <= h ? i + I : B <= h ? o + I : A + I);
                  }
                  break;
                default:
                  throw new x(`Unsupported predictor: ${i}`);
              }
              this.bufferLength += A;
            }
          }
          class ti extends es {
            constructor(A, t) {
              super(t), (this.str = A), (this.dict = A.dict);
            }
            readBlock() {
              let A = this.str.getBytes(2);
              if (!A || A.length < 2 || 128 === A[0]) {
                this.eof = !0;
                return;
              }
              let t,
                i = this.bufferLength,
                a = A[0];
              if (a < 128) {
                if ((((t = this.ensureBuffer(i + a + 1))[i++] = A[1]), a > 0)) {
                  let A = this.str.getBytes(a);
                  t.set(A, i), (i += a);
                }
              } else {
                a = 257 - a;
                let s = A[1];
                t = this.ensureBuffer(i + a + 1);
                for (let A = 0; A < a; A++) t[i++] = s;
              }
              this.bufferLength = i;
            }
          }
          class ta {
            constructor({
              lexer: A,
              xref: t,
              allowStreams: i = !1,
              recoveryMode: a = !1,
            }) {
              (this.lexer = A),
                (this.xref = t),
                (this.allowStreams = i),
                (this.recoveryMode = a),
                (this.imageCache = Object.create(null)),
                (this._imageId = 0),
                this.refill();
            }
            refill() {
              (this.buf1 = this.lexer.getObj()),
                (this.buf2 = this.lexer.getObj());
            }
            shift() {
              this.buf2 instanceof At && 'ID' === this.buf2.cmd
                ? ((this.buf1 = this.buf2), (this.buf2 = null))
                : ((this.buf1 = this.buf2), (this.buf2 = this.lexer.getObj()));
            }
            tryShift() {
              try {
                return this.shift(), !0;
              } catch (A) {
                if (A instanceof AQ) throw A;
                return !1;
              }
            }
            getObj(A = null) {
              let t = this.buf1;
              if ((this.shift(), t instanceof At))
                switch (t.cmd) {
                  case 'BI':
                    return this.makeInlineImage(A);
                  case '[':
                    let i = [];
                    for (; !Ao(this.buf1, ']') && this.buf1 !== z; )
                      i.push(this.getObj(A));
                    if (this.buf1 === z) {
                      if (this.recoveryMode) return i;
                      throw new Ac('End of file inside array.');
                    }
                    return this.shift(), i;
                  case '<<':
                    let a = new Aa(this.xref);
                    for (; !Ao(this.buf1, '>>') && this.buf1 !== z; ) {
                      if (!(this.buf1 instanceof Ae)) {
                        p('Malformed dictionary: key must be a name object'),
                          this.shift();
                        continue;
                      }
                      let t = this.buf1.name;
                      if ((this.shift(), this.buf1 === z)) break;
                      a.set(t, this.getObj(A));
                    }
                    if (this.buf1 === z) {
                      if (this.recoveryMode) return a;
                      throw new Ac('End of file inside dictionary.');
                    }
                    if (Ao(this.buf2, 'stream'))
                      return this.allowStreams ? this.makeStream(a, A) : a;
                    return this.shift(), a;
                  default:
                    return t;
                }
              if (Number.isInteger(t)) {
                if (Number.isInteger(this.buf1) && Ao(this.buf2, 'R')) {
                  let A = As.get(t, this.buf1);
                  return this.shift(), this.shift(), A;
                }
                return t;
              }
              return 'string' == typeof t && A ? A.decryptString(t) : t;
            }
            findDefaultInlineStreamEnd(A) {
              let { knownCommands: t } = this.lexer,
                i = A.pos,
                a,
                s,
                g = 0;
              for (; -1 !== (a = A.getByte()); )
                if (0 === g) g = 69 === a ? 1 : 0;
                else if (1 === g) g = 73 === a ? 2 : 0;
                else if (32 === a || 10 === a || 13 === a) {
                  s = A.pos;
                  let i = A.peekBytes(15),
                    r = i.length;
                  if (0 === r) break;
                  for (let A = 0; A < r; A++)
                    if (
                      (0 !== (a = i[A]) || 0 === i[A + 1]) &&
                      10 !== a &&
                      13 !== a &&
                      (a < 32 || a > 127)
                    ) {
                      g = 0;
                      break;
                    }
                  if (2 !== g) continue;
                  if (!t) {
                    m(
                      'findDefaultInlineStreamEnd - `lexer.knownCommands` is undefined.'
                    );
                    continue;
                  }
                  let n = new tr(new AZ(i.slice()), t);
                  n._hexStringWarn = () => {};
                  let o = 0;
                  for (;;) {
                    let A = n.getObj();
                    if (A === z) {
                      g = 0;
                      break;
                    }
                    if (A instanceof At) {
                      let i = t[A.cmd];
                      if (!i) {
                        g = 0;
                        break;
                      }
                      if (i.variableArgs ? o <= i.numArgs : o === i.numArgs)
                        break;
                      o = 0;
                    } else o++;
                  }
                  if (2 === g) break;
                } else g = 0;
              -1 === a &&
                (m(
                  'findDefaultInlineStreamEnd: Reached the end of the stream without finding a valid EI marker'
                ),
                s &&
                  (m(
                    '... trying to recover by using the last "EI" occurrence.'
                  ),
                  A.skip(-(A.pos - s))));
              let r = 4;
              return (
                A.skip(-r),
                (a = A.peekByte()),
                A.skip(r),
                Ab(a) || r--,
                A.pos - r - i
              );
            }
            findDCTDecodeInlineStreamEnd(A) {
              let t = A.pos,
                i,
                a,
                s = !1;
              for (; -1 !== (i = A.getByte()); )
                if (255 === i) {
                  switch (A.getByte()) {
                    case 0:
                      break;
                    case 255:
                      A.skip(-1);
                      break;
                    case 217:
                      s = !0;
                      break;
                    case 192:
                    case 193:
                    case 194:
                    case 195:
                    case 197:
                    case 198:
                    case 199:
                    case 201:
                    case 202:
                    case 203:
                    case 205:
                    case 206:
                    case 207:
                    case 196:
                    case 204:
                    case 218:
                    case 219:
                    case 220:
                    case 221:
                    case 222:
                    case 223:
                    case 224:
                    case 225:
                    case 226:
                    case 227:
                    case 228:
                    case 229:
                    case 230:
                    case 231:
                    case 232:
                    case 233:
                    case 234:
                    case 235:
                    case 236:
                    case 237:
                    case 238:
                    case 239:
                    case 254:
                      (a = A.getUint16()) > 2 ? A.skip(a - 2) : A.skip(-2);
                  }
                  if (s) break;
                }
              let g = A.pos - t;
              return -1 === i
                ? (m(
                    'Inline DCTDecode image stream: EOI marker not found, searching for /EI/ instead.'
                  ),
                  A.skip(-g),
                  this.findDefaultInlineStreamEnd(A))
                : (this.inlineStreamSkipEI(A), g);
            }
            findASCII85DecodeInlineStreamEnd(A) {
              let t;
              let i = A.pos;
              for (; -1 !== (t = A.getByte()); )
                if (126 === t) {
                  let i = A.pos;
                  for (t = A.peekByte(); Ab(t); ) A.skip(), (t = A.peekByte());
                  if (62 === t) {
                    A.skip();
                    break;
                  }
                  if (A.pos > i) {
                    let t = A.peekBytes(2);
                    if (69 === t[0] && 73 === t[1]) break;
                  }
                }
              let a = A.pos - i;
              return -1 === t
                ? (m(
                    'Inline ASCII85Decode image stream: EOD marker not found, searching for /EI/ instead.'
                  ),
                  A.skip(-a),
                  this.findDefaultInlineStreamEnd(A))
                : (this.inlineStreamSkipEI(A), a);
            }
            findASCIIHexDecodeInlineStreamEnd(A) {
              let t;
              let i = A.pos;
              for (; -1 !== (t = A.getByte()) && 62 !== t; );
              let a = A.pos - i;
              return -1 === t
                ? (m(
                    'Inline ASCIIHexDecode image stream: EOD marker not found, searching for /EI/ instead.'
                  ),
                  A.skip(-a),
                  this.findDefaultInlineStreamEnd(A))
                : (this.inlineStreamSkipEI(A), a);
            }
            inlineStreamSkipEI(A) {
              let t,
                i = 0;
              for (; -1 !== (t = A.getByte()); )
                if (0 === i) i = 69 === t ? 1 : 0;
                else if (1 === i) i = 73 === t ? 2 : 0;
                else if (2 === i) break;
            }
            makeInlineImage(A) {
              let t, i, a, s;
              let g = this.lexer,
                r = g.stream,
                n = Object.create(null);
              for (; !Ao(this.buf1, 'ID') && this.buf1 !== z; ) {
                if (!(this.buf1 instanceof Ae))
                  throw new x('Dictionary key must be a name object');
                let t = this.buf1.name;
                if ((this.shift(), this.buf1 === z)) break;
                n[t] = this.getObj(A);
              }
              -1 !== g.beginInlineImagePos &&
                (t = r.pos - g.beginInlineImagePos);
              let o = this.xref.fetchIfRef(n.F || n.Filter);
              if (o instanceof Ae) i = o.name;
              else if (Array.isArray(o)) {
                let A = this.xref.fetchIfRef(o[0]);
                A instanceof Ae && (i = A.name);
              }
              let I = r.pos;
              switch (i) {
                case 'DCT':
                case 'DCTDecode':
                  a = this.findDCTDecodeInlineStreamEnd(r);
                  break;
                case 'A85':
                case 'ASCII85Decode':
                  a = this.findASCII85DecodeInlineStreamEnd(r);
                  break;
                case 'AHx':
                case 'ASCIIHexDecode':
                  a = this.findASCIIHexDecodeInlineStreamEnd(r);
                  break;
                default:
                  a = this.findDefaultInlineStreamEnd(r);
              }
              if (a < 1e3 && t > 0) {
                let A = r.pos;
                (r.pos = g.beginInlineImagePos),
                  (s = (function (A) {
                    let t = [],
                      i = A.length,
                      a = 0;
                    for (; a < i - 1; ) t.push((A[a++] << 8) | A[a++]);
                    return (
                      a < i && t.push(A[a]),
                      i + '_' + String.fromCharCode.apply(null, t)
                    );
                  })(r.getBytes(t + a))),
                  (r.pos = A);
                let i = this.imageCache[s];
                if (void 0 !== i)
                  return (this.buf2 = At.get('EI')), this.shift(), i.reset(), i;
              }
              let l = new Aa(this.xref);
              for (let A in n) l.set(A, n[A]);
              let C = r.makeSubStream(I, a, l);
              return (
                A && (C = A.createStream(C, a)),
                ((C = this.filter(C, l, a)).dict = l),
                void 0 !== s &&
                  ((C.cacheKey = 'inline_img_' + ++this._imageId),
                  (this.imageCache[s] = C)),
                (this.buf2 = At.get('EI')),
                this.shift(),
                C
              );
            }
            #w(A) {
              let { stream: t } = this.lexer;
              t.pos = A;
              let i = new Uint8Array([101, 110, 100]),
                a = i.length,
                s = [
                  new Uint8Array([115, 116, 114, 101, 97, 109]),
                  new Uint8Array([115, 116, 101, 97, 109]),
                  new Uint8Array([115, 116, 114, 101, 97]),
                ],
                g = 9 - a;
              for (; t.pos < t.end; ) {
                let r = t.peekBytes(2048),
                  n = r.length - 9;
                if (n <= 0) break;
                let o = 0;
                for (; o < n; ) {
                  let n = 0;
                  for (; n < a && r[o + n] === i[n]; ) n++;
                  if (n >= a) {
                    let a = !1;
                    for (let A of s) {
                      let t = A.length,
                        s = 0;
                      for (; s < t && r[o + n + s] === A[s]; ) s++;
                      if (s >= g) {
                        a = !0;
                        break;
                      }
                      if (s >= t) {
                        Ab(r[o + n + s]) &&
                          (p(
                            `Found "${M([...i, ...A])}" when searching for endstream command.`
                          ),
                          (a = !0));
                        break;
                      }
                    }
                    if (a) return (t.pos += o), t.pos - A;
                  }
                  o++;
                }
                t.pos += n;
              }
              return -1;
            }
            makeStream(A, t) {
              let i = this.lexer,
                a = i.stream;
              i.skipToNextLine();
              let s = a.pos - 1,
                g = A.get('Length');
              if (
                (Number.isInteger(g) ||
                  (p(`Bad length "${g && g.toString()}" in stream.`), (g = 0)),
                (a.pos = s + g),
                i.nextChar(),
                this.tryShift() && Ao(this.buf2, 'endstream'))
              )
                this.shift();
              else {
                if ((g = this.#w(s)) < 0)
                  throw new x('Missing endstream command.');
                i.nextChar(), this.shift(), this.shift();
              }
              return (
                this.shift(),
                (a = a.makeSubStream(s, g, A)),
                t && (a = t.createStream(a, g)),
                ((a = this.filter(a, A, g)).dict = A),
                a
              );
            }
            filter(A, t, i) {
              let a = t.get('F', 'Filter'),
                s = t.get('DP', 'DecodeParms');
              if (a instanceof Ae)
                return (
                  Array.isArray(s) &&
                    m(
                      '/DecodeParms should not be an Array, when /Filter is a Name.'
                    ),
                  this.makeFilter(A, a.name, i, s)
                );
              let g = i;
              if (Array.isArray(a)) {
                let t = a,
                  i = s;
                for (let r = 0, n = t.length; r < n; ++r) {
                  if (!((a = this.xref.fetchIfRef(t[r])) instanceof Ae))
                    throw new x(`Bad filter name "${a}"`);
                  (s = null),
                    Array.isArray(i) &&
                      r in i &&
                      (s = this.xref.fetchIfRef(i[r])),
                    (A = this.makeFilter(A, a.name, g, s)),
                    (g = null);
                }
              }
              return A;
            }
            makeFilter(A, t, i, a) {
              if (0 === i) return m(`Empty "${t}" stream.`), new AX();
              try {
                switch (t) {
                  case 'Fl':
                  case 'FlateDecode':
                    return a ? new tt(new em(A, i), i, a) : new em(A, i);
                  case 'LZW':
                  case 'LZWDecode':
                    let s = 1;
                    if (a)
                      return (
                        a.has('EarlyChange') && (s = a.get('EarlyChange')),
                        new tt(new te(A, i, s), i, a)
                      );
                    return new te(A, i, s);
                  case 'DCT':
                  case 'DCTDecode':
                    return new e5(A, i, a);
                  case 'JPX':
                  case 'JPXDecode':
                    return new tA(A, i, a);
                  case 'A85':
                  case 'ASCII85Decode':
                    return new er(A, i);
                  case 'AHx':
                  case 'ASCIIHexDecode':
                    return new en(A, i);
                  case 'CCF':
                  case 'CCITTFaxDecode':
                    return new ec(A, i, a);
                  case 'RL':
                  case 'RunLengthDecode':
                    return new ti(A, i);
                  case 'JBIG2Decode':
                    return new ej(A, i, a);
                }
                return m(`Filter "${t}" is not supported.`), A;
              } catch (A) {
                if (A instanceof AQ) throw A;
                return m(`Invalid stream: "${A}"`), new AX();
              }
            }
          }
          let ts = [
            1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 0, 0,
            0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,
            0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0,
          ];
          function tg(A) {
            return A >= 48 && A <= 57
              ? 15 & A
              : (A >= 65 && A <= 70) || (A >= 97 && A <= 102)
                ? 9 + (15 & A)
                : -1;
          }
          class tr {
            constructor(A, t = null) {
              (this.stream = A),
                this.nextChar(),
                (this.strBuf = []),
                (this.knownCommands = t),
                (this._hexStringNumWarn = 0),
                (this.beginInlineImagePos = -1);
            }
            nextChar() {
              return (this.currentChar = this.stream.getByte());
            }
            peekChar() {
              return this.stream.peekByte();
            }
            getNumber() {
              let A = this.currentChar,
                t = !1,
                i = 0,
                a = 1;
              if (
                (45 === A
                  ? ((a = -1),
                    45 === (A = this.nextChar()) && (A = this.nextChar()))
                  : 43 === A && (A = this.nextChar()),
                10 === A || 13 === A)
              )
                do A = this.nextChar();
                while (10 === A || 13 === A);
              if (
                (46 === A && ((i = 10), (A = this.nextChar())),
                A < 48 || A > 57)
              ) {
                let t = `Invalid number: ${String.fromCharCode(A)} (charCode ${A})`;
                if (Ab(A) || -1 === A) return p(`Lexer.getNumber - "${t}".`), 0;
                throw new x(t);
              }
              let s = A - 48,
                g = 0,
                r = 1;
              for (; (A = this.nextChar()) >= 0; )
                if (A >= 48 && A <= 57) {
                  let a = A - 48;
                  t
                    ? (g = 10 * g + a)
                    : (0 !== i && (i *= 10), (s = 10 * s + a));
                } else if (46 === A) {
                  if (0 !== i) break;
                  i = 1;
                } else if (45 === A)
                  m('Badly formatted number: minus sign in the middle');
                else {
                  if (69 !== A && 101 !== A) break;
                  if (43 === (A = this.peekChar()) || 45 === A)
                    (r = 45 === A ? -1 : 1), this.nextChar();
                  else if (A < 48 || A > 57) break;
                  t = !0;
                }
              return 0 !== i && (s /= i), t && (s *= 10 ** (r * g)), a * s;
            }
            getString() {
              let A = 1,
                t = !1,
                i = this.strBuf;
              i.length = 0;
              let a = this.nextChar();
              for (;;) {
                let s = !1;
                switch (0 | a) {
                  case -1:
                    m('Unterminated string'), (t = !0);
                    break;
                  case 40:
                    ++A, i.push('(');
                    break;
                  case 41:
                    0 == --A ? (this.nextChar(), (t = !0)) : i.push(')');
                    break;
                  case 92:
                    switch ((a = this.nextChar())) {
                      case -1:
                        m('Unterminated string'), (t = !0);
                        break;
                      case 110:
                        i.push('\n');
                        break;
                      case 114:
                        i.push('\r');
                        break;
                      case 116:
                        i.push('	');
                        break;
                      case 98:
                        i.push('\b');
                        break;
                      case 102:
                        i.push('\f');
                        break;
                      case 92:
                      case 40:
                      case 41:
                      default:
                        i.push(String.fromCharCode(a));
                        break;
                      case 48:
                      case 49:
                      case 50:
                      case 51:
                      case 52:
                      case 53:
                      case 54:
                      case 55:
                        let g = 15 & a;
                        (a = this.nextChar()),
                          (s = !0),
                          a >= 48 &&
                            a <= 55 &&
                            ((g = (g << 3) + (15 & a)),
                            (a = this.nextChar()) >= 48 &&
                              a <= 55 &&
                              ((s = !1), (g = (g << 3) + (15 & a)))),
                          i.push(String.fromCharCode(g));
                        break;
                      case 13:
                        10 === this.peekChar() && this.nextChar();
                      case 10:
                    }
                    break;
                  default:
                    i.push(String.fromCharCode(a));
                }
                if (t) break;
                s || (a = this.nextChar());
              }
              return i.join('');
            }
            getName() {
              let A, t;
              let i = this.strBuf;
              for (i.length = 0; (A = this.nextChar()) >= 0 && !ts[A]; )
                if (35 === A) {
                  if (ts[(A = this.nextChar())]) {
                    m(
                      'Lexer_getName: NUMBER SIGN (#) should be followed by a hexadecimal number.'
                    ),
                      i.push('#');
                    break;
                  }
                  let a = tg(A);
                  if (-1 !== a) {
                    (t = A), (A = this.nextChar());
                    let s = tg(A);
                    if (-1 === s) {
                      if (
                        (m(
                          `Lexer_getName: Illegal digit (${String.fromCharCode(A)}) in hexadecimal number.`
                        ),
                        i.push('#', String.fromCharCode(t)),
                        ts[A])
                      )
                        break;
                      i.push(String.fromCharCode(A));
                      continue;
                    }
                    i.push(String.fromCharCode((a << 4) | s));
                  } else i.push('#', String.fromCharCode(A));
                } else i.push(String.fromCharCode(A));
              return (
                i.length > 127 &&
                  m(
                    `Name token is longer than allowed by the spec: ${i.length}`
                  ),
                Ae.get(i.join(''))
              );
            }
            _hexStringWarn(A) {
              5 != this._hexStringNumWarn++
                ? this._hexStringNumWarn > 5 ||
                  m(`getHexString - ignoring invalid character: ${A}`)
                : m('getHexString - ignoring additional invalid characters.');
            }
            getHexString() {
              let A = this.strBuf;
              A.length = 0;
              let t = this.currentChar,
                i = -1,
                a = -1;
              for (this._hexStringNumWarn = 0; ; ) {
                if (t < 0) {
                  m('Unterminated hex string');
                  break;
                }
                if (62 === t) {
                  this.nextChar();
                  break;
                }
                1 !== ts[t] &&
                  (-1 === (a = tg(t))
                    ? this._hexStringWarn(t)
                    : -1 === i
                      ? (i = a)
                      : (A.push(String.fromCharCode((i << 4) | a)), (i = -1))),
                  (t = this.nextChar());
              }
              return (
                -1 !== i && A.push(String.fromCharCode(i << 4)), A.join('')
              );
            }
            getObj() {
              let A = !1,
                t = this.currentChar;
              for (;;) {
                if (t < 0) return z;
                if (A) (10 !== t && 13 !== t) || (A = !1);
                else if (37 === t) A = !0;
                else if (1 !== ts[t]) break;
                t = this.nextChar();
              }
              switch (0 | t) {
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 43:
                case 45:
                case 46:
                  return this.getNumber();
                case 40:
                  return this.getString();
                case 47:
                  return this.getName();
                case 91:
                  return this.nextChar(), At.get('[');
                case 93:
                  return this.nextChar(), At.get(']');
                case 60:
                  if (60 === (t = this.nextChar()))
                    return this.nextChar(), At.get('<<');
                  return this.getHexString();
                case 62:
                  if (62 === (t = this.nextChar()))
                    return this.nextChar(), At.get('>>');
                  return At.get('>');
                case 123:
                  return this.nextChar(), At.get('{');
                case 125:
                  return this.nextChar(), At.get('}');
                case 41:
                  throw (this.nextChar(), new x(`Illegal character: ${t}`));
              }
              let i = String.fromCharCode(t);
              if (t < 32 || t > 127) {
                let A = this.peekChar();
                if (A >= 32 && A <= 127) return this.nextChar(), At.get(i);
              }
              let a = this.knownCommands,
                s = void 0 !== a?.[i];
              for (; (t = this.nextChar()) >= 0 && !ts[t]; ) {
                let A = i + String.fromCharCode(t);
                if (s && void 0 === a[A]) break;
                if (128 === i.length)
                  throw new x(`Command token too long: ${i.length}`);
                (i = A), (s = void 0 !== a?.[i]);
              }
              return (
                'true' === i ||
                ('false' !== i &&
                  ('null' === i
                    ? null
                    : ('BI' === i &&
                        (this.beginInlineImagePos = this.stream.pos),
                      At.get(i))))
              );
            }
            skipToNextLine() {
              let A = this.currentChar;
              for (; A >= 0; ) {
                if (13 === A) {
                  10 === (A = this.nextChar()) && this.nextChar();
                  break;
                }
                if (10 === A) {
                  this.nextChar();
                  break;
                }
                A = this.nextChar();
              }
            }
          }
          class tn {
            static create(A) {
              let t, i;
              function a(A, t, i = !1) {
                let a = A.get(t);
                if (Number.isInteger(a) && (i ? a >= 0 : a > 0)) return a;
                throw Error(
                  `The "${t}" parameter in the linearization dictionary is invalid.`
                );
              }
              let s = new ta({ lexer: new tr(A), xref: null }),
                g = s.getObj(),
                r = s.getObj(),
                n = s.getObj(),
                o = s.getObj();
              if (
                !(
                  Number.isInteger(g) &&
                  Number.isInteger(r) &&
                  Ao(n, 'obj') &&
                  o instanceof Aa &&
                  'number' == typeof (t = o.get('Linearized')) &&
                  t > 0
                )
              )
                return null;
              if ((i = a(o, 'L')) !== A.length)
                throw Error(
                  'The "L" parameter in the linearization dictionary does not equal the stream length.'
                );
              return {
                length: i,
                hints: (function (A) {
                  let t;
                  let i = A.get('H');
                  if (Array.isArray(i) && (2 === (t = i.length) || 4 === t)) {
                    for (let A = 0; A < t; A++) {
                      let t = i[A];
                      if (!(Number.isInteger(t) && t > 0))
                        throw Error(
                          `Hint (${A}) in the linearization dictionary is invalid.`
                        );
                    }
                    return i;
                  }
                  throw Error(
                    'Hint array in the linearization dictionary is invalid.'
                  );
                })(o),
                objectNumberFirst: a(o, 'O'),
                endFirst: a(o, 'E'),
                numPages: a(o, 'N'),
                mainXRefEntriesOffset: a(o, 'T'),
                pageFirst: o.has('P') ? a(o, 'P', !0) : 0,
              };
            }
          }
          let to = [
            'Adobe-GB1-UCS2',
            'Adobe-CNS1-UCS2',
            'Adobe-Japan1-UCS2',
            'Adobe-Korea1-UCS2',
            '78-EUC-H',
            '78-EUC-V',
            '78-H',
            '78-RKSJ-H',
            '78-RKSJ-V',
            '78-V',
            '78ms-RKSJ-H',
            '78ms-RKSJ-V',
            '83pv-RKSJ-H',
            '90ms-RKSJ-H',
            '90ms-RKSJ-V',
            '90msp-RKSJ-H',
            '90msp-RKSJ-V',
            '90pv-RKSJ-H',
            '90pv-RKSJ-V',
            'Add-H',
            'Add-RKSJ-H',
            'Add-RKSJ-V',
            'Add-V',
            'Adobe-CNS1-0',
            'Adobe-CNS1-1',
            'Adobe-CNS1-2',
            'Adobe-CNS1-3',
            'Adobe-CNS1-4',
            'Adobe-CNS1-5',
            'Adobe-CNS1-6',
            'Adobe-GB1-0',
            'Adobe-GB1-1',
            'Adobe-GB1-2',
            'Adobe-GB1-3',
            'Adobe-GB1-4',
            'Adobe-GB1-5',
            'Adobe-Japan1-0',
            'Adobe-Japan1-1',
            'Adobe-Japan1-2',
            'Adobe-Japan1-3',
            'Adobe-Japan1-4',
            'Adobe-Japan1-5',
            'Adobe-Japan1-6',
            'Adobe-Korea1-0',
            'Adobe-Korea1-1',
            'Adobe-Korea1-2',
            'B5-H',
            'B5-V',
            'B5pc-H',
            'B5pc-V',
            'CNS-EUC-H',
            'CNS-EUC-V',
            'CNS1-H',
            'CNS1-V',
            'CNS2-H',
            'CNS2-V',
            'ETHK-B5-H',
            'ETHK-B5-V',
            'ETen-B5-H',
            'ETen-B5-V',
            'ETenms-B5-H',
            'ETenms-B5-V',
            'EUC-H',
            'EUC-V',
            'Ext-H',
            'Ext-RKSJ-H',
            'Ext-RKSJ-V',
            'Ext-V',
            'GB-EUC-H',
            'GB-EUC-V',
            'GB-H',
            'GB-V',
            'GBK-EUC-H',
            'GBK-EUC-V',
            'GBK2K-H',
            'GBK2K-V',
            'GBKp-EUC-H',
            'GBKp-EUC-V',
            'GBT-EUC-H',
            'GBT-EUC-V',
            'GBT-H',
            'GBT-V',
            'GBTpc-EUC-H',
            'GBTpc-EUC-V',
            'GBpc-EUC-H',
            'GBpc-EUC-V',
            'H',
            'HKdla-B5-H',
            'HKdla-B5-V',
            'HKdlb-B5-H',
            'HKdlb-B5-V',
            'HKgccs-B5-H',
            'HKgccs-B5-V',
            'HKm314-B5-H',
            'HKm314-B5-V',
            'HKm471-B5-H',
            'HKm471-B5-V',
            'HKscs-B5-H',
            'HKscs-B5-V',
            'Hankaku',
            'Hiragana',
            'KSC-EUC-H',
            'KSC-EUC-V',
            'KSC-H',
            'KSC-Johab-H',
            'KSC-Johab-V',
            'KSC-V',
            'KSCms-UHC-H',
            'KSCms-UHC-HW-H',
            'KSCms-UHC-HW-V',
            'KSCms-UHC-V',
            'KSCpc-EUC-H',
            'KSCpc-EUC-V',
            'Katakana',
            'NWP-H',
            'NWP-V',
            'RKSJ-H',
            'RKSJ-V',
            'Roman',
            'UniCNS-UCS2-H',
            'UniCNS-UCS2-V',
            'UniCNS-UTF16-H',
            'UniCNS-UTF16-V',
            'UniCNS-UTF32-H',
            'UniCNS-UTF32-V',
            'UniCNS-UTF8-H',
            'UniCNS-UTF8-V',
            'UniGB-UCS2-H',
            'UniGB-UCS2-V',
            'UniGB-UTF16-H',
            'UniGB-UTF16-V',
            'UniGB-UTF32-H',
            'UniGB-UTF32-V',
            'UniGB-UTF8-H',
            'UniGB-UTF8-V',
            'UniJIS-UCS2-H',
            'UniJIS-UCS2-HW-H',
            'UniJIS-UCS2-HW-V',
            'UniJIS-UCS2-V',
            'UniJIS-UTF16-H',
            'UniJIS-UTF16-V',
            'UniJIS-UTF32-H',
            'UniJIS-UTF32-V',
            'UniJIS-UTF8-H',
            'UniJIS-UTF8-V',
            'UniJIS2004-UTF16-H',
            'UniJIS2004-UTF16-V',
            'UniJIS2004-UTF32-H',
            'UniJIS2004-UTF32-V',
            'UniJIS2004-UTF8-H',
            'UniJIS2004-UTF8-V',
            'UniJISPro-UCS2-HW-V',
            'UniJISPro-UCS2-V',
            'UniJISPro-UTF8-V',
            'UniJISX0213-UTF32-H',
            'UniJISX0213-UTF32-V',
            'UniJISX02132004-UTF32-H',
            'UniJISX02132004-UTF32-V',
            'UniKS-UCS2-H',
            'UniKS-UCS2-V',
            'UniKS-UTF16-H',
            'UniKS-UTF16-V',
            'UniKS-UTF32-H',
            'UniKS-UTF32-V',
            'UniKS-UTF8-H',
            'UniKS-UTF8-V',
            'V',
            'WP-Symbol',
          ];
          class tI {
            constructor(A = !1) {
              (this.codespaceRanges = [[], [], [], []]),
                (this.numCodespaceRanges = 0),
                (this._map = []),
                (this.name = ''),
                (this.vertical = !1),
                (this.useCMap = null),
                (this.builtInCMap = A);
            }
            addCodespaceRange(A, t, i) {
              this.codespaceRanges[A - 1].push(t, i), this.numCodespaceRanges++;
            }
            mapCidRange(A, t, i) {
              if (t - A > 16777215)
                throw Error('mapCidRange - ignoring data above MAX_MAP_RANGE.');
              for (; A <= t; ) this._map[A++] = i++;
            }
            mapBfRange(A, t, i) {
              if (t - A > 16777215)
                throw Error('mapBfRange - ignoring data above MAX_MAP_RANGE.');
              let a = i.length - 1;
              for (; A <= t; ) {
                this._map[A++] = i;
                let t = i.charCodeAt(a) + 1;
                i =
                  t > 255
                    ? i.substring(0, a - 1) +
                      String.fromCharCode(i.charCodeAt(a - 1) + 1) +
                      '\x00'
                    : i.substring(0, a) + String.fromCharCode(t);
              }
            }
            mapBfRangeToArray(A, t, i) {
              if (t - A > 16777215)
                throw Error(
                  'mapBfRangeToArray - ignoring data above MAX_MAP_RANGE.'
                );
              let a = i.length,
                s = 0;
              for (; A <= t && s < a; ) (this._map[A] = i[s++]), ++A;
            }
            mapOne(A, t) {
              this._map[A] = t;
            }
            lookup(A) {
              return this._map[A];
            }
            contains(A) {
              return void 0 !== this._map[A];
            }
            forEach(A) {
              let t = this._map,
                i = t.length;
              if (i <= 65536)
                for (let a = 0; a < i; a++) void 0 !== t[a] && A(a, t[a]);
              else for (let i in t) A(i, t[i]);
            }
            charCodeOf(A) {
              let t = this._map;
              if (t.length <= 65536) return t.indexOf(A);
              for (let i in t) if (t[i] === A) return 0 | i;
              return -1;
            }
            getMap() {
              return this._map;
            }
            readCharCode(A, t, i) {
              let a = 0,
                s = this.codespaceRanges;
              for (let g = 0, r = s.length; g < r; g++) {
                a = ((a << 8) | A.charCodeAt(t + g)) >>> 0;
                let r = s[g];
                for (let A = 0, t = r.length; A < t; ) {
                  let t = r[A++],
                    s = r[A++];
                  if (a >= t && a <= s) {
                    (i.charcode = a), (i.length = g + 1);
                    return;
                  }
                }
              }
              (i.charcode = 0), (i.length = 1);
            }
            getCharCodeLength(A) {
              let t = this.codespaceRanges;
              for (let i = 0, a = t.length; i < a; i++) {
                let a = t[i];
                for (let t = 0, s = a.length; t < s; ) {
                  let s = a[t++],
                    g = a[t++];
                  if (A >= s && A <= g) return i + 1;
                }
              }
              return 1;
            }
            get length() {
              return this._map.length;
            }
            get isIdentityCMap() {
              if (
                ('Identity-H' !== this.name && 'Identity-V' !== this.name) ||
                65536 !== this._map.length
              )
                return !1;
              for (let A = 0; A < 65536; A++) if (this._map[A] !== A) return !1;
              return !0;
            }
          }
          class tl extends tI {
            constructor(A, t) {
              super(), (this.vertical = A), this.addCodespaceRange(t, 0, 65535);
            }
            mapCidRange(A, t, i) {
              y('should not call mapCidRange');
            }
            mapBfRange(A, t, i) {
              y('should not call mapBfRange');
            }
            mapBfRangeToArray(A, t, i) {
              y('should not call mapBfRangeToArray');
            }
            mapOne(A, t) {
              y('should not call mapCidOne');
            }
            lookup(A) {
              return Number.isInteger(A) && A <= 65535 ? A : void 0;
            }
            contains(A) {
              return Number.isInteger(A) && A <= 65535;
            }
            forEach(A) {
              for (let t = 0; t <= 65535; t++) A(t, t);
            }
            charCodeOf(A) {
              return Number.isInteger(A) && A <= 65535 ? A : -1;
            }
            getMap() {
              let A = Array(65536);
              for (let t = 0; t <= 65535; t++) A[t] = t;
              return A;
            }
            get length() {
              return 65536;
            }
            get isIdentityCMap() {
              y('should not access .isIdentityCMap');
            }
          }
          function tC(A) {
            let t = 0;
            for (let i = 0; i < A.length; i++) t = (t << 8) | A.charCodeAt(i);
            return t >>> 0;
          }
          function tB(A) {
            if ('string' != typeof A)
              throw new x('Malformed CMap: expected string.');
          }
          function th(A) {
            if (!Number.isInteger(A))
              throw new x('Malformed CMap: expected int.');
          }
          async function tQ(A, t, i, a) {
            let s, g;
            A: for (;;)
              try {
                let i = t.getObj();
                if (i === z) break;
                if (i instanceof Ae)
                  'WMode' === i.name
                    ? (function (A, t) {
                        let i = t.getObj();
                        Number.isInteger(i) && (A.vertical = !!i);
                      })(A, t)
                    : 'CMapName' === i.name &&
                      (function (A, t) {
                        let i = t.getObj();
                        i instanceof Ae && (A.name = i.name);
                      })(A, t),
                    (s = i);
                else if (i instanceof At)
                  switch (i.cmd) {
                    case 'endcmap':
                      break A;
                    case 'usecmap':
                      s instanceof Ae && (g = s.name);
                      break;
                    case 'begincodespacerange':
                      !(function (A, t) {
                        for (;;) {
                          let i = t.getObj();
                          if (i === z) break;
                          if (Ao(i, 'endcodespacerange')) return;
                          if ('string' != typeof i) break;
                          let a = tC(i);
                          if ('string' != typeof (i = t.getObj())) break;
                          let s = tC(i);
                          A.addCodespaceRange(i.length, a, s);
                        }
                        throw new x('Invalid codespace range.');
                      })(A, t);
                      break;
                    case 'beginbfchar':
                      !(function (A, t) {
                        for (;;) {
                          let i = t.getObj();
                          if (i === z) break;
                          if (Ao(i, 'endbfchar')) return;
                          tB(i);
                          let a = tC(i);
                          tB((i = t.getObj()));
                          let s = i;
                          A.mapOne(a, s);
                        }
                      })(A, t);
                      break;
                    case 'begincidchar':
                      !(function (A, t) {
                        for (;;) {
                          let i = t.getObj();
                          if (i === z) break;
                          if (Ao(i, 'endcidchar')) return;
                          tB(i);
                          let a = tC(i);
                          th((i = t.getObj()));
                          let s = i;
                          A.mapOne(a, s);
                        }
                      })(A, t);
                      break;
                    case 'beginbfrange':
                      !(function (A, t) {
                        for (;;) {
                          let i = t.getObj();
                          if (i === z) break;
                          if (Ao(i, 'endbfrange')) return;
                          tB(i);
                          let a = tC(i);
                          tB((i = t.getObj()));
                          let s = tC(i);
                          if (
                            Number.isInteger((i = t.getObj())) ||
                            'string' == typeof i
                          ) {
                            let t = Number.isInteger(i)
                              ? String.fromCharCode(i)
                              : i;
                            A.mapBfRange(a, s, t);
                          } else {
                            if (!Ao(i, '[')) break;
                            {
                              i = t.getObj();
                              let g = [];
                              for (; !Ao(i, ']') && i !== z; )
                                g.push(i), (i = t.getObj());
                              A.mapBfRangeToArray(a, s, g);
                            }
                          }
                        }
                        throw new x('Invalid bf range.');
                      })(A, t);
                      break;
                    case 'begincidrange':
                      !(function (A, t) {
                        for (;;) {
                          let i = t.getObj();
                          if (i === z) break;
                          if (Ao(i, 'endcidrange')) return;
                          tB(i);
                          let a = tC(i);
                          tB((i = t.getObj()));
                          let s = tC(i);
                          th((i = t.getObj()));
                          let g = i;
                          A.mapCidRange(a, s, g);
                        }
                      })(A, t);
                  }
              } catch (A) {
                if (A instanceof AQ) throw A;
                m('Invalid cMap data: ' + A);
                continue;
              }
            return !a && g && (a = g), a ? tc(A, i, a) : A;
          }
          async function tc(A, t, i) {
            if (((A.useCMap = await tE(i, t)), 0 === A.numCodespaceRanges)) {
              let t = A.useCMap.codespaceRanges;
              for (let i = 0; i < t.length; i++)
                A.codespaceRanges[i] = t[i].slice();
              A.numCodespaceRanges = A.useCMap.numCodespaceRanges;
            }
            return (
              A.useCMap.forEach(function (t, i) {
                A.contains(t) || A.mapOne(t, A.useCMap.lookup(t));
              }),
              A
            );
          }
          async function tE(A, t) {
            if ('Identity-H' === A) return new tl(!1, 2);
            if ('Identity-V' === A) return new tl(!0, 2);
            if (!to.includes(A)) throw Error('Unknown CMap name: ' + A);
            if (!t) throw Error('Built-in CMap parameters are not provided.');
            let { cMapData: i, compressionType: a } = await t(A),
              s = new tI(!0);
            if (a === d.BINARY)
              return new ei().process(i, s, (A) => tc(s, t, A));
            if (a === d.NONE) {
              let A = new tr(new AZ(i));
              return tQ(s, A, t, null);
            }
            throw Error(`Invalid CMap "compressionType" value: ${a}`);
          }
          class tu {
            static async create({
              encoding: A,
              fetchBuiltInCMap: t,
              useCMap: i,
            }) {
              if (A instanceof Ae) return tE(A.name, t);
              if (A instanceof AC) {
                let a = await tQ(new tI(), new tr(A), t, i);
                return a.isIdentityCMap ? tE(a.name, t) : a;
              }
              throw Error('Encoding required.');
            }
          }
          let td = [
              '.notdef',
              'space',
              'exclam',
              'quotedbl',
              'numbersign',
              'dollar',
              'percent',
              'ampersand',
              'quoteright',
              'parenleft',
              'parenright',
              'asterisk',
              'plus',
              'comma',
              'hyphen',
              'period',
              'slash',
              'zero',
              'one',
              'two',
              'three',
              'four',
              'five',
              'six',
              'seven',
              'eight',
              'nine',
              'colon',
              'semicolon',
              'less',
              'equal',
              'greater',
              'question',
              'at',
              'A',
              'B',
              'C',
              'D',
              'E',
              'F',
              'G',
              'H',
              'I',
              'J',
              'K',
              'L',
              'M',
              'N',
              'O',
              'P',
              'Q',
              'R',
              'S',
              'T',
              'U',
              'V',
              'W',
              'X',
              'Y',
              'Z',
              'bracketleft',
              'backslash',
              'bracketright',
              'asciicircum',
              'underscore',
              'quoteleft',
              'a',
              'b',
              'c',
              'd',
              'e',
              'f',
              'g',
              'h',
              'i',
              'j',
              'k',
              'l',
              'm',
              'n',
              'o',
              'p',
              'q',
              'r',
              's',
              't',
              'u',
              'v',
              'w',
              'x',
              'y',
              'z',
              'braceleft',
              'bar',
              'braceright',
              'asciitilde',
              'exclamdown',
              'cent',
              'sterling',
              'fraction',
              'yen',
              'florin',
              'section',
              'currency',
              'quotesingle',
              'quotedblleft',
              'guillemotleft',
              'guilsinglleft',
              'guilsinglright',
              'fi',
              'fl',
              'endash',
              'dagger',
              'daggerdbl',
              'periodcentered',
              'paragraph',
              'bullet',
              'quotesinglbase',
              'quotedblbase',
              'quotedblright',
              'guillemotright',
              'ellipsis',
              'perthousand',
              'questiondown',
              'grave',
              'acute',
              'circumflex',
              'tilde',
              'macron',
              'breve',
              'dotaccent',
              'dieresis',
              'ring',
              'cedilla',
              'hungarumlaut',
              'ogonek',
              'caron',
              'emdash',
              'AE',
              'ordfeminine',
              'Lslash',
              'Oslash',
              'OE',
              'ordmasculine',
              'ae',
              'dotlessi',
              'lslash',
              'oslash',
              'oe',
              'germandbls',
              'onesuperior',
              'logicalnot',
              'mu',
              'trademark',
              'Eth',
              'onehalf',
              'plusminus',
              'Thorn',
              'onequarter',
              'divide',
              'brokenbar',
              'degree',
              'thorn',
              'threequarters',
              'twosuperior',
              'registered',
              'minus',
              'eth',
              'multiply',
              'threesuperior',
              'copyright',
              'Aacute',
              'Acircumflex',
              'Adieresis',
              'Agrave',
              'Aring',
              'Atilde',
              'Ccedilla',
              'Eacute',
              'Ecircumflex',
              'Edieresis',
              'Egrave',
              'Iacute',
              'Icircumflex',
              'Idieresis',
              'Igrave',
              'Ntilde',
              'Oacute',
              'Ocircumflex',
              'Odieresis',
              'Ograve',
              'Otilde',
              'Scaron',
              'Uacute',
              'Ucircumflex',
              'Udieresis',
              'Ugrave',
              'Yacute',
              'Ydieresis',
              'Zcaron',
              'aacute',
              'acircumflex',
              'adieresis',
              'agrave',
              'aring',
              'atilde',
              'ccedilla',
              'eacute',
              'ecircumflex',
              'edieresis',
              'egrave',
              'iacute',
              'icircumflex',
              'idieresis',
              'igrave',
              'ntilde',
              'oacute',
              'ocircumflex',
              'odieresis',
              'ograve',
              'otilde',
              'scaron',
              'uacute',
              'ucircumflex',
              'udieresis',
              'ugrave',
              'yacute',
              'ydieresis',
              'zcaron',
            ],
            tf = [
              '.notdef',
              'space',
              'exclamsmall',
              'Hungarumlautsmall',
              'dollaroldstyle',
              'dollarsuperior',
              'ampersandsmall',
              'Acutesmall',
              'parenleftsuperior',
              'parenrightsuperior',
              'twodotenleader',
              'onedotenleader',
              'comma',
              'hyphen',
              'period',
              'fraction',
              'zerooldstyle',
              'oneoldstyle',
              'twooldstyle',
              'threeoldstyle',
              'fouroldstyle',
              'fiveoldstyle',
              'sixoldstyle',
              'sevenoldstyle',
              'eightoldstyle',
              'nineoldstyle',
              'colon',
              'semicolon',
              'commasuperior',
              'threequartersemdash',
              'periodsuperior',
              'questionsmall',
              'asuperior',
              'bsuperior',
              'centsuperior',
              'dsuperior',
              'esuperior',
              'isuperior',
              'lsuperior',
              'msuperior',
              'nsuperior',
              'osuperior',
              'rsuperior',
              'ssuperior',
              'tsuperior',
              'ff',
              'fi',
              'fl',
              'ffi',
              'ffl',
              'parenleftinferior',
              'parenrightinferior',
              'Circumflexsmall',
              'hyphensuperior',
              'Gravesmall',
              'Asmall',
              'Bsmall',
              'Csmall',
              'Dsmall',
              'Esmall',
              'Fsmall',
              'Gsmall',
              'Hsmall',
              'Ismall',
              'Jsmall',
              'Ksmall',
              'Lsmall',
              'Msmall',
              'Nsmall',
              'Osmall',
              'Psmall',
              'Qsmall',
              'Rsmall',
              'Ssmall',
              'Tsmall',
              'Usmall',
              'Vsmall',
              'Wsmall',
              'Xsmall',
              'Ysmall',
              'Zsmall',
              'colonmonetary',
              'onefitted',
              'rupiah',
              'Tildesmall',
              'exclamdownsmall',
              'centoldstyle',
              'Lslashsmall',
              'Scaronsmall',
              'Zcaronsmall',
              'Dieresissmall',
              'Brevesmall',
              'Caronsmall',
              'Dotaccentsmall',
              'Macronsmall',
              'figuredash',
              'hypheninferior',
              'Ogoneksmall',
              'Ringsmall',
              'Cedillasmall',
              'onequarter',
              'onehalf',
              'threequarters',
              'questiondownsmall',
              'oneeighth',
              'threeeighths',
              'fiveeighths',
              'seveneighths',
              'onethird',
              'twothirds',
              'zerosuperior',
              'onesuperior',
              'twosuperior',
              'threesuperior',
              'foursuperior',
              'fivesuperior',
              'sixsuperior',
              'sevensuperior',
              'eightsuperior',
              'ninesuperior',
              'zeroinferior',
              'oneinferior',
              'twoinferior',
              'threeinferior',
              'fourinferior',
              'fiveinferior',
              'sixinferior',
              'seveninferior',
              'eightinferior',
              'nineinferior',
              'centinferior',
              'dollarinferior',
              'periodinferior',
              'commainferior',
              'Agravesmall',
              'Aacutesmall',
              'Acircumflexsmall',
              'Atildesmall',
              'Adieresissmall',
              'Aringsmall',
              'AEsmall',
              'Ccedillasmall',
              'Egravesmall',
              'Eacutesmall',
              'Ecircumflexsmall',
              'Edieresissmall',
              'Igravesmall',
              'Iacutesmall',
              'Icircumflexsmall',
              'Idieresissmall',
              'Ethsmall',
              'Ntildesmall',
              'Ogravesmall',
              'Oacutesmall',
              'Ocircumflexsmall',
              'Otildesmall',
              'Odieresissmall',
              'OEsmall',
              'Oslashsmall',
              'Ugravesmall',
              'Uacutesmall',
              'Ucircumflexsmall',
              'Udieresissmall',
              'Yacutesmall',
              'Thornsmall',
              'Ydieresissmall',
            ],
            tp = [
              '.notdef',
              'space',
              'dollaroldstyle',
              'dollarsuperior',
              'parenleftsuperior',
              'parenrightsuperior',
              'twodotenleader',
              'onedotenleader',
              'comma',
              'hyphen',
              'period',
              'fraction',
              'zerooldstyle',
              'oneoldstyle',
              'twooldstyle',
              'threeoldstyle',
              'fouroldstyle',
              'fiveoldstyle',
              'sixoldstyle',
              'sevenoldstyle',
              'eightoldstyle',
              'nineoldstyle',
              'colon',
              'semicolon',
              'commasuperior',
              'threequartersemdash',
              'periodsuperior',
              'asuperior',
              'bsuperior',
              'centsuperior',
              'dsuperior',
              'esuperior',
              'isuperior',
              'lsuperior',
              'msuperior',
              'nsuperior',
              'osuperior',
              'rsuperior',
              'ssuperior',
              'tsuperior',
              'ff',
              'fi',
              'fl',
              'ffi',
              'ffl',
              'parenleftinferior',
              'parenrightinferior',
              'hyphensuperior',
              'colonmonetary',
              'onefitted',
              'rupiah',
              'centoldstyle',
              'figuredash',
              'hypheninferior',
              'onequarter',
              'onehalf',
              'threequarters',
              'oneeighth',
              'threeeighths',
              'fiveeighths',
              'seveneighths',
              'onethird',
              'twothirds',
              'zerosuperior',
              'onesuperior',
              'twosuperior',
              'threesuperior',
              'foursuperior',
              'fivesuperior',
              'sixsuperior',
              'sevensuperior',
              'eightsuperior',
              'ninesuperior',
              'zeroinferior',
              'oneinferior',
              'twoinferior',
              'threeinferior',
              'fourinferior',
              'fiveinferior',
              'sixinferior',
              'seveninferior',
              'eightinferior',
              'nineinferior',
              'centinferior',
              'dollarinferior',
              'periodinferior',
              'commainferior',
            ],
            tm = [
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              'space',
              'exclamsmall',
              'Hungarumlautsmall',
              '',
              'dollaroldstyle',
              'dollarsuperior',
              'ampersandsmall',
              'Acutesmall',
              'parenleftsuperior',
              'parenrightsuperior',
              'twodotenleader',
              'onedotenleader',
              'comma',
              'hyphen',
              'period',
              'fraction',
              'zerooldstyle',
              'oneoldstyle',
              'twooldstyle',
              'threeoldstyle',
              'fouroldstyle',
              'fiveoldstyle',
              'sixoldstyle',
              'sevenoldstyle',
              'eightoldstyle',
              'nineoldstyle',
              'colon',
              'semicolon',
              'commasuperior',
              'threequartersemdash',
              'periodsuperior',
              'questionsmall',
              '',
              'asuperior',
              'bsuperior',
              'centsuperior',
              'dsuperior',
              'esuperior',
              '',
              '',
              '',
              'isuperior',
              '',
              '',
              'lsuperior',
              'msuperior',
              'nsuperior',
              'osuperior',
              '',
              '',
              'rsuperior',
              'ssuperior',
              'tsuperior',
              '',
              'ff',
              'fi',
              'fl',
              'ffi',
              'ffl',
              'parenleftinferior',
              '',
              'parenrightinferior',
              'Circumflexsmall',
              'hyphensuperior',
              'Gravesmall',
              'Asmall',
              'Bsmall',
              'Csmall',
              'Dsmall',
              'Esmall',
              'Fsmall',
              'Gsmall',
              'Hsmall',
              'Ismall',
              'Jsmall',
              'Ksmall',
              'Lsmall',
              'Msmall',
              'Nsmall',
              'Osmall',
              'Psmall',
              'Qsmall',
              'Rsmall',
              'Ssmall',
              'Tsmall',
              'Usmall',
              'Vsmall',
              'Wsmall',
              'Xsmall',
              'Ysmall',
              'Zsmall',
              'colonmonetary',
              'onefitted',
              'rupiah',
              'Tildesmall',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              'exclamdownsmall',
              'centoldstyle',
              'Lslashsmall',
              '',
              '',
              'Scaronsmall',
              'Zcaronsmall',
              'Dieresissmall',
              'Brevesmall',
              'Caronsmall',
              '',
              'Dotaccentsmall',
              '',
              '',
              'Macronsmall',
              '',
              '',
              'figuredash',
              'hypheninferior',
              '',
              '',
              'Ogoneksmall',
              'Ringsmall',
              'Cedillasmall',
              '',
              '',
              '',
              'onequarter',
              'onehalf',
              'threequarters',
              'questiondownsmall',
              'oneeighth',
              'threeeighths',
              'fiveeighths',
              'seveneighths',
              'onethird',
              'twothirds',
              '',
              '',
              'zerosuperior',
              'onesuperior',
              'twosuperior',
              'threesuperior',
              'foursuperior',
              'fivesuperior',
              'sixsuperior',
              'sevensuperior',
              'eightsuperior',
              'ninesuperior',
              'zeroinferior',
              'oneinferior',
              'twoinferior',
              'threeinferior',
              'fourinferior',
              'fiveinferior',
              'sixinferior',
              'seveninferior',
              'eightinferior',
              'nineinferior',
              'centinferior',
              'dollarinferior',
              'periodinferior',
              'commainferior',
              'Agravesmall',
              'Aacutesmall',
              'Acircumflexsmall',
              'Atildesmall',
              'Adieresissmall',
              'Aringsmall',
              'AEsmall',
              'Ccedillasmall',
              'Egravesmall',
              'Eacutesmall',
              'Ecircumflexsmall',
              'Edieresissmall',
              'Igravesmall',
              'Iacutesmall',
              'Icircumflexsmall',
              'Idieresissmall',
              'Ethsmall',
              'Ntildesmall',
              'Ogravesmall',
              'Oacutesmall',
              'Ocircumflexsmall',
              'Otildesmall',
              'Odieresissmall',
              'OEsmall',
              'Oslashsmall',
              'Ugravesmall',
              'Uacutesmall',
              'Ucircumflexsmall',
              'Udieresissmall',
              'Yacutesmall',
              'Thornsmall',
              'Ydieresissmall',
            ],
            ty = [
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              'space',
              'exclamsmall',
              'Hungarumlautsmall',
              'centoldstyle',
              'dollaroldstyle',
              'dollarsuperior',
              'ampersandsmall',
              'Acutesmall',
              'parenleftsuperior',
              'parenrightsuperior',
              'twodotenleader',
              'onedotenleader',
              'comma',
              'hyphen',
              'period',
              'fraction',
              'zerooldstyle',
              'oneoldstyle',
              'twooldstyle',
              'threeoldstyle',
              'fouroldstyle',
              'fiveoldstyle',
              'sixoldstyle',
              'sevenoldstyle',
              'eightoldstyle',
              'nineoldstyle',
              'colon',
              'semicolon',
              '',
              'threequartersemdash',
              '',
              'questionsmall',
              '',
              '',
              '',
              '',
              'Ethsmall',
              '',
              '',
              'onequarter',
              'onehalf',
              'threequarters',
              'oneeighth',
              'threeeighths',
              'fiveeighths',
              'seveneighths',
              'onethird',
              'twothirds',
              '',
              '',
              '',
              '',
              '',
              '',
              'ff',
              'fi',
              'fl',
              'ffi',
              'ffl',
              'parenleftinferior',
              '',
              'parenrightinferior',
              'Circumflexsmall',
              'hypheninferior',
              'Gravesmall',
              'Asmall',
              'Bsmall',
              'Csmall',
              'Dsmall',
              'Esmall',
              'Fsmall',
              'Gsmall',
              'Hsmall',
              'Ismall',
              'Jsmall',
              'Ksmall',
              'Lsmall',
              'Msmall',
              'Nsmall',
              'Osmall',
              'Psmall',
              'Qsmall',
              'Rsmall',
              'Ssmall',
              'Tsmall',
              'Usmall',
              'Vsmall',
              'Wsmall',
              'Xsmall',
              'Ysmall',
              'Zsmall',
              'colonmonetary',
              'onefitted',
              'rupiah',
              'Tildesmall',
              '',
              '',
              'asuperior',
              'centsuperior',
              '',
              '',
              '',
              '',
              'Aacutesmall',
              'Agravesmall',
              'Acircumflexsmall',
              'Adieresissmall',
              'Atildesmall',
              'Aringsmall',
              'Ccedillasmall',
              'Eacutesmall',
              'Egravesmall',
              'Ecircumflexsmall',
              'Edieresissmall',
              'Iacutesmall',
              'Igravesmall',
              'Icircumflexsmall',
              'Idieresissmall',
              'Ntildesmall',
              'Oacutesmall',
              'Ogravesmall',
              'Ocircumflexsmall',
              'Odieresissmall',
              'Otildesmall',
              'Uacutesmall',
              'Ugravesmall',
              'Ucircumflexsmall',
              'Udieresissmall',
              '',
              'eightsuperior',
              'fourinferior',
              'threeinferior',
              'sixinferior',
              'eightinferior',
              'seveninferior',
              'Scaronsmall',
              '',
              'centinferior',
              'twoinferior',
              '',
              'Dieresissmall',
              '',
              'Caronsmall',
              'osuperior',
              'fiveinferior',
              '',
              'commainferior',
              'periodinferior',
              'Yacutesmall',
              '',
              'dollarinferior',
              '',
              '',
              'Thornsmall',
              '',
              'nineinferior',
              'zeroinferior',
              'Zcaronsmall',
              'AEsmall',
              'Oslashsmall',
              'questiondownsmall',
              'oneinferior',
              'Lslashsmall',
              '',
              '',
              '',
              '',
              '',
              '',
              'Cedillasmall',
              '',
              '',
              '',
              '',
              '',
              'OEsmall',
              'figuredash',
              'hyphensuperior',
              '',
              '',
              '',
              '',
              'exclamdownsmall',
              '',
              'Ydieresissmall',
              '',
              'onesuperior',
              'twosuperior',
              'threesuperior',
              'foursuperior',
              'fivesuperior',
              'sixsuperior',
              'sevensuperior',
              'ninesuperior',
              'zerosuperior',
              '',
              'esuperior',
              'rsuperior',
              'tsuperior',
              '',
              '',
              'isuperior',
              'ssuperior',
              'dsuperior',
              '',
              '',
              '',
              '',
              '',
              'lsuperior',
              'Ogoneksmall',
              'Brevesmall',
              'Macronsmall',
              'bsuperior',
              'nsuperior',
              'msuperior',
              'commasuperior',
              'periodsuperior',
              'Dotaccentsmall',
              'Ringsmall',
              '',
              '',
              '',
              '',
            ],
            tw = [
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              'space',
              'exclam',
              'quotedbl',
              'numbersign',
              'dollar',
              'percent',
              'ampersand',
              'quotesingle',
              'parenleft',
              'parenright',
              'asterisk',
              'plus',
              'comma',
              'hyphen',
              'period',
              'slash',
              'zero',
              'one',
              'two',
              'three',
              'four',
              'five',
              'six',
              'seven',
              'eight',
              'nine',
              'colon',
              'semicolon',
              'less',
              'equal',
              'greater',
              'question',
              'at',
              'A',
              'B',
              'C',
              'D',
              'E',
              'F',
              'G',
              'H',
              'I',
              'J',
              'K',
              'L',
              'M',
              'N',
              'O',
              'P',
              'Q',
              'R',
              'S',
              'T',
              'U',
              'V',
              'W',
              'X',
              'Y',
              'Z',
              'bracketleft',
              'backslash',
              'bracketright',
              'asciicircum',
              'underscore',
              'grave',
              'a',
              'b',
              'c',
              'd',
              'e',
              'f',
              'g',
              'h',
              'i',
              'j',
              'k',
              'l',
              'm',
              'n',
              'o',
              'p',
              'q',
              'r',
              's',
              't',
              'u',
              'v',
              'w',
              'x',
              'y',
              'z',
              'braceleft',
              'bar',
              'braceright',
              'asciitilde',
              '',
              'Adieresis',
              'Aring',
              'Ccedilla',
              'Eacute',
              'Ntilde',
              'Odieresis',
              'Udieresis',
              'aacute',
              'agrave',
              'acircumflex',
              'adieresis',
              'atilde',
              'aring',
              'ccedilla',
              'eacute',
              'egrave',
              'ecircumflex',
              'edieresis',
              'iacute',
              'igrave',
              'icircumflex',
              'idieresis',
              'ntilde',
              'oacute',
              'ograve',
              'ocircumflex',
              'odieresis',
              'otilde',
              'uacute',
              'ugrave',
              'ucircumflex',
              'udieresis',
              'dagger',
              'degree',
              'cent',
              'sterling',
              'section',
              'bullet',
              'paragraph',
              'germandbls',
              'registered',
              'copyright',
              'trademark',
              'acute',
              'dieresis',
              'notequal',
              'AE',
              'Oslash',
              'infinity',
              'plusminus',
              'lessequal',
              'greaterequal',
              'yen',
              'mu',
              'partialdiff',
              'summation',
              'product',
              'pi',
              'integral',
              'ordfeminine',
              'ordmasculine',
              'Omega',
              'ae',
              'oslash',
              'questiondown',
              'exclamdown',
              'logicalnot',
              'radical',
              'florin',
              'approxequal',
              'Delta',
              'guillemotleft',
              'guillemotright',
              'ellipsis',
              'space',
              'Agrave',
              'Atilde',
              'Otilde',
              'OE',
              'oe',
              'endash',
              'emdash',
              'quotedblleft',
              'quotedblright',
              'quoteleft',
              'quoteright',
              'divide',
              'lozenge',
              'ydieresis',
              'Ydieresis',
              'fraction',
              'currency',
              'guilsinglleft',
              'guilsinglright',
              'fi',
              'fl',
              'daggerdbl',
              'periodcentered',
              'quotesinglbase',
              'quotedblbase',
              'perthousand',
              'Acircumflex',
              'Ecircumflex',
              'Aacute',
              'Edieresis',
              'Egrave',
              'Iacute',
              'Icircumflex',
              'Idieresis',
              'Igrave',
              'Oacute',
              'Ocircumflex',
              'apple',
              'Ograve',
              'Uacute',
              'Ucircumflex',
              'Ugrave',
              'dotlessi',
              'circumflex',
              'tilde',
              'macron',
              'breve',
              'dotaccent',
              'ring',
              'cedilla',
              'hungarumlaut',
              'ogonek',
              'caron',
            ],
            tD = [
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              'space',
              'exclam',
              'quotedbl',
              'numbersign',
              'dollar',
              'percent',
              'ampersand',
              'quoteright',
              'parenleft',
              'parenright',
              'asterisk',
              'plus',
              'comma',
              'hyphen',
              'period',
              'slash',
              'zero',
              'one',
              'two',
              'three',
              'four',
              'five',
              'six',
              'seven',
              'eight',
              'nine',
              'colon',
              'semicolon',
              'less',
              'equal',
              'greater',
              'question',
              'at',
              'A',
              'B',
              'C',
              'D',
              'E',
              'F',
              'G',
              'H',
              'I',
              'J',
              'K',
              'L',
              'M',
              'N',
              'O',
              'P',
              'Q',
              'R',
              'S',
              'T',
              'U',
              'V',
              'W',
              'X',
              'Y',
              'Z',
              'bracketleft',
              'backslash',
              'bracketright',
              'asciicircum',
              'underscore',
              'quoteleft',
              'a',
              'b',
              'c',
              'd',
              'e',
              'f',
              'g',
              'h',
              'i',
              'j',
              'k',
              'l',
              'm',
              'n',
              'o',
              'p',
              'q',
              'r',
              's',
              't',
              'u',
              'v',
              'w',
              'x',
              'y',
              'z',
              'braceleft',
              'bar',
              'braceright',
              'asciitilde',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              'exclamdown',
              'cent',
              'sterling',
              'fraction',
              'yen',
              'florin',
              'section',
              'currency',
              'quotesingle',
              'quotedblleft',
              'guillemotleft',
              'guilsinglleft',
              'guilsinglright',
              'fi',
              'fl',
              '',
              'endash',
              'dagger',
              'daggerdbl',
              'periodcentered',
              '',
              'paragraph',
              'bullet',
              'quotesinglbase',
              'quotedblbase',
              'quotedblright',
              'guillemotright',
              'ellipsis',
              'perthousand',
              '',
              'questiondown',
              '',
              'grave',
              'acute',
              'circumflex',
              'tilde',
              'macron',
              'breve',
              'dotaccent',
              'dieresis',
              '',
              'ring',
              'cedilla',
              '',
              'hungarumlaut',
              'ogonek',
              'caron',
              'emdash',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              'AE',
              '',
              'ordfeminine',
              '',
              '',
              '',
              '',
              'Lslash',
              'Oslash',
              'OE',
              'ordmasculine',
              '',
              '',
              '',
              '',
              '',
              'ae',
              '',
              '',
              '',
              'dotlessi',
              '',
              '',
              'lslash',
              'oslash',
              'oe',
              'germandbls',
              '',
              '',
              '',
              '',
            ],
            tb = [
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              'space',
              'exclam',
              'quotedbl',
              'numbersign',
              'dollar',
              'percent',
              'ampersand',
              'quotesingle',
              'parenleft',
              'parenright',
              'asterisk',
              'plus',
              'comma',
              'hyphen',
              'period',
              'slash',
              'zero',
              'one',
              'two',
              'three',
              'four',
              'five',
              'six',
              'seven',
              'eight',
              'nine',
              'colon',
              'semicolon',
              'less',
              'equal',
              'greater',
              'question',
              'at',
              'A',
              'B',
              'C',
              'D',
              'E',
              'F',
              'G',
              'H',
              'I',
              'J',
              'K',
              'L',
              'M',
              'N',
              'O',
              'P',
              'Q',
              'R',
              'S',
              'T',
              'U',
              'V',
              'W',
              'X',
              'Y',
              'Z',
              'bracketleft',
              'backslash',
              'bracketright',
              'asciicircum',
              'underscore',
              'grave',
              'a',
              'b',
              'c',
              'd',
              'e',
              'f',
              'g',
              'h',
              'i',
              'j',
              'k',
              'l',
              'm',
              'n',
              'o',
              'p',
              'q',
              'r',
              's',
              't',
              'u',
              'v',
              'w',
              'x',
              'y',
              'z',
              'braceleft',
              'bar',
              'braceright',
              'asciitilde',
              'bullet',
              'Euro',
              'bullet',
              'quotesinglbase',
              'florin',
              'quotedblbase',
              'ellipsis',
              'dagger',
              'daggerdbl',
              'circumflex',
              'perthousand',
              'Scaron',
              'guilsinglleft',
              'OE',
              'bullet',
              'Zcaron',
              'bullet',
              'bullet',
              'quoteleft',
              'quoteright',
              'quotedblleft',
              'quotedblright',
              'bullet',
              'endash',
              'emdash',
              'tilde',
              'trademark',
              'scaron',
              'guilsinglright',
              'oe',
              'bullet',
              'zcaron',
              'Ydieresis',
              'space',
              'exclamdown',
              'cent',
              'sterling',
              'currency',
              'yen',
              'brokenbar',
              'section',
              'dieresis',
              'copyright',
              'ordfeminine',
              'guillemotleft',
              'logicalnot',
              'hyphen',
              'registered',
              'macron',
              'degree',
              'plusminus',
              'twosuperior',
              'threesuperior',
              'acute',
              'mu',
              'paragraph',
              'periodcentered',
              'cedilla',
              'onesuperior',
              'ordmasculine',
              'guillemotright',
              'onequarter',
              'onehalf',
              'threequarters',
              'questiondown',
              'Agrave',
              'Aacute',
              'Acircumflex',
              'Atilde',
              'Adieresis',
              'Aring',
              'AE',
              'Ccedilla',
              'Egrave',
              'Eacute',
              'Ecircumflex',
              'Edieresis',
              'Igrave',
              'Iacute',
              'Icircumflex',
              'Idieresis',
              'Eth',
              'Ntilde',
              'Ograve',
              'Oacute',
              'Ocircumflex',
              'Otilde',
              'Odieresis',
              'multiply',
              'Oslash',
              'Ugrave',
              'Uacute',
              'Ucircumflex',
              'Udieresis',
              'Yacute',
              'Thorn',
              'germandbls',
              'agrave',
              'aacute',
              'acircumflex',
              'atilde',
              'adieresis',
              'aring',
              'ae',
              'ccedilla',
              'egrave',
              'eacute',
              'ecircumflex',
              'edieresis',
              'igrave',
              'iacute',
              'icircumflex',
              'idieresis',
              'eth',
              'ntilde',
              'ograve',
              'oacute',
              'ocircumflex',
              'otilde',
              'odieresis',
              'divide',
              'oslash',
              'ugrave',
              'uacute',
              'ucircumflex',
              'udieresis',
              'yacute',
              'thorn',
              'ydieresis',
            ],
            tk = [
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              'space',
              'exclam',
              'universal',
              'numbersign',
              'existential',
              'percent',
              'ampersand',
              'suchthat',
              'parenleft',
              'parenright',
              'asteriskmath',
              'plus',
              'comma',
              'minus',
              'period',
              'slash',
              'zero',
              'one',
              'two',
              'three',
              'four',
              'five',
              'six',
              'seven',
              'eight',
              'nine',
              'colon',
              'semicolon',
              'less',
              'equal',
              'greater',
              'question',
              'congruent',
              'Alpha',
              'Beta',
              'Chi',
              'Delta',
              'Epsilon',
              'Phi',
              'Gamma',
              'Eta',
              'Iota',
              'theta1',
              'Kappa',
              'Lambda',
              'Mu',
              'Nu',
              'Omicron',
              'Pi',
              'Theta',
              'Rho',
              'Sigma',
              'Tau',
              'Upsilon',
              'sigma1',
              'Omega',
              'Xi',
              'Psi',
              'Zeta',
              'bracketleft',
              'therefore',
              'bracketright',
              'perpendicular',
              'underscore',
              'radicalex',
              'alpha',
              'beta',
              'chi',
              'delta',
              'epsilon',
              'phi',
              'gamma',
              'eta',
              'iota',
              'phi1',
              'kappa',
              'lambda',
              'mu',
              'nu',
              'omicron',
              'pi',
              'theta',
              'rho',
              'sigma',
              'tau',
              'upsilon',
              'omega1',
              'omega',
              'xi',
              'psi',
              'zeta',
              'braceleft',
              'bar',
              'braceright',
              'similar',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              'Euro',
              'Upsilon1',
              'minute',
              'lessequal',
              'fraction',
              'infinity',
              'florin',
              'club',
              'diamond',
              'heart',
              'spade',
              'arrowboth',
              'arrowleft',
              'arrowup',
              'arrowright',
              'arrowdown',
              'degree',
              'plusminus',
              'second',
              'greaterequal',
              'multiply',
              'proportional',
              'partialdiff',
              'bullet',
              'divide',
              'notequal',
              'equivalence',
              'approxequal',
              'ellipsis',
              'arrowvertex',
              'arrowhorizex',
              'carriagereturn',
              'aleph',
              'Ifraktur',
              'Rfraktur',
              'weierstrass',
              'circlemultiply',
              'circleplus',
              'emptyset',
              'intersection',
              'union',
              'propersuperset',
              'reflexsuperset',
              'notsubset',
              'propersubset',
              'reflexsubset',
              'element',
              'notelement',
              'angle',
              'gradient',
              'registerserif',
              'copyrightserif',
              'trademarkserif',
              'product',
              'radical',
              'dotmath',
              'logicalnot',
              'logicaland',
              'logicalor',
              'arrowdblboth',
              'arrowdblleft',
              'arrowdblup',
              'arrowdblright',
              'arrowdbldown',
              'lozenge',
              'angleleft',
              'registersans',
              'copyrightsans',
              'trademarksans',
              'summation',
              'parenlefttp',
              'parenleftex',
              'parenleftbt',
              'bracketlefttp',
              'bracketleftex',
              'bracketleftbt',
              'bracelefttp',
              'braceleftmid',
              'braceleftbt',
              'braceex',
              '',
              'angleright',
              'integral',
              'integraltp',
              'integralex',
              'integralbt',
              'parenrighttp',
              'parenrightex',
              'parenrightbt',
              'bracketrighttp',
              'bracketrightex',
              'bracketrightbt',
              'bracerighttp',
              'bracerightmid',
              'bracerightbt',
              '',
            ],
            tF = [
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              'space',
              'a1',
              'a2',
              'a202',
              'a3',
              'a4',
              'a5',
              'a119',
              'a118',
              'a117',
              'a11',
              'a12',
              'a13',
              'a14',
              'a15',
              'a16',
              'a105',
              'a17',
              'a18',
              'a19',
              'a20',
              'a21',
              'a22',
              'a23',
              'a24',
              'a25',
              'a26',
              'a27',
              'a28',
              'a6',
              'a7',
              'a8',
              'a9',
              'a10',
              'a29',
              'a30',
              'a31',
              'a32',
              'a33',
              'a34',
              'a35',
              'a36',
              'a37',
              'a38',
              'a39',
              'a40',
              'a41',
              'a42',
              'a43',
              'a44',
              'a45',
              'a46',
              'a47',
              'a48',
              'a49',
              'a50',
              'a51',
              'a52',
              'a53',
              'a54',
              'a55',
              'a56',
              'a57',
              'a58',
              'a59',
              'a60',
              'a61',
              'a62',
              'a63',
              'a64',
              'a65',
              'a66',
              'a67',
              'a68',
              'a69',
              'a70',
              'a71',
              'a72',
              'a73',
              'a74',
              'a203',
              'a75',
              'a204',
              'a76',
              'a77',
              'a78',
              'a79',
              'a81',
              'a82',
              'a83',
              'a84',
              'a97',
              'a98',
              'a99',
              'a100',
              '',
              'a89',
              'a90',
              'a93',
              'a94',
              'a91',
              'a92',
              'a205',
              'a85',
              'a206',
              'a86',
              'a87',
              'a88',
              'a95',
              'a96',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              '',
              'a101',
              'a102',
              'a103',
              'a104',
              'a106',
              'a107',
              'a108',
              'a112',
              'a111',
              'a110',
              'a109',
              'a120',
              'a121',
              'a122',
              'a123',
              'a124',
              'a125',
              'a126',
              'a127',
              'a128',
              'a129',
              'a130',
              'a131',
              'a132',
              'a133',
              'a134',
              'a135',
              'a136',
              'a137',
              'a138',
              'a139',
              'a140',
              'a141',
              'a142',
              'a143',
              'a144',
              'a145',
              'a146',
              'a147',
              'a148',
              'a149',
              'a150',
              'a151',
              'a152',
              'a153',
              'a154',
              'a155',
              'a156',
              'a157',
              'a158',
              'a159',
              'a160',
              'a161',
              'a163',
              'a164',
              'a196',
              'a165',
              'a192',
              'a166',
              'a167',
              'a168',
              'a169',
              'a170',
              'a171',
              'a172',
              'a173',
              'a162',
              'a174',
              'a175',
              'a176',
              'a177',
              'a178',
              'a179',
              'a193',
              'a180',
              'a199',
              'a181',
              'a200',
              'a182',
              '',
              'a201',
              'a183',
              'a184',
              'a197',
              'a185',
              'a194',
              'a198',
              'a186',
              'a195',
              'a187',
              'a188',
              'a189',
              'a190',
              'a191',
              '',
            ];
          function tS(A) {
            switch (A) {
              case 'WinAnsiEncoding':
                return tb;
              case 'StandardEncoding':
                return tD;
              case 'MacRomanEncoding':
                return tw;
              case 'SymbolSetEncoding':
                return tk;
              case 'ZapfDingbatsEncoding':
                return tF;
              case 'ExpertEncoding':
                return tm;
              case 'MacExpertEncoding':
                return ty;
              default:
                return null;
            }
          }
          let tR = [
              '.notdef',
              'space',
              'exclam',
              'quotedbl',
              'numbersign',
              'dollar',
              'percent',
              'ampersand',
              'quoteright',
              'parenleft',
              'parenright',
              'asterisk',
              'plus',
              'comma',
              'hyphen',
              'period',
              'slash',
              'zero',
              'one',
              'two',
              'three',
              'four',
              'five',
              'six',
              'seven',
              'eight',
              'nine',
              'colon',
              'semicolon',
              'less',
              'equal',
              'greater',
              'question',
              'at',
              'A',
              'B',
              'C',
              'D',
              'E',
              'F',
              'G',
              'H',
              'I',
              'J',
              'K',
              'L',
              'M',
              'N',
              'O',
              'P',
              'Q',
              'R',
              'S',
              'T',
              'U',
              'V',
              'W',
              'X',
              'Y',
              'Z',
              'bracketleft',
              'backslash',
              'bracketright',
              'asciicircum',
              'underscore',
              'quoteleft',
              'a',
              'b',
              'c',
              'd',
              'e',
              'f',
              'g',
              'h',
              'i',
              'j',
              'k',
              'l',
              'm',
              'n',
              'o',
              'p',
              'q',
              'r',
              's',
              't',
              'u',
              'v',
              'w',
              'x',
              'y',
              'z',
              'braceleft',
              'bar',
              'braceright',
              'asciitilde',
              'exclamdown',
              'cent',
              'sterling',
              'fraction',
              'yen',
              'florin',
              'section',
              'currency',
              'quotesingle',
              'quotedblleft',
              'guillemotleft',
              'guilsinglleft',
              'guilsinglright',
              'fi',
              'fl',
              'endash',
              'dagger',
              'daggerdbl',
              'periodcentered',
              'paragraph',
              'bullet',
              'quotesinglbase',
              'quotedblbase',
              'quotedblright',
              'guillemotright',
              'ellipsis',
              'perthousand',
              'questiondown',
              'grave',
              'acute',
              'circumflex',
              'tilde',
              'macron',
              'breve',
              'dotaccent',
              'dieresis',
              'ring',
              'cedilla',
              'hungarumlaut',
              'ogonek',
              'caron',
              'emdash',
              'AE',
              'ordfeminine',
              'Lslash',
              'Oslash',
              'OE',
              'ordmasculine',
              'ae',
              'dotlessi',
              'lslash',
              'oslash',
              'oe',
              'germandbls',
              'onesuperior',
              'logicalnot',
              'mu',
              'trademark',
              'Eth',
              'onehalf',
              'plusminus',
              'Thorn',
              'onequarter',
              'divide',
              'brokenbar',
              'degree',
              'thorn',
              'threequarters',
              'twosuperior',
              'registered',
              'minus',
              'eth',
              'multiply',
              'threesuperior',
              'copyright',
              'Aacute',
              'Acircumflex',
              'Adieresis',
              'Agrave',
              'Aring',
              'Atilde',
              'Ccedilla',
              'Eacute',
              'Ecircumflex',
              'Edieresis',
              'Egrave',
              'Iacute',
              'Icircumflex',
              'Idieresis',
              'Igrave',
              'Ntilde',
              'Oacute',
              'Ocircumflex',
              'Odieresis',
              'Ograve',
              'Otilde',
              'Scaron',
              'Uacute',
              'Ucircumflex',
              'Udieresis',
              'Ugrave',
              'Yacute',
              'Ydieresis',
              'Zcaron',
              'aacute',
              'acircumflex',
              'adieresis',
              'agrave',
              'aring',
              'atilde',
              'ccedilla',
              'eacute',
              'ecircumflex',
              'edieresis',
              'egrave',
              'iacute',
              'icircumflex',
              'idieresis',
              'igrave',
              'ntilde',
              'oacute',
              'ocircumflex',
              'odieresis',
              'ograve',
              'otilde',
              'scaron',
              'uacute',
              'ucircumflex',
              'udieresis',
              'ugrave',
              'yacute',
              'ydieresis',
              'zcaron',
              'exclamsmall',
              'Hungarumlautsmall',
              'dollaroldstyle',
              'dollarsuperior',
              'ampersandsmall',
              'Acutesmall',
              'parenleftsuperior',
              'parenrightsuperior',
              'twodotenleader',
              'onedotenleader',
              'zerooldstyle',
              'oneoldstyle',
              'twooldstyle',
              'threeoldstyle',
              'fouroldstyle',
              'fiveoldstyle',
              'sixoldstyle',
              'sevenoldstyle',
              'eightoldstyle',
              'nineoldstyle',
              'commasuperior',
              'threequartersemdash',
              'periodsuperior',
              'questionsmall',
              'asuperior',
              'bsuperior',
              'centsuperior',
              'dsuperior',
              'esuperior',
              'isuperior',
              'lsuperior',
              'msuperior',
              'nsuperior',
              'osuperior',
              'rsuperior',
              'ssuperior',
              'tsuperior',
              'ff',
              'ffi',
              'ffl',
              'parenleftinferior',
              'parenrightinferior',
              'Circumflexsmall',
              'hyphensuperior',
              'Gravesmall',
              'Asmall',
              'Bsmall',
              'Csmall',
              'Dsmall',
              'Esmall',
              'Fsmall',
              'Gsmall',
              'Hsmall',
              'Ismall',
              'Jsmall',
              'Ksmall',
              'Lsmall',
              'Msmall',
              'Nsmall',
              'Osmall',
              'Psmall',
              'Qsmall',
              'Rsmall',
              'Ssmall',
              'Tsmall',
              'Usmall',
              'Vsmall',
              'Wsmall',
              'Xsmall',
              'Ysmall',
              'Zsmall',
              'colonmonetary',
              'onefitted',
              'rupiah',
              'Tildesmall',
              'exclamdownsmall',
              'centoldstyle',
              'Lslashsmall',
              'Scaronsmall',
              'Zcaronsmall',
              'Dieresissmall',
              'Brevesmall',
              'Caronsmall',
              'Dotaccentsmall',
              'Macronsmall',
              'figuredash',
              'hypheninferior',
              'Ogoneksmall',
              'Ringsmall',
              'Cedillasmall',
              'questiondownsmall',
              'oneeighth',
              'threeeighths',
              'fiveeighths',
              'seveneighths',
              'onethird',
              'twothirds',
              'zerosuperior',
              'foursuperior',
              'fivesuperior',
              'sixsuperior',
              'sevensuperior',
              'eightsuperior',
              'ninesuperior',
              'zeroinferior',
              'oneinferior',
              'twoinferior',
              'threeinferior',
              'fourinferior',
              'fiveinferior',
              'sixinferior',
              'seveninferior',
              'eightinferior',
              'nineinferior',
              'centinferior',
              'dollarinferior',
              'periodinferior',
              'commainferior',
              'Agravesmall',
              'Aacutesmall',
              'Acircumflexsmall',
              'Atildesmall',
              'Adieresissmall',
              'Aringsmall',
              'AEsmall',
              'Ccedillasmall',
              'Egravesmall',
              'Eacutesmall',
              'Ecircumflexsmall',
              'Edieresissmall',
              'Igravesmall',
              'Iacutesmall',
              'Icircumflexsmall',
              'Idieresissmall',
              'Ethsmall',
              'Ntildesmall',
              'Ogravesmall',
              'Oacutesmall',
              'Ocircumflexsmall',
              'Otildesmall',
              'Odieresissmall',
              'OEsmall',
              'Oslashsmall',
              'Ugravesmall',
              'Uacutesmall',
              'Ucircumflexsmall',
              'Udieresissmall',
              'Yacutesmall',
              'Thornsmall',
              'Ydieresissmall',
              '001.000',
              '001.001',
              '001.002',
              '001.003',
              'Black',
              'Bold',
              'Book',
              'Light',
              'Medium',
              'Regular',
              'Roman',
              'Semibold',
            ],
            tG = [
              null,
              { id: 'hstem', min: 2, stackClearing: !0, stem: !0 },
              null,
              { id: 'vstem', min: 2, stackClearing: !0, stem: !0 },
              { id: 'vmoveto', min: 1, stackClearing: !0 },
              { id: 'rlineto', min: 2, resetStack: !0 },
              { id: 'hlineto', min: 1, resetStack: !0 },
              { id: 'vlineto', min: 1, resetStack: !0 },
              { id: 'rrcurveto', min: 6, resetStack: !0 },
              null,
              { id: 'callsubr', min: 1, undefStack: !0 },
              { id: 'return', min: 0, undefStack: !0 },
              null,
              null,
              { id: 'endchar', min: 0, stackClearing: !0 },
              null,
              null,
              null,
              { id: 'hstemhm', min: 2, stackClearing: !0, stem: !0 },
              { id: 'hintmask', min: 0, stackClearing: !0 },
              { id: 'cntrmask', min: 0, stackClearing: !0 },
              { id: 'rmoveto', min: 2, stackClearing: !0 },
              { id: 'hmoveto', min: 1, stackClearing: !0 },
              { id: 'vstemhm', min: 2, stackClearing: !0, stem: !0 },
              { id: 'rcurveline', min: 8, resetStack: !0 },
              { id: 'rlinecurve', min: 8, resetStack: !0 },
              { id: 'vvcurveto', min: 4, resetStack: !0 },
              { id: 'hhcurveto', min: 4, resetStack: !0 },
              null,
              { id: 'callgsubr', min: 1, undefStack: !0 },
              { id: 'vhcurveto', min: 4, resetStack: !0 },
              { id: 'hvcurveto', min: 4, resetStack: !0 },
            ],
            tN = [
              null,
              null,
              null,
              { id: 'and', min: 2, stackDelta: -1 },
              { id: 'or', min: 2, stackDelta: -1 },
              { id: 'not', min: 1, stackDelta: 0 },
              null,
              null,
              null,
              { id: 'abs', min: 1, stackDelta: 0 },
              {
                id: 'add',
                min: 2,
                stackDelta: -1,
                stackFn(A, t) {
                  A[t - 2] = A[t - 2] + A[t - 1];
                },
              },
              {
                id: 'sub',
                min: 2,
                stackDelta: -1,
                stackFn(A, t) {
                  A[t - 2] = A[t - 2] - A[t - 1];
                },
              },
              {
                id: 'div',
                min: 2,
                stackDelta: -1,
                stackFn(A, t) {
                  A[t - 2] = A[t - 2] / A[t - 1];
                },
              },
              null,
              {
                id: 'neg',
                min: 1,
                stackDelta: 0,
                stackFn(A, t) {
                  A[t - 1] = -A[t - 1];
                },
              },
              { id: 'eq', min: 2, stackDelta: -1 },
              null,
              null,
              { id: 'drop', min: 1, stackDelta: -1 },
              null,
              { id: 'put', min: 2, stackDelta: -2 },
              { id: 'get', min: 1, stackDelta: 0 },
              { id: 'ifelse', min: 4, stackDelta: -3 },
              { id: 'random', min: 0, stackDelta: 1 },
              {
                id: 'mul',
                min: 2,
                stackDelta: -1,
                stackFn(A, t) {
                  A[t - 2] = A[t - 2] * A[t - 1];
                },
              },
              null,
              { id: 'sqrt', min: 1, stackDelta: 0 },
              { id: 'dup', min: 1, stackDelta: 1 },
              { id: 'exch', min: 2, stackDelta: 0 },
              { id: 'index', min: 2, stackDelta: 0 },
              { id: 'roll', min: 3, stackDelta: -2 },
              null,
              null,
              null,
              { id: 'hflex', min: 7, resetStack: !0 },
              { id: 'flex', min: 13, resetStack: !0 },
              { id: 'hflex1', min: 9, resetStack: !0 },
              { id: 'flex1', min: 11, resetStack: !0 },
            ];
          class tx {
            constructor(A, t, i) {
              (this.bytes = A.getBytes()),
                (this.properties = t),
                (this.seacAnalysisEnabled = !!i);
            }
            parse() {
              let A, t;
              let i = this.properties,
                a = new tU();
              this.cff = a;
              let s = this.parseHeader(),
                g = this.parseIndex(s.endPos),
                r = this.parseIndex(g.endPos),
                n = this.parseIndex(r.endPos),
                o = this.parseIndex(n.endPos),
                I = this.parseDict(r.obj.get(0)),
                l = this.createDict(tK, I, a.strings);
              (a.header = s.obj),
                (a.names = this.parseNameIndex(g.obj)),
                (a.strings = this.parseStringIndex(n.obj)),
                (a.topDict = l),
                (a.globalSubrIndex = o.obj),
                this.parsePrivateDict(a.topDict),
                (a.isCIDFont = l.hasName('ROS'));
              let C = l.getByName('CharStrings'),
                B = this.parseIndex(C).obj,
                h = l.getByName('FontMatrix');
              h && (i.fontMatrix = h);
              let Q = l.getByName('FontBBox');
              if (
                (Q &&
                  ((i.ascent = Math.max(Q[3], Q[1])),
                  (i.descent = Math.min(Q[1], Q[3])),
                  (i.ascentScaled = !0)),
                a.isCIDFont)
              ) {
                let i = this.parseIndex(l.getByName('FDArray')).obj;
                for (let A = 0, t = i.count; A < t; ++A) {
                  let t = i.get(A),
                    s = this.createDict(tK, this.parseDict(t), a.strings);
                  this.parsePrivateDict(s), a.fdArray.push(s);
                }
                (t = null),
                  (A = this.parseCharsets(
                    l.getByName('charset'),
                    B.count,
                    a.strings,
                    !0
                  )),
                  (a.fdSelect = this.parseFDSelect(
                    l.getByName('FDSelect'),
                    B.count
                  ));
              } else
                (A = this.parseCharsets(
                  l.getByName('charset'),
                  B.count,
                  a.strings,
                  !1
                )),
                  (t = this.parseEncoding(
                    l.getByName('Encoding'),
                    i,
                    a.strings,
                    A.charset
                  ));
              (a.charset = A), (a.encoding = t);
              let c = this.parseCharStrings({
                charStrings: B,
                localSubrIndex: l.privateDict.subrsIndex,
                globalSubrIndex: o.obj,
                fdSelect: a.fdSelect,
                fdArray: a.fdArray,
                privateDict: l.privateDict,
              });
              return (
                (a.charStrings = c.charStrings),
                (a.seacs = c.seacs),
                (a.widths = c.widths),
                a
              );
            }
            parseHeader() {
              let A = this.bytes,
                t = A.length,
                i = 0;
              for (; i < t && 1 !== A[i]; ) ++i;
              if (i >= t) throw new x('Invalid CFF header');
              0 !== i &&
                (p('cff data is shifted'),
                (A = A.subarray(i)),
                (this.bytes = A));
              let a = A[0],
                s = A[1],
                g = A[2],
                r = A[3];
              return { obj: new tM(a, s, g, r), endPos: g };
            }
            parseDict(A) {
              let t = 0,
                i = [],
                a = [];
              t = 0;
              let s = A.length;
              for (; t < s; ) {
                let s = A[t];
                s <= 21
                  ? (12 === s && (s = (s << 8) | A[++t]),
                    a.push([s, i]),
                    (i = []),
                    ++t)
                  : i.push(
                      (function () {
                        let i = A[t++];
                        return 30 === i
                          ? (function () {
                              let i = '',
                                a = [
                                  '0',
                                  '1',
                                  '2',
                                  '3',
                                  '4',
                                  '5',
                                  '6',
                                  '7',
                                  '8',
                                  '9',
                                  '.',
                                  'E',
                                  'E-',
                                  null,
                                  '-',
                                ],
                                s = A.length;
                              for (; t < s; ) {
                                let s = A[t++],
                                  g = s >> 4,
                                  r = 15 & s;
                                if (15 === g || ((i += a[g]), 15 === r)) break;
                                i += a[r];
                              }
                              return parseFloat(i);
                            })()
                          : 28 === i
                            ? (i =
                                (((i = A[t++]) << 24) | (A[t++] << 16)) >> 16)
                            : 29 === i
                              ? (i =
                                  ((i =
                                    ((i = ((i = A[t++]) << 8) | A[t++]) << 8) |
                                    A[t++]) <<
                                    8) |
                                  A[t++])
                              : i >= 32 && i <= 246
                                ? i - 139
                                : i >= 247 && i <= 250
                                  ? 256 * (i - 247) + A[t++] + 108
                                  : i >= 251 && i <= 254
                                    ? -256 * (i - 251) - A[t++] - 108
                                    : (m(
                                        'CFFParser_parseDict: "' +
                                          i +
                                          '" is a reserved command.'
                                      ),
                                      NaN);
                      })()
                    );
              }
              return a;
            }
            parseIndex(A) {
              let t = new tL(),
                i = this.bytes,
                a = (i[A++] << 8) | i[A++],
                s = [],
                g,
                r,
                n = A;
              if (0 !== a) {
                let t = i[A++],
                  o = A + (a + 1) * t - 1;
                for (g = 0, r = a + 1; g < r; ++g) {
                  let a = 0;
                  for (let s = 0; s < t; ++s) (a <<= 8), (a += i[A++]);
                  s.push(o + a);
                }
                n = s[a];
              }
              for (g = 0, r = s.length - 1; g < r; ++g) {
                let A = s[g],
                  a = s[g + 1];
                t.add(i.subarray(A, a));
              }
              return { obj: t, endPos: n };
            }
            parseNameIndex(A) {
              let t = [];
              for (let i = 0, a = A.count; i < a; ++i) {
                let a = A.get(i);
                t.push(M(a));
              }
              return t;
            }
            parseStringIndex(A) {
              let t = new tJ();
              for (let i = 0, a = A.count; i < a; ++i) {
                let a = A.get(i);
                t.add(M(a));
              }
              return t;
            }
            createDict(A, t, i) {
              let a = new A(i);
              for (let [A, i] of t) a.setByKey(A, i);
              return a;
            }
            parseCharString(A, t, i, a) {
              if (!t || A.callDepth > 10) return !1;
              let s = A.stackSize,
                g = A.stack,
                r = t.length;
              for (let n = 0; n < r; ) {
                let o = t[n++],
                  I = null;
                if (12 === o) {
                  let A = t[n++];
                  0 === A
                    ? ((t[n - 2] = 139), (t[n - 1] = 22), (s = 0))
                    : (I = tN[A]);
                } else if (28 === o)
                  (g[s] = ((t[n] << 24) | (t[n + 1] << 16)) >> 16),
                    (n += 2),
                    s++;
                else if (14 === o) {
                  if (s >= 4 && ((s -= 4), this.seacAnalysisEnabled))
                    return (A.seac = g.slice(s, s + 4)), !1;
                  I = tG[o];
                } else if (o >= 32 && o <= 246) (g[s] = o - 139), s++;
                else if (o >= 247 && o <= 254)
                  (g[s] =
                    o < 251
                      ? ((o - 247) << 8) + t[n] + 108
                      : -((o - 251) << 8) - t[n] - 108),
                    n++,
                    s++;
                else if (255 === o)
                  (g[s] =
                    ((t[n] << 24) |
                      (t[n + 1] << 16) |
                      (t[n + 2] << 8) |
                      t[n + 3]) /
                    65536),
                    (n += 4),
                    s++;
                else if (19 === o || 20 === o) {
                  if (((A.hints += s >> 1), 0 === A.hints)) {
                    t.copyWithin(n - 1, n, -1), (n -= 1), (r -= 1);
                    continue;
                  }
                  (n += (A.hints + 7) >> 3), (s %= 2), (I = tG[o]);
                } else {
                  if (10 === o || 29 === o) {
                    let t = 10 === o ? i : a;
                    if (!t)
                      return m('Missing subrsIndex for ' + (I = tG[o]).id), !1;
                    let r = 32768;
                    t.count < 1240 ? (r = 107) : t.count < 33900 && (r = 1131);
                    let n = g[--s] + r;
                    if (n < 0 || n >= t.count || isNaN(n))
                      return (
                        m('Out of bounds subrIndex for ' + (I = tG[o]).id), !1
                      );
                    if (
                      ((A.stackSize = s),
                      A.callDepth++,
                      !this.parseCharString(A, t.get(n), i, a))
                    )
                      return !1;
                    A.callDepth--, (s = A.stackSize);
                    continue;
                  }
                  if (11 === o) return (A.stackSize = s), !0;
                  if (0 === o && n === t.length) (t[n - 1] = 14), (I = tG[14]);
                  else {
                    if (9 === o) {
                      t.copyWithin(n - 1, n, -1), (n -= 1), (r -= 1);
                      continue;
                    }
                    I = tG[o];
                  }
                }
                if (I) {
                  if (
                    (I.stem &&
                      ((A.hints += s >> 1),
                      3 === o || 23 === o
                        ? (A.hasVStems = !0)
                        : A.hasVStems &&
                          (1 === o || 18 === o) &&
                          (m('CFF stem hints are in wrong order'),
                          (t[n - 1] = 1 === o ? 3 : 23))),
                    'min' in I && !A.undefStack && s < I.min)
                  ) {
                    if (
                      (m(
                        'Not enough parameters for ' +
                          I.id +
                          '; actual: ' +
                          s +
                          ', expected: ' +
                          I.min
                      ),
                      0 === s)
                    )
                      return (t[n - 1] = 14), !0;
                    return !1;
                  }
                  A.firstStackClearing &&
                    I.stackClearing &&
                    ((A.firstStackClearing = !1),
                    (s -= I.min) >= 2 && I.stem
                      ? (s %= 2)
                      : s > 1 &&
                        m(
                          'Found too many parameters for stack-clearing command'
                        ),
                    s > 0 && (A.width = g[s - 1])),
                    'stackDelta' in I
                      ? ('stackFn' in I && I.stackFn(g, s), (s += I.stackDelta))
                      : I.stackClearing
                        ? (s = 0)
                        : I.resetStack
                          ? ((s = 0), (A.undefStack = !1))
                          : I.undefStack &&
                            ((s = 0),
                            (A.undefStack = !0),
                            (A.firstStackClearing = !1));
                }
              }
              return r < t.length && t.fill(14, r), (A.stackSize = s), !0;
            }
            parseCharStrings({
              charStrings: A,
              localSubrIndex: t,
              globalSubrIndex: i,
              fdSelect: a,
              fdArray: s,
              privateDict: g,
            }) {
              let r = [],
                n = [],
                o = A.count;
              for (let I = 0; I < o; I++) {
                let o = A.get(I),
                  l = {
                    callDepth: 0,
                    stackSize: 0,
                    stack: [],
                    undefStack: !0,
                    hints: 0,
                    firstStackClearing: !0,
                    seac: null,
                    width: null,
                    hasVStems: !1,
                  },
                  C = !0,
                  B = null,
                  h = g;
                if (a && s.length) {
                  let A = a.getFDIndex(I);
                  -1 === A && (m('Glyph index is not in fd select.'), (C = !1)),
                    A >= s.length &&
                      (m('Invalid fd index for glyph index.'), (C = !1)),
                    C && (B = (h = s[A].privateDict).subrsIndex);
                } else t && (B = t);
                if (
                  (C && (C = this.parseCharString(l, o, B, i)),
                  null !== l.width)
                ) {
                  let A = h.getByName('nominalWidthX');
                  n[I] = A + l.width;
                } else {
                  let A = h.getByName('defaultWidthX');
                  n[I] = A;
                }
                null !== l.seac && (r[I] = l.seac),
                  C || A.set(I, new Uint8Array([14]));
              }
              return { charStrings: A, seacs: r, widths: n };
            }
            emptyPrivateDictionary(A) {
              let t = this.createDict(tq, [], A.strings);
              A.setByKey(18, [0, 0]), (A.privateDict = t);
            }
            parsePrivateDict(A) {
              if (!A.hasName('Private')) {
                this.emptyPrivateDictionary(A);
                return;
              }
              let t = A.getByName('Private');
              if (!Array.isArray(t) || 2 !== t.length) {
                A.removeByName('Private');
                return;
              }
              let i = t[0],
                a = t[1];
              if (0 === i || a >= this.bytes.length) {
                this.emptyPrivateDictionary(A);
                return;
              }
              let s = this.bytes.subarray(a, a + i),
                g = this.parseDict(s),
                r = this.createDict(tq, g, A.strings);
              if (
                ((A.privateDict = r),
                0 === r.getByName('ExpansionFactor') &&
                  r.setByName('ExpansionFactor', 0.06),
                !r.getByName('Subrs'))
              )
                return;
              let n = r.getByName('Subrs'),
                o = a + n;
              if (0 === n || o >= this.bytes.length) {
                this.emptyPrivateDictionary(A);
                return;
              }
              let I = this.parseIndex(o);
              r.subrsIndex = I.obj;
            }
            parseCharsets(A, t, i, a) {
              let s, g, r;
              if (0 === A) return new tP(!0, tT.ISO_ADOBE, td);
              if (1 === A) return new tP(!0, tT.EXPERT, tf);
              if (2 === A) return new tP(!0, tT.EXPERT_SUBSET, tp);
              let n = this.bytes,
                o = A,
                I = n[A++],
                l = [a ? 0 : '.notdef'];
              switch (((t -= 1), I)) {
                case 0:
                  for (r = 0; r < t; r++)
                    (s = (n[A++] << 8) | n[A++]), l.push(a ? s : i.get(s));
                  break;
                case 1:
                  for (; l.length <= t; )
                    for (
                      r = 0, s = (n[A++] << 8) | n[A++], g = n[A++];
                      r <= g;
                      r++
                    )
                      l.push(a ? s++ : i.get(s++));
                  break;
                case 2:
                  for (; l.length <= t; )
                    for (
                      r = 0,
                        s = (n[A++] << 8) | n[A++],
                        g = (n[A++] << 8) | n[A++];
                      r <= g;
                      r++
                    )
                      l.push(a ? s++ : i.get(s++));
                  break;
                default:
                  throw new x('Unknown charset format');
              }
              let C = A,
                B = n.subarray(o, C);
              return new tP(!1, I, l, B);
            }
            parseEncoding(A, t, i, a) {
              let s = Object.create(null),
                g = this.bytes,
                r,
                n,
                o,
                I = !1,
                l = null;
              if (0 === A || 1 === A) {
                (I = !0), (r = A);
                let t = A ? tm : tD;
                for (n = 0, o = a.length; n < o; n++) {
                  let A = t.indexOf(a[n]);
                  -1 !== A && (s[A] = n);
                }
              } else {
                let t = A;
                switch (127 & (r = g[A++])) {
                  case 0:
                    let o = g[A++];
                    for (n = 1; n <= o; n++) s[g[A++]] = n;
                    break;
                  case 1:
                    let I = g[A++],
                      C = 1;
                    for (n = 0; n < I; n++) {
                      let t = g[A++],
                        i = g[A++];
                      for (let A = t; A <= t + i; A++) s[A] = C++;
                    }
                    break;
                  default:
                    throw new x(`Unknown encoding format: ${r} in CFF`);
                }
                let B = A;
                128 & r &&
                  ((g[t] &= 127),
                  (function () {
                    let t = g[A++];
                    for (n = 0; n < t; n++) {
                      let t = g[A++],
                        r = (g[A++] << 8) + (255 & g[A++]);
                      s[t] = a.indexOf(i.get(r));
                    }
                  })()),
                  (l = g.subarray(t, B));
              }
              return new tW(I, (r &= 127), s, l);
            }
            parseFDSelect(A, t) {
              let i;
              let a = this.bytes,
                s = a[A++],
                g = [];
              switch (s) {
                case 0:
                  for (i = 0; i < t; ++i) {
                    let t = a[A++];
                    g.push(t);
                  }
                  break;
                case 3:
                  let r = (a[A++] << 8) | a[A++];
                  for (i = 0; i < r; ++i) {
                    let t = (a[A++] << 8) | a[A++];
                    0 === i &&
                      0 !== t &&
                      (m(
                        'parseFDSelect: The first range must have a first GID of 0 -- trying to recover.'
                      ),
                      (t = 0));
                    let s = a[A++],
                      r = (a[A] << 8) | a[A + 1];
                    for (let A = t; A < r; ++A) g.push(s);
                  }
                  A += 2;
                  break;
                default:
                  throw new x(`parseFDSelect: Unknown format "${s}".`);
              }
              if (g.length !== t)
                throw new x('parseFDSelect: Invalid font data.');
              return new tZ(s, g);
            }
          }
          class tU {
            constructor() {
              (this.header = null),
                (this.names = []),
                (this.topDict = null),
                (this.strings = new tJ()),
                (this.globalSubrIndex = null),
                (this.encoding = null),
                (this.charset = null),
                (this.charStrings = null),
                (this.fdArray = []),
                (this.fdSelect = null),
                (this.isCIDFont = !1);
            }
            duplicateFirstGlyph() {
              if (this.charStrings.count >= 65535) {
                m('Not enough space in charstrings to duplicate first glyph.');
                return;
              }
              let A = this.charStrings.get(0);
              this.charStrings.add(A),
                this.isCIDFont &&
                  this.fdSelect.fdSelect.push(this.fdSelect.fdSelect[0]);
            }
            hasGlyphId(A) {
              return (
                !(A < 0) &&
                !(A >= this.charStrings.count) &&
                this.charStrings.get(A).length > 0
              );
            }
          }
          class tM {
            constructor(A, t, i, a) {
              (this.major = A),
                (this.minor = t),
                (this.hdrSize = i),
                (this.offSize = a);
            }
          }
          class tJ {
            constructor() {
              this.strings = [];
            }
            get(A) {
              return A >= 0 && A <= 390
                ? tR[A]
                : A - 391 <= this.strings.length
                  ? this.strings[A - 391]
                  : tR[0];
            }
            getSID(A) {
              let t = tR.indexOf(A);
              return -1 !== t
                ? t
                : -1 !== (t = this.strings.indexOf(A))
                  ? t + 391
                  : -1;
            }
            add(A) {
              this.strings.push(A);
            }
            get count() {
              return this.strings.length;
            }
          }
          class tL {
            constructor() {
              (this.objects = []), (this.length = 0);
            }
            add(A) {
              (this.length += A.length), this.objects.push(A);
            }
            set(A, t) {
              (this.length += t.length - this.objects[A].length),
                (this.objects[A] = t);
            }
            get(A) {
              return this.objects[A];
            }
            get count() {
              return this.objects.length;
            }
          }
          class tH {
            constructor(A, t) {
              (this.keyToNameMap = A.keyToNameMap),
                (this.nameToKeyMap = A.nameToKeyMap),
                (this.defaults = A.defaults),
                (this.types = A.types),
                (this.opcodes = A.opcodes),
                (this.order = A.order),
                (this.strings = t),
                (this.values = Object.create(null));
            }
            setByKey(A, t) {
              if (!(A in this.keyToNameMap)) return !1;
              if (0 === t.length) return !0;
              for (let i of t)
                if (isNaN(i))
                  return m(`Invalid CFFDict value: "${t}" for key "${A}".`), !0;
              let i = this.types[A];
              return (
                ('num' !== i && 'sid' !== i && 'offset' !== i) || (t = t[0]),
                (this.values[A] = t),
                !0
              );
            }
            setByName(A, t) {
              if (!(A in this.nameToKeyMap))
                throw new x(`Invalid dictionary name "${A}"`);
              this.values[this.nameToKeyMap[A]] = t;
            }
            hasName(A) {
              return this.nameToKeyMap[A] in this.values;
            }
            getByName(A) {
              if (!(A in this.nameToKeyMap))
                throw new x(`Invalid dictionary name ${A}"`);
              let t = this.nameToKeyMap[A];
              return t in this.values ? this.values[t] : this.defaults[t];
            }
            removeByName(A) {
              delete this.values[this.nameToKeyMap[A]];
            }
            static createTables(A) {
              let t = {
                keyToNameMap: {},
                nameToKeyMap: {},
                defaults: {},
                types: {},
                opcodes: {},
                order: [],
              };
              for (let i of A) {
                let A = Array.isArray(i[0]) ? (i[0][0] << 8) + i[0][1] : i[0];
                (t.keyToNameMap[A] = i[1]),
                  (t.nameToKeyMap[i[1]] = A),
                  (t.types[A] = i[2]),
                  (t.defaults[A] = i[3]),
                  (t.opcodes[A] = Array.isArray(i[0]) ? i[0] : [i[0]]),
                  t.order.push(A);
              }
              return t;
            }
          }
          let tY = [
            [[12, 30], 'ROS', ['sid', 'sid', 'num'], null],
            [[12, 20], 'SyntheticBase', 'num', null],
            [0, 'version', 'sid', null],
            [1, 'Notice', 'sid', null],
            [[12, 0], 'Copyright', 'sid', null],
            [2, 'FullName', 'sid', null],
            [3, 'FamilyName', 'sid', null],
            [4, 'Weight', 'sid', null],
            [[12, 1], 'isFixedPitch', 'num', 0],
            [[12, 2], 'ItalicAngle', 'num', 0],
            [[12, 3], 'UnderlinePosition', 'num', -100],
            [[12, 4], 'UnderlineThickness', 'num', 50],
            [[12, 5], 'PaintType', 'num', 0],
            [[12, 6], 'CharstringType', 'num', 2],
            [
              [12, 7],
              'FontMatrix',
              ['num', 'num', 'num', 'num', 'num', 'num'],
              [0.001, 0, 0, 0.001, 0, 0],
            ],
            [13, 'UniqueID', 'num', null],
            [5, 'FontBBox', ['num', 'num', 'num', 'num'], [0, 0, 0, 0]],
            [[12, 8], 'StrokeWidth', 'num', 0],
            [14, 'XUID', 'array', null],
            [15, 'charset', 'offset', 0],
            [16, 'Encoding', 'offset', 0],
            [17, 'CharStrings', 'offset', 0],
            [18, 'Private', ['offset', 'offset'], null],
            [[12, 21], 'PostScript', 'sid', null],
            [[12, 22], 'BaseFontName', 'sid', null],
            [[12, 23], 'BaseFontBlend', 'delta', null],
            [[12, 31], 'CIDFontVersion', 'num', 0],
            [[12, 32], 'CIDFontRevision', 'num', 0],
            [[12, 33], 'CIDFontType', 'num', 0],
            [[12, 34], 'CIDCount', 'num', 8720],
            [[12, 35], 'UIDBase', 'num', null],
            [[12, 37], 'FDSelect', 'offset', null],
            [[12, 36], 'FDArray', 'offset', null],
            [[12, 38], 'FontName', 'sid', null],
          ];
          class tK extends tH {
            static get tables() {
              return b(this, 'tables', this.createTables(tY));
            }
            constructor(A) {
              super(tK.tables, A), (this.privateDict = null);
            }
          }
          let tv = [
            [6, 'BlueValues', 'delta', null],
            [7, 'OtherBlues', 'delta', null],
            [8, 'FamilyBlues', 'delta', null],
            [9, 'FamilyOtherBlues', 'delta', null],
            [[12, 9], 'BlueScale', 'num', 0.039625],
            [[12, 10], 'BlueShift', 'num', 7],
            [[12, 11], 'BlueFuzz', 'num', 1],
            [10, 'StdHW', 'num', null],
            [11, 'StdVW', 'num', null],
            [[12, 12], 'StemSnapH', 'delta', null],
            [[12, 13], 'StemSnapV', 'delta', null],
            [[12, 14], 'ForceBold', 'num', 0],
            [[12, 17], 'LanguageGroup', 'num', 0],
            [[12, 18], 'ExpansionFactor', 'num', 0.06],
            [[12, 19], 'initialRandomSeed', 'num', 0],
            [20, 'defaultWidthX', 'num', 0],
            [21, 'nominalWidthX', 'num', 0],
            [19, 'Subrs', 'offset', null],
          ];
          class tq extends tH {
            static get tables() {
              return b(this, 'tables', this.createTables(tv));
            }
            constructor(A) {
              super(tq.tables, A), (this.subrsIndex = null);
            }
          }
          let tT = { ISO_ADOBE: 0, EXPERT: 1, EXPERT_SUBSET: 2 };
          class tP {
            constructor(A, t, i, a) {
              (this.predefined = A),
                (this.format = t),
                (this.charset = i),
                (this.raw = a);
            }
          }
          class tW {
            constructor(A, t, i, a) {
              (this.predefined = A),
                (this.format = t),
                (this.encoding = i),
                (this.raw = a);
            }
          }
          class tZ {
            constructor(A, t) {
              (this.format = A), (this.fdSelect = t);
            }
            getFDIndex(A) {
              return A < 0 || A >= this.fdSelect.length ? -1 : this.fdSelect[A];
            }
          }
          class tO {
            constructor() {
              this.offsets = Object.create(null);
            }
            isTracking(A) {
              return A in this.offsets;
            }
            track(A, t) {
              if (A in this.offsets)
                throw new x(`Already tracking location of ${A}`);
              this.offsets[A] = t;
            }
            offset(A) {
              for (let t in this.offsets) this.offsets[t] += A;
            }
            setEntryLocation(A, t, i) {
              if (!(A in this.offsets))
                throw new x(`Not tracking location of ${A}`);
              let a = i.data,
                s = this.offsets[A];
              for (let A = 0, i = t.length; A < i; ++A) {
                let i = 5 * A + s,
                  g = i + 1,
                  r = i + 2,
                  n = i + 3,
                  o = i + 4;
                if (
                  29 !== a[i] ||
                  0 !== a[g] ||
                  0 !== a[r] ||
                  0 !== a[n] ||
                  0 !== a[o]
                )
                  throw new x('writing to an offset that is not empty');
                let I = t[A];
                (a[i] = 29),
                  (a[g] = (I >> 24) & 255),
                  (a[r] = (I >> 16) & 255),
                  (a[n] = (I >> 8) & 255),
                  (a[o] = 255 & I);
              }
            }
          }
          class tX {
            constructor(A) {
              this.cff = A;
            }
            compile() {
              let A = this.cff,
                t = {
                  data: [],
                  length: 0,
                  add(A) {
                    try {
                      this.data.push(...A);
                    } catch {
                      this.data = this.data.concat(A);
                    }
                    this.length = this.data.length;
                  },
                },
                i = this.compileHeader(A.header);
              t.add(i);
              let a = this.compileNameIndex(A.names);
              if ((t.add(a), A.isCIDFont && A.topDict.hasName('FontMatrix'))) {
                let t = A.topDict.getByName('FontMatrix');
                for (let i of (A.topDict.removeByName('FontMatrix'),
                A.fdArray)) {
                  let A = t.slice(0);
                  i.hasName('FontMatrix') &&
                    (A = v.transform(A, i.getByName('FontMatrix'))),
                    i.setByName('FontMatrix', A);
                }
              }
              let s = A.topDict.getByName('XUID');
              s?.length > 16 && A.topDict.removeByName('XUID'),
                A.topDict.setByName('charset', 0);
              let g = this.compileTopDicts([A.topDict], t.length, A.isCIDFont);
              t.add(g.output);
              let r = g.trackers[0],
                n = this.compileStringIndex(A.strings.strings);
              t.add(n);
              let o = this.compileIndex(A.globalSubrIndex);
              if ((t.add(o), A.encoding && A.topDict.hasName('Encoding'))) {
                if (A.encoding.predefined)
                  r.setEntryLocation('Encoding', [A.encoding.format], t);
                else {
                  let i = this.compileEncoding(A.encoding);
                  r.setEntryLocation('Encoding', [t.length], t), t.add(i);
                }
              }
              let I = this.compileCharset(
                A.charset,
                A.charStrings.count,
                A.strings,
                A.isCIDFont
              );
              r.setEntryLocation('charset', [t.length], t), t.add(I);
              let l = this.compileCharStrings(A.charStrings);
              if (
                (r.setEntryLocation('CharStrings', [t.length], t),
                t.add(l),
                A.isCIDFont)
              ) {
                r.setEntryLocation('FDSelect', [t.length], t);
                let i = this.compileFDSelect(A.fdSelect);
                t.add(i),
                  (g = this.compileTopDicts(A.fdArray, t.length, !0)),
                  r.setEntryLocation('FDArray', [t.length], t),
                  t.add(g.output);
                let a = g.trackers;
                this.compilePrivateDicts(A.fdArray, a, t);
              }
              return (
                this.compilePrivateDicts([A.topDict], [r], t),
                t.add([0]),
                t.data
              );
            }
            encodeNumber(A) {
              return Number.isInteger(A)
                ? this.encodeInteger(A)
                : this.encodeFloat(A);
            }
            static get EncodeFloatRegExp() {
              return b(
                this,
                'EncodeFloatRegExp',
                /\.(\d*?)(?:9{5,20}|0{5,20})\d{0,2}(?:e(.+)|$)/
              );
            }
            encodeFloat(A) {
              let t = A.toString(),
                i = tX.EncodeFloatRegExp.exec(t);
              if (i) {
                let a = parseFloat('1e' + ((i[2] ? +i[2] : 0) + i[1].length));
                t = (Math.round(A * a) / a).toString();
              }
              let a,
                s,
                g = '';
              for (a = 0, s = t.length; a < s; ++a) {
                let A = t[a];
                g +=
                  'e' === A
                    ? '-' === t[++a]
                      ? 'c'
                      : 'b'
                    : '.' === A
                      ? 'a'
                      : '-' === A
                        ? 'e'
                        : A;
              }
              g += 1 & g.length ? 'f' : 'ff';
              let r = [30];
              for (a = 0, s = g.length; a < s; a += 2)
                r.push(parseInt(g.substring(a, a + 2), 16));
              return r;
            }
            encodeInteger(A) {
              return A >= -107 && A <= 107
                ? [A + 139]
                : A >= 108 && A <= 1131
                  ? [247 + ((A -= 108) >> 8), 255 & A]
                  : A >= -1131 && A <= -108
                    ? [251 + ((A = -A - 108) >> 8), 255 & A]
                    : A >= -32768 && A <= 32767
                      ? [28, (A >> 8) & 255, 255 & A]
                      : [
                          29,
                          (A >> 24) & 255,
                          (A >> 16) & 255,
                          (A >> 8) & 255,
                          255 & A,
                        ];
            }
            compileHeader(A) {
              return [A.major, A.minor, 4, A.offSize];
            }
            compileNameIndex(A) {
              let t = new tL();
              for (let i of A) {
                let A = Math.min(i.length, 127),
                  a = Array(A);
                for (let t = 0; t < A; t++) {
                  let A = i[t];
                  (A < '!' ||
                    A > '~' ||
                    '[' === A ||
                    ']' === A ||
                    '(' === A ||
                    ')' === A ||
                    '{' === A ||
                    '}' === A ||
                    '<' === A ||
                    '>' === A ||
                    '/' === A ||
                    '%' === A) &&
                    (A = '_'),
                    (a[t] = A);
                }
                '' === (a = a.join('')) && (a = 'Bad_Font_Name'), t.add(J(a));
              }
              return this.compileIndex(t);
            }
            compileTopDicts(A, t, i) {
              let a = [],
                s = new tL();
              for (let g of A) {
                i &&
                  (g.removeByName('CIDFontVersion'),
                  g.removeByName('CIDFontRevision'),
                  g.removeByName('CIDFontType'),
                  g.removeByName('CIDCount'),
                  g.removeByName('UIDBase'));
                let A = new tO(),
                  r = this.compileDict(g, A);
                a.push(A), s.add(r), A.offset(t);
              }
              return (s = this.compileIndex(s, a)), { trackers: a, output: s };
            }
            compilePrivateDicts(A, t, i) {
              for (let a = 0, s = A.length; a < s; ++a) {
                let s = A[a],
                  g = s.privateDict;
                if (!g || !s.hasName('Private'))
                  throw new x('There must be a private dictionary.');
                let r = new tO(),
                  n = this.compileDict(g, r),
                  o = i.length;
                if (
                  (r.offset(o),
                  n.length || (o = 0),
                  t[a].setEntryLocation('Private', [n.length, o], i),
                  i.add(n),
                  g.subrsIndex && g.hasName('Subrs'))
                ) {
                  let A = this.compileIndex(g.subrsIndex);
                  r.setEntryLocation('Subrs', [n.length], i), i.add(A);
                }
              }
            }
            compileDict(A, t) {
              let i = [];
              for (let a of A.order) {
                if (!(a in A.values)) continue;
                let s = A.values[a],
                  g = A.types[a];
                if (
                  (Array.isArray(g) || (g = [g]),
                  Array.isArray(s) || (s = [s]),
                  0 !== s.length)
                ) {
                  for (let r = 0, n = g.length; r < n; ++r) {
                    let n = g[r],
                      o = s[r];
                    switch (n) {
                      case 'num':
                      case 'sid':
                        i.push(...this.encodeNumber(o));
                        break;
                      case 'offset':
                        let I = A.keyToNameMap[a];
                        t.isTracking(I) || t.track(I, i.length),
                          i.push(29, 0, 0, 0, 0);
                        break;
                      case 'array':
                      case 'delta':
                        i.push(...this.encodeNumber(o));
                        for (let A = 1, t = s.length; A < t; ++A)
                          i.push(...this.encodeNumber(s[A]));
                        break;
                      default:
                        throw new x(`Unknown data type of ${n}`);
                    }
                  }
                  i.push(...A.opcodes[a]);
                }
              }
              return i;
            }
            compileStringIndex(A) {
              let t = new tL();
              for (let i of A) t.add(J(i));
              return this.compileIndex(t);
            }
            compileCharStrings(A) {
              let t = new tL();
              for (let i = 0; i < A.count; i++) {
                let a = A.get(i);
                0 !== a.length ? t.add(a) : t.add(new Uint8Array([139, 14]));
              }
              return this.compileIndex(t);
            }
            compileCharset(A, t, i, a) {
              let s;
              let g = t - 1;
              if (a) s = new Uint8Array([2, 0, 0, (g >> 8) & 255, 255 & g]);
              else {
                (s = new Uint8Array(1 + 2 * g))[0] = 0;
                let t = 0,
                  a = A.charset.length,
                  r = !1;
                for (let g = 1; g < s.length; g += 2) {
                  let n = 0;
                  if (t < a) {
                    let a = A.charset[t++];
                    -1 !== (n = i.getSID(a)) ||
                      ((n = 0),
                      r || ((r = !0), m(`Couldn't find ${a} in CFF strings`)));
                  }
                  (s[g] = (n >> 8) & 255), (s[g + 1] = 255 & n);
                }
              }
              return this.compileTypedArray(s);
            }
            compileEncoding(A) {
              return this.compileTypedArray(A.raw);
            }
            compileFDSelect(A) {
              let t, i;
              let a = A.format;
              switch (a) {
                case 0:
                  for (
                    i = 0, (t = new Uint8Array(1 + A.fdSelect.length))[0] = a;
                    i < A.fdSelect.length;
                    i++
                  )
                    t[i + 1] = A.fdSelect[i];
                  break;
                case 3:
                  let s = A.fdSelect[0],
                    g = [a, 0, 0, 0, 0, s];
                  for (i = 1; i < A.fdSelect.length; i++) {
                    let t = A.fdSelect[i];
                    t !== s && (g.push((i >> 8) & 255, 255 & i, t), (s = t));
                  }
                  let r = (g.length - 3) / 3;
                  (g[1] = (r >> 8) & 255),
                    (g[2] = 255 & r),
                    g.push((i >> 8) & 255, 255 & i),
                    (t = new Uint8Array(g));
              }
              return this.compileTypedArray(t);
            }
            compileTypedArray(A) {
              return Array.from(A);
            }
            compileIndex(A, t = []) {
              let i = A.objects,
                a = i.length;
              if (0 === a) return [0, 0];
              let s = [(a >> 8) & 255, 255 & a],
                g,
                r,
                n = 1;
              for (g = 0; g < a; ++g) n += i[g].length;
              s.push((r = n < 256 ? 1 : n < 65536 ? 2 : n < 16777216 ? 3 : 4));
              let o = 1;
              for (g = 0; g < a + 1; g++)
                1 === r
                  ? s.push(255 & o)
                  : 2 === r
                    ? s.push((o >> 8) & 255, 255 & o)
                    : 3 === r
                      ? s.push((o >> 16) & 255, (o >> 8) & 255, 255 & o)
                      : s.push(
                          (o >>> 24) & 255,
                          (o >> 16) & 255,
                          (o >> 8) & 255,
                          255 & o
                        ),
                  i[g] && (o += i[g].length);
              for (g = 0; g < a; g++)
                t[g] && t[g].offset(s.length), s.push(...i[g]);
              return s;
            }
          }
          let tV = Ah(function (A) {
              (A.A = 65),
                (A.AE = 198),
                (A.AEacute = 508),
                (A.AEmacron = 482),
                (A.AEsmall = 63462),
                (A.Aacute = 193),
                (A.Aacutesmall = 63457),
                (A.Abreve = 258),
                (A.Abreveacute = 7854),
                (A.Abrevecyrillic = 1232),
                (A.Abrevedotbelow = 7862),
                (A.Abrevegrave = 7856),
                (A.Abrevehookabove = 7858),
                (A.Abrevetilde = 7860),
                (A.Acaron = 461),
                (A.Acircle = 9398),
                (A.Acircumflex = 194),
                (A.Acircumflexacute = 7844),
                (A.Acircumflexdotbelow = 7852),
                (A.Acircumflexgrave = 7846),
                (A.Acircumflexhookabove = 7848),
                (A.Acircumflexsmall = 63458),
                (A.Acircumflextilde = 7850),
                (A.Acute = 63177),
                (A.Acutesmall = 63412),
                (A.Acyrillic = 1040),
                (A.Adblgrave = 512),
                (A.Adieresis = 196),
                (A.Adieresiscyrillic = 1234),
                (A.Adieresismacron = 478),
                (A.Adieresissmall = 63460),
                (A.Adotbelow = 7840),
                (A.Adotmacron = 480),
                (A.Agrave = 192),
                (A.Agravesmall = 63456),
                (A.Ahookabove = 7842),
                (A.Aiecyrillic = 1236),
                (A.Ainvertedbreve = 514),
                (A.Alpha = 913),
                (A.Alphatonos = 902),
                (A.Amacron = 256),
                (A.Amonospace = 65313),
                (A.Aogonek = 260),
                (A.Aring = 197),
                (A.Aringacute = 506),
                (A.Aringbelow = 7680),
                (A.Aringsmall = 63461),
                (A.Asmall = 63329),
                (A.Atilde = 195),
                (A.Atildesmall = 63459),
                (A.Aybarmenian = 1329),
                (A.B = 66),
                (A.Bcircle = 9399),
                (A.Bdotaccent = 7682),
                (A.Bdotbelow = 7684),
                (A.Becyrillic = 1041),
                (A.Benarmenian = 1330),
                (A.Beta = 914),
                (A.Bhook = 385),
                (A.Blinebelow = 7686),
                (A.Bmonospace = 65314),
                (A.Brevesmall = 63220),
                (A.Bsmall = 63330),
                (A.Btopbar = 386),
                (A.C = 67),
                (A.Caarmenian = 1342),
                (A.Cacute = 262),
                (A.Caron = 63178),
                (A.Caronsmall = 63221),
                (A.Ccaron = 268),
                (A.Ccedilla = 199),
                (A.Ccedillaacute = 7688),
                (A.Ccedillasmall = 63463),
                (A.Ccircle = 9400),
                (A.Ccircumflex = 264),
                (A.Cdot = 266),
                (A.Cdotaccent = 266),
                (A.Cedillasmall = 63416),
                (A.Chaarmenian = 1353),
                (A.Cheabkhasiancyrillic = 1212),
                (A.Checyrillic = 1063),
                (A.Chedescenderabkhasiancyrillic = 1214),
                (A.Chedescendercyrillic = 1206),
                (A.Chedieresiscyrillic = 1268),
                (A.Cheharmenian = 1347),
                (A.Chekhakassiancyrillic = 1227),
                (A.Cheverticalstrokecyrillic = 1208),
                (A.Chi = 935),
                (A.Chook = 391),
                (A.Circumflexsmall = 63222),
                (A.Cmonospace = 65315),
                (A.Coarmenian = 1361),
                (A.Csmall = 63331),
                (A.D = 68),
                (A.DZ = 497),
                (A.DZcaron = 452),
                (A.Daarmenian = 1332),
                (A.Dafrican = 393),
                (A.Dcaron = 270),
                (A.Dcedilla = 7696),
                (A.Dcircle = 9401),
                (A.Dcircumflexbelow = 7698),
                (A.Dcroat = 272),
                (A.Ddotaccent = 7690),
                (A.Ddotbelow = 7692),
                (A.Decyrillic = 1044),
                (A.Deicoptic = 1006),
                (A.Delta = 8710),
                (A.Deltagreek = 916),
                (A.Dhook = 394),
                (A.Dieresis = 63179),
                (A.DieresisAcute = 63180),
                (A.DieresisGrave = 63181),
                (A.Dieresissmall = 63400),
                (A.Digammagreek = 988),
                (A.Djecyrillic = 1026),
                (A.Dlinebelow = 7694),
                (A.Dmonospace = 65316),
                (A.Dotaccentsmall = 63223),
                (A.Dslash = 272),
                (A.Dsmall = 63332),
                (A.Dtopbar = 395),
                (A.Dz = 498),
                (A.Dzcaron = 453),
                (A.Dzeabkhasiancyrillic = 1248),
                (A.Dzecyrillic = 1029),
                (A.Dzhecyrillic = 1039),
                (A.E = 69),
                (A.Eacute = 201),
                (A.Eacutesmall = 63465),
                (A.Ebreve = 276),
                (A.Ecaron = 282),
                (A.Ecedillabreve = 7708),
                (A.Echarmenian = 1333),
                (A.Ecircle = 9402),
                (A.Ecircumflex = 202),
                (A.Ecircumflexacute = 7870),
                (A.Ecircumflexbelow = 7704),
                (A.Ecircumflexdotbelow = 7878),
                (A.Ecircumflexgrave = 7872),
                (A.Ecircumflexhookabove = 7874),
                (A.Ecircumflexsmall = 63466),
                (A.Ecircumflextilde = 7876),
                (A.Ecyrillic = 1028),
                (A.Edblgrave = 516),
                (A.Edieresis = 203),
                (A.Edieresissmall = 63467),
                (A.Edot = 278),
                (A.Edotaccent = 278),
                (A.Edotbelow = 7864),
                (A.Efcyrillic = 1060),
                (A.Egrave = 200),
                (A.Egravesmall = 63464),
                (A.Eharmenian = 1335),
                (A.Ehookabove = 7866),
                (A.Eightroman = 8551),
                (A.Einvertedbreve = 518),
                (A.Eiotifiedcyrillic = 1124),
                (A.Elcyrillic = 1051),
                (A.Elevenroman = 8554),
                (A.Emacron = 274),
                (A.Emacronacute = 7702),
                (A.Emacrongrave = 7700),
                (A.Emcyrillic = 1052),
                (A.Emonospace = 65317),
                (A.Encyrillic = 1053),
                (A.Endescendercyrillic = 1186),
                (A.Eng = 330),
                (A.Enghecyrillic = 1188),
                (A.Enhookcyrillic = 1223),
                (A.Eogonek = 280),
                (A.Eopen = 400),
                (A.Epsilon = 917),
                (A.Epsilontonos = 904),
                (A.Ercyrillic = 1056),
                (A.Ereversed = 398),
                (A.Ereversedcyrillic = 1069),
                (A.Escyrillic = 1057),
                (A.Esdescendercyrillic = 1194),
                (A.Esh = 425),
                (A.Esmall = 63333),
                (A.Eta = 919),
                (A.Etarmenian = 1336),
                (A.Etatonos = 905),
                (A.Eth = 208),
                (A.Ethsmall = 63472),
                (A.Etilde = 7868),
                (A.Etildebelow = 7706),
                (A.Euro = 8364),
                (A.Ezh = 439),
                (A.Ezhcaron = 494),
                (A.Ezhreversed = 440),
                (A.F = 70),
                (A.Fcircle = 9403),
                (A.Fdotaccent = 7710),
                (A.Feharmenian = 1366),
                (A.Feicoptic = 996),
                (A.Fhook = 401),
                (A.Fitacyrillic = 1138),
                (A.Fiveroman = 8548),
                (A.Fmonospace = 65318),
                (A.Fourroman = 8547),
                (A.Fsmall = 63334),
                (A.G = 71),
                (A.GBsquare = 13191),
                (A.Gacute = 500),
                (A.Gamma = 915),
                (A.Gammaafrican = 404),
                (A.Gangiacoptic = 1002),
                (A.Gbreve = 286),
                (A.Gcaron = 486),
                (A.Gcedilla = 290),
                (A.Gcircle = 9404),
                (A.Gcircumflex = 284),
                (A.Gcommaaccent = 290),
                (A.Gdot = 288),
                (A.Gdotaccent = 288),
                (A.Gecyrillic = 1043),
                (A.Ghadarmenian = 1346),
                (A.Ghemiddlehookcyrillic = 1172),
                (A.Ghestrokecyrillic = 1170),
                (A.Gheupturncyrillic = 1168),
                (A.Ghook = 403),
                (A.Gimarmenian = 1331),
                (A.Gjecyrillic = 1027),
                (A.Gmacron = 7712),
                (A.Gmonospace = 65319),
                (A.Grave = 63182),
                (A.Gravesmall = 63328),
                (A.Gsmall = 63335),
                (A.Gsmallhook = 667),
                (A.Gstroke = 484),
                (A.H = 72),
                (A.H18533 = 9679),
                (A.H18543 = 9642),
                (A.H18551 = 9643),
                (A.H22073 = 9633),
                (A.HPsquare = 13259),
                (A.Haabkhasiancyrillic = 1192),
                (A.Hadescendercyrillic = 1202),
                (A.Hardsigncyrillic = 1066),
                (A.Hbar = 294),
                (A.Hbrevebelow = 7722),
                (A.Hcedilla = 7720),
                (A.Hcircle = 9405),
                (A.Hcircumflex = 292),
                (A.Hdieresis = 7718),
                (A.Hdotaccent = 7714),
                (A.Hdotbelow = 7716),
                (A.Hmonospace = 65320),
                (A.Hoarmenian = 1344),
                (A.Horicoptic = 1e3),
                (A.Hsmall = 63336),
                (A.Hungarumlaut = 63183),
                (A.Hungarumlautsmall = 63224),
                (A.Hzsquare = 13200),
                (A.I = 73),
                (A.IAcyrillic = 1071),
                (A.IJ = 306),
                (A.IUcyrillic = 1070),
                (A.Iacute = 205),
                (A.Iacutesmall = 63469),
                (A.Ibreve = 300),
                (A.Icaron = 463),
                (A.Icircle = 9406),
                (A.Icircumflex = 206),
                (A.Icircumflexsmall = 63470),
                (A.Icyrillic = 1030),
                (A.Idblgrave = 520),
                (A.Idieresis = 207),
                (A.Idieresisacute = 7726),
                (A.Idieresiscyrillic = 1252),
                (A.Idieresissmall = 63471),
                (A.Idot = 304),
                (A.Idotaccent = 304),
                (A.Idotbelow = 7882),
                (A.Iebrevecyrillic = 1238),
                (A.Iecyrillic = 1045),
                (A.Ifraktur = 8465),
                (A.Igrave = 204),
                (A.Igravesmall = 63468),
                (A.Ihookabove = 7880),
                (A.Iicyrillic = 1048),
                (A.Iinvertedbreve = 522),
                (A.Iishortcyrillic = 1049),
                (A.Imacron = 298),
                (A.Imacroncyrillic = 1250),
                (A.Imonospace = 65321),
                (A.Iniarmenian = 1339),
                (A.Iocyrillic = 1025),
                (A.Iogonek = 302),
                (A.Iota = 921),
                (A.Iotaafrican = 406),
                (A.Iotadieresis = 938),
                (A.Iotatonos = 906),
                (A.Ismall = 63337),
                (A.Istroke = 407),
                (A.Itilde = 296),
                (A.Itildebelow = 7724),
                (A.Izhitsacyrillic = 1140),
                (A.Izhitsadblgravecyrillic = 1142),
                (A.J = 74),
                (A.Jaarmenian = 1345),
                (A.Jcircle = 9407),
                (A.Jcircumflex = 308),
                (A.Jecyrillic = 1032),
                (A.Jheharmenian = 1355),
                (A.Jmonospace = 65322),
                (A.Jsmall = 63338),
                (A.K = 75),
                (A.KBsquare = 13189),
                (A.KKsquare = 13261),
                (A.Kabashkircyrillic = 1184),
                (A.Kacute = 7728),
                (A.Kacyrillic = 1050),
                (A.Kadescendercyrillic = 1178),
                (A.Kahookcyrillic = 1219),
                (A.Kappa = 922),
                (A.Kastrokecyrillic = 1182),
                (A.Kaverticalstrokecyrillic = 1180),
                (A.Kcaron = 488),
                (A.Kcedilla = 310),
                (A.Kcircle = 9408),
                (A.Kcommaaccent = 310),
                (A.Kdotbelow = 7730),
                (A.Keharmenian = 1364),
                (A.Kenarmenian = 1343),
                (A.Khacyrillic = 1061),
                (A.Kheicoptic = 998),
                (A.Khook = 408),
                (A.Kjecyrillic = 1036),
                (A.Klinebelow = 7732),
                (A.Kmonospace = 65323),
                (A.Koppacyrillic = 1152),
                (A.Koppagreek = 990),
                (A.Ksicyrillic = 1134),
                (A.Ksmall = 63339),
                (A.L = 76),
                (A.LJ = 455),
                (A.LL = 63167),
                (A.Lacute = 313),
                (A.Lambda = 923),
                (A.Lcaron = 317),
                (A.Lcedilla = 315),
                (A.Lcircle = 9409),
                (A.Lcircumflexbelow = 7740),
                (A.Lcommaaccent = 315),
                (A.Ldot = 319),
                (A.Ldotaccent = 319),
                (A.Ldotbelow = 7734),
                (A.Ldotbelowmacron = 7736),
                (A.Liwnarmenian = 1340),
                (A.Lj = 456),
                (A.Ljecyrillic = 1033),
                (A.Llinebelow = 7738),
                (A.Lmonospace = 65324),
                (A.Lslash = 321),
                (A.Lslashsmall = 63225),
                (A.Lsmall = 63340),
                (A.M = 77),
                (A.MBsquare = 13190),
                (A.Macron = 63184),
                (A.Macronsmall = 63407),
                (A.Macute = 7742),
                (A.Mcircle = 9410),
                (A.Mdotaccent = 7744),
                (A.Mdotbelow = 7746),
                (A.Menarmenian = 1348),
                (A.Mmonospace = 65325),
                (A.Msmall = 63341),
                (A.Mturned = 412),
                (A.Mu = 924),
                (A.N = 78),
                (A.NJ = 458),
                (A.Nacute = 323),
                (A.Ncaron = 327),
                (A.Ncedilla = 325),
                (A.Ncircle = 9411),
                (A.Ncircumflexbelow = 7754),
                (A.Ncommaaccent = 325),
                (A.Ndotaccent = 7748),
                (A.Ndotbelow = 7750),
                (A.Nhookleft = 413),
                (A.Nineroman = 8552),
                (A.Nj = 459),
                (A.Njecyrillic = 1034),
                (A.Nlinebelow = 7752),
                (A.Nmonospace = 65326),
                (A.Nowarmenian = 1350),
                (A.Nsmall = 63342),
                (A.Ntilde = 209),
                (A.Ntildesmall = 63473),
                (A.Nu = 925),
                (A.O = 79),
                (A.OE = 338),
                (A.OEsmall = 63226),
                (A.Oacute = 211),
                (A.Oacutesmall = 63475),
                (A.Obarredcyrillic = 1256),
                (A.Obarreddieresiscyrillic = 1258),
                (A.Obreve = 334),
                (A.Ocaron = 465),
                (A.Ocenteredtilde = 415),
                (A.Ocircle = 9412),
                (A.Ocircumflex = 212),
                (A.Ocircumflexacute = 7888),
                (A.Ocircumflexdotbelow = 7896),
                (A.Ocircumflexgrave = 7890),
                (A.Ocircumflexhookabove = 7892),
                (A.Ocircumflexsmall = 63476),
                (A.Ocircumflextilde = 7894),
                (A.Ocyrillic = 1054),
                (A.Odblacute = 336),
                (A.Odblgrave = 524),
                (A.Odieresis = 214),
                (A.Odieresiscyrillic = 1254),
                (A.Odieresissmall = 63478),
                (A.Odotbelow = 7884),
                (A.Ogoneksmall = 63227),
                (A.Ograve = 210),
                (A.Ogravesmall = 63474),
                (A.Oharmenian = 1365),
                (A.Ohm = 8486),
                (A.Ohookabove = 7886),
                (A.Ohorn = 416),
                (A.Ohornacute = 7898),
                (A.Ohorndotbelow = 7906),
                (A.Ohorngrave = 7900),
                (A.Ohornhookabove = 7902),
                (A.Ohorntilde = 7904),
                (A.Ohungarumlaut = 336),
                (A.Oi = 418),
                (A.Oinvertedbreve = 526),
                (A.Omacron = 332),
                (A.Omacronacute = 7762),
                (A.Omacrongrave = 7760),
                (A.Omega = 8486),
                (A.Omegacyrillic = 1120),
                (A.Omegagreek = 937),
                (A.Omegaroundcyrillic = 1146),
                (A.Omegatitlocyrillic = 1148),
                (A.Omegatonos = 911),
                (A.Omicron = 927),
                (A.Omicrontonos = 908),
                (A.Omonospace = 65327),
                (A.Oneroman = 8544),
                (A.Oogonek = 490),
                (A.Oogonekmacron = 492),
                (A.Oopen = 390),
                (A.Oslash = 216),
                (A.Oslashacute = 510),
                (A.Oslashsmall = 63480),
                (A.Osmall = 63343),
                (A.Ostrokeacute = 510),
                (A.Otcyrillic = 1150),
                (A.Otilde = 213),
                (A.Otildeacute = 7756),
                (A.Otildedieresis = 7758),
                (A.Otildesmall = 63477),
                (A.P = 80),
                (A.Pacute = 7764),
                (A.Pcircle = 9413),
                (A.Pdotaccent = 7766),
                (A.Pecyrillic = 1055),
                (A.Peharmenian = 1354),
                (A.Pemiddlehookcyrillic = 1190),
                (A.Phi = 934),
                (A.Phook = 420),
                (A.Pi = 928),
                (A.Piwrarmenian = 1363),
                (A.Pmonospace = 65328),
                (A.Psi = 936),
                (A.Psicyrillic = 1136),
                (A.Psmall = 63344),
                (A.Q = 81),
                (A.Qcircle = 9414),
                (A.Qmonospace = 65329),
                (A.Qsmall = 63345),
                (A.R = 82),
                (A.Raarmenian = 1356),
                (A.Racute = 340),
                (A.Rcaron = 344),
                (A.Rcedilla = 342),
                (A.Rcircle = 9415),
                (A.Rcommaaccent = 342),
                (A.Rdblgrave = 528),
                (A.Rdotaccent = 7768),
                (A.Rdotbelow = 7770),
                (A.Rdotbelowmacron = 7772),
                (A.Reharmenian = 1360),
                (A.Rfraktur = 8476),
                (A.Rho = 929),
                (A.Ringsmall = 63228),
                (A.Rinvertedbreve = 530),
                (A.Rlinebelow = 7774),
                (A.Rmonospace = 65330),
                (A.Rsmall = 63346),
                (A.Rsmallinverted = 641),
                (A.Rsmallinvertedsuperior = 694),
                (A.S = 83),
                (A.SF010000 = 9484),
                (A.SF020000 = 9492),
                (A.SF030000 = 9488),
                (A.SF040000 = 9496),
                (A.SF050000 = 9532),
                (A.SF060000 = 9516),
                (A.SF070000 = 9524),
                (A.SF080000 = 9500),
                (A.SF090000 = 9508),
                (A.SF100000 = 9472),
                (A.SF110000 = 9474),
                (A.SF190000 = 9569),
                (A.SF200000 = 9570),
                (A.SF210000 = 9558),
                (A.SF220000 = 9557),
                (A.SF230000 = 9571),
                (A.SF240000 = 9553),
                (A.SF250000 = 9559),
                (A.SF260000 = 9565),
                (A.SF270000 = 9564),
                (A.SF280000 = 9563),
                (A.SF360000 = 9566),
                (A.SF370000 = 9567),
                (A.SF380000 = 9562),
                (A.SF390000 = 9556),
                (A.SF400000 = 9577),
                (A.SF410000 = 9574),
                (A.SF420000 = 9568),
                (A.SF430000 = 9552),
                (A.SF440000 = 9580),
                (A.SF450000 = 9575),
                (A.SF460000 = 9576),
                (A.SF470000 = 9572),
                (A.SF480000 = 9573),
                (A.SF490000 = 9561),
                (A.SF500000 = 9560),
                (A.SF510000 = 9554),
                (A.SF520000 = 9555),
                (A.SF530000 = 9579),
                (A.SF540000 = 9578),
                (A.Sacute = 346),
                (A.Sacutedotaccent = 7780),
                (A.Sampigreek = 992),
                (A.Scaron = 352),
                (A.Scarondotaccent = 7782),
                (A.Scaronsmall = 63229),
                (A.Scedilla = 350),
                (A.Schwa = 399),
                (A.Schwacyrillic = 1240),
                (A.Schwadieresiscyrillic = 1242),
                (A.Scircle = 9416),
                (A.Scircumflex = 348),
                (A.Scommaaccent = 536),
                (A.Sdotaccent = 7776),
                (A.Sdotbelow = 7778),
                (A.Sdotbelowdotaccent = 7784),
                (A.Seharmenian = 1357),
                (A.Sevenroman = 8550),
                (A.Shaarmenian = 1351),
                (A.Shacyrillic = 1064),
                (A.Shchacyrillic = 1065),
                (A.Sheicoptic = 994),
                (A.Shhacyrillic = 1210),
                (A.Shimacoptic = 1004),
                (A.Sigma = 931),
                (A.Sixroman = 8549),
                (A.Smonospace = 65331),
                (A.Softsigncyrillic = 1068),
                (A.Ssmall = 63347),
                (A.Stigmagreek = 986),
                (A.T = 84),
                (A.Tau = 932),
                (A.Tbar = 358),
                (A.Tcaron = 356),
                (A.Tcedilla = 354),
                (A.Tcircle = 9417),
                (A.Tcircumflexbelow = 7792),
                (A.Tcommaaccent = 354),
                (A.Tdotaccent = 7786),
                (A.Tdotbelow = 7788),
                (A.Tecyrillic = 1058),
                (A.Tedescendercyrillic = 1196),
                (A.Tenroman = 8553),
                (A.Tetsecyrillic = 1204),
                (A.Theta = 920),
                (A.Thook = 428),
                (A.Thorn = 222),
                (A.Thornsmall = 63486),
                (A.Threeroman = 8546),
                (A.Tildesmall = 63230),
                (A.Tiwnarmenian = 1359),
                (A.Tlinebelow = 7790),
                (A.Tmonospace = 65332),
                (A.Toarmenian = 1337),
                (A.Tonefive = 444),
                (A.Tonesix = 388),
                (A.Tonetwo = 423),
                (A.Tretroflexhook = 430),
                (A.Tsecyrillic = 1062),
                (A.Tshecyrillic = 1035),
                (A.Tsmall = 63348),
                (A.Twelveroman = 8555),
                (A.Tworoman = 8545),
                (A.U = 85),
                (A.Uacute = 218),
                (A.Uacutesmall = 63482),
                (A.Ubreve = 364),
                (A.Ucaron = 467),
                (A.Ucircle = 9418),
                (A.Ucircumflex = 219),
                (A.Ucircumflexbelow = 7798),
                (A.Ucircumflexsmall = 63483),
                (A.Ucyrillic = 1059),
                (A.Udblacute = 368),
                (A.Udblgrave = 532),
                (A.Udieresis = 220),
                (A.Udieresisacute = 471),
                (A.Udieresisbelow = 7794),
                (A.Udieresiscaron = 473),
                (A.Udieresiscyrillic = 1264),
                (A.Udieresisgrave = 475),
                (A.Udieresismacron = 469),
                (A.Udieresissmall = 63484),
                (A.Udotbelow = 7908),
                (A.Ugrave = 217),
                (A.Ugravesmall = 63481),
                (A.Uhookabove = 7910),
                (A.Uhorn = 431),
                (A.Uhornacute = 7912),
                (A.Uhorndotbelow = 7920),
                (A.Uhorngrave = 7914),
                (A.Uhornhookabove = 7916),
                (A.Uhorntilde = 7918),
                (A.Uhungarumlaut = 368),
                (A.Uhungarumlautcyrillic = 1266),
                (A.Uinvertedbreve = 534),
                (A.Ukcyrillic = 1144),
                (A.Umacron = 362),
                (A.Umacroncyrillic = 1262),
                (A.Umacrondieresis = 7802),
                (A.Umonospace = 65333),
                (A.Uogonek = 370),
                (A.Upsilon = 933),
                (A.Upsilon1 = 978),
                (A.Upsilonacutehooksymbolgreek = 979),
                (A.Upsilonafrican = 433),
                (A.Upsilondieresis = 939),
                (A.Upsilondieresishooksymbolgreek = 980),
                (A.Upsilonhooksymbol = 978),
                (A.Upsilontonos = 910),
                (A.Uring = 366),
                (A.Ushortcyrillic = 1038),
                (A.Usmall = 63349),
                (A.Ustraightcyrillic = 1198),
                (A.Ustraightstrokecyrillic = 1200),
                (A.Utilde = 360),
                (A.Utildeacute = 7800),
                (A.Utildebelow = 7796),
                (A.V = 86),
                (A.Vcircle = 9419),
                (A.Vdotbelow = 7806),
                (A.Vecyrillic = 1042),
                (A.Vewarmenian = 1358),
                (A.Vhook = 434),
                (A.Vmonospace = 65334),
                (A.Voarmenian = 1352),
                (A.Vsmall = 63350),
                (A.Vtilde = 7804),
                (A.W = 87),
                (A.Wacute = 7810),
                (A.Wcircle = 9420),
                (A.Wcircumflex = 372),
                (A.Wdieresis = 7812),
                (A.Wdotaccent = 7814),
                (A.Wdotbelow = 7816),
                (A.Wgrave = 7808),
                (A.Wmonospace = 65335),
                (A.Wsmall = 63351),
                (A.X = 88),
                (A.Xcircle = 9421),
                (A.Xdieresis = 7820),
                (A.Xdotaccent = 7818),
                (A.Xeharmenian = 1341),
                (A.Xi = 926),
                (A.Xmonospace = 65336),
                (A.Xsmall = 63352),
                (A.Y = 89),
                (A.Yacute = 221),
                (A.Yacutesmall = 63485),
                (A.Yatcyrillic = 1122),
                (A.Ycircle = 9422),
                (A.Ycircumflex = 374),
                (A.Ydieresis = 376),
                (A.Ydieresissmall = 63487),
                (A.Ydotaccent = 7822),
                (A.Ydotbelow = 7924),
                (A.Yericyrillic = 1067),
                (A.Yerudieresiscyrillic = 1272),
                (A.Ygrave = 7922),
                (A.Yhook = 435),
                (A.Yhookabove = 7926),
                (A.Yiarmenian = 1349),
                (A.Yicyrillic = 1031),
                (A.Yiwnarmenian = 1362),
                (A.Ymonospace = 65337),
                (A.Ysmall = 63353),
                (A.Ytilde = 7928),
                (A.Yusbigcyrillic = 1130),
                (A.Yusbigiotifiedcyrillic = 1132),
                (A.Yuslittlecyrillic = 1126),
                (A.Yuslittleiotifiedcyrillic = 1128),
                (A.Z = 90),
                (A.Zaarmenian = 1334),
                (A.Zacute = 377),
                (A.Zcaron = 381),
                (A.Zcaronsmall = 63231),
                (A.Zcircle = 9423),
                (A.Zcircumflex = 7824),
                (A.Zdot = 379),
                (A.Zdotaccent = 379),
                (A.Zdotbelow = 7826),
                (A.Zecyrillic = 1047),
                (A.Zedescendercyrillic = 1176),
                (A.Zedieresiscyrillic = 1246),
                (A.Zeta = 918),
                (A.Zhearmenian = 1338),
                (A.Zhebrevecyrillic = 1217),
                (A.Zhecyrillic = 1046),
                (A.Zhedescendercyrillic = 1174),
                (A.Zhedieresiscyrillic = 1244),
                (A.Zlinebelow = 7828),
                (A.Zmonospace = 65338),
                (A.Zsmall = 63354),
                (A.Zstroke = 437),
                (A.a = 97),
                (A.aabengali = 2438),
                (A.aacute = 225),
                (A.aadeva = 2310),
                (A.aagujarati = 2694),
                (A.aagurmukhi = 2566),
                (A.aamatragurmukhi = 2622),
                (A.aarusquare = 13059),
                (A.aavowelsignbengali = 2494),
                (A.aavowelsigndeva = 2366),
                (A.aavowelsigngujarati = 2750),
                (A.abbreviationmarkarmenian = 1375),
                (A.abbreviationsigndeva = 2416),
                (A.abengali = 2437),
                (A.abopomofo = 12570),
                (A.abreve = 259),
                (A.abreveacute = 7855),
                (A.abrevecyrillic = 1233),
                (A.abrevedotbelow = 7863),
                (A.abrevegrave = 7857),
                (A.abrevehookabove = 7859),
                (A.abrevetilde = 7861),
                (A.acaron = 462),
                (A.acircle = 9424),
                (A.acircumflex = 226),
                (A.acircumflexacute = 7845),
                (A.acircumflexdotbelow = 7853),
                (A.acircumflexgrave = 7847),
                (A.acircumflexhookabove = 7849),
                (A.acircumflextilde = 7851),
                (A.acute = 180),
                (A.acutebelowcmb = 791),
                (A.acutecmb = 769),
                (A.acutecomb = 769),
                (A.acutedeva = 2388),
                (A.acutelowmod = 719),
                (A.acutetonecmb = 833),
                (A.acyrillic = 1072),
                (A.adblgrave = 513),
                (A.addakgurmukhi = 2673),
                (A.adeva = 2309),
                (A.adieresis = 228),
                (A.adieresiscyrillic = 1235),
                (A.adieresismacron = 479),
                (A.adotbelow = 7841),
                (A.adotmacron = 481),
                (A.ae = 230),
                (A.aeacute = 509),
                (A.aekorean = 12624),
                (A.aemacron = 483),
                (A.afii00208 = 8213),
                (A.afii08941 = 8356),
                (A.afii10017 = 1040),
                (A.afii10018 = 1041),
                (A.afii10019 = 1042),
                (A.afii10020 = 1043),
                (A.afii10021 = 1044),
                (A.afii10022 = 1045),
                (A.afii10023 = 1025),
                (A.afii10024 = 1046),
                (A.afii10025 = 1047),
                (A.afii10026 = 1048),
                (A.afii10027 = 1049),
                (A.afii10028 = 1050),
                (A.afii10029 = 1051),
                (A.afii10030 = 1052),
                (A.afii10031 = 1053),
                (A.afii10032 = 1054),
                (A.afii10033 = 1055),
                (A.afii10034 = 1056),
                (A.afii10035 = 1057),
                (A.afii10036 = 1058),
                (A.afii10037 = 1059),
                (A.afii10038 = 1060),
                (A.afii10039 = 1061),
                (A.afii10040 = 1062),
                (A.afii10041 = 1063),
                (A.afii10042 = 1064),
                (A.afii10043 = 1065),
                (A.afii10044 = 1066),
                (A.afii10045 = 1067),
                (A.afii10046 = 1068),
                (A.afii10047 = 1069),
                (A.afii10048 = 1070),
                (A.afii10049 = 1071),
                (A.afii10050 = 1168),
                (A.afii10051 = 1026),
                (A.afii10052 = 1027),
                (A.afii10053 = 1028),
                (A.afii10054 = 1029),
                (A.afii10055 = 1030),
                (A.afii10056 = 1031),
                (A.afii10057 = 1032),
                (A.afii10058 = 1033),
                (A.afii10059 = 1034),
                (A.afii10060 = 1035),
                (A.afii10061 = 1036),
                (A.afii10062 = 1038),
                (A.afii10063 = 63172),
                (A.afii10064 = 63173),
                (A.afii10065 = 1072),
                (A.afii10066 = 1073),
                (A.afii10067 = 1074),
                (A.afii10068 = 1075),
                (A.afii10069 = 1076),
                (A.afii10070 = 1077),
                (A.afii10071 = 1105),
                (A.afii10072 = 1078),
                (A.afii10073 = 1079),
                (A.afii10074 = 1080),
                (A.afii10075 = 1081),
                (A.afii10076 = 1082),
                (A.afii10077 = 1083),
                (A.afii10078 = 1084),
                (A.afii10079 = 1085),
                (A.afii10080 = 1086),
                (A.afii10081 = 1087),
                (A.afii10082 = 1088),
                (A.afii10083 = 1089),
                (A.afii10084 = 1090),
                (A.afii10085 = 1091),
                (A.afii10086 = 1092),
                (A.afii10087 = 1093),
                (A.afii10088 = 1094),
                (A.afii10089 = 1095),
                (A.afii10090 = 1096),
                (A.afii10091 = 1097),
                (A.afii10092 = 1098),
                (A.afii10093 = 1099),
                (A.afii10094 = 1100),
                (A.afii10095 = 1101),
                (A.afii10096 = 1102),
                (A.afii10097 = 1103),
                (A.afii10098 = 1169),
                (A.afii10099 = 1106),
                (A.afii10100 = 1107),
                (A.afii10101 = 1108),
                (A.afii10102 = 1109),
                (A.afii10103 = 1110),
                (A.afii10104 = 1111),
                (A.afii10105 = 1112),
                (A.afii10106 = 1113),
                (A.afii10107 = 1114),
                (A.afii10108 = 1115),
                (A.afii10109 = 1116),
                (A.afii10110 = 1118),
                (A.afii10145 = 1039),
                (A.afii10146 = 1122),
                (A.afii10147 = 1138),
                (A.afii10148 = 1140),
                (A.afii10192 = 63174),
                (A.afii10193 = 1119),
                (A.afii10194 = 1123),
                (A.afii10195 = 1139),
                (A.afii10196 = 1141),
                (A.afii10831 = 63175),
                (A.afii10832 = 63176),
                (A.afii10846 = 1241),
                (A.afii299 = 8206),
                (A.afii300 = 8207),
                (A.afii301 = 8205),
                (A.afii57381 = 1642),
                (A.afii57388 = 1548),
                (A.afii57392 = 1632),
                (A.afii57393 = 1633),
                (A.afii57394 = 1634),
                (A.afii57395 = 1635),
                (A.afii57396 = 1636),
                (A.afii57397 = 1637),
                (A.afii57398 = 1638),
                (A.afii57399 = 1639),
                (A.afii57400 = 1640),
                (A.afii57401 = 1641),
                (A.afii57403 = 1563),
                (A.afii57407 = 1567),
                (A.afii57409 = 1569),
                (A.afii57410 = 1570),
                (A.afii57411 = 1571),
                (A.afii57412 = 1572),
                (A.afii57413 = 1573),
                (A.afii57414 = 1574),
                (A.afii57415 = 1575),
                (A.afii57416 = 1576),
                (A.afii57417 = 1577),
                (A.afii57418 = 1578),
                (A.afii57419 = 1579),
                (A.afii57420 = 1580),
                (A.afii57421 = 1581),
                (A.afii57422 = 1582),
                (A.afii57423 = 1583),
                (A.afii57424 = 1584),
                (A.afii57425 = 1585),
                (A.afii57426 = 1586),
                (A.afii57427 = 1587),
                (A.afii57428 = 1588),
                (A.afii57429 = 1589),
                (A.afii57430 = 1590),
                (A.afii57431 = 1591),
                (A.afii57432 = 1592),
                (A.afii57433 = 1593),
                (A.afii57434 = 1594),
                (A.afii57440 = 1600),
                (A.afii57441 = 1601),
                (A.afii57442 = 1602),
                (A.afii57443 = 1603),
                (A.afii57444 = 1604),
                (A.afii57445 = 1605),
                (A.afii57446 = 1606),
                (A.afii57448 = 1608),
                (A.afii57449 = 1609),
                (A.afii57450 = 1610),
                (A.afii57451 = 1611),
                (A.afii57452 = 1612),
                (A.afii57453 = 1613),
                (A.afii57454 = 1614),
                (A.afii57455 = 1615),
                (A.afii57456 = 1616),
                (A.afii57457 = 1617),
                (A.afii57458 = 1618),
                (A.afii57470 = 1607),
                (A.afii57505 = 1700),
                (A.afii57506 = 1662),
                (A.afii57507 = 1670),
                (A.afii57508 = 1688),
                (A.afii57509 = 1711),
                (A.afii57511 = 1657),
                (A.afii57512 = 1672),
                (A.afii57513 = 1681),
                (A.afii57514 = 1722),
                (A.afii57519 = 1746),
                (A.afii57534 = 1749),
                (A.afii57636 = 8362),
                (A.afii57645 = 1470),
                (A.afii57658 = 1475),
                (A.afii57664 = 1488),
                (A.afii57665 = 1489),
                (A.afii57666 = 1490),
                (A.afii57667 = 1491),
                (A.afii57668 = 1492),
                (A.afii57669 = 1493),
                (A.afii57670 = 1494),
                (A.afii57671 = 1495),
                (A.afii57672 = 1496),
                (A.afii57673 = 1497),
                (A.afii57674 = 1498),
                (A.afii57675 = 1499),
                (A.afii57676 = 1500),
                (A.afii57677 = 1501),
                (A.afii57678 = 1502),
                (A.afii57679 = 1503),
                (A.afii57680 = 1504),
                (A.afii57681 = 1505),
                (A.afii57682 = 1506),
                (A.afii57683 = 1507),
                (A.afii57684 = 1508),
                (A.afii57685 = 1509),
                (A.afii57686 = 1510),
                (A.afii57687 = 1511),
                (A.afii57688 = 1512),
                (A.afii57689 = 1513),
                (A.afii57690 = 1514),
                (A.afii57694 = 64298),
                (A.afii57695 = 64299),
                (A.afii57700 = 64331),
                (A.afii57705 = 64287),
                (A.afii57716 = 1520),
                (A.afii57717 = 1521),
                (A.afii57718 = 1522),
                (A.afii57723 = 64309),
                (A.afii57793 = 1460),
                (A.afii57794 = 1461),
                (A.afii57795 = 1462),
                (A.afii57796 = 1467),
                (A.afii57797 = 1464),
                (A.afii57798 = 1463),
                (A.afii57799 = 1456),
                (A.afii57800 = 1458),
                (A.afii57801 = 1457),
                (A.afii57802 = 1459),
                (A.afii57803 = 1474),
                (A.afii57804 = 1473),
                (A.afii57806 = 1465),
                (A.afii57807 = 1468),
                (A.afii57839 = 1469),
                (A.afii57841 = 1471),
                (A.afii57842 = 1472),
                (A.afii57929 = 700),
                (A.afii61248 = 8453),
                (A.afii61289 = 8467),
                (A.afii61352 = 8470),
                (A.afii61573 = 8236),
                (A.afii61574 = 8237),
                (A.afii61575 = 8238),
                (A.afii61664 = 8204),
                (A.afii63167 = 1645),
                (A.afii64937 = 701),
                (A.agrave = 224),
                (A.agujarati = 2693),
                (A.agurmukhi = 2565),
                (A.ahiragana = 12354),
                (A.ahookabove = 7843),
                (A.aibengali = 2448),
                (A.aibopomofo = 12574),
                (A.aideva = 2320),
                (A.aiecyrillic = 1237),
                (A.aigujarati = 2704),
                (A.aigurmukhi = 2576),
                (A.aimatragurmukhi = 2632),
                (A.ainarabic = 1593),
                (A.ainfinalarabic = 65226),
                (A.aininitialarabic = 65227),
                (A.ainmedialarabic = 65228),
                (A.ainvertedbreve = 515),
                (A.aivowelsignbengali = 2504),
                (A.aivowelsigndeva = 2376),
                (A.aivowelsigngujarati = 2760),
                (A.akatakana = 12450),
                (A.akatakanahalfwidth = 65393),
                (A.akorean = 12623),
                (A.alef = 1488),
                (A.alefarabic = 1575),
                (A.alefdageshhebrew = 64304),
                (A.aleffinalarabic = 65166),
                (A.alefhamzaabovearabic = 1571),
                (A.alefhamzaabovefinalarabic = 65156),
                (A.alefhamzabelowarabic = 1573),
                (A.alefhamzabelowfinalarabic = 65160),
                (A.alefhebrew = 1488),
                (A.aleflamedhebrew = 64335),
                (A.alefmaddaabovearabic = 1570),
                (A.alefmaddaabovefinalarabic = 65154),
                (A.alefmaksuraarabic = 1609),
                (A.alefmaksurafinalarabic = 65264),
                (A.alefmaksurainitialarabic = 65267),
                (A.alefmaksuramedialarabic = 65268),
                (A.alefpatahhebrew = 64302),
                (A.alefqamatshebrew = 64303),
                (A.aleph = 8501),
                (A.allequal = 8780),
                (A.alpha = 945),
                (A.alphatonos = 940),
                (A.amacron = 257),
                (A.amonospace = 65345),
                (A.ampersand = 38),
                (A.ampersandmonospace = 65286),
                (A.ampersandsmall = 63270),
                (A.amsquare = 13250),
                (A.anbopomofo = 12578),
                (A.angbopomofo = 12580),
                (A.angbracketleft = 12296),
                (A.angbracketright = 12297),
                (A.angkhankhuthai = 3674),
                (A.angle = 8736),
                (A.anglebracketleft = 12296),
                (A.anglebracketleftvertical = 65087),
                (A.anglebracketright = 12297),
                (A.anglebracketrightvertical = 65088),
                (A.angleleft = 9001),
                (A.angleright = 9002),
                (A.angstrom = 8491),
                (A.anoteleia = 903),
                (A.anudattadeva = 2386),
                (A.anusvarabengali = 2434),
                (A.anusvaradeva = 2306),
                (A.anusvaragujarati = 2690),
                (A.aogonek = 261),
                (A.apaatosquare = 13056),
                (A.aparen = 9372),
                (A.apostrophearmenian = 1370),
                (A.apostrophemod = 700),
                (A.apple = 63743),
                (A.approaches = 8784),
                (A.approxequal = 8776),
                (A.approxequalorimage = 8786),
                (A.approximatelyequal = 8773),
                (A.araeaekorean = 12686),
                (A.araeakorean = 12685),
                (A.arc = 8978),
                (A.arighthalfring = 7834),
                (A.aring = 229),
                (A.aringacute = 507),
                (A.aringbelow = 7681),
                (A.arrowboth = 8596),
                (A.arrowdashdown = 8675),
                (A.arrowdashleft = 8672),
                (A.arrowdashright = 8674),
                (A.arrowdashup = 8673),
                (A.arrowdblboth = 8660),
                (A.arrowdbldown = 8659),
                (A.arrowdblleft = 8656),
                (A.arrowdblright = 8658),
                (A.arrowdblup = 8657),
                (A.arrowdown = 8595),
                (A.arrowdownleft = 8601),
                (A.arrowdownright = 8600),
                (A.arrowdownwhite = 8681),
                (A.arrowheaddownmod = 709),
                (A.arrowheadleftmod = 706),
                (A.arrowheadrightmod = 707),
                (A.arrowheadupmod = 708),
                (A.arrowhorizex = 63719),
                (A.arrowleft = 8592),
                (A.arrowleftdbl = 8656),
                (A.arrowleftdblstroke = 8653),
                (A.arrowleftoverright = 8646),
                (A.arrowleftwhite = 8678),
                (A.arrowright = 8594),
                (A.arrowrightdblstroke = 8655),
                (A.arrowrightheavy = 10142),
                (A.arrowrightoverleft = 8644),
                (A.arrowrightwhite = 8680),
                (A.arrowtableft = 8676),
                (A.arrowtabright = 8677),
                (A.arrowup = 8593),
                (A.arrowupdn = 8597),
                (A.arrowupdnbse = 8616),
                (A.arrowupdownbase = 8616),
                (A.arrowupleft = 8598),
                (A.arrowupleftofdown = 8645),
                (A.arrowupright = 8599),
                (A.arrowupwhite = 8679),
                (A.arrowvertex = 63718),
                (A.asciicircum = 94),
                (A.asciicircummonospace = 65342),
                (A.asciitilde = 126),
                (A.asciitildemonospace = 65374),
                (A.ascript = 593),
                (A.ascriptturned = 594),
                (A.asmallhiragana = 12353),
                (A.asmallkatakana = 12449),
                (A.asmallkatakanahalfwidth = 65383),
                (A.asterisk = 42),
                (A.asteriskaltonearabic = 1645),
                (A.asteriskarabic = 1645),
                (A.asteriskmath = 8727),
                (A.asteriskmonospace = 65290),
                (A.asterisksmall = 65121),
                (A.asterism = 8258),
                (A.asuperior = 63209),
                (A.asymptoticallyequal = 8771),
                (A.at = 64),
                (A.atilde = 227),
                (A.atmonospace = 65312),
                (A.atsmall = 65131),
                (A.aturned = 592),
                (A.aubengali = 2452),
                (A.aubopomofo = 12576),
                (A.audeva = 2324),
                (A.augujarati = 2708),
                (A.augurmukhi = 2580),
                (A.aulengthmarkbengali = 2519),
                (A.aumatragurmukhi = 2636),
                (A.auvowelsignbengali = 2508),
                (A.auvowelsigndeva = 2380),
                (A.auvowelsigngujarati = 2764),
                (A.avagrahadeva = 2365),
                (A.aybarmenian = 1377),
                (A.ayin = 1506),
                (A.ayinaltonehebrew = 64288),
                (A.ayinhebrew = 1506),
                (A.b = 98),
                (A.babengali = 2476),
                (A.backslash = 92),
                (A.backslashmonospace = 65340),
                (A.badeva = 2348),
                (A.bagujarati = 2732),
                (A.bagurmukhi = 2604),
                (A.bahiragana = 12400),
                (A.bahtthai = 3647),
                (A.bakatakana = 12496),
                (A.bar = 124),
                (A.barmonospace = 65372),
                (A.bbopomofo = 12549),
                (A.bcircle = 9425),
                (A.bdotaccent = 7683),
                (A.bdotbelow = 7685),
                (A.beamedsixteenthnotes = 9836),
                (A.because = 8757),
                (A.becyrillic = 1073),
                (A.beharabic = 1576),
                (A.behfinalarabic = 65168),
                (A.behinitialarabic = 65169),
                (A.behiragana = 12409),
                (A.behmedialarabic = 65170),
                (A.behmeeminitialarabic = 64671),
                (A.behmeemisolatedarabic = 64520),
                (A.behnoonfinalarabic = 64621),
                (A.bekatakana = 12505),
                (A.benarmenian = 1378),
                (A.bet = 1489),
                (A.beta = 946),
                (A.betasymbolgreek = 976),
                (A.betdagesh = 64305),
                (A.betdageshhebrew = 64305),
                (A.bethebrew = 1489),
                (A.betrafehebrew = 64332),
                (A.bhabengali = 2477),
                (A.bhadeva = 2349),
                (A.bhagujarati = 2733),
                (A.bhagurmukhi = 2605),
                (A.bhook = 595),
                (A.bihiragana = 12403),
                (A.bikatakana = 12499),
                (A.bilabialclick = 664),
                (A.bindigurmukhi = 2562),
                (A.birusquare = 13105),
                (A.blackcircle = 9679),
                (A.blackdiamond = 9670),
                (A.blackdownpointingtriangle = 9660),
                (A.blackleftpointingpointer = 9668),
                (A.blackleftpointingtriangle = 9664),
                (A.blacklenticularbracketleft = 12304),
                (A.blacklenticularbracketleftvertical = 65083),
                (A.blacklenticularbracketright = 12305),
                (A.blacklenticularbracketrightvertical = 65084),
                (A.blacklowerlefttriangle = 9699),
                (A.blacklowerrighttriangle = 9698),
                (A.blackrectangle = 9644),
                (A.blackrightpointingpointer = 9658),
                (A.blackrightpointingtriangle = 9654),
                (A.blacksmallsquare = 9642),
                (A.blacksmilingface = 9787),
                (A.blacksquare = 9632),
                (A.blackstar = 9733),
                (A.blackupperlefttriangle = 9700),
                (A.blackupperrighttriangle = 9701),
                (A.blackuppointingsmalltriangle = 9652),
                (A.blackuppointingtriangle = 9650),
                (A.blank = 9251),
                (A.blinebelow = 7687),
                (A.block = 9608),
                (A.bmonospace = 65346),
                (A.bobaimaithai = 3610),
                (A.bohiragana = 12412),
                (A.bokatakana = 12508),
                (A.bparen = 9373),
                (A.bqsquare = 13251),
                (A.braceex = 63732),
                (A.braceleft = 123),
                (A.braceleftbt = 63731),
                (A.braceleftmid = 63730),
                (A.braceleftmonospace = 65371),
                (A.braceleftsmall = 65115),
                (A.bracelefttp = 63729),
                (A.braceleftvertical = 65079),
                (A.braceright = 125),
                (A.bracerightbt = 63742),
                (A.bracerightmid = 63741),
                (A.bracerightmonospace = 65373),
                (A.bracerightsmall = 65116),
                (A.bracerighttp = 63740),
                (A.bracerightvertical = 65080),
                (A.bracketleft = 91),
                (A.bracketleftbt = 63728),
                (A.bracketleftex = 63727),
                (A.bracketleftmonospace = 65339),
                (A.bracketlefttp = 63726),
                (A.bracketright = 93),
                (A.bracketrightbt = 63739),
                (A.bracketrightex = 63738),
                (A.bracketrightmonospace = 65341),
                (A.bracketrighttp = 63737),
                (A.breve = 728),
                (A.brevebelowcmb = 814),
                (A.brevecmb = 774),
                (A.breveinvertedbelowcmb = 815),
                (A.breveinvertedcmb = 785),
                (A.breveinverteddoublecmb = 865),
                (A.bridgebelowcmb = 810),
                (A.bridgeinvertedbelowcmb = 826),
                (A.brokenbar = 166),
                (A.bstroke = 384),
                (A.bsuperior = 63210),
                (A.btopbar = 387),
                (A.buhiragana = 12406),
                (A.bukatakana = 12502),
                (A.bullet = 8226),
                (A.bulletinverse = 9688),
                (A.bulletoperator = 8729),
                (A.bullseye = 9678),
                (A.c = 99),
                (A.caarmenian = 1390),
                (A.cabengali = 2458),
                (A.cacute = 263),
                (A.cadeva = 2330),
                (A.cagujarati = 2714),
                (A.cagurmukhi = 2586),
                (A.calsquare = 13192),
                (A.candrabindubengali = 2433),
                (A.candrabinducmb = 784),
                (A.candrabindudeva = 2305),
                (A.candrabindugujarati = 2689),
                (A.capslock = 8682),
                (A.careof = 8453),
                (A.caron = 711),
                (A.caronbelowcmb = 812),
                (A.caroncmb = 780),
                (A.carriagereturn = 8629),
                (A.cbopomofo = 12568),
                (A.ccaron = 269),
                (A.ccedilla = 231),
                (A.ccedillaacute = 7689),
                (A.ccircle = 9426),
                (A.ccircumflex = 265),
                (A.ccurl = 597),
                (A.cdot = 267),
                (A.cdotaccent = 267),
                (A.cdsquare = 13253),
                (A.cedilla = 184),
                (A.cedillacmb = 807),
                (A.cent = 162),
                (A.centigrade = 8451),
                (A.centinferior = 63199),
                (A.centmonospace = 65504),
                (A.centoldstyle = 63394),
                (A.centsuperior = 63200),
                (A.chaarmenian = 1401),
                (A.chabengali = 2459),
                (A.chadeva = 2331),
                (A.chagujarati = 2715),
                (A.chagurmukhi = 2587),
                (A.chbopomofo = 12564),
                (A.cheabkhasiancyrillic = 1213),
                (A.checkmark = 10003),
                (A.checyrillic = 1095),
                (A.chedescenderabkhasiancyrillic = 1215),
                (A.chedescendercyrillic = 1207),
                (A.chedieresiscyrillic = 1269),
                (A.cheharmenian = 1395),
                (A.chekhakassiancyrillic = 1228),
                (A.cheverticalstrokecyrillic = 1209),
                (A.chi = 967),
                (A.chieuchacirclekorean = 12919),
                (A.chieuchaparenkorean = 12823),
                (A.chieuchcirclekorean = 12905),
                (A.chieuchkorean = 12618),
                (A.chieuchparenkorean = 12809),
                (A.chochangthai = 3594),
                (A.chochanthai = 3592),
                (A.chochingthai = 3593),
                (A.chochoethai = 3596),
                (A.chook = 392),
                (A.cieucacirclekorean = 12918),
                (A.cieucaparenkorean = 12822),
                (A.cieuccirclekorean = 12904),
                (A.cieuckorean = 12616),
                (A.cieucparenkorean = 12808),
                (A.cieucuparenkorean = 12828),
                (A.circle = 9675),
                (A.circlecopyrt = 169),
                (A.circlemultiply = 8855),
                (A.circleot = 8857),
                (A.circleplus = 8853),
                (A.circlepostalmark = 12342),
                (A.circlewithlefthalfblack = 9680),
                (A.circlewithrighthalfblack = 9681),
                (A.circumflex = 710),
                (A.circumflexbelowcmb = 813),
                (A.circumflexcmb = 770),
                (A.clear = 8999),
                (A.clickalveolar = 450),
                (A.clickdental = 448),
                (A.clicklateral = 449),
                (A.clickretroflex = 451),
                (A.club = 9827),
                (A.clubsuitblack = 9827),
                (A.clubsuitwhite = 9831),
                (A.cmcubedsquare = 13220),
                (A.cmonospace = 65347),
                (A.cmsquaredsquare = 13216),
                (A.coarmenian = 1409),
                (A.colon = 58),
                (A.colonmonetary = 8353),
                (A.colonmonospace = 65306),
                (A.colonsign = 8353),
                (A.colonsmall = 65109),
                (A.colontriangularhalfmod = 721),
                (A.colontriangularmod = 720),
                (A.comma = 44),
                (A.commaabovecmb = 787),
                (A.commaaboverightcmb = 789),
                (A.commaaccent = 63171),
                (A.commaarabic = 1548),
                (A.commaarmenian = 1373),
                (A.commainferior = 63201),
                (A.commamonospace = 65292),
                (A.commareversedabovecmb = 788),
                (A.commareversedmod = 701),
                (A.commasmall = 65104),
                (A.commasuperior = 63202),
                (A.commaturnedabovecmb = 786),
                (A.commaturnedmod = 699),
                (A.compass = 9788),
                (A.congruent = 8773),
                (A.contourintegral = 8750),
                (A.control = 8963),
                (A.controlACK = 6),
                (A.controlBEL = 7),
                (A.controlBS = 8),
                (A.controlCAN = 24),
                (A.controlCR = 13),
                (A.controlDC1 = 17),
                (A.controlDC2 = 18),
                (A.controlDC3 = 19),
                (A.controlDC4 = 20),
                (A.controlDEL = 127),
                (A.controlDLE = 16),
                (A.controlEM = 25),
                (A.controlENQ = 5),
                (A.controlEOT = 4),
                (A.controlESC = 27),
                (A.controlETB = 23),
                (A.controlETX = 3),
                (A.controlFF = 12),
                (A.controlFS = 28),
                (A.controlGS = 29),
                (A.controlHT = 9),
                (A.controlLF = 10),
                (A.controlNAK = 21),
                (A.controlNULL = 0),
                (A.controlRS = 30),
                (A.controlSI = 15),
                (A.controlSO = 14),
                (A.controlSOT = 2),
                (A.controlSTX = 1),
                (A.controlSUB = 26),
                (A.controlSYN = 22),
                (A.controlUS = 31),
                (A.controlVT = 11),
                (A.copyright = 169),
                (A.copyrightsans = 63721),
                (A.copyrightserif = 63193),
                (A.cornerbracketleft = 12300),
                (A.cornerbracketlefthalfwidth = 65378),
                (A.cornerbracketleftvertical = 65089),
                (A.cornerbracketright = 12301),
                (A.cornerbracketrighthalfwidth = 65379),
                (A.cornerbracketrightvertical = 65090),
                (A.corporationsquare = 13183),
                (A.cosquare = 13255),
                (A.coverkgsquare = 13254),
                (A.cparen = 9374),
                (A.cruzeiro = 8354),
                (A.cstretched = 663),
                (A.curlyand = 8911),
                (A.curlyor = 8910),
                (A.currency = 164),
                (A.cyrBreve = 63185),
                (A.cyrFlex = 63186),
                (A.cyrbreve = 63188),
                (A.cyrflex = 63189),
                (A.d = 100),
                (A.daarmenian = 1380),
                (A.dabengali = 2470),
                (A.dadarabic = 1590),
                (A.dadeva = 2342),
                (A.dadfinalarabic = 65214),
                (A.dadinitialarabic = 65215),
                (A.dadmedialarabic = 65216),
                (A.dagesh = 1468),
                (A.dageshhebrew = 1468),
                (A.dagger = 8224),
                (A.daggerdbl = 8225),
                (A.dagujarati = 2726),
                (A.dagurmukhi = 2598),
                (A.dahiragana = 12384),
                (A.dakatakana = 12480),
                (A.dalarabic = 1583),
                (A.dalet = 1491),
                (A.daletdagesh = 64307),
                (A.daletdageshhebrew = 64307),
                (A.dalethebrew = 1491),
                (A.dalfinalarabic = 65194),
                (A.dammaarabic = 1615),
                (A.dammalowarabic = 1615),
                (A.dammatanaltonearabic = 1612),
                (A.dammatanarabic = 1612),
                (A.danda = 2404),
                (A.dargahebrew = 1447),
                (A.dargalefthebrew = 1447),
                (A.dasiapneumatacyrilliccmb = 1157),
                (A.dblGrave = 63187),
                (A.dblanglebracketleft = 12298),
                (A.dblanglebracketleftvertical = 65085),
                (A.dblanglebracketright = 12299),
                (A.dblanglebracketrightvertical = 65086),
                (A.dblarchinvertedbelowcmb = 811),
                (A.dblarrowleft = 8660),
                (A.dblarrowright = 8658),
                (A.dbldanda = 2405),
                (A.dblgrave = 63190),
                (A.dblgravecmb = 783),
                (A.dblintegral = 8748),
                (A.dbllowline = 8215),
                (A.dbllowlinecmb = 819),
                (A.dbloverlinecmb = 831),
                (A.dblprimemod = 698),
                (A.dblverticalbar = 8214),
                (A.dblverticallineabovecmb = 782),
                (A.dbopomofo = 12553),
                (A.dbsquare = 13256),
                (A.dcaron = 271),
                (A.dcedilla = 7697),
                (A.dcircle = 9427),
                (A.dcircumflexbelow = 7699),
                (A.dcroat = 273),
                (A.ddabengali = 2465),
                (A.ddadeva = 2337),
                (A.ddagujarati = 2721),
                (A.ddagurmukhi = 2593),
                (A.ddalarabic = 1672),
                (A.ddalfinalarabic = 64393),
                (A.dddhadeva = 2396),
                (A.ddhabengali = 2466),
                (A.ddhadeva = 2338),
                (A.ddhagujarati = 2722),
                (A.ddhagurmukhi = 2594),
                (A.ddotaccent = 7691),
                (A.ddotbelow = 7693),
                (A.decimalseparatorarabic = 1643),
                (A.decimalseparatorpersian = 1643),
                (A.decyrillic = 1076),
                (A.degree = 176),
                (A.dehihebrew = 1453),
                (A.dehiragana = 12391),
                (A.deicoptic = 1007),
                (A.dekatakana = 12487),
                (A.deleteleft = 9003),
                (A.deleteright = 8998),
                (A.delta = 948),
                (A.deltaturned = 397),
                (A.denominatorminusonenumeratorbengali = 2552),
                (A.dezh = 676),
                (A.dhabengali = 2471),
                (A.dhadeva = 2343),
                (A.dhagujarati = 2727),
                (A.dhagurmukhi = 2599),
                (A.dhook = 599),
                (A.dialytikatonos = 901),
                (A.dialytikatonoscmb = 836),
                (A.diamond = 9830),
                (A.diamondsuitwhite = 9826),
                (A.dieresis = 168),
                (A.dieresisacute = 63191),
                (A.dieresisbelowcmb = 804),
                (A.dieresiscmb = 776),
                (A.dieresisgrave = 63192),
                (A.dieresistonos = 901),
                (A.dihiragana = 12386),
                (A.dikatakana = 12482),
                (A.dittomark = 12291),
                (A.divide = 247),
                (A.divides = 8739),
                (A.divisionslash = 8725),
                (A.djecyrillic = 1106),
                (A.dkshade = 9619),
                (A.dlinebelow = 7695),
                (A.dlsquare = 13207),
                (A.dmacron = 273),
                (A.dmonospace = 65348),
                (A.dnblock = 9604),
                (A.dochadathai = 3598),
                (A.dodekthai = 3604),
                (A.dohiragana = 12393),
                (A.dokatakana = 12489),
                (A.dollar = 36),
                (A.dollarinferior = 63203),
                (A.dollarmonospace = 65284),
                (A.dollaroldstyle = 63268),
                (A.dollarsmall = 65129),
                (A.dollarsuperior = 63204),
                (A.dong = 8363),
                (A.dorusquare = 13094),
                (A.dotaccent = 729),
                (A.dotaccentcmb = 775),
                (A.dotbelowcmb = 803),
                (A.dotbelowcomb = 803),
                (A.dotkatakana = 12539),
                (A.dotlessi = 305),
                (A.dotlessj = 63166),
                (A.dotlessjstrokehook = 644),
                (A.dotmath = 8901),
                (A.dottedcircle = 9676),
                (A.doubleyodpatah = 64287),
                (A.doubleyodpatahhebrew = 64287),
                (A.downtackbelowcmb = 798),
                (A.downtackmod = 725),
                (A.dparen = 9375),
                (A.dsuperior = 63211),
                (A.dtail = 598),
                (A.dtopbar = 396),
                (A.duhiragana = 12389),
                (A.dukatakana = 12485),
                (A.dz = 499),
                (A.dzaltone = 675),
                (A.dzcaron = 454),
                (A.dzcurl = 677),
                (A.dzeabkhasiancyrillic = 1249),
                (A.dzecyrillic = 1109),
                (A.dzhecyrillic = 1119),
                (A.e = 101),
                (A.eacute = 233),
                (A.earth = 9793),
                (A.ebengali = 2447),
                (A.ebopomofo = 12572),
                (A.ebreve = 277),
                (A.ecandradeva = 2317),
                (A.ecandragujarati = 2701),
                (A.ecandravowelsigndeva = 2373),
                (A.ecandravowelsigngujarati = 2757),
                (A.ecaron = 283),
                (A.ecedillabreve = 7709),
                (A.echarmenian = 1381),
                (A.echyiwnarmenian = 1415),
                (A.ecircle = 9428),
                (A.ecircumflex = 234),
                (A.ecircumflexacute = 7871),
                (A.ecircumflexbelow = 7705),
                (A.ecircumflexdotbelow = 7879),
                (A.ecircumflexgrave = 7873),
                (A.ecircumflexhookabove = 7875),
                (A.ecircumflextilde = 7877),
                (A.ecyrillic = 1108),
                (A.edblgrave = 517),
                (A.edeva = 2319),
                (A.edieresis = 235),
                (A.edot = 279),
                (A.edotaccent = 279),
                (A.edotbelow = 7865),
                (A.eegurmukhi = 2575),
                (A.eematragurmukhi = 2631),
                (A.efcyrillic = 1092),
                (A.egrave = 232),
                (A.egujarati = 2703),
                (A.eharmenian = 1383),
                (A.ehbopomofo = 12573),
                (A.ehiragana = 12360),
                (A.ehookabove = 7867),
                (A.eibopomofo = 12575),
                (A.eight = 56),
                (A.eightarabic = 1640),
                (A.eightbengali = 2542),
                (A.eightcircle = 9319),
                (A.eightcircleinversesansserif = 10129),
                (A.eightdeva = 2414),
                (A.eighteencircle = 9329),
                (A.eighteenparen = 9349),
                (A.eighteenperiod = 9369),
                (A.eightgujarati = 2798),
                (A.eightgurmukhi = 2670),
                (A.eighthackarabic = 1640),
                (A.eighthangzhou = 12328),
                (A.eighthnotebeamed = 9835),
                (A.eightideographicparen = 12839),
                (A.eightinferior = 8328),
                (A.eightmonospace = 65304),
                (A.eightoldstyle = 63288),
                (A.eightparen = 9339),
                (A.eightperiod = 9359),
                (A.eightpersian = 1784),
                (A.eightroman = 8567),
                (A.eightsuperior = 8312),
                (A.eightthai = 3672),
                (A.einvertedbreve = 519),
                (A.eiotifiedcyrillic = 1125),
                (A.ekatakana = 12456),
                (A.ekatakanahalfwidth = 65396),
                (A.ekonkargurmukhi = 2676),
                (A.ekorean = 12628),
                (A.elcyrillic = 1083),
                (A.element = 8712),
                (A.elevencircle = 9322),
                (A.elevenparen = 9342),
                (A.elevenperiod = 9362),
                (A.elevenroman = 8570),
                (A.ellipsis = 8230),
                (A.ellipsisvertical = 8942),
                (A.emacron = 275),
                (A.emacronacute = 7703),
                (A.emacrongrave = 7701),
                (A.emcyrillic = 1084),
                (A.emdash = 8212),
                (A.emdashvertical = 65073),
                (A.emonospace = 65349),
                (A.emphasismarkarmenian = 1371),
                (A.emptyset = 8709),
                (A.enbopomofo = 12579),
                (A.encyrillic = 1085),
                (A.endash = 8211),
                (A.endashvertical = 65074),
                (A.endescendercyrillic = 1187),
                (A.eng = 331),
                (A.engbopomofo = 12581),
                (A.enghecyrillic = 1189),
                (A.enhookcyrillic = 1224),
                (A.enspace = 8194),
                (A.eogonek = 281),
                (A.eokorean = 12627),
                (A.eopen = 603),
                (A.eopenclosed = 666),
                (A.eopenreversed = 604),
                (A.eopenreversedclosed = 606),
                (A.eopenreversedhook = 605),
                (A.eparen = 9376),
                (A.epsilon = 949),
                (A.epsilontonos = 941),
                (A.equal = 61),
                (A.equalmonospace = 65309),
                (A.equalsmall = 65126),
                (A.equalsuperior = 8316),
                (A.equivalence = 8801),
                (A.erbopomofo = 12582),
                (A.ercyrillic = 1088),
                (A.ereversed = 600),
                (A.ereversedcyrillic = 1101),
                (A.escyrillic = 1089),
                (A.esdescendercyrillic = 1195),
                (A.esh = 643),
                (A.eshcurl = 646),
                (A.eshortdeva = 2318),
                (A.eshortvowelsigndeva = 2374),
                (A.eshreversedloop = 426),
                (A.eshsquatreversed = 645),
                (A.esmallhiragana = 12359),
                (A.esmallkatakana = 12455),
                (A.esmallkatakanahalfwidth = 65386),
                (A.estimated = 8494),
                (A.esuperior = 63212),
                (A.eta = 951),
                (A.etarmenian = 1384),
                (A.etatonos = 942),
                (A.eth = 240),
                (A.etilde = 7869),
                (A.etildebelow = 7707),
                (A.etnahtafoukhhebrew = 1425),
                (A.etnahtafoukhlefthebrew = 1425),
                (A.etnahtahebrew = 1425),
                (A.etnahtalefthebrew = 1425),
                (A.eturned = 477),
                (A.eukorean = 12641),
                (A.euro = 8364),
                (A.evowelsignbengali = 2503),
                (A.evowelsigndeva = 2375),
                (A.evowelsigngujarati = 2759),
                (A.exclam = 33),
                (A.exclamarmenian = 1372),
                (A.exclamdbl = 8252),
                (A.exclamdown = 161),
                (A.exclamdownsmall = 63393),
                (A.exclammonospace = 65281),
                (A.exclamsmall = 63265),
                (A.existential = 8707),
                (A.ezh = 658),
                (A.ezhcaron = 495),
                (A.ezhcurl = 659),
                (A.ezhreversed = 441),
                (A.ezhtail = 442),
                (A.f = 102),
                (A.fadeva = 2398),
                (A.fagurmukhi = 2654),
                (A.fahrenheit = 8457),
                (A.fathaarabic = 1614),
                (A.fathalowarabic = 1614),
                (A.fathatanarabic = 1611),
                (A.fbopomofo = 12552),
                (A.fcircle = 9429),
                (A.fdotaccent = 7711),
                (A.feharabic = 1601),
                (A.feharmenian = 1414),
                (A.fehfinalarabic = 65234),
                (A.fehinitialarabic = 65235),
                (A.fehmedialarabic = 65236),
                (A.feicoptic = 997),
                (A.female = 9792),
                (A.ff = 64256),
                (A.f_f = 64256),
                (A.ffi = 64259),
                (A.f_f_i = 64259),
                (A.ffl = 64260),
                (A.f_f_l = 64260),
                (A.fi = 64257),
                (A.f_i = 64257),
                (A.fifteencircle = 9326),
                (A.fifteenparen = 9346),
                (A.fifteenperiod = 9366),
                (A.figuredash = 8210),
                (A.filledbox = 9632),
                (A.filledrect = 9644),
                (A.finalkaf = 1498),
                (A.finalkafdagesh = 64314),
                (A.finalkafdageshhebrew = 64314),
                (A.finalkafhebrew = 1498),
                (A.finalmem = 1501),
                (A.finalmemhebrew = 1501),
                (A.finalnun = 1503),
                (A.finalnunhebrew = 1503),
                (A.finalpe = 1507),
                (A.finalpehebrew = 1507),
                (A.finaltsadi = 1509),
                (A.finaltsadihebrew = 1509),
                (A.firsttonechinese = 713),
                (A.fisheye = 9673),
                (A.fitacyrillic = 1139),
                (A.five = 53),
                (A.fivearabic = 1637),
                (A.fivebengali = 2539),
                (A.fivecircle = 9316),
                (A.fivecircleinversesansserif = 10126),
                (A.fivedeva = 2411),
                (A.fiveeighths = 8541),
                (A.fivegujarati = 2795),
                (A.fivegurmukhi = 2667),
                (A.fivehackarabic = 1637),
                (A.fivehangzhou = 12325),
                (A.fiveideographicparen = 12836),
                (A.fiveinferior = 8325),
                (A.fivemonospace = 65301),
                (A.fiveoldstyle = 63285),
                (A.fiveparen = 9336),
                (A.fiveperiod = 9356),
                (A.fivepersian = 1781),
                (A.fiveroman = 8564),
                (A.fivesuperior = 8309),
                (A.fivethai = 3669),
                (A.fl = 64258),
                (A.f_l = 64258),
                (A.florin = 402),
                (A.fmonospace = 65350),
                (A.fmsquare = 13209),
                (A.fofanthai = 3615),
                (A.fofathai = 3613),
                (A.fongmanthai = 3663),
                (A.forall = 8704),
                (A.four = 52),
                (A.fourarabic = 1636),
                (A.fourbengali = 2538),
                (A.fourcircle = 9315),
                (A.fourcircleinversesansserif = 10125),
                (A.fourdeva = 2410),
                (A.fourgujarati = 2794),
                (A.fourgurmukhi = 2666),
                (A.fourhackarabic = 1636),
                (A.fourhangzhou = 12324),
                (A.fourideographicparen = 12835),
                (A.fourinferior = 8324),
                (A.fourmonospace = 65300),
                (A.fournumeratorbengali = 2551),
                (A.fouroldstyle = 63284),
                (A.fourparen = 9335),
                (A.fourperiod = 9355),
                (A.fourpersian = 1780),
                (A.fourroman = 8563),
                (A.foursuperior = 8308),
                (A.fourteencircle = 9325),
                (A.fourteenparen = 9345),
                (A.fourteenperiod = 9365),
                (A.fourthai = 3668),
                (A.fourthtonechinese = 715),
                (A.fparen = 9377),
                (A.fraction = 8260),
                (A.franc = 8355),
                (A.g = 103),
                (A.gabengali = 2455),
                (A.gacute = 501),
                (A.gadeva = 2327),
                (A.gafarabic = 1711),
                (A.gaffinalarabic = 64403),
                (A.gafinitialarabic = 64404),
                (A.gafmedialarabic = 64405),
                (A.gagujarati = 2711),
                (A.gagurmukhi = 2583),
                (A.gahiragana = 12364),
                (A.gakatakana = 12460),
                (A.gamma = 947),
                (A.gammalatinsmall = 611),
                (A.gammasuperior = 736),
                (A.gangiacoptic = 1003),
                (A.gbopomofo = 12557),
                (A.gbreve = 287),
                (A.gcaron = 487),
                (A.gcedilla = 291),
                (A.gcircle = 9430),
                (A.gcircumflex = 285),
                (A.gcommaaccent = 291),
                (A.gdot = 289),
                (A.gdotaccent = 289),
                (A.gecyrillic = 1075),
                (A.gehiragana = 12370),
                (A.gekatakana = 12466),
                (A.geometricallyequal = 8785),
                (A.gereshaccenthebrew = 1436),
                (A.gereshhebrew = 1523),
                (A.gereshmuqdamhebrew = 1437),
                (A.germandbls = 223),
                (A.gershayimaccenthebrew = 1438),
                (A.gershayimhebrew = 1524),
                (A.getamark = 12307),
                (A.ghabengali = 2456),
                (A.ghadarmenian = 1394),
                (A.ghadeva = 2328),
                (A.ghagujarati = 2712),
                (A.ghagurmukhi = 2584),
                (A.ghainarabic = 1594),
                (A.ghainfinalarabic = 65230),
                (A.ghaininitialarabic = 65231),
                (A.ghainmedialarabic = 65232),
                (A.ghemiddlehookcyrillic = 1173),
                (A.ghestrokecyrillic = 1171),
                (A.gheupturncyrillic = 1169),
                (A.ghhadeva = 2394),
                (A.ghhagurmukhi = 2650),
                (A.ghook = 608),
                (A.ghzsquare = 13203),
                (A.gihiragana = 12366),
                (A.gikatakana = 12462),
                (A.gimarmenian = 1379),
                (A.gimel = 1490),
                (A.gimeldagesh = 64306),
                (A.gimeldageshhebrew = 64306),
                (A.gimelhebrew = 1490),
                (A.gjecyrillic = 1107),
                (A.glottalinvertedstroke = 446),
                (A.glottalstop = 660),
                (A.glottalstopinverted = 662),
                (A.glottalstopmod = 704),
                (A.glottalstopreversed = 661),
                (A.glottalstopreversedmod = 705),
                (A.glottalstopreversedsuperior = 740),
                (A.glottalstopstroke = 673),
                (A.glottalstopstrokereversed = 674),
                (A.gmacron = 7713),
                (A.gmonospace = 65351),
                (A.gohiragana = 12372),
                (A.gokatakana = 12468),
                (A.gparen = 9378),
                (A.gpasquare = 13228),
                (A.gradient = 8711),
                (A.grave = 96),
                (A.gravebelowcmb = 790),
                (A.gravecmb = 768),
                (A.gravecomb = 768),
                (A.gravedeva = 2387),
                (A.gravelowmod = 718),
                (A.gravemonospace = 65344),
                (A.gravetonecmb = 832),
                (A.greater = 62),
                (A.greaterequal = 8805),
                (A.greaterequalorless = 8923),
                (A.greatermonospace = 65310),
                (A.greaterorequivalent = 8819),
                (A.greaterorless = 8823),
                (A.greateroverequal = 8807),
                (A.greatersmall = 65125),
                (A.gscript = 609),
                (A.gstroke = 485),
                (A.guhiragana = 12368),
                (A.guillemotleft = 171),
                (A.guillemotright = 187),
                (A.guilsinglleft = 8249),
                (A.guilsinglright = 8250),
                (A.gukatakana = 12464),
                (A.guramusquare = 13080),
                (A.gysquare = 13257),
                (A.h = 104),
                (A.haabkhasiancyrillic = 1193),
                (A.haaltonearabic = 1729),
                (A.habengali = 2489),
                (A.hadescendercyrillic = 1203),
                (A.hadeva = 2361),
                (A.hagujarati = 2745),
                (A.hagurmukhi = 2617),
                (A.haharabic = 1581),
                (A.hahfinalarabic = 65186),
                (A.hahinitialarabic = 65187),
                (A.hahiragana = 12399),
                (A.hahmedialarabic = 65188),
                (A.haitusquare = 13098),
                (A.hakatakana = 12495),
                (A.hakatakanahalfwidth = 65418),
                (A.halantgurmukhi = 2637),
                (A.hamzaarabic = 1569),
                (A.hamzalowarabic = 1569),
                (A.hangulfiller = 12644),
                (A.hardsigncyrillic = 1098),
                (A.harpoonleftbarbup = 8636),
                (A.harpoonrightbarbup = 8640),
                (A.hasquare = 13258),
                (A.hatafpatah = 1458),
                (A.hatafpatah16 = 1458),
                (A.hatafpatah23 = 1458),
                (A.hatafpatah2f = 1458),
                (A.hatafpatahhebrew = 1458),
                (A.hatafpatahnarrowhebrew = 1458),
                (A.hatafpatahquarterhebrew = 1458),
                (A.hatafpatahwidehebrew = 1458),
                (A.hatafqamats = 1459),
                (A.hatafqamats1b = 1459),
                (A.hatafqamats28 = 1459),
                (A.hatafqamats34 = 1459),
                (A.hatafqamatshebrew = 1459),
                (A.hatafqamatsnarrowhebrew = 1459),
                (A.hatafqamatsquarterhebrew = 1459),
                (A.hatafqamatswidehebrew = 1459),
                (A.hatafsegol = 1457),
                (A.hatafsegol17 = 1457),
                (A.hatafsegol24 = 1457),
                (A.hatafsegol30 = 1457),
                (A.hatafsegolhebrew = 1457),
                (A.hatafsegolnarrowhebrew = 1457),
                (A.hatafsegolquarterhebrew = 1457),
                (A.hatafsegolwidehebrew = 1457),
                (A.hbar = 295),
                (A.hbopomofo = 12559),
                (A.hbrevebelow = 7723),
                (A.hcedilla = 7721),
                (A.hcircle = 9431),
                (A.hcircumflex = 293),
                (A.hdieresis = 7719),
                (A.hdotaccent = 7715),
                (A.hdotbelow = 7717),
                (A.he = 1492),
                (A.heart = 9829),
                (A.heartsuitblack = 9829),
                (A.heartsuitwhite = 9825),
                (A.hedagesh = 64308),
                (A.hedageshhebrew = 64308),
                (A.hehaltonearabic = 1729),
                (A.heharabic = 1607),
                (A.hehebrew = 1492),
                (A.hehfinalaltonearabic = 64423),
                (A.hehfinalalttwoarabic = 65258),
                (A.hehfinalarabic = 65258),
                (A.hehhamzaabovefinalarabic = 64421),
                (A.hehhamzaaboveisolatedarabic = 64420),
                (A.hehinitialaltonearabic = 64424),
                (A.hehinitialarabic = 65259),
                (A.hehiragana = 12408),
                (A.hehmedialaltonearabic = 64425),
                (A.hehmedialarabic = 65260),
                (A.heiseierasquare = 13179),
                (A.hekatakana = 12504),
                (A.hekatakanahalfwidth = 65421),
                (A.hekutaarusquare = 13110),
                (A.henghook = 615),
                (A.herutusquare = 13113),
                (A.het = 1495),
                (A.hethebrew = 1495),
                (A.hhook = 614),
                (A.hhooksuperior = 689),
                (A.hieuhacirclekorean = 12923),
                (A.hieuhaparenkorean = 12827),
                (A.hieuhcirclekorean = 12909),
                (A.hieuhkorean = 12622),
                (A.hieuhparenkorean = 12813),
                (A.hihiragana = 12402),
                (A.hikatakana = 12498),
                (A.hikatakanahalfwidth = 65419),
                (A.hiriq = 1460),
                (A.hiriq14 = 1460),
                (A.hiriq21 = 1460),
                (A.hiriq2d = 1460),
                (A.hiriqhebrew = 1460),
                (A.hiriqnarrowhebrew = 1460),
                (A.hiriqquarterhebrew = 1460),
                (A.hiriqwidehebrew = 1460),
                (A.hlinebelow = 7830),
                (A.hmonospace = 65352),
                (A.hoarmenian = 1392),
                (A.hohipthai = 3627),
                (A.hohiragana = 12411),
                (A.hokatakana = 12507),
                (A.hokatakanahalfwidth = 65422),
                (A.holam = 1465),
                (A.holam19 = 1465),
                (A.holam26 = 1465),
                (A.holam32 = 1465),
                (A.holamhebrew = 1465),
                (A.holamnarrowhebrew = 1465),
                (A.holamquarterhebrew = 1465),
                (A.holamwidehebrew = 1465),
                (A.honokhukthai = 3630),
                (A.hookabovecomb = 777),
                (A.hookcmb = 777),
                (A.hookpalatalizedbelowcmb = 801),
                (A.hookretroflexbelowcmb = 802),
                (A.hoonsquare = 13122),
                (A.horicoptic = 1001),
                (A.horizontalbar = 8213),
                (A.horncmb = 795),
                (A.hotsprings = 9832),
                (A.house = 8962),
                (A.hparen = 9379),
                (A.hsuperior = 688),
                (A.hturned = 613),
                (A.huhiragana = 12405),
                (A.huiitosquare = 13107),
                (A.hukatakana = 12501),
                (A.hukatakanahalfwidth = 65420),
                (A.hungarumlaut = 733),
                (A.hungarumlautcmb = 779),
                (A.hv = 405),
                (A.hyphen = 45),
                (A.hypheninferior = 63205),
                (A.hyphenmonospace = 65293),
                (A.hyphensmall = 65123),
                (A.hyphensuperior = 63206),
                (A.hyphentwo = 8208),
                (A.i = 105),
                (A.iacute = 237),
                (A.iacyrillic = 1103),
                (A.ibengali = 2439),
                (A.ibopomofo = 12583),
                (A.ibreve = 301),
                (A.icaron = 464),
                (A.icircle = 9432),
                (A.icircumflex = 238),
                (A.icyrillic = 1110),
                (A.idblgrave = 521),
                (A.ideographearthcircle = 12943),
                (A.ideographfirecircle = 12939),
                (A.ideographicallianceparen = 12863),
                (A.ideographiccallparen = 12858),
                (A.ideographiccentrecircle = 12965),
                (A.ideographicclose = 12294),
                (A.ideographiccomma = 12289),
                (A.ideographiccommaleft = 65380),
                (A.ideographiccongratulationparen = 12855),
                (A.ideographiccorrectcircle = 12963),
                (A.ideographicearthparen = 12847),
                (A.ideographicenterpriseparen = 12861),
                (A.ideographicexcellentcircle = 12957),
                (A.ideographicfestivalparen = 12864),
                (A.ideographicfinancialcircle = 12950),
                (A.ideographicfinancialparen = 12854),
                (A.ideographicfireparen = 12843),
                (A.ideographichaveparen = 12850),
                (A.ideographichighcircle = 12964),
                (A.ideographiciterationmark = 12293),
                (A.ideographiclaborcircle = 12952),
                (A.ideographiclaborparen = 12856),
                (A.ideographicleftcircle = 12967),
                (A.ideographiclowcircle = 12966),
                (A.ideographicmedicinecircle = 12969),
                (A.ideographicmetalparen = 12846),
                (A.ideographicmoonparen = 12842),
                (A.ideographicnameparen = 12852),
                (A.ideographicperiod = 12290),
                (A.ideographicprintcircle = 12958),
                (A.ideographicreachparen = 12867),
                (A.ideographicrepresentparen = 12857),
                (A.ideographicresourceparen = 12862),
                (A.ideographicrightcircle = 12968),
                (A.ideographicsecretcircle = 12953),
                (A.ideographicselfparen = 12866),
                (A.ideographicsocietyparen = 12851),
                (A.ideographicspace = 12288),
                (A.ideographicspecialparen = 12853),
                (A.ideographicstockparen = 12849),
                (A.ideographicstudyparen = 12859),
                (A.ideographicsunparen = 12848),
                (A.ideographicsuperviseparen = 12860),
                (A.ideographicwaterparen = 12844),
                (A.ideographicwoodparen = 12845),
                (A.ideographiczero = 12295),
                (A.ideographmetalcircle = 12942),
                (A.ideographmooncircle = 12938),
                (A.ideographnamecircle = 12948),
                (A.ideographsuncircle = 12944),
                (A.ideographwatercircle = 12940),
                (A.ideographwoodcircle = 12941),
                (A.ideva = 2311),
                (A.idieresis = 239),
                (A.idieresisacute = 7727),
                (A.idieresiscyrillic = 1253),
                (A.idotbelow = 7883),
                (A.iebrevecyrillic = 1239),
                (A.iecyrillic = 1077),
                (A.ieungacirclekorean = 12917),
                (A.ieungaparenkorean = 12821),
                (A.ieungcirclekorean = 12903),
                (A.ieungkorean = 12615),
                (A.ieungparenkorean = 12807),
                (A.igrave = 236),
                (A.igujarati = 2695),
                (A.igurmukhi = 2567),
                (A.ihiragana = 12356),
                (A.ihookabove = 7881),
                (A.iibengali = 2440),
                (A.iicyrillic = 1080),
                (A.iideva = 2312),
                (A.iigujarati = 2696),
                (A.iigurmukhi = 2568),
                (A.iimatragurmukhi = 2624),
                (A.iinvertedbreve = 523),
                (A.iishortcyrillic = 1081),
                (A.iivowelsignbengali = 2496),
                (A.iivowelsigndeva = 2368),
                (A.iivowelsigngujarati = 2752),
                (A.ij = 307),
                (A.ikatakana = 12452),
                (A.ikatakanahalfwidth = 65394),
                (A.ikorean = 12643),
                (A.ilde = 732),
                (A.iluyhebrew = 1452),
                (A.imacron = 299),
                (A.imacroncyrillic = 1251),
                (A.imageorapproximatelyequal = 8787),
                (A.imatragurmukhi = 2623),
                (A.imonospace = 65353),
                (A.increment = 8710),
                (A.infinity = 8734),
                (A.iniarmenian = 1387),
                (A.integral = 8747),
                (A.integralbottom = 8993),
                (A.integralbt = 8993),
                (A.integralex = 63733),
                (A.integraltop = 8992),
                (A.integraltp = 8992),
                (A.intersection = 8745),
                (A.intisquare = 13061),
                (A.invbullet = 9688),
                (A.invcircle = 9689),
                (A.invsmileface = 9787),
                (A.iocyrillic = 1105),
                (A.iogonek = 303),
                (A.iota = 953),
                (A.iotadieresis = 970),
                (A.iotadieresistonos = 912),
                (A.iotalatin = 617),
                (A.iotatonos = 943),
                (A.iparen = 9380),
                (A.irigurmukhi = 2674),
                (A.ismallhiragana = 12355),
                (A.ismallkatakana = 12451),
                (A.ismallkatakanahalfwidth = 65384),
                (A.issharbengali = 2554),
                (A.istroke = 616),
                (A.isuperior = 63213),
                (A.iterationhiragana = 12445),
                (A.iterationkatakana = 12541),
                (A.itilde = 297),
                (A.itildebelow = 7725),
                (A.iubopomofo = 12585),
                (A.iucyrillic = 1102),
                (A.ivowelsignbengali = 2495),
                (A.ivowelsigndeva = 2367),
                (A.ivowelsigngujarati = 2751),
                (A.izhitsacyrillic = 1141),
                (A.izhitsadblgravecyrillic = 1143),
                (A.j = 106),
                (A.jaarmenian = 1393),
                (A.jabengali = 2460),
                (A.jadeva = 2332),
                (A.jagujarati = 2716),
                (A.jagurmukhi = 2588),
                (A.jbopomofo = 12560),
                (A.jcaron = 496),
                (A.jcircle = 9433),
                (A.jcircumflex = 309),
                (A.jcrossedtail = 669),
                (A.jdotlessstroke = 607),
                (A.jecyrillic = 1112),
                (A.jeemarabic = 1580),
                (A.jeemfinalarabic = 65182),
                (A.jeeminitialarabic = 65183),
                (A.jeemmedialarabic = 65184),
                (A.jeharabic = 1688),
                (A.jehfinalarabic = 64395),
                (A.jhabengali = 2461),
                (A.jhadeva = 2333),
                (A.jhagujarati = 2717),
                (A.jhagurmukhi = 2589),
                (A.jheharmenian = 1403),
                (A.jis = 12292),
                (A.jmonospace = 65354),
                (A.jparen = 9381),
                (A.jsuperior = 690),
                (A.k = 107),
                (A.kabashkircyrillic = 1185),
                (A.kabengali = 2453),
                (A.kacute = 7729),
                (A.kacyrillic = 1082),
                (A.kadescendercyrillic = 1179),
                (A.kadeva = 2325),
                (A.kaf = 1499),
                (A.kafarabic = 1603),
                (A.kafdagesh = 64315),
                (A.kafdageshhebrew = 64315),
                (A.kaffinalarabic = 65242),
                (A.kafhebrew = 1499),
                (A.kafinitialarabic = 65243),
                (A.kafmedialarabic = 65244),
                (A.kafrafehebrew = 64333),
                (A.kagujarati = 2709),
                (A.kagurmukhi = 2581),
                (A.kahiragana = 12363),
                (A.kahookcyrillic = 1220),
                (A.kakatakana = 12459),
                (A.kakatakanahalfwidth = 65398),
                (A.kappa = 954),
                (A.kappasymbolgreek = 1008),
                (A.kapyeounmieumkorean = 12657),
                (A.kapyeounphieuphkorean = 12676),
                (A.kapyeounpieupkorean = 12664),
                (A.kapyeounssangpieupkorean = 12665),
                (A.karoriisquare = 13069),
                (A.kashidaautoarabic = 1600),
                (A.kashidaautonosidebearingarabic = 1600),
                (A.kasmallkatakana = 12533),
                (A.kasquare = 13188),
                (A.kasraarabic = 1616),
                (A.kasratanarabic = 1613),
                (A.kastrokecyrillic = 1183),
                (A.katahiraprolongmarkhalfwidth = 65392),
                (A.kaverticalstrokecyrillic = 1181),
                (A.kbopomofo = 12558),
                (A.kcalsquare = 13193),
                (A.kcaron = 489),
                (A.kcedilla = 311),
                (A.kcircle = 9434),
                (A.kcommaaccent = 311),
                (A.kdotbelow = 7731),
                (A.keharmenian = 1412),
                (A.kehiragana = 12369),
                (A.kekatakana = 12465),
                (A.kekatakanahalfwidth = 65401),
                (A.kenarmenian = 1391),
                (A.kesmallkatakana = 12534),
                (A.kgreenlandic = 312),
                (A.khabengali = 2454),
                (A.khacyrillic = 1093),
                (A.khadeva = 2326),
                (A.khagujarati = 2710),
                (A.khagurmukhi = 2582),
                (A.khaharabic = 1582),
                (A.khahfinalarabic = 65190),
                (A.khahinitialarabic = 65191),
                (A.khahmedialarabic = 65192),
                (A.kheicoptic = 999),
                (A.khhadeva = 2393),
                (A.khhagurmukhi = 2649),
                (A.khieukhacirclekorean = 12920),
                (A.khieukhaparenkorean = 12824),
                (A.khieukhcirclekorean = 12906),
                (A.khieukhkorean = 12619),
                (A.khieukhparenkorean = 12810),
                (A.khokhaithai = 3586),
                (A.khokhonthai = 3589),
                (A.khokhuatthai = 3587),
                (A.khokhwaithai = 3588),
                (A.khomutthai = 3675),
                (A.khook = 409),
                (A.khorakhangthai = 3590),
                (A.khzsquare = 13201),
                (A.kihiragana = 12365),
                (A.kikatakana = 12461),
                (A.kikatakanahalfwidth = 65399),
                (A.kiroguramusquare = 13077),
                (A.kiromeetorusquare = 13078),
                (A.kirosquare = 13076),
                (A.kiyeokacirclekorean = 12910),
                (A.kiyeokaparenkorean = 12814),
                (A.kiyeokcirclekorean = 12896),
                (A.kiyeokkorean = 12593),
                (A.kiyeokparenkorean = 12800),
                (A.kiyeoksioskorean = 12595),
                (A.kjecyrillic = 1116),
                (A.klinebelow = 7733),
                (A.klsquare = 13208),
                (A.kmcubedsquare = 13222),
                (A.kmonospace = 65355),
                (A.kmsquaredsquare = 13218),
                (A.kohiragana = 12371),
                (A.kohmsquare = 13248),
                (A.kokaithai = 3585),
                (A.kokatakana = 12467),
                (A.kokatakanahalfwidth = 65402),
                (A.kooposquare = 13086),
                (A.koppacyrillic = 1153),
                (A.koreanstandardsymbol = 12927),
                (A.koroniscmb = 835),
                (A.kparen = 9382),
                (A.kpasquare = 13226),
                (A.ksicyrillic = 1135),
                (A.ktsquare = 13263),
                (A.kturned = 670),
                (A.kuhiragana = 12367),
                (A.kukatakana = 12463),
                (A.kukatakanahalfwidth = 65400),
                (A.kvsquare = 13240),
                (A.kwsquare = 13246),
                (A.l = 108),
                (A.labengali = 2482),
                (A.lacute = 314),
                (A.ladeva = 2354),
                (A.lagujarati = 2738),
                (A.lagurmukhi = 2610),
                (A.lakkhangyaothai = 3653),
                (A.lamaleffinalarabic = 65276),
                (A.lamalefhamzaabovefinalarabic = 65272),
                (A.lamalefhamzaaboveisolatedarabic = 65271),
                (A.lamalefhamzabelowfinalarabic = 65274),
                (A.lamalefhamzabelowisolatedarabic = 65273),
                (A.lamalefisolatedarabic = 65275),
                (A.lamalefmaddaabovefinalarabic = 65270),
                (A.lamalefmaddaaboveisolatedarabic = 65269),
                (A.lamarabic = 1604),
                (A.lambda = 955),
                (A.lambdastroke = 411),
                (A.lamed = 1500),
                (A.lameddagesh = 64316),
                (A.lameddageshhebrew = 64316),
                (A.lamedhebrew = 1500),
                (A.lamfinalarabic = 65246),
                (A.lamhahinitialarabic = 64714),
                (A.laminitialarabic = 65247),
                (A.lamjeeminitialarabic = 64713),
                (A.lamkhahinitialarabic = 64715),
                (A.lamlamhehisolatedarabic = 65010),
                (A.lammedialarabic = 65248),
                (A.lammeemhahinitialarabic = 64904),
                (A.lammeeminitialarabic = 64716),
                (A.largecircle = 9711),
                (A.lbar = 410),
                (A.lbelt = 620),
                (A.lbopomofo = 12556),
                (A.lcaron = 318),
                (A.lcedilla = 316),
                (A.lcircle = 9435),
                (A.lcircumflexbelow = 7741),
                (A.lcommaaccent = 316),
                (A.ldot = 320),
                (A.ldotaccent = 320),
                (A.ldotbelow = 7735),
                (A.ldotbelowmacron = 7737),
                (A.leftangleabovecmb = 794),
                (A.lefttackbelowcmb = 792),
                (A.less = 60),
                (A.lessequal = 8804),
                (A.lessequalorgreater = 8922),
                (A.lessmonospace = 65308),
                (A.lessorequivalent = 8818),
                (A.lessorgreater = 8822),
                (A.lessoverequal = 8806),
                (A.lesssmall = 65124),
                (A.lezh = 622),
                (A.lfblock = 9612),
                (A.lhookretroflex = 621),
                (A.lira = 8356),
                (A.liwnarmenian = 1388),
                (A.lj = 457),
                (A.ljecyrillic = 1113),
                (A.ll = 63168),
                (A.lladeva = 2355),
                (A.llagujarati = 2739),
                (A.llinebelow = 7739),
                (A.llladeva = 2356),
                (A.llvocalicbengali = 2529),
                (A.llvocalicdeva = 2401),
                (A.llvocalicvowelsignbengali = 2531),
                (A.llvocalicvowelsigndeva = 2403),
                (A.lmiddletilde = 619),
                (A.lmonospace = 65356),
                (A.lmsquare = 13264),
                (A.lochulathai = 3628),
                (A.logicaland = 8743),
                (A.logicalnot = 172),
                (A.logicalnotreversed = 8976),
                (A.logicalor = 8744),
                (A.lolingthai = 3621),
                (A.longs = 383),
                (A.lowlinecenterline = 65102),
                (A.lowlinecmb = 818),
                (A.lowlinedashed = 65101),
                (A.lozenge = 9674),
                (A.lparen = 9383),
                (A.lslash = 322),
                (A.lsquare = 8467),
                (A.lsuperior = 63214),
                (A.ltshade = 9617),
                (A.luthai = 3622),
                (A.lvocalicbengali = 2444),
                (A.lvocalicdeva = 2316),
                (A.lvocalicvowelsignbengali = 2530),
                (A.lvocalicvowelsigndeva = 2402),
                (A.lxsquare = 13267),
                (A.m = 109),
                (A.mabengali = 2478),
                (A.macron = 175),
                (A.macronbelowcmb = 817),
                (A.macroncmb = 772),
                (A.macronlowmod = 717),
                (A.macronmonospace = 65507),
                (A.macute = 7743),
                (A.madeva = 2350),
                (A.magujarati = 2734),
                (A.magurmukhi = 2606),
                (A.mahapakhhebrew = 1444),
                (A.mahapakhlefthebrew = 1444),
                (A.mahiragana = 12414),
                (A.maichattawalowleftthai = 63637),
                (A.maichattawalowrightthai = 63636),
                (A.maichattawathai = 3659),
                (A.maichattawaupperleftthai = 63635),
                (A.maieklowleftthai = 63628),
                (A.maieklowrightthai = 63627),
                (A.maiekthai = 3656),
                (A.maiekupperleftthai = 63626),
                (A.maihanakatleftthai = 63620),
                (A.maihanakatthai = 3633),
                (A.maitaikhuleftthai = 63625),
                (A.maitaikhuthai = 3655),
                (A.maitholowleftthai = 63631),
                (A.maitholowrightthai = 63630),
                (A.maithothai = 3657),
                (A.maithoupperleftthai = 63629),
                (A.maitrilowleftthai = 63634),
                (A.maitrilowrightthai = 63633),
                (A.maitrithai = 3658),
                (A.maitriupperleftthai = 63632),
                (A.maiyamokthai = 3654),
                (A.makatakana = 12510),
                (A.makatakanahalfwidth = 65423),
                (A.male = 9794),
                (A.mansyonsquare = 13127),
                (A.maqafhebrew = 1470),
                (A.mars = 9794),
                (A.masoracirclehebrew = 1455),
                (A.masquare = 13187),
                (A.mbopomofo = 12551),
                (A.mbsquare = 13268),
                (A.mcircle = 9436),
                (A.mcubedsquare = 13221),
                (A.mdotaccent = 7745),
                (A.mdotbelow = 7747),
                (A.meemarabic = 1605),
                (A.meemfinalarabic = 65250),
                (A.meeminitialarabic = 65251),
                (A.meemmedialarabic = 65252),
                (A.meemmeeminitialarabic = 64721),
                (A.meemmeemisolatedarabic = 64584),
                (A.meetorusquare = 13133),
                (A.mehiragana = 12417),
                (A.meizierasquare = 13182),
                (A.mekatakana = 12513),
                (A.mekatakanahalfwidth = 65426),
                (A.mem = 1502),
                (A.memdagesh = 64318),
                (A.memdageshhebrew = 64318),
                (A.memhebrew = 1502),
                (A.menarmenian = 1396),
                (A.merkhahebrew = 1445),
                (A.merkhakefulahebrew = 1446),
                (A.merkhakefulalefthebrew = 1446),
                (A.merkhalefthebrew = 1445),
                (A.mhook = 625),
                (A.mhzsquare = 13202),
                (A.middledotkatakanahalfwidth = 65381),
                (A.middot = 183),
                (A.mieumacirclekorean = 12914),
                (A.mieumaparenkorean = 12818),
                (A.mieumcirclekorean = 12900),
                (A.mieumkorean = 12609),
                (A.mieumpansioskorean = 12656),
                (A.mieumparenkorean = 12804),
                (A.mieumpieupkorean = 12654),
                (A.mieumsioskorean = 12655),
                (A.mihiragana = 12415),
                (A.mikatakana = 12511),
                (A.mikatakanahalfwidth = 65424),
                (A.minus = 8722),
                (A.minusbelowcmb = 800),
                (A.minuscircle = 8854),
                (A.minusmod = 727),
                (A.minusplus = 8723),
                (A.minute = 8242),
                (A.miribaarusquare = 13130),
                (A.mirisquare = 13129),
                (A.mlonglegturned = 624),
                (A.mlsquare = 13206),
                (A.mmcubedsquare = 13219),
                (A.mmonospace = 65357),
                (A.mmsquaredsquare = 13215),
                (A.mohiragana = 12418),
                (A.mohmsquare = 13249),
                (A.mokatakana = 12514),
                (A.mokatakanahalfwidth = 65427),
                (A.molsquare = 13270),
                (A.momathai = 3617),
                (A.moverssquare = 13223),
                (A.moverssquaredsquare = 13224),
                (A.mparen = 9384),
                (A.mpasquare = 13227),
                (A.mssquare = 13235),
                (A.msuperior = 63215),
                (A.mturned = 623),
                (A.mu = 181),
                (A.mu1 = 181),
                (A.muasquare = 13186),
                (A.muchgreater = 8811),
                (A.muchless = 8810),
                (A.mufsquare = 13196),
                (A.mugreek = 956),
                (A.mugsquare = 13197),
                (A.muhiragana = 12416),
                (A.mukatakana = 12512),
                (A.mukatakanahalfwidth = 65425),
                (A.mulsquare = 13205),
                (A.multiply = 215),
                (A.mumsquare = 13211),
                (A.munahhebrew = 1443),
                (A.munahlefthebrew = 1443),
                (A.musicalnote = 9834),
                (A.musicalnotedbl = 9835),
                (A.musicflatsign = 9837),
                (A.musicsharpsign = 9839),
                (A.mussquare = 13234),
                (A.muvsquare = 13238),
                (A.muwsquare = 13244),
                (A.mvmegasquare = 13241),
                (A.mvsquare = 13239),
                (A.mwmegasquare = 13247),
                (A.mwsquare = 13245),
                (A.n = 110),
                (A.nabengali = 2472),
                (A.nabla = 8711),
                (A.nacute = 324),
                (A.nadeva = 2344),
                (A.nagujarati = 2728),
                (A.nagurmukhi = 2600),
                (A.nahiragana = 12394),
                (A.nakatakana = 12490),
                (A.nakatakanahalfwidth = 65413),
                (A.napostrophe = 329),
                (A.nasquare = 13185),
                (A.nbopomofo = 12555),
                (A.nbspace = 160),
                (A.ncaron = 328),
                (A.ncedilla = 326),
                (A.ncircle = 9437),
                (A.ncircumflexbelow = 7755),
                (A.ncommaaccent = 326),
                (A.ndotaccent = 7749),
                (A.ndotbelow = 7751),
                (A.nehiragana = 12397),
                (A.nekatakana = 12493),
                (A.nekatakanahalfwidth = 65416),
                (A.newsheqelsign = 8362),
                (A.nfsquare = 13195),
                (A.ngabengali = 2457),
                (A.ngadeva = 2329),
                (A.ngagujarati = 2713),
                (A.ngagurmukhi = 2585),
                (A.ngonguthai = 3591),
                (A.nhiragana = 12435),
                (A.nhookleft = 626),
                (A.nhookretroflex = 627),
                (A.nieunacirclekorean = 12911),
                (A.nieunaparenkorean = 12815),
                (A.nieuncieuckorean = 12597),
                (A.nieuncirclekorean = 12897),
                (A.nieunhieuhkorean = 12598),
                (A.nieunkorean = 12596),
                (A.nieunpansioskorean = 12648),
                (A.nieunparenkorean = 12801),
                (A.nieunsioskorean = 12647),
                (A.nieuntikeutkorean = 12646),
                (A.nihiragana = 12395),
                (A.nikatakana = 12491),
                (A.nikatakanahalfwidth = 65414),
                (A.nikhahitleftthai = 63641),
                (A.nikhahitthai = 3661),
                (A.nine = 57),
                (A.ninearabic = 1641),
                (A.ninebengali = 2543),
                (A.ninecircle = 9320),
                (A.ninecircleinversesansserif = 10130),
                (A.ninedeva = 2415),
                (A.ninegujarati = 2799),
                (A.ninegurmukhi = 2671),
                (A.ninehackarabic = 1641),
                (A.ninehangzhou = 12329),
                (A.nineideographicparen = 12840),
                (A.nineinferior = 8329),
                (A.ninemonospace = 65305),
                (A.nineoldstyle = 63289),
                (A.nineparen = 9340),
                (A.nineperiod = 9360),
                (A.ninepersian = 1785),
                (A.nineroman = 8568),
                (A.ninesuperior = 8313),
                (A.nineteencircle = 9330),
                (A.nineteenparen = 9350),
                (A.nineteenperiod = 9370),
                (A.ninethai = 3673),
                (A.nj = 460),
                (A.njecyrillic = 1114),
                (A.nkatakana = 12531),
                (A.nkatakanahalfwidth = 65437),
                (A.nlegrightlong = 414),
                (A.nlinebelow = 7753),
                (A.nmonospace = 65358),
                (A.nmsquare = 13210),
                (A.nnabengali = 2467),
                (A.nnadeva = 2339),
                (A.nnagujarati = 2723),
                (A.nnagurmukhi = 2595),
                (A.nnnadeva = 2345),
                (A.nohiragana = 12398),
                (A.nokatakana = 12494),
                (A.nokatakanahalfwidth = 65417),
                (A.nonbreakingspace = 160),
                (A.nonenthai = 3603),
                (A.nonuthai = 3609),
                (A.noonarabic = 1606),
                (A.noonfinalarabic = 65254),
                (A.noonghunnaarabic = 1722),
                (A.noonghunnafinalarabic = 64415),
                (A.nooninitialarabic = 65255),
                (A.noonjeeminitialarabic = 64722),
                (A.noonjeemisolatedarabic = 64587),
                (A.noonmedialarabic = 65256),
                (A.noonmeeminitialarabic = 64725),
                (A.noonmeemisolatedarabic = 64590),
                (A.noonnoonfinalarabic = 64653),
                (A.notcontains = 8716),
                (A.notelement = 8713),
                (A.notelementof = 8713),
                (A.notequal = 8800),
                (A.notgreater = 8815),
                (A.notgreaternorequal = 8817),
                (A.notgreaternorless = 8825),
                (A.notidentical = 8802),
                (A.notless = 8814),
                (A.notlessnorequal = 8816),
                (A.notparallel = 8742),
                (A.notprecedes = 8832),
                (A.notsubset = 8836),
                (A.notsucceeds = 8833),
                (A.notsuperset = 8837),
                (A.nowarmenian = 1398),
                (A.nparen = 9385),
                (A.nssquare = 13233),
                (A.nsuperior = 8319),
                (A.ntilde = 241),
                (A.nu = 957),
                (A.nuhiragana = 12396),
                (A.nukatakana = 12492),
                (A.nukatakanahalfwidth = 65415),
                (A.nuktabengali = 2492),
                (A.nuktadeva = 2364),
                (A.nuktagujarati = 2748),
                (A.nuktagurmukhi = 2620),
                (A.numbersign = 35),
                (A.numbersignmonospace = 65283),
                (A.numbersignsmall = 65119),
                (A.numeralsigngreek = 884),
                (A.numeralsignlowergreek = 885),
                (A.numero = 8470),
                (A.nun = 1504),
                (A.nundagesh = 64320),
                (A.nundageshhebrew = 64320),
                (A.nunhebrew = 1504),
                (A.nvsquare = 13237),
                (A.nwsquare = 13243),
                (A.nyabengali = 2462),
                (A.nyadeva = 2334),
                (A.nyagujarati = 2718),
                (A.nyagurmukhi = 2590),
                (A.o = 111),
                (A.oacute = 243),
                (A.oangthai = 3629),
                (A.obarred = 629),
                (A.obarredcyrillic = 1257),
                (A.obarreddieresiscyrillic = 1259),
                (A.obengali = 2451),
                (A.obopomofo = 12571),
                (A.obreve = 335),
                (A.ocandradeva = 2321),
                (A.ocandragujarati = 2705),
                (A.ocandravowelsigndeva = 2377),
                (A.ocandravowelsigngujarati = 2761),
                (A.ocaron = 466),
                (A.ocircle = 9438),
                (A.ocircumflex = 244),
                (A.ocircumflexacute = 7889),
                (A.ocircumflexdotbelow = 7897),
                (A.ocircumflexgrave = 7891),
                (A.ocircumflexhookabove = 7893),
                (A.ocircumflextilde = 7895),
                (A.ocyrillic = 1086),
                (A.odblacute = 337),
                (A.odblgrave = 525),
                (A.odeva = 2323),
                (A.odieresis = 246),
                (A.odieresiscyrillic = 1255),
                (A.odotbelow = 7885),
                (A.oe = 339),
                (A.oekorean = 12634),
                (A.ogonek = 731),
                (A.ogonekcmb = 808),
                (A.ograve = 242),
                (A.ogujarati = 2707),
                (A.oharmenian = 1413),
                (A.ohiragana = 12362),
                (A.ohookabove = 7887),
                (A.ohorn = 417),
                (A.ohornacute = 7899),
                (A.ohorndotbelow = 7907),
                (A.ohorngrave = 7901),
                (A.ohornhookabove = 7903),
                (A.ohorntilde = 7905),
                (A.ohungarumlaut = 337),
                (A.oi = 419),
                (A.oinvertedbreve = 527),
                (A.okatakana = 12458),
                (A.okatakanahalfwidth = 65397),
                (A.okorean = 12631),
                (A.olehebrew = 1451),
                (A.omacron = 333),
                (A.omacronacute = 7763),
                (A.omacrongrave = 7761),
                (A.omdeva = 2384),
                (A.omega = 969),
                (A.omega1 = 982),
                (A.omegacyrillic = 1121),
                (A.omegalatinclosed = 631),
                (A.omegaroundcyrillic = 1147),
                (A.omegatitlocyrillic = 1149),
                (A.omegatonos = 974),
                (A.omgujarati = 2768),
                (A.omicron = 959),
                (A.omicrontonos = 972),
                (A.omonospace = 65359),
                (A.one = 49),
                (A.onearabic = 1633),
                (A.onebengali = 2535),
                (A.onecircle = 9312),
                (A.onecircleinversesansserif = 10122),
                (A.onedeva = 2407),
                (A.onedotenleader = 8228),
                (A.oneeighth = 8539),
                (A.onefitted = 63196),
                (A.onegujarati = 2791),
                (A.onegurmukhi = 2663),
                (A.onehackarabic = 1633),
                (A.onehalf = 189),
                (A.onehangzhou = 12321),
                (A.oneideographicparen = 12832),
                (A.oneinferior = 8321),
                (A.onemonospace = 65297),
                (A.onenumeratorbengali = 2548),
                (A.oneoldstyle = 63281),
                (A.oneparen = 9332),
                (A.oneperiod = 9352),
                (A.onepersian = 1777),
                (A.onequarter = 188),
                (A.oneroman = 8560),
                (A.onesuperior = 185),
                (A.onethai = 3665),
                (A.onethird = 8531),
                (A.oogonek = 491),
                (A.oogonekmacron = 493),
                (A.oogurmukhi = 2579),
                (A.oomatragurmukhi = 2635),
                (A.oopen = 596),
                (A.oparen = 9386),
                (A.openbullet = 9702),
                (A.option = 8997),
                (A.ordfeminine = 170),
                (A.ordmasculine = 186),
                (A.orthogonal = 8735),
                (A.oshortdeva = 2322),
                (A.oshortvowelsigndeva = 2378),
                (A.oslash = 248),
                (A.oslashacute = 511),
                (A.osmallhiragana = 12361),
                (A.osmallkatakana = 12457),
                (A.osmallkatakanahalfwidth = 65387),
                (A.ostrokeacute = 511),
                (A.osuperior = 63216),
                (A.otcyrillic = 1151),
                (A.otilde = 245),
                (A.otildeacute = 7757),
                (A.otildedieresis = 7759),
                (A.oubopomofo = 12577),
                (A.overline = 8254),
                (A.overlinecenterline = 65098),
                (A.overlinecmb = 773),
                (A.overlinedashed = 65097),
                (A.overlinedblwavy = 65100),
                (A.overlinewavy = 65099),
                (A.overscore = 175),
                (A.ovowelsignbengali = 2507),
                (A.ovowelsigndeva = 2379),
                (A.ovowelsigngujarati = 2763),
                (A.p = 112),
                (A.paampssquare = 13184),
                (A.paasentosquare = 13099),
                (A.pabengali = 2474),
                (A.pacute = 7765),
                (A.padeva = 2346),
                (A.pagedown = 8671),
                (A.pageup = 8670),
                (A.pagujarati = 2730),
                (A.pagurmukhi = 2602),
                (A.pahiragana = 12401),
                (A.paiyannoithai = 3631),
                (A.pakatakana = 12497),
                (A.palatalizationcyrilliccmb = 1156),
                (A.palochkacyrillic = 1216),
                (A.pansioskorean = 12671),
                (A.paragraph = 182),
                (A.parallel = 8741),
                (A.parenleft = 40),
                (A.parenleftaltonearabic = 64830),
                (A.parenleftbt = 63725),
                (A.parenleftex = 63724),
                (A.parenleftinferior = 8333),
                (A.parenleftmonospace = 65288),
                (A.parenleftsmall = 65113),
                (A.parenleftsuperior = 8317),
                (A.parenlefttp = 63723),
                (A.parenleftvertical = 65077),
                (A.parenright = 41),
                (A.parenrightaltonearabic = 64831),
                (A.parenrightbt = 63736),
                (A.parenrightex = 63735),
                (A.parenrightinferior = 8334),
                (A.parenrightmonospace = 65289),
                (A.parenrightsmall = 65114),
                (A.parenrightsuperior = 8318),
                (A.parenrighttp = 63734),
                (A.parenrightvertical = 65078),
                (A.partialdiff = 8706),
                (A.paseqhebrew = 1472),
                (A.pashtahebrew = 1433),
                (A.pasquare = 13225),
                (A.patah = 1463),
                (A.patah11 = 1463),
                (A.patah1d = 1463),
                (A.patah2a = 1463),
                (A.patahhebrew = 1463),
                (A.patahnarrowhebrew = 1463),
                (A.patahquarterhebrew = 1463),
                (A.patahwidehebrew = 1463),
                (A.pazerhebrew = 1441),
                (A.pbopomofo = 12550),
                (A.pcircle = 9439),
                (A.pdotaccent = 7767),
                (A.pe = 1508),
                (A.pecyrillic = 1087),
                (A.pedagesh = 64324),
                (A.pedageshhebrew = 64324),
                (A.peezisquare = 13115),
                (A.pefinaldageshhebrew = 64323),
                (A.peharabic = 1662),
                (A.peharmenian = 1402),
                (A.pehebrew = 1508),
                (A.pehfinalarabic = 64343),
                (A.pehinitialarabic = 64344),
                (A.pehiragana = 12410),
                (A.pehmedialarabic = 64345),
                (A.pekatakana = 12506),
                (A.pemiddlehookcyrillic = 1191),
                (A.perafehebrew = 64334),
                (A.percent = 37),
                (A.percentarabic = 1642),
                (A.percentmonospace = 65285),
                (A.percentsmall = 65130),
                (A.period = 46),
                (A.periodarmenian = 1417),
                (A.periodcentered = 183),
                (A.periodhalfwidth = 65377),
                (A.periodinferior = 63207),
                (A.periodmonospace = 65294),
                (A.periodsmall = 65106),
                (A.periodsuperior = 63208),
                (A.perispomenigreekcmb = 834),
                (A.perpendicular = 8869),
                (A.perthousand = 8240),
                (A.peseta = 8359),
                (A.pfsquare = 13194),
                (A.phabengali = 2475),
                (A.phadeva = 2347),
                (A.phagujarati = 2731),
                (A.phagurmukhi = 2603),
                (A.phi = 966),
                (A.phi1 = 981),
                (A.phieuphacirclekorean = 12922),
                (A.phieuphaparenkorean = 12826),
                (A.phieuphcirclekorean = 12908),
                (A.phieuphkorean = 12621),
                (A.phieuphparenkorean = 12812),
                (A.philatin = 632),
                (A.phinthuthai = 3642),
                (A.phisymbolgreek = 981),
                (A.phook = 421),
                (A.phophanthai = 3614),
                (A.phophungthai = 3612),
                (A.phosamphaothai = 3616),
                (A.pi = 960),
                (A.pieupacirclekorean = 12915),
                (A.pieupaparenkorean = 12819),
                (A.pieupcieuckorean = 12662),
                (A.pieupcirclekorean = 12901),
                (A.pieupkiyeokkorean = 12658),
                (A.pieupkorean = 12610),
                (A.pieupparenkorean = 12805),
                (A.pieupsioskiyeokkorean = 12660),
                (A.pieupsioskorean = 12612),
                (A.pieupsiostikeutkorean = 12661),
                (A.pieupthieuthkorean = 12663),
                (A.pieuptikeutkorean = 12659),
                (A.pihiragana = 12404),
                (A.pikatakana = 12500),
                (A.pisymbolgreek = 982),
                (A.piwrarmenian = 1411),
                (A.planckover2pi = 8463),
                (A.planckover2pi1 = 8463),
                (A.plus = 43),
                (A.plusbelowcmb = 799),
                (A.pluscircle = 8853),
                (A.plusminus = 177),
                (A.plusmod = 726),
                (A.plusmonospace = 65291),
                (A.plussmall = 65122),
                (A.plussuperior = 8314),
                (A.pmonospace = 65360),
                (A.pmsquare = 13272),
                (A.pohiragana = 12413),
                (A.pointingindexdownwhite = 9759),
                (A.pointingindexleftwhite = 9756),
                (A.pointingindexrightwhite = 9758),
                (A.pointingindexupwhite = 9757),
                (A.pokatakana = 12509),
                (A.poplathai = 3611),
                (A.postalmark = 12306),
                (A.postalmarkface = 12320),
                (A.pparen = 9387),
                (A.precedes = 8826),
                (A.prescription = 8478),
                (A.primemod = 697),
                (A.primereversed = 8245),
                (A.product = 8719),
                (A.projective = 8965),
                (A.prolongedkana = 12540),
                (A.propellor = 8984),
                (A.propersubset = 8834),
                (A.propersuperset = 8835),
                (A.proportion = 8759),
                (A.proportional = 8733),
                (A.psi = 968),
                (A.psicyrillic = 1137),
                (A.psilipneumatacyrilliccmb = 1158),
                (A.pssquare = 13232),
                (A.puhiragana = 12407),
                (A.pukatakana = 12503),
                (A.pvsquare = 13236),
                (A.pwsquare = 13242),
                (A.q = 113),
                (A.qadeva = 2392),
                (A.qadmahebrew = 1448),
                (A.qafarabic = 1602),
                (A.qaffinalarabic = 65238),
                (A.qafinitialarabic = 65239),
                (A.qafmedialarabic = 65240),
                (A.qamats = 1464),
                (A.qamats10 = 1464),
                (A.qamats1a = 1464),
                (A.qamats1c = 1464),
                (A.qamats27 = 1464),
                (A.qamats29 = 1464),
                (A.qamats33 = 1464),
                (A.qamatsde = 1464),
                (A.qamatshebrew = 1464),
                (A.qamatsnarrowhebrew = 1464),
                (A.qamatsqatanhebrew = 1464),
                (A.qamatsqatannarrowhebrew = 1464),
                (A.qamatsqatanquarterhebrew = 1464),
                (A.qamatsqatanwidehebrew = 1464),
                (A.qamatsquarterhebrew = 1464),
                (A.qamatswidehebrew = 1464),
                (A.qarneyparahebrew = 1439),
                (A.qbopomofo = 12561),
                (A.qcircle = 9440),
                (A.qhook = 672),
                (A.qmonospace = 65361),
                (A.qof = 1511),
                (A.qofdagesh = 64327),
                (A.qofdageshhebrew = 64327),
                (A.qofhebrew = 1511),
                (A.qparen = 9388),
                (A.quarternote = 9833),
                (A.qubuts = 1467),
                (A.qubuts18 = 1467),
                (A.qubuts25 = 1467),
                (A.qubuts31 = 1467),
                (A.qubutshebrew = 1467),
                (A.qubutsnarrowhebrew = 1467),
                (A.qubutsquarterhebrew = 1467),
                (A.qubutswidehebrew = 1467),
                (A.question = 63),
                (A.questionarabic = 1567),
                (A.questionarmenian = 1374),
                (A.questiondown = 191),
                (A.questiondownsmall = 63423),
                (A.questiongreek = 894),
                (A.questionmonospace = 65311),
                (A.questionsmall = 63295),
                (A.quotedbl = 34),
                (A.quotedblbase = 8222),
                (A.quotedblleft = 8220),
                (A.quotedblmonospace = 65282),
                (A.quotedblprime = 12318),
                (A.quotedblprimereversed = 12317),
                (A.quotedblright = 8221),
                (A.quoteleft = 8216),
                (A.quoteleftreversed = 8219),
                (A.quotereversed = 8219),
                (A.quoteright = 8217),
                (A.quoterightn = 329),
                (A.quotesinglbase = 8218),
                (A.quotesingle = 39),
                (A.quotesinglemonospace = 65287),
                (A.r = 114),
                (A.raarmenian = 1404),
                (A.rabengali = 2480),
                (A.racute = 341),
                (A.radeva = 2352),
                (A.radical = 8730),
                (A.radicalex = 63717),
                (A.radoverssquare = 13230),
                (A.radoverssquaredsquare = 13231),
                (A.radsquare = 13229),
                (A.rafe = 1471),
                (A.rafehebrew = 1471),
                (A.ragujarati = 2736),
                (A.ragurmukhi = 2608),
                (A.rahiragana = 12425),
                (A.rakatakana = 12521),
                (A.rakatakanahalfwidth = 65431),
                (A.ralowerdiagonalbengali = 2545),
                (A.ramiddlediagonalbengali = 2544),
                (A.ramshorn = 612),
                (A.ratio = 8758),
                (A.rbopomofo = 12566),
                (A.rcaron = 345),
                (A.rcedilla = 343),
                (A.rcircle = 9441),
                (A.rcommaaccent = 343),
                (A.rdblgrave = 529),
                (A.rdotaccent = 7769),
                (A.rdotbelow = 7771),
                (A.rdotbelowmacron = 7773),
                (A.referencemark = 8251),
                (A.reflexsubset = 8838),
                (A.reflexsuperset = 8839),
                (A.registered = 174),
                (A.registersans = 63720),
                (A.registerserif = 63194),
                (A.reharabic = 1585),
                (A.reharmenian = 1408),
                (A.rehfinalarabic = 65198),
                (A.rehiragana = 12428),
                (A.rekatakana = 12524),
                (A.rekatakanahalfwidth = 65434),
                (A.resh = 1512),
                (A.reshdageshhebrew = 64328),
                (A.reshhebrew = 1512),
                (A.reversedtilde = 8765),
                (A.reviahebrew = 1431),
                (A.reviamugrashhebrew = 1431),
                (A.revlogicalnot = 8976),
                (A.rfishhook = 638),
                (A.rfishhookreversed = 639),
                (A.rhabengali = 2525),
                (A.rhadeva = 2397),
                (A.rho = 961),
                (A.rhook = 637),
                (A.rhookturned = 635),
                (A.rhookturnedsuperior = 693),
                (A.rhosymbolgreek = 1009),
                (A.rhotichookmod = 734),
                (A.rieulacirclekorean = 12913),
                (A.rieulaparenkorean = 12817),
                (A.rieulcirclekorean = 12899),
                (A.rieulhieuhkorean = 12608),
                (A.rieulkiyeokkorean = 12602),
                (A.rieulkiyeoksioskorean = 12649),
                (A.rieulkorean = 12601),
                (A.rieulmieumkorean = 12603),
                (A.rieulpansioskorean = 12652),
                (A.rieulparenkorean = 12803),
                (A.rieulphieuphkorean = 12607),
                (A.rieulpieupkorean = 12604),
                (A.rieulpieupsioskorean = 12651),
                (A.rieulsioskorean = 12605),
                (A.rieulthieuthkorean = 12606),
                (A.rieultikeutkorean = 12650),
                (A.rieulyeorinhieuhkorean = 12653),
                (A.rightangle = 8735),
                (A.righttackbelowcmb = 793),
                (A.righttriangle = 8895),
                (A.rihiragana = 12426),
                (A.rikatakana = 12522),
                (A.rikatakanahalfwidth = 65432),
                (A.ring = 730),
                (A.ringbelowcmb = 805),
                (A.ringcmb = 778),
                (A.ringhalfleft = 703),
                (A.ringhalfleftarmenian = 1369),
                (A.ringhalfleftbelowcmb = 796),
                (A.ringhalfleftcentered = 723),
                (A.ringhalfright = 702),
                (A.ringhalfrightbelowcmb = 825),
                (A.ringhalfrightcentered = 722),
                (A.rinvertedbreve = 531),
                (A.rittorusquare = 13137),
                (A.rlinebelow = 7775),
                (A.rlongleg = 636),
                (A.rlonglegturned = 634),
                (A.rmonospace = 65362),
                (A.rohiragana = 12429),
                (A.rokatakana = 12525),
                (A.rokatakanahalfwidth = 65435),
                (A.roruathai = 3619),
                (A.rparen = 9389),
                (A.rrabengali = 2524),
                (A.rradeva = 2353),
                (A.rragurmukhi = 2652),
                (A.rreharabic = 1681),
                (A.rrehfinalarabic = 64397),
                (A.rrvocalicbengali = 2528),
                (A.rrvocalicdeva = 2400),
                (A.rrvocalicgujarati = 2784),
                (A.rrvocalicvowelsignbengali = 2500),
                (A.rrvocalicvowelsigndeva = 2372),
                (A.rrvocalicvowelsigngujarati = 2756),
                (A.rsuperior = 63217),
                (A.rtblock = 9616),
                (A.rturned = 633),
                (A.rturnedsuperior = 692),
                (A.ruhiragana = 12427),
                (A.rukatakana = 12523),
                (A.rukatakanahalfwidth = 65433),
                (A.rupeemarkbengali = 2546),
                (A.rupeesignbengali = 2547),
                (A.rupiah = 63197),
                (A.ruthai = 3620),
                (A.rvocalicbengali = 2443),
                (A.rvocalicdeva = 2315),
                (A.rvocalicgujarati = 2699),
                (A.rvocalicvowelsignbengali = 2499),
                (A.rvocalicvowelsigndeva = 2371),
                (A.rvocalicvowelsigngujarati = 2755),
                (A.s = 115),
                (A.sabengali = 2488),
                (A.sacute = 347),
                (A.sacutedotaccent = 7781),
                (A.sadarabic = 1589),
                (A.sadeva = 2360),
                (A.sadfinalarabic = 65210),
                (A.sadinitialarabic = 65211),
                (A.sadmedialarabic = 65212),
                (A.sagujarati = 2744),
                (A.sagurmukhi = 2616),
                (A.sahiragana = 12373),
                (A.sakatakana = 12469),
                (A.sakatakanahalfwidth = 65403),
                (A.sallallahoualayhewasallamarabic = 65018),
                (A.samekh = 1505),
                (A.samekhdagesh = 64321),
                (A.samekhdageshhebrew = 64321),
                (A.samekhhebrew = 1505),
                (A.saraaathai = 3634),
                (A.saraaethai = 3649),
                (A.saraaimaimalaithai = 3652),
                (A.saraaimaimuanthai = 3651),
                (A.saraamthai = 3635),
                (A.saraathai = 3632),
                (A.saraethai = 3648),
                (A.saraiileftthai = 63622),
                (A.saraiithai = 3637),
                (A.saraileftthai = 63621),
                (A.saraithai = 3636),
                (A.saraothai = 3650),
                (A.saraueeleftthai = 63624),
                (A.saraueethai = 3639),
                (A.saraueleftthai = 63623),
                (A.sarauethai = 3638),
                (A.sarauthai = 3640),
                (A.sarauuthai = 3641),
                (A.sbopomofo = 12569),
                (A.scaron = 353),
                (A.scarondotaccent = 7783),
                (A.scedilla = 351),
                (A.schwa = 601),
                (A.schwacyrillic = 1241),
                (A.schwadieresiscyrillic = 1243),
                (A.schwahook = 602),
                (A.scircle = 9442),
                (A.scircumflex = 349),
                (A.scommaaccent = 537),
                (A.sdotaccent = 7777),
                (A.sdotbelow = 7779),
                (A.sdotbelowdotaccent = 7785),
                (A.seagullbelowcmb = 828),
                (A.second = 8243),
                (A.secondtonechinese = 714),
                (A.section = 167),
                (A.seenarabic = 1587),
                (A.seenfinalarabic = 65202),
                (A.seeninitialarabic = 65203),
                (A.seenmedialarabic = 65204),
                (A.segol = 1462),
                (A.segol13 = 1462),
                (A.segol1f = 1462),
                (A.segol2c = 1462),
                (A.segolhebrew = 1462),
                (A.segolnarrowhebrew = 1462),
                (A.segolquarterhebrew = 1462),
                (A.segoltahebrew = 1426),
                (A.segolwidehebrew = 1462),
                (A.seharmenian = 1405),
                (A.sehiragana = 12379),
                (A.sekatakana = 12475),
                (A.sekatakanahalfwidth = 65406),
                (A.semicolon = 59),
                (A.semicolonarabic = 1563),
                (A.semicolonmonospace = 65307),
                (A.semicolonsmall = 65108),
                (A.semivoicedmarkkana = 12444),
                (A.semivoicedmarkkanahalfwidth = 65439),
                (A.sentisquare = 13090),
                (A.sentosquare = 13091),
                (A.seven = 55),
                (A.sevenarabic = 1639),
                (A.sevenbengali = 2541),
                (A.sevencircle = 9318),
                (A.sevencircleinversesansserif = 10128),
                (A.sevendeva = 2413),
                (A.seveneighths = 8542),
                (A.sevengujarati = 2797),
                (A.sevengurmukhi = 2669),
                (A.sevenhackarabic = 1639),
                (A.sevenhangzhou = 12327),
                (A.sevenideographicparen = 12838),
                (A.seveninferior = 8327),
                (A.sevenmonospace = 65303),
                (A.sevenoldstyle = 63287),
                (A.sevenparen = 9338),
                (A.sevenperiod = 9358),
                (A.sevenpersian = 1783),
                (A.sevenroman = 8566),
                (A.sevensuperior = 8311),
                (A.seventeencircle = 9328),
                (A.seventeenparen = 9348),
                (A.seventeenperiod = 9368),
                (A.seventhai = 3671),
                (A.sfthyphen = 173),
                (A.shaarmenian = 1399),
                (A.shabengali = 2486),
                (A.shacyrillic = 1096),
                (A.shaddaarabic = 1617),
                (A.shaddadammaarabic = 64609),
                (A.shaddadammatanarabic = 64606),
                (A.shaddafathaarabic = 64608),
                (A.shaddakasraarabic = 64610),
                (A.shaddakasratanarabic = 64607),
                (A.shade = 9618),
                (A.shadedark = 9619),
                (A.shadelight = 9617),
                (A.shademedium = 9618),
                (A.shadeva = 2358),
                (A.shagujarati = 2742),
                (A.shagurmukhi = 2614),
                (A.shalshelethebrew = 1427),
                (A.shbopomofo = 12565),
                (A.shchacyrillic = 1097),
                (A.sheenarabic = 1588),
                (A.sheenfinalarabic = 65206),
                (A.sheeninitialarabic = 65207),
                (A.sheenmedialarabic = 65208),
                (A.sheicoptic = 995),
                (A.sheqel = 8362),
                (A.sheqelhebrew = 8362),
                (A.sheva = 1456),
                (A.sheva115 = 1456),
                (A.sheva15 = 1456),
                (A.sheva22 = 1456),
                (A.sheva2e = 1456),
                (A.shevahebrew = 1456),
                (A.shevanarrowhebrew = 1456),
                (A.shevaquarterhebrew = 1456),
                (A.shevawidehebrew = 1456),
                (A.shhacyrillic = 1211),
                (A.shimacoptic = 1005),
                (A.shin = 1513),
                (A.shindagesh = 64329),
                (A.shindageshhebrew = 64329),
                (A.shindageshshindot = 64300),
                (A.shindageshshindothebrew = 64300),
                (A.shindageshsindot = 64301),
                (A.shindageshsindothebrew = 64301),
                (A.shindothebrew = 1473),
                (A.shinhebrew = 1513),
                (A.shinshindot = 64298),
                (A.shinshindothebrew = 64298),
                (A.shinsindot = 64299),
                (A.shinsindothebrew = 64299),
                (A.shook = 642),
                (A.sigma = 963),
                (A.sigma1 = 962),
                (A.sigmafinal = 962),
                (A.sigmalunatesymbolgreek = 1010),
                (A.sihiragana = 12375),
                (A.sikatakana = 12471),
                (A.sikatakanahalfwidth = 65404),
                (A.siluqhebrew = 1469),
                (A.siluqlefthebrew = 1469),
                (A.similar = 8764),
                (A.sindothebrew = 1474),
                (A.siosacirclekorean = 12916),
                (A.siosaparenkorean = 12820),
                (A.sioscieuckorean = 12670),
                (A.sioscirclekorean = 12902),
                (A.sioskiyeokkorean = 12666),
                (A.sioskorean = 12613),
                (A.siosnieunkorean = 12667),
                (A.siosparenkorean = 12806),
                (A.siospieupkorean = 12669),
                (A.siostikeutkorean = 12668),
                (A.six = 54),
                (A.sixarabic = 1638),
                (A.sixbengali = 2540),
                (A.sixcircle = 9317),
                (A.sixcircleinversesansserif = 10127),
                (A.sixdeva = 2412),
                (A.sixgujarati = 2796),
                (A.sixgurmukhi = 2668),
                (A.sixhackarabic = 1638),
                (A.sixhangzhou = 12326),
                (A.sixideographicparen = 12837),
                (A.sixinferior = 8326),
                (A.sixmonospace = 65302),
                (A.sixoldstyle = 63286),
                (A.sixparen = 9337),
                (A.sixperiod = 9357),
                (A.sixpersian = 1782),
                (A.sixroman = 8565),
                (A.sixsuperior = 8310),
                (A.sixteencircle = 9327),
                (A.sixteencurrencydenominatorbengali = 2553),
                (A.sixteenparen = 9347),
                (A.sixteenperiod = 9367),
                (A.sixthai = 3670),
                (A.slash = 47),
                (A.slashmonospace = 65295),
                (A.slong = 383),
                (A.slongdotaccent = 7835),
                (A.smileface = 9786),
                (A.smonospace = 65363),
                (A.sofpasuqhebrew = 1475),
                (A.softhyphen = 173),
                (A.softsigncyrillic = 1100),
                (A.sohiragana = 12381),
                (A.sokatakana = 12477),
                (A.sokatakanahalfwidth = 65407),
                (A.soliduslongoverlaycmb = 824),
                (A.solidusshortoverlaycmb = 823),
                (A.sorusithai = 3625),
                (A.sosalathai = 3624),
                (A.sosothai = 3595),
                (A.sosuathai = 3626),
                (A.space = 32),
                (A.spacehackarabic = 32),
                (A.spade = 9824),
                (A.spadesuitblack = 9824),
                (A.spadesuitwhite = 9828),
                (A.sparen = 9390),
                (A.squarebelowcmb = 827),
                (A.squarecc = 13252),
                (A.squarecm = 13213),
                (A.squarediagonalcrosshatchfill = 9641),
                (A.squarehorizontalfill = 9636),
                (A.squarekg = 13199),
                (A.squarekm = 13214),
                (A.squarekmcapital = 13262),
                (A.squareln = 13265),
                (A.squarelog = 13266),
                (A.squaremg = 13198),
                (A.squaremil = 13269),
                (A.squaremm = 13212),
                (A.squaremsquared = 13217),
                (A.squareorthogonalcrosshatchfill = 9638),
                (A.squareupperlefttolowerrightfill = 9639),
                (A.squareupperrighttolowerleftfill = 9640),
                (A.squareverticalfill = 9637),
                (A.squarewhitewithsmallblack = 9635),
                (A.srsquare = 13275),
                (A.ssabengali = 2487),
                (A.ssadeva = 2359),
                (A.ssagujarati = 2743),
                (A.ssangcieuckorean = 12617),
                (A.ssanghieuhkorean = 12677),
                (A.ssangieungkorean = 12672),
                (A.ssangkiyeokkorean = 12594),
                (A.ssangnieunkorean = 12645),
                (A.ssangpieupkorean = 12611),
                (A.ssangsioskorean = 12614),
                (A.ssangtikeutkorean = 12600),
                (A.ssuperior = 63218),
                (A.sterling = 163),
                (A.sterlingmonospace = 65505),
                (A.strokelongoverlaycmb = 822),
                (A.strokeshortoverlaycmb = 821),
                (A.subset = 8834),
                (A.subsetnotequal = 8842),
                (A.subsetorequal = 8838),
                (A.succeeds = 8827),
                (A.suchthat = 8715),
                (A.suhiragana = 12377),
                (A.sukatakana = 12473),
                (A.sukatakanahalfwidth = 65405),
                (A.sukunarabic = 1618),
                (A.summation = 8721),
                (A.sun = 9788),
                (A.superset = 8835),
                (A.supersetnotequal = 8843),
                (A.supersetorequal = 8839),
                (A.svsquare = 13276),
                (A.syouwaerasquare = 13180),
                (A.t = 116),
                (A.tabengali = 2468),
                (A.tackdown = 8868),
                (A.tackleft = 8867),
                (A.tadeva = 2340),
                (A.tagujarati = 2724),
                (A.tagurmukhi = 2596),
                (A.taharabic = 1591),
                (A.tahfinalarabic = 65218),
                (A.tahinitialarabic = 65219),
                (A.tahiragana = 12383),
                (A.tahmedialarabic = 65220),
                (A.taisyouerasquare = 13181),
                (A.takatakana = 12479),
                (A.takatakanahalfwidth = 65408),
                (A.tatweelarabic = 1600),
                (A.tau = 964),
                (A.tav = 1514),
                (A.tavdages = 64330),
                (A.tavdagesh = 64330),
                (A.tavdageshhebrew = 64330),
                (A.tavhebrew = 1514),
                (A.tbar = 359),
                (A.tbopomofo = 12554),
                (A.tcaron = 357),
                (A.tccurl = 680),
                (A.tcedilla = 355),
                (A.tcheharabic = 1670),
                (A.tchehfinalarabic = 64379),
                (A.tchehinitialarabic = 64380),
                (A.tchehmedialarabic = 64381),
                (A.tcircle = 9443),
                (A.tcircumflexbelow = 7793),
                (A.tcommaaccent = 355),
                (A.tdieresis = 7831),
                (A.tdotaccent = 7787),
                (A.tdotbelow = 7789),
                (A.tecyrillic = 1090),
                (A.tedescendercyrillic = 1197),
                (A.teharabic = 1578),
                (A.tehfinalarabic = 65174),
                (A.tehhahinitialarabic = 64674),
                (A.tehhahisolatedarabic = 64524),
                (A.tehinitialarabic = 65175),
                (A.tehiragana = 12390),
                (A.tehjeeminitialarabic = 64673),
                (A.tehjeemisolatedarabic = 64523),
                (A.tehmarbutaarabic = 1577),
                (A.tehmarbutafinalarabic = 65172),
                (A.tehmedialarabic = 65176),
                (A.tehmeeminitialarabic = 64676),
                (A.tehmeemisolatedarabic = 64526),
                (A.tehnoonfinalarabic = 64627),
                (A.tekatakana = 12486),
                (A.tekatakanahalfwidth = 65411),
                (A.telephone = 8481),
                (A.telephoneblack = 9742),
                (A.telishagedolahebrew = 1440),
                (A.telishaqetanahebrew = 1449),
                (A.tencircle = 9321),
                (A.tenideographicparen = 12841),
                (A.tenparen = 9341),
                (A.tenperiod = 9361),
                (A.tenroman = 8569),
                (A.tesh = 679),
                (A.tet = 1496),
                (A.tetdagesh = 64312),
                (A.tetdageshhebrew = 64312),
                (A.tethebrew = 1496),
                (A.tetsecyrillic = 1205),
                (A.tevirhebrew = 1435),
                (A.tevirlefthebrew = 1435),
                (A.thabengali = 2469),
                (A.thadeva = 2341),
                (A.thagujarati = 2725),
                (A.thagurmukhi = 2597),
                (A.thalarabic = 1584),
                (A.thalfinalarabic = 65196),
                (A.thanthakhatlowleftthai = 63640),
                (A.thanthakhatlowrightthai = 63639),
                (A.thanthakhatthai = 3660),
                (A.thanthakhatupperleftthai = 63638),
                (A.theharabic = 1579),
                (A.thehfinalarabic = 65178),
                (A.thehinitialarabic = 65179),
                (A.thehmedialarabic = 65180),
                (A.thereexists = 8707),
                (A.therefore = 8756),
                (A.theta = 952),
                (A.theta1 = 977),
                (A.thetasymbolgreek = 977),
                (A.thieuthacirclekorean = 12921),
                (A.thieuthaparenkorean = 12825),
                (A.thieuthcirclekorean = 12907),
                (A.thieuthkorean = 12620),
                (A.thieuthparenkorean = 12811),
                (A.thirteencircle = 9324),
                (A.thirteenparen = 9344),
                (A.thirteenperiod = 9364),
                (A.thonangmonthothai = 3601),
                (A.thook = 429),
                (A.thophuthaothai = 3602),
                (A.thorn = 254),
                (A.thothahanthai = 3607),
                (A.thothanthai = 3600),
                (A.thothongthai = 3608),
                (A.thothungthai = 3606),
                (A.thousandcyrillic = 1154),
                (A.thousandsseparatorarabic = 1644),
                (A.thousandsseparatorpersian = 1644),
                (A.three = 51),
                (A.threearabic = 1635),
                (A.threebengali = 2537),
                (A.threecircle = 9314),
                (A.threecircleinversesansserif = 10124),
                (A.threedeva = 2409),
                (A.threeeighths = 8540),
                (A.threegujarati = 2793),
                (A.threegurmukhi = 2665),
                (A.threehackarabic = 1635),
                (A.threehangzhou = 12323),
                (A.threeideographicparen = 12834),
                (A.threeinferior = 8323),
                (A.threemonospace = 65299),
                (A.threenumeratorbengali = 2550),
                (A.threeoldstyle = 63283),
                (A.threeparen = 9334),
                (A.threeperiod = 9354),
                (A.threepersian = 1779),
                (A.threequarters = 190),
                (A.threequartersemdash = 63198),
                (A.threeroman = 8562),
                (A.threesuperior = 179),
                (A.threethai = 3667),
                (A.thzsquare = 13204),
                (A.tihiragana = 12385),
                (A.tikatakana = 12481),
                (A.tikatakanahalfwidth = 65409),
                (A.tikeutacirclekorean = 12912),
                (A.tikeutaparenkorean = 12816),
                (A.tikeutcirclekorean = 12898),
                (A.tikeutkorean = 12599),
                (A.tikeutparenkorean = 12802),
                (A.tilde = 732),
                (A.tildebelowcmb = 816),
                (A.tildecmb = 771),
                (A.tildecomb = 771),
                (A.tildedoublecmb = 864),
                (A.tildeoperator = 8764),
                (A.tildeoverlaycmb = 820),
                (A.tildeverticalcmb = 830),
                (A.timescircle = 8855),
                (A.tipehahebrew = 1430),
                (A.tipehalefthebrew = 1430),
                (A.tippigurmukhi = 2672),
                (A.titlocyrilliccmb = 1155),
                (A.tiwnarmenian = 1407),
                (A.tlinebelow = 7791),
                (A.tmonospace = 65364),
                (A.toarmenian = 1385),
                (A.tohiragana = 12392),
                (A.tokatakana = 12488),
                (A.tokatakanahalfwidth = 65412),
                (A.tonebarextrahighmod = 741),
                (A.tonebarextralowmod = 745),
                (A.tonebarhighmod = 742),
                (A.tonebarlowmod = 744),
                (A.tonebarmidmod = 743),
                (A.tonefive = 445),
                (A.tonesix = 389),
                (A.tonetwo = 424),
                (A.tonos = 900),
                (A.tonsquare = 13095),
                (A.topatakthai = 3599),
                (A.tortoiseshellbracketleft = 12308),
                (A.tortoiseshellbracketleftsmall = 65117),
                (A.tortoiseshellbracketleftvertical = 65081),
                (A.tortoiseshellbracketright = 12309),
                (A.tortoiseshellbracketrightsmall = 65118),
                (A.tortoiseshellbracketrightvertical = 65082),
                (A.totaothai = 3605),
                (A.tpalatalhook = 427),
                (A.tparen = 9391),
                (A.trademark = 8482),
                (A.trademarksans = 63722),
                (A.trademarkserif = 63195),
                (A.tretroflexhook = 648),
                (A.triagdn = 9660),
                (A.triaglf = 9668),
                (A.triagrt = 9658),
                (A.triagup = 9650),
                (A.ts = 678),
                (A.tsadi = 1510),
                (A.tsadidagesh = 64326),
                (A.tsadidageshhebrew = 64326),
                (A.tsadihebrew = 1510),
                (A.tsecyrillic = 1094),
                (A.tsere = 1461),
                (A.tsere12 = 1461),
                (A.tsere1e = 1461),
                (A.tsere2b = 1461),
                (A.tserehebrew = 1461),
                (A.tserenarrowhebrew = 1461),
                (A.tserequarterhebrew = 1461),
                (A.tserewidehebrew = 1461),
                (A.tshecyrillic = 1115),
                (A.tsuperior = 63219),
                (A.ttabengali = 2463),
                (A.ttadeva = 2335),
                (A.ttagujarati = 2719),
                (A.ttagurmukhi = 2591),
                (A.tteharabic = 1657),
                (A.ttehfinalarabic = 64359),
                (A.ttehinitialarabic = 64360),
                (A.ttehmedialarabic = 64361),
                (A.tthabengali = 2464),
                (A.tthadeva = 2336),
                (A.tthagujarati = 2720),
                (A.tthagurmukhi = 2592),
                (A.tturned = 647),
                (A.tuhiragana = 12388),
                (A.tukatakana = 12484),
                (A.tukatakanahalfwidth = 65410),
                (A.tusmallhiragana = 12387),
                (A.tusmallkatakana = 12483),
                (A.tusmallkatakanahalfwidth = 65391),
                (A.twelvecircle = 9323),
                (A.twelveparen = 9343),
                (A.twelveperiod = 9363),
                (A.twelveroman = 8571),
                (A.twentycircle = 9331),
                (A.twentyhangzhou = 21316),
                (A.twentyparen = 9351),
                (A.twentyperiod = 9371),
                (A.two = 50),
                (A.twoarabic = 1634),
                (A.twobengali = 2536),
                (A.twocircle = 9313),
                (A.twocircleinversesansserif = 10123),
                (A.twodeva = 2408),
                (A.twodotenleader = 8229),
                (A.twodotleader = 8229),
                (A.twodotleadervertical = 65072),
                (A.twogujarati = 2792),
                (A.twogurmukhi = 2664),
                (A.twohackarabic = 1634),
                (A.twohangzhou = 12322),
                (A.twoideographicparen = 12833),
                (A.twoinferior = 8322),
                (A.twomonospace = 65298),
                (A.twonumeratorbengali = 2549),
                (A.twooldstyle = 63282),
                (A.twoparen = 9333),
                (A.twoperiod = 9353),
                (A.twopersian = 1778),
                (A.tworoman = 8561),
                (A.twostroke = 443),
                (A.twosuperior = 178),
                (A.twothai = 3666),
                (A.twothirds = 8532),
                (A.u = 117),
                (A.uacute = 250),
                (A.ubar = 649),
                (A.ubengali = 2441),
                (A.ubopomofo = 12584),
                (A.ubreve = 365),
                (A.ucaron = 468),
                (A.ucircle = 9444),
                (A.ucircumflex = 251),
                (A.ucircumflexbelow = 7799),
                (A.ucyrillic = 1091),
                (A.udattadeva = 2385),
                (A.udblacute = 369),
                (A.udblgrave = 533),
                (A.udeva = 2313),
                (A.udieresis = 252),
                (A.udieresisacute = 472),
                (A.udieresisbelow = 7795),
                (A.udieresiscaron = 474),
                (A.udieresiscyrillic = 1265),
                (A.udieresisgrave = 476),
                (A.udieresismacron = 470),
                (A.udotbelow = 7909),
                (A.ugrave = 249),
                (A.ugujarati = 2697),
                (A.ugurmukhi = 2569),
                (A.uhiragana = 12358),
                (A.uhookabove = 7911),
                (A.uhorn = 432),
                (A.uhornacute = 7913),
                (A.uhorndotbelow = 7921),
                (A.uhorngrave = 7915),
                (A.uhornhookabove = 7917),
                (A.uhorntilde = 7919),
                (A.uhungarumlaut = 369),
                (A.uhungarumlautcyrillic = 1267),
                (A.uinvertedbreve = 535),
                (A.ukatakana = 12454),
                (A.ukatakanahalfwidth = 65395),
                (A.ukcyrillic = 1145),
                (A.ukorean = 12636),
                (A.umacron = 363),
                (A.umacroncyrillic = 1263),
                (A.umacrondieresis = 7803),
                (A.umatragurmukhi = 2625),
                (A.umonospace = 65365),
                (A.underscore = 95),
                (A.underscoredbl = 8215),
                (A.underscoremonospace = 65343),
                (A.underscorevertical = 65075),
                (A.underscorewavy = 65103),
                (A.union = 8746),
                (A.universal = 8704),
                (A.uogonek = 371),
                (A.uparen = 9392),
                (A.upblock = 9600),
                (A.upperdothebrew = 1476),
                (A.upsilon = 965),
                (A.upsilondieresis = 971),
                (A.upsilondieresistonos = 944),
                (A.upsilonlatin = 650),
                (A.upsilontonos = 973),
                (A.uptackbelowcmb = 797),
                (A.uptackmod = 724),
                (A.uragurmukhi = 2675),
                (A.uring = 367),
                (A.ushortcyrillic = 1118),
                (A.usmallhiragana = 12357),
                (A.usmallkatakana = 12453),
                (A.usmallkatakanahalfwidth = 65385),
                (A.ustraightcyrillic = 1199),
                (A.ustraightstrokecyrillic = 1201),
                (A.utilde = 361),
                (A.utildeacute = 7801),
                (A.utildebelow = 7797),
                (A.uubengali = 2442),
                (A.uudeva = 2314),
                (A.uugujarati = 2698),
                (A.uugurmukhi = 2570),
                (A.uumatragurmukhi = 2626),
                (A.uuvowelsignbengali = 2498),
                (A.uuvowelsigndeva = 2370),
                (A.uuvowelsigngujarati = 2754),
                (A.uvowelsignbengali = 2497),
                (A.uvowelsigndeva = 2369),
                (A.uvowelsigngujarati = 2753),
                (A.v = 118),
                (A.vadeva = 2357),
                (A.vagujarati = 2741),
                (A.vagurmukhi = 2613),
                (A.vakatakana = 12535),
                (A.vav = 1493),
                (A.vavdagesh = 64309),
                (A.vavdagesh65 = 64309),
                (A.vavdageshhebrew = 64309),
                (A.vavhebrew = 1493),
                (A.vavholam = 64331),
                (A.vavholamhebrew = 64331),
                (A.vavvavhebrew = 1520),
                (A.vavyodhebrew = 1521),
                (A.vcircle = 9445),
                (A.vdotbelow = 7807),
                (A.vecyrillic = 1074),
                (A.veharabic = 1700),
                (A.vehfinalarabic = 64363),
                (A.vehinitialarabic = 64364),
                (A.vehmedialarabic = 64365),
                (A.vekatakana = 12537),
                (A.venus = 9792),
                (A.verticalbar = 124),
                (A.verticallineabovecmb = 781),
                (A.verticallinebelowcmb = 809),
                (A.verticallinelowmod = 716),
                (A.verticallinemod = 712),
                (A.vewarmenian = 1406),
                (A.vhook = 651),
                (A.vikatakana = 12536),
                (A.viramabengali = 2509),
                (A.viramadeva = 2381),
                (A.viramagujarati = 2765),
                (A.visargabengali = 2435),
                (A.visargadeva = 2307),
                (A.visargagujarati = 2691),
                (A.vmonospace = 65366),
                (A.voarmenian = 1400),
                (A.voicediterationhiragana = 12446),
                (A.voicediterationkatakana = 12542),
                (A.voicedmarkkana = 12443),
                (A.voicedmarkkanahalfwidth = 65438),
                (A.vokatakana = 12538),
                (A.vparen = 9393),
                (A.vtilde = 7805),
                (A.vturned = 652),
                (A.vuhiragana = 12436),
                (A.vukatakana = 12532),
                (A.w = 119),
                (A.wacute = 7811),
                (A.waekorean = 12633),
                (A.wahiragana = 12431),
                (A.wakatakana = 12527),
                (A.wakatakanahalfwidth = 65436),
                (A.wakorean = 12632),
                (A.wasmallhiragana = 12430),
                (A.wasmallkatakana = 12526),
                (A.wattosquare = 13143),
                (A.wavedash = 12316),
                (A.wavyunderscorevertical = 65076),
                (A.wawarabic = 1608),
                (A.wawfinalarabic = 65262),
                (A.wawhamzaabovearabic = 1572),
                (A.wawhamzaabovefinalarabic = 65158),
                (A.wbsquare = 13277),
                (A.wcircle = 9446),
                (A.wcircumflex = 373),
                (A.wdieresis = 7813),
                (A.wdotaccent = 7815),
                (A.wdotbelow = 7817),
                (A.wehiragana = 12433),
                (A.weierstrass = 8472),
                (A.wekatakana = 12529),
                (A.wekorean = 12638),
                (A.weokorean = 12637),
                (A.wgrave = 7809),
                (A.whitebullet = 9702),
                (A.whitecircle = 9675),
                (A.whitecircleinverse = 9689),
                (A.whitecornerbracketleft = 12302),
                (A.whitecornerbracketleftvertical = 65091),
                (A.whitecornerbracketright = 12303),
                (A.whitecornerbracketrightvertical = 65092),
                (A.whitediamond = 9671),
                (A.whitediamondcontainingblacksmalldiamond = 9672),
                (A.whitedownpointingsmalltriangle = 9663),
                (A.whitedownpointingtriangle = 9661),
                (A.whiteleftpointingsmalltriangle = 9667),
                (A.whiteleftpointingtriangle = 9665),
                (A.whitelenticularbracketleft = 12310),
                (A.whitelenticularbracketright = 12311),
                (A.whiterightpointingsmalltriangle = 9657),
                (A.whiterightpointingtriangle = 9655),
                (A.whitesmallsquare = 9643),
                (A.whitesmilingface = 9786),
                (A.whitesquare = 9633),
                (A.whitestar = 9734),
                (A.whitetelephone = 9743),
                (A.whitetortoiseshellbracketleft = 12312),
                (A.whitetortoiseshellbracketright = 12313),
                (A.whiteuppointingsmalltriangle = 9653),
                (A.whiteuppointingtriangle = 9651),
                (A.wihiragana = 12432),
                (A.wikatakana = 12528),
                (A.wikorean = 12639),
                (A.wmonospace = 65367),
                (A.wohiragana = 12434),
                (A.wokatakana = 12530),
                (A.wokatakanahalfwidth = 65382),
                (A.won = 8361),
                (A.wonmonospace = 65510),
                (A.wowaenthai = 3623),
                (A.wparen = 9394),
                (A.wring = 7832),
                (A.wsuperior = 695),
                (A.wturned = 653),
                (A.wynn = 447),
                (A.x = 120),
                (A.xabovecmb = 829),
                (A.xbopomofo = 12562),
                (A.xcircle = 9447),
                (A.xdieresis = 7821),
                (A.xdotaccent = 7819),
                (A.xeharmenian = 1389),
                (A.xi = 958),
                (A.xmonospace = 65368),
                (A.xparen = 9395),
                (A.xsuperior = 739),
                (A.y = 121),
                (A.yaadosquare = 13134),
                (A.yabengali = 2479),
                (A.yacute = 253),
                (A.yadeva = 2351),
                (A.yaekorean = 12626),
                (A.yagujarati = 2735),
                (A.yagurmukhi = 2607),
                (A.yahiragana = 12420),
                (A.yakatakana = 12516),
                (A.yakatakanahalfwidth = 65428),
                (A.yakorean = 12625),
                (A.yamakkanthai = 3662),
                (A.yasmallhiragana = 12419),
                (A.yasmallkatakana = 12515),
                (A.yasmallkatakanahalfwidth = 65388),
                (A.yatcyrillic = 1123),
                (A.ycircle = 9448),
                (A.ycircumflex = 375),
                (A.ydieresis = 255),
                (A.ydotaccent = 7823),
                (A.ydotbelow = 7925),
                (A.yeharabic = 1610),
                (A.yehbarreearabic = 1746),
                (A.yehbarreefinalarabic = 64431),
                (A.yehfinalarabic = 65266),
                (A.yehhamzaabovearabic = 1574),
                (A.yehhamzaabovefinalarabic = 65162),
                (A.yehhamzaaboveinitialarabic = 65163),
                (A.yehhamzaabovemedialarabic = 65164),
                (A.yehinitialarabic = 65267),
                (A.yehmedialarabic = 65268),
                (A.yehmeeminitialarabic = 64733),
                (A.yehmeemisolatedarabic = 64600),
                (A.yehnoonfinalarabic = 64660),
                (A.yehthreedotsbelowarabic = 1745),
                (A.yekorean = 12630),
                (A.yen = 165),
                (A.yenmonospace = 65509),
                (A.yeokorean = 12629),
                (A.yeorinhieuhkorean = 12678),
                (A.yerahbenyomohebrew = 1450),
                (A.yerahbenyomolefthebrew = 1450),
                (A.yericyrillic = 1099),
                (A.yerudieresiscyrillic = 1273),
                (A.yesieungkorean = 12673),
                (A.yesieungpansioskorean = 12675),
                (A.yesieungsioskorean = 12674),
                (A.yetivhebrew = 1434),
                (A.ygrave = 7923),
                (A.yhook = 436),
                (A.yhookabove = 7927),
                (A.yiarmenian = 1397),
                (A.yicyrillic = 1111),
                (A.yikorean = 12642),
                (A.yinyang = 9775),
                (A.yiwnarmenian = 1410),
                (A.ymonospace = 65369),
                (A.yod = 1497),
                (A.yoddagesh = 64313),
                (A.yoddageshhebrew = 64313),
                (A.yodhebrew = 1497),
                (A.yodyodhebrew = 1522),
                (A.yodyodpatahhebrew = 64287),
                (A.yohiragana = 12424),
                (A.yoikorean = 12681),
                (A.yokatakana = 12520),
                (A.yokatakanahalfwidth = 65430),
                (A.yokorean = 12635),
                (A.yosmallhiragana = 12423),
                (A.yosmallkatakana = 12519),
                (A.yosmallkatakanahalfwidth = 65390),
                (A.yotgreek = 1011),
                (A.yoyaekorean = 12680),
                (A.yoyakorean = 12679),
                (A.yoyakthai = 3618),
                (A.yoyingthai = 3597),
                (A.yparen = 9396),
                (A.ypogegrammeni = 890),
                (A.ypogegrammenigreekcmb = 837),
                (A.yr = 422),
                (A.yring = 7833),
                (A.ysuperior = 696),
                (A.ytilde = 7929),
                (A.yturned = 654),
                (A.yuhiragana = 12422),
                (A.yuikorean = 12684),
                (A.yukatakana = 12518),
                (A.yukatakanahalfwidth = 65429),
                (A.yukorean = 12640),
                (A.yusbigcyrillic = 1131),
                (A.yusbigiotifiedcyrillic = 1133),
                (A.yuslittlecyrillic = 1127),
                (A.yuslittleiotifiedcyrillic = 1129),
                (A.yusmallhiragana = 12421),
                (A.yusmallkatakana = 12517),
                (A.yusmallkatakanahalfwidth = 65389),
                (A.yuyekorean = 12683),
                (A.yuyeokorean = 12682),
                (A.yyabengali = 2527),
                (A.yyadeva = 2399),
                (A.z = 122),
                (A.zaarmenian = 1382),
                (A.zacute = 378),
                (A.zadeva = 2395),
                (A.zagurmukhi = 2651),
                (A.zaharabic = 1592),
                (A.zahfinalarabic = 65222),
                (A.zahinitialarabic = 65223),
                (A.zahiragana = 12374),
                (A.zahmedialarabic = 65224),
                (A.zainarabic = 1586),
                (A.zainfinalarabic = 65200),
                (A.zakatakana = 12470),
                (A.zaqefgadolhebrew = 1429),
                (A.zaqefqatanhebrew = 1428),
                (A.zarqahebrew = 1432),
                (A.zayin = 1494),
                (A.zayindagesh = 64310),
                (A.zayindageshhebrew = 64310),
                (A.zayinhebrew = 1494),
                (A.zbopomofo = 12567),
                (A.zcaron = 382),
                (A.zcircle = 9449),
                (A.zcircumflex = 7825),
                (A.zcurl = 657),
                (A.zdot = 380),
                (A.zdotaccent = 380),
                (A.zdotbelow = 7827),
                (A.zecyrillic = 1079),
                (A.zedescendercyrillic = 1177),
                (A.zedieresiscyrillic = 1247),
                (A.zehiragana = 12380),
                (A.zekatakana = 12476),
                (A.zero = 48),
                (A.zeroarabic = 1632),
                (A.zerobengali = 2534),
                (A.zerodeva = 2406),
                (A.zerogujarati = 2790),
                (A.zerogurmukhi = 2662),
                (A.zerohackarabic = 1632),
                (A.zeroinferior = 8320),
                (A.zeromonospace = 65296),
                (A.zerooldstyle = 63280),
                (A.zeropersian = 1776),
                (A.zerosuperior = 8304),
                (A.zerothai = 3664),
                (A.zerowidthjoiner = 65279),
                (A.zerowidthnonjoiner = 8204),
                (A.zerowidthspace = 8203),
                (A.zeta = 950),
                (A.zhbopomofo = 12563),
                (A.zhearmenian = 1386),
                (A.zhebrevecyrillic = 1218),
                (A.zhecyrillic = 1078),
                (A.zhedescendercyrillic = 1175),
                (A.zhedieresiscyrillic = 1245),
                (A.zihiragana = 12376),
                (A.zikatakana = 12472),
                (A.zinorhebrew = 1454),
                (A.zlinebelow = 7829),
                (A.zmonospace = 65370),
                (A.zohiragana = 12382),
                (A.zokatakana = 12478),
                (A.zparen = 9397),
                (A.zretroflexhook = 656),
                (A.zstroke = 438),
                (A.zuhiragana = 12378),
                (A.zukatakana = 12474),
                (A['.notdef'] = 0),
                (A.angbracketleftbig = 9001),
                (A.angbracketleftBig = 9001),
                (A.angbracketleftbigg = 9001),
                (A.angbracketleftBigg = 9001),
                (A.angbracketrightBig = 9002),
                (A.angbracketrightbig = 9002),
                (A.angbracketrightBigg = 9002),
                (A.angbracketrightbigg = 9002),
                (A.arrowhookleft = 8618),
                (A.arrowhookright = 8617),
                (A.arrowlefttophalf = 8636),
                (A.arrowleftbothalf = 8637),
                (A.arrownortheast = 8599),
                (A.arrownorthwest = 8598),
                (A.arrowrighttophalf = 8640),
                (A.arrowrightbothalf = 8641),
                (A.arrowsoutheast = 8600),
                (A.arrowsouthwest = 8601),
                (A.backslashbig = 8726),
                (A.backslashBig = 8726),
                (A.backslashBigg = 8726),
                (A.backslashbigg = 8726),
                (A.bardbl = 8214),
                (A.bracehtipdownleft = 65079),
                (A.bracehtipdownright = 65079),
                (A.bracehtipupleft = 65080),
                (A.bracehtipupright = 65080),
                (A.braceleftBig = 123),
                (A.braceleftbig = 123),
                (A.braceleftbigg = 123),
                (A.braceleftBigg = 123),
                (A.bracerightBig = 125),
                (A.bracerightbig = 125),
                (A.bracerightbigg = 125),
                (A.bracerightBigg = 125),
                (A.bracketleftbig = 91),
                (A.bracketleftBig = 91),
                (A.bracketleftbigg = 91),
                (A.bracketleftBigg = 91),
                (A.bracketrightBig = 93),
                (A.bracketrightbig = 93),
                (A.bracketrightbigg = 93),
                (A.bracketrightBigg = 93),
                (A.ceilingleftbig = 8968),
                (A.ceilingleftBig = 8968),
                (A.ceilingleftBigg = 8968),
                (A.ceilingleftbigg = 8968),
                (A.ceilingrightbig = 8969),
                (A.ceilingrightBig = 8969),
                (A.ceilingrightbigg = 8969),
                (A.ceilingrightBigg = 8969),
                (A.circledotdisplay = 8857),
                (A.circledottext = 8857),
                (A.circlemultiplydisplay = 8855),
                (A.circlemultiplytext = 8855),
                (A.circleplusdisplay = 8853),
                (A.circleplustext = 8853),
                (A.contintegraldisplay = 8750),
                (A.contintegraltext = 8750),
                (A.coproductdisplay = 8720),
                (A.coproducttext = 8720),
                (A.floorleftBig = 8970),
                (A.floorleftbig = 8970),
                (A.floorleftbigg = 8970),
                (A.floorleftBigg = 8970),
                (A.floorrightbig = 8971),
                (A.floorrightBig = 8971),
                (A.floorrightBigg = 8971),
                (A.floorrightbigg = 8971),
                (A.hatwide = 770),
                (A.hatwider = 770),
                (A.hatwidest = 770),
                (A.intercal = 7488),
                (A.integraldisplay = 8747),
                (A.integraltext = 8747),
                (A.intersectiondisplay = 8898),
                (A.intersectiontext = 8898),
                (A.logicalanddisplay = 8743),
                (A.logicalandtext = 8743),
                (A.logicalordisplay = 8744),
                (A.logicalortext = 8744),
                (A.parenleftBig = 40),
                (A.parenleftbig = 40),
                (A.parenleftBigg = 40),
                (A.parenleftbigg = 40),
                (A.parenrightBig = 41),
                (A.parenrightbig = 41),
                (A.parenrightBigg = 41),
                (A.parenrightbigg = 41),
                (A.prime = 8242),
                (A.productdisplay = 8719),
                (A.producttext = 8719),
                (A.radicalbig = 8730),
                (A.radicalBig = 8730),
                (A.radicalBigg = 8730),
                (A.radicalbigg = 8730),
                (A.radicalbt = 8730),
                (A.radicaltp = 8730),
                (A.radicalvertex = 8730),
                (A.slashbig = 47),
                (A.slashBig = 47),
                (A.slashBigg = 47),
                (A.slashbigg = 47),
                (A.summationdisplay = 8721),
                (A.summationtext = 8721),
                (A.tildewide = 732),
                (A.tildewider = 732),
                (A.tildewidest = 732),
                (A.uniondisplay = 8899),
                (A.unionmultidisplay = 8846),
                (A.unionmultitext = 8846),
                (A.unionsqdisplay = 8852),
                (A.unionsqtext = 8852),
                (A.uniontext = 8899),
                (A.vextenddouble = 8741),
                (A.vextendsingle = 8739);
            }),
            tj = Ah(function (A) {
              (A.space = 32),
                (A.a1 = 9985),
                (A.a2 = 9986),
                (A.a202 = 9987),
                (A.a3 = 9988),
                (A.a4 = 9742),
                (A.a5 = 9990),
                (A.a119 = 9991),
                (A.a118 = 9992),
                (A.a117 = 9993),
                (A.a11 = 9755),
                (A.a12 = 9758),
                (A.a13 = 9996),
                (A.a14 = 9997),
                (A.a15 = 9998),
                (A.a16 = 9999),
                (A.a105 = 1e4),
                (A.a17 = 10001),
                (A.a18 = 10002),
                (A.a19 = 10003),
                (A.a20 = 10004),
                (A.a21 = 10005),
                (A.a22 = 10006),
                (A.a23 = 10007),
                (A.a24 = 10008),
                (A.a25 = 10009),
                (A.a26 = 10010),
                (A.a27 = 10011),
                (A.a28 = 10012),
                (A.a6 = 10013),
                (A.a7 = 10014),
                (A.a8 = 10015),
                (A.a9 = 10016),
                (A.a10 = 10017),
                (A.a29 = 10018),
                (A.a30 = 10019),
                (A.a31 = 10020),
                (A.a32 = 10021),
                (A.a33 = 10022),
                (A.a34 = 10023),
                (A.a35 = 9733),
                (A.a36 = 10025),
                (A.a37 = 10026),
                (A.a38 = 10027),
                (A.a39 = 10028),
                (A.a40 = 10029),
                (A.a41 = 10030),
                (A.a42 = 10031),
                (A.a43 = 10032),
                (A.a44 = 10033),
                (A.a45 = 10034),
                (A.a46 = 10035),
                (A.a47 = 10036),
                (A.a48 = 10037),
                (A.a49 = 10038),
                (A.a50 = 10039),
                (A.a51 = 10040),
                (A.a52 = 10041),
                (A.a53 = 10042),
                (A.a54 = 10043),
                (A.a55 = 10044),
                (A.a56 = 10045),
                (A.a57 = 10046),
                (A.a58 = 10047),
                (A.a59 = 10048),
                (A.a60 = 10049),
                (A.a61 = 10050),
                (A.a62 = 10051),
                (A.a63 = 10052),
                (A.a64 = 10053),
                (A.a65 = 10054),
                (A.a66 = 10055),
                (A.a67 = 10056),
                (A.a68 = 10057),
                (A.a69 = 10058),
                (A.a70 = 10059),
                (A.a71 = 9679),
                (A.a72 = 10061),
                (A.a73 = 9632),
                (A.a74 = 10063),
                (A.a203 = 10064),
                (A.a75 = 10065),
                (A.a204 = 10066),
                (A.a76 = 9650),
                (A.a77 = 9660),
                (A.a78 = 9670),
                (A.a79 = 10070),
                (A.a81 = 9687),
                (A.a82 = 10072),
                (A.a83 = 10073),
                (A.a84 = 10074),
                (A.a97 = 10075),
                (A.a98 = 10076),
                (A.a99 = 10077),
                (A.a100 = 10078),
                (A.a101 = 10081),
                (A.a102 = 10082),
                (A.a103 = 10083),
                (A.a104 = 10084),
                (A.a106 = 10085),
                (A.a107 = 10086),
                (A.a108 = 10087),
                (A.a112 = 9827),
                (A.a111 = 9830),
                (A.a110 = 9829),
                (A.a109 = 9824),
                (A.a120 = 9312),
                (A.a121 = 9313),
                (A.a122 = 9314),
                (A.a123 = 9315),
                (A.a124 = 9316),
                (A.a125 = 9317),
                (A.a126 = 9318),
                (A.a127 = 9319),
                (A.a128 = 9320),
                (A.a129 = 9321),
                (A.a130 = 10102),
                (A.a131 = 10103),
                (A.a132 = 10104),
                (A.a133 = 10105),
                (A.a134 = 10106),
                (A.a135 = 10107),
                (A.a136 = 10108),
                (A.a137 = 10109),
                (A.a138 = 10110),
                (A.a139 = 10111),
                (A.a140 = 10112),
                (A.a141 = 10113),
                (A.a142 = 10114),
                (A.a143 = 10115),
                (A.a144 = 10116),
                (A.a145 = 10117),
                (A.a146 = 10118),
                (A.a147 = 10119),
                (A.a148 = 10120),
                (A.a149 = 10121),
                (A.a150 = 10122),
                (A.a151 = 10123),
                (A.a152 = 10124),
                (A.a153 = 10125),
                (A.a154 = 10126),
                (A.a155 = 10127),
                (A.a156 = 10128),
                (A.a157 = 10129),
                (A.a158 = 10130),
                (A.a159 = 10131),
                (A.a160 = 10132),
                (A.a161 = 8594),
                (A.a163 = 8596),
                (A.a164 = 8597),
                (A.a196 = 10136),
                (A.a165 = 10137),
                (A.a192 = 10138),
                (A.a166 = 10139),
                (A.a167 = 10140),
                (A.a168 = 10141),
                (A.a169 = 10142),
                (A.a170 = 10143),
                (A.a171 = 10144),
                (A.a172 = 10145),
                (A.a173 = 10146),
                (A.a162 = 10147),
                (A.a174 = 10148),
                (A.a175 = 10149),
                (A.a176 = 10150),
                (A.a177 = 10151),
                (A.a178 = 10152),
                (A.a179 = 10153),
                (A.a193 = 10154),
                (A.a180 = 10155),
                (A.a199 = 10156),
                (A.a181 = 10157),
                (A.a200 = 10158),
                (A.a182 = 10159),
                (A.a201 = 10161),
                (A.a183 = 10162),
                (A.a184 = 10163),
                (A.a197 = 10164),
                (A.a185 = 10165),
                (A.a194 = 10166),
                (A.a198 = 10167),
                (A.a186 = 10168),
                (A.a195 = 10169),
                (A.a187 = 10170),
                (A.a188 = 10171),
                (A.a189 = 10172),
                (A.a190 = 10173),
                (A.a191 = 10174),
                (A.a89 = 10088),
                (A.a90 = 10089),
                (A.a93 = 10090),
                (A.a94 = 10091),
                (A.a91 = 10092),
                (A.a92 = 10093),
                (A.a205 = 10094),
                (A.a85 = 10095),
                (A.a206 = 10096),
                (A.a86 = 10097),
                (A.a87 = 10098),
                (A.a88 = 10099),
                (A.a95 = 10100),
                (A.a96 = 10101),
                (A['.notdef'] = 0);
            }),
            tz = Ah(function (A) {
              (A[63721] = 169),
                (A[63193] = 169),
                (A[63720] = 174),
                (A[63194] = 174),
                (A[63722] = 8482),
                (A[63195] = 8482),
                (A[63729] = 9127),
                (A[63730] = 9128),
                (A[63731] = 9129),
                (A[63740] = 9131),
                (A[63741] = 9132),
                (A[63742] = 9133),
                (A[63726] = 9121),
                (A[63727] = 9122),
                (A[63728] = 9123),
                (A[63737] = 9124),
                (A[63738] = 9125),
                (A[63739] = 9126),
                (A[63723] = 9115),
                (A[63724] = 9116),
                (A[63725] = 9117),
                (A[63734] = 9118),
                (A[63735] = 9119),
                (A[63736] = 9120);
            });
          function t_(A, t) {
            let i = t[A];
            if (void 0 !== i) return i;
            if (!A) return -1;
            if ('u' === A[0]) {
              let t;
              let a = A.length;
              if (7 === a && 'n' === A[1] && 'i' === A[2]) t = A.substring(3);
              else {
                if (!(a >= 5 && a <= 7)) return -1;
                t = A.substring(1);
              }
              if (t === t.toUpperCase() && (i = parseInt(t, 16)) >= 0) return i;
            }
            return -1;
          }
          let t$ = [
              [0, 127],
              [128, 255],
              [256, 383],
              [384, 591],
              [592, 687, 7424, 7551, 7552, 7615],
              [688, 767, 42752, 42783],
              [768, 879, 7616, 7679],
              [880, 1023],
              [11392, 11519],
              [1024, 1279, 1280, 1327, 11744, 11775, 42560, 42655],
              [1328, 1423],
              [1424, 1535],
              [42240, 42559],
              [1536, 1791, 1872, 1919],
              [1984, 2047],
              [2304, 2431],
              [2432, 2559],
              [2560, 2687],
              [2688, 2815],
              [2816, 2943],
              [2944, 3071],
              [3072, 3199],
              [3200, 3327],
              [3328, 3455],
              [3584, 3711],
              [3712, 3839],
              [4256, 4351, 11520, 11567],
              [6912, 7039],
              [4352, 4607],
              [7680, 7935, 11360, 11391, 42784, 43007],
              [7936, 8191],
              [8192, 8303, 11776, 11903],
              [8304, 8351],
              [8352, 8399],
              [8400, 8447],
              [8448, 8527],
              [8528, 8591],
              [8592, 8703, 10224, 10239, 10496, 10623, 11008, 11263],
              [8704, 8959, 10752, 11007, 10176, 10223, 10624, 10751],
              [8960, 9215],
              [9216, 9279],
              [9280, 9311],
              [9312, 9471],
              [9472, 9599],
              [9600, 9631],
              [9632, 9727],
              [9728, 9983],
              [9984, 10175],
              [12288, 12351],
              [12352, 12447],
              [12448, 12543, 12784, 12799],
              [12544, 12591, 12704, 12735],
              [12592, 12687],
              [43072, 43135],
              [12800, 13055],
              [13056, 13311],
              [44032, 55215],
              [55296, 57343],
              [67840, 67871],
              [
                19968, 40959, 11904, 12031, 12032, 12255, 12272, 12287, 13312,
                19903, 131072, 173791, 12688, 12703,
              ],
              [57344, 63743],
              [12736, 12783, 63744, 64255, 194560, 195103],
              [64256, 64335],
              [64336, 65023],
              [65056, 65071],
              [65040, 65055],
              [65104, 65135],
              [65136, 65279],
              [65280, 65519],
              [65520, 65535],
              [3840, 4095],
              [1792, 1871],
              [1920, 1983],
              [3456, 3583],
              [4096, 4255],
              [4608, 4991, 4992, 5023, 11648, 11743],
              [5024, 5119],
              [5120, 5759],
              [5760, 5791],
              [5792, 5887],
              [6016, 6143],
              [6144, 6319],
              [10240, 10495],
              [40960, 42127],
              [5888, 5919, 5920, 5951, 5952, 5983, 5984, 6015],
              [66304, 66351],
              [66352, 66383],
              [66560, 66639],
              [118784, 119039, 119040, 119295, 119296, 119375],
              [119808, 120831],
              [1044480, 1048573],
              [65024, 65039, 917760, 917999],
              [917504, 917631],
              [6400, 6479],
              [6480, 6527],
              [6528, 6623],
              [6656, 6687],
              [11264, 11359],
              [11568, 11647],
              [19904, 19967],
              [43008, 43055],
              [65536, 65663, 65664, 65791, 65792, 65855],
              [65856, 65935],
              [66432, 66463],
              [66464, 66527],
              [66640, 66687],
              [66688, 66735],
              [67584, 67647],
              [68096, 68191],
              [119552, 119647],
              [73728, 74751, 74752, 74879],
              [119648, 119679],
              [7040, 7103],
              [7168, 7247],
              [7248, 7295],
              [43136, 43231],
              [43264, 43311],
              [43312, 43359],
              [43520, 43615],
              [65936, 65999],
              [66e3, 66047],
              [66208, 66271, 66176, 66207, 67872, 67903],
              [127024, 127135, 126976, 127023],
            ],
            t0 = RegExp('^(\\s)|(\\p{Mn})|(\\p{Cf})$', 'u'),
            t1 = new Map(),
            t2 = [
              '.notdef',
              '.null',
              'nonmarkingreturn',
              'space',
              'exclam',
              'quotedbl',
              'numbersign',
              'dollar',
              'percent',
              'ampersand',
              'quotesingle',
              'parenleft',
              'parenright',
              'asterisk',
              'plus',
              'comma',
              'hyphen',
              'period',
              'slash',
              'zero',
              'one',
              'two',
              'three',
              'four',
              'five',
              'six',
              'seven',
              'eight',
              'nine',
              'colon',
              'semicolon',
              'less',
              'equal',
              'greater',
              'question',
              'at',
              'A',
              'B',
              'C',
              'D',
              'E',
              'F',
              'G',
              'H',
              'I',
              'J',
              'K',
              'L',
              'M',
              'N',
              'O',
              'P',
              'Q',
              'R',
              'S',
              'T',
              'U',
              'V',
              'W',
              'X',
              'Y',
              'Z',
              'bracketleft',
              'backslash',
              'bracketright',
              'asciicircum',
              'underscore',
              'grave',
              'a',
              'b',
              'c',
              'd',
              'e',
              'f',
              'g',
              'h',
              'i',
              'j',
              'k',
              'l',
              'm',
              'n',
              'o',
              'p',
              'q',
              'r',
              's',
              't',
              'u',
              'v',
              'w',
              'x',
              'y',
              'z',
              'braceleft',
              'bar',
              'braceright',
              'asciitilde',
              'Adieresis',
              'Aring',
              'Ccedilla',
              'Eacute',
              'Ntilde',
              'Odieresis',
              'Udieresis',
              'aacute',
              'agrave',
              'acircumflex',
              'adieresis',
              'atilde',
              'aring',
              'ccedilla',
              'eacute',
              'egrave',
              'ecircumflex',
              'edieresis',
              'iacute',
              'igrave',
              'icircumflex',
              'idieresis',
              'ntilde',
              'oacute',
              'ograve',
              'ocircumflex',
              'odieresis',
              'otilde',
              'uacute',
              'ugrave',
              'ucircumflex',
              'udieresis',
              'dagger',
              'degree',
              'cent',
              'sterling',
              'section',
              'bullet',
              'paragraph',
              'germandbls',
              'registered',
              'copyright',
              'trademark',
              'acute',
              'dieresis',
              'notequal',
              'AE',
              'Oslash',
              'infinity',
              'plusminus',
              'lessequal',
              'greaterequal',
              'yen',
              'mu',
              'partialdiff',
              'summation',
              'product',
              'pi',
              'integral',
              'ordfeminine',
              'ordmasculine',
              'Omega',
              'ae',
              'oslash',
              'questiondown',
              'exclamdown',
              'logicalnot',
              'radical',
              'florin',
              'approxequal',
              'Delta',
              'guillemotleft',
              'guillemotright',
              'ellipsis',
              'nonbreakingspace',
              'Agrave',
              'Atilde',
              'Otilde',
              'OE',
              'oe',
              'endash',
              'emdash',
              'quotedblleft',
              'quotedblright',
              'quoteleft',
              'quoteright',
              'divide',
              'lozenge',
              'ydieresis',
              'Ydieresis',
              'fraction',
              'currency',
              'guilsinglleft',
              'guilsinglright',
              'fi',
              'fl',
              'daggerdbl',
              'periodcentered',
              'quotesinglbase',
              'quotedblbase',
              'perthousand',
              'Acircumflex',
              'Ecircumflex',
              'Aacute',
              'Edieresis',
              'Egrave',
              'Iacute',
              'Icircumflex',
              'Idieresis',
              'Igrave',
              'Oacute',
              'Ocircumflex',
              'apple',
              'Ograve',
              'Uacute',
              'Ucircumflex',
              'Ugrave',
              'dotlessi',
              'circumflex',
              'tilde',
              'macron',
              'breve',
              'dotaccent',
              'ring',
              'cedilla',
              'hungarumlaut',
              'ogonek',
              'caron',
              'Lslash',
              'lslash',
              'Scaron',
              'scaron',
              'Zcaron',
              'zcaron',
              'brokenbar',
              'Eth',
              'eth',
              'Yacute',
              'yacute',
              'Thorn',
              'thorn',
              'minus',
              'multiply',
              'onesuperior',
              'twosuperior',
              'threesuperior',
              'onehalf',
              'onequarter',
              'threequarters',
              'franc',
              'Gbreve',
              'gbreve',
              'Idotaccent',
              'Scedilla',
              'scedilla',
              'Cacute',
              'cacute',
              'Ccaron',
              'ccaron',
              'dcroat',
            ];
          function t9(A, t) {
            if (void 0 !== t[A]) return A;
            let i = t_(A, t);
            if (-1 !== i) {
              for (let A in t) if (t[A] === i) return A;
            }
            return p('Unable to recover a standard glyph name for: ' + A), A;
          }
          function t3(A, t, i) {
            let a, s, g, r;
            let n = Object.create(null),
              o = !!(4 & A.flags);
            if (A.isInternalFont)
              for (s = 0, g = t; s < g.length; s++)
                (a = i.indexOf(g[s])), (n[s] = a >= 0 ? a : 0);
            else if (A.baseEncodingName)
              for (s = 0, g = tS(A.baseEncodingName); s < g.length; s++)
                (a = i.indexOf(g[s])), (n[s] = a >= 0 ? a : 0);
            else if (o) for (s in t) n[s] = t[s];
            else
              for (s = 0, g = tD; s < g.length; s++)
                (a = i.indexOf(g[s])), (n[s] = a >= 0 ? a : 0);
            let I = A.differences;
            if (I)
              for (s in I) {
                let A = I[s];
                if (-1 === (a = i.indexOf(A))) {
                  r || (r = tV());
                  let t = t9(A, r);
                  t !== A && (a = i.indexOf(t));
                }
                n[s] = a >= 0 ? a : 0;
              }
            return n;
          }
          function t5(A) {
            return A.replaceAll(/[,_]/g, '-').replaceAll(/\s/g, '');
          }
          let t8 = Ah((A) => {
              (A[8211] = 65074),
                (A[8212] = 65073),
                (A[8229] = 65072),
                (A[8230] = 65049),
                (A[12289] = 65041),
                (A[12290] = 65042),
                (A[12296] = 65087),
                (A[12297] = 65088),
                (A[12298] = 65085),
                (A[12299] = 65086),
                (A[12300] = 65089),
                (A[12301] = 65090),
                (A[12302] = 65091),
                (A[12303] = 65092),
                (A[12304] = 65083),
                (A[12305] = 65084),
                (A[12308] = 65081),
                (A[12309] = 65082),
                (A[12310] = 65047),
                (A[12311] = 65048),
                (A[65103] = 65076),
                (A[65281] = 65045),
                (A[65288] = 65077),
                (A[65289] = 65078),
                (A[65292] = 65040),
                (A[65306] = 65043),
                (A[65307] = 65044),
                (A[65311] = 65046),
                (A[65339] = 65095),
                (A[65341] = 65096),
                (A[65343] = 65075),
                (A[65371] = 65079),
                (A[65373] = 65080);
            }),
            t6 = Ah(function (A) {
              (A['Times-Roman'] = 'Times-Roman'),
                (A.Helvetica = 'Helvetica'),
                (A.Courier = 'Courier'),
                (A.Symbol = 'Symbol'),
                (A['Times-Bold'] = 'Times-Bold'),
                (A['Helvetica-Bold'] = 'Helvetica-Bold'),
                (A['Courier-Bold'] = 'Courier-Bold'),
                (A.ZapfDingbats = 'ZapfDingbats'),
                (A['Times-Italic'] = 'Times-Italic'),
                (A['Helvetica-Oblique'] = 'Helvetica-Oblique'),
                (A['Courier-Oblique'] = 'Courier-Oblique'),
                (A['Times-BoldItalic'] = 'Times-BoldItalic'),
                (A['Helvetica-BoldOblique'] = 'Helvetica-BoldOblique'),
                (A['Courier-BoldOblique'] = 'Courier-BoldOblique'),
                (A.ArialNarrow = 'Helvetica'),
                (A['ArialNarrow-Bold'] = 'Helvetica-Bold'),
                (A['ArialNarrow-BoldItalic'] = 'Helvetica-BoldOblique'),
                (A['ArialNarrow-Italic'] = 'Helvetica-Oblique'),
                (A.ArialBlack = 'Helvetica'),
                (A['ArialBlack-Bold'] = 'Helvetica-Bold'),
                (A['ArialBlack-BoldItalic'] = 'Helvetica-BoldOblique'),
                (A['ArialBlack-Italic'] = 'Helvetica-Oblique'),
                (A['Arial-Black'] = 'Helvetica'),
                (A['Arial-Black-Bold'] = 'Helvetica-Bold'),
                (A['Arial-Black-BoldItalic'] = 'Helvetica-BoldOblique'),
                (A['Arial-Black-Italic'] = 'Helvetica-Oblique'),
                (A.Arial = 'Helvetica'),
                (A['Arial-Bold'] = 'Helvetica-Bold'),
                (A['Arial-BoldItalic'] = 'Helvetica-BoldOblique'),
                (A['Arial-Italic'] = 'Helvetica-Oblique'),
                (A.ArialMT = 'Helvetica'),
                (A['Arial-BoldItalicMT'] = 'Helvetica-BoldOblique'),
                (A['Arial-BoldMT'] = 'Helvetica-Bold'),
                (A['Arial-ItalicMT'] = 'Helvetica-Oblique'),
                (A['Arial-BoldItalicMT-BoldItalic'] = 'Helvetica-BoldOblique'),
                (A['Arial-BoldMT-Bold'] = 'Helvetica-Bold'),
                (A['Arial-ItalicMT-Italic'] = 'Helvetica-Oblique'),
                (A.ArialUnicodeMS = 'Helvetica'),
                (A['ArialUnicodeMS-Bold'] = 'Helvetica-Bold'),
                (A['ArialUnicodeMS-BoldItalic'] = 'Helvetica-BoldOblique'),
                (A['ArialUnicodeMS-Italic'] = 'Helvetica-Oblique'),
                (A['Courier-BoldItalic'] = 'Courier-BoldOblique'),
                (A['Courier-Italic'] = 'Courier-Oblique'),
                (A.CourierNew = 'Courier'),
                (A['CourierNew-Bold'] = 'Courier-Bold'),
                (A['CourierNew-BoldItalic'] = 'Courier-BoldOblique'),
                (A['CourierNew-Italic'] = 'Courier-Oblique'),
                (A['CourierNewPS-BoldItalicMT'] = 'Courier-BoldOblique'),
                (A['CourierNewPS-BoldMT'] = 'Courier-Bold'),
                (A['CourierNewPS-ItalicMT'] = 'Courier-Oblique'),
                (A.CourierNewPSMT = 'Courier'),
                (A['Helvetica-BoldItalic'] = 'Helvetica-BoldOblique'),
                (A['Helvetica-Italic'] = 'Helvetica-Oblique'),
                (A['Symbol-Bold'] = 'Symbol'),
                (A['Symbol-BoldItalic'] = 'Symbol'),
                (A['Symbol-Italic'] = 'Symbol'),
                (A.TimesNewRoman = 'Times-Roman'),
                (A['TimesNewRoman-Bold'] = 'Times-Bold'),
                (A['TimesNewRoman-BoldItalic'] = 'Times-BoldItalic'),
                (A['TimesNewRoman-Italic'] = 'Times-Italic'),
                (A.TimesNewRomanPS = 'Times-Roman'),
                (A['TimesNewRomanPS-Bold'] = 'Times-Bold'),
                (A['TimesNewRomanPS-BoldItalic'] = 'Times-BoldItalic'),
                (A['TimesNewRomanPS-BoldItalicMT'] = 'Times-BoldItalic'),
                (A['TimesNewRomanPS-BoldMT'] = 'Times-Bold'),
                (A['TimesNewRomanPS-Italic'] = 'Times-Italic'),
                (A['TimesNewRomanPS-ItalicMT'] = 'Times-Italic'),
                (A.TimesNewRomanPSMT = 'Times-Roman'),
                (A['TimesNewRomanPSMT-Bold'] = 'Times-Bold'),
                (A['TimesNewRomanPSMT-BoldItalic'] = 'Times-BoldItalic'),
                (A['TimesNewRomanPSMT-Italic'] = 'Times-Italic');
            }),
            t7 = Ah(function (A) {
              (A.Courier = 'FoxitFixed.pfb'),
                (A['Courier-Bold'] = 'FoxitFixedBold.pfb'),
                (A['Courier-BoldOblique'] = 'FoxitFixedBoldItalic.pfb'),
                (A['Courier-Oblique'] = 'FoxitFixedItalic.pfb'),
                (A.Helvetica = 'LiberationSans-Regular.ttf'),
                (A['Helvetica-Bold'] = 'LiberationSans-Bold.ttf'),
                (A['Helvetica-BoldOblique'] = 'LiberationSans-BoldItalic.ttf'),
                (A['Helvetica-Oblique'] = 'LiberationSans-Italic.ttf'),
                (A['Times-Roman'] = 'FoxitSerif.pfb'),
                (A['Times-Bold'] = 'FoxitSerifBold.pfb'),
                (A['Times-BoldItalic'] = 'FoxitSerifBoldItalic.pfb'),
                (A['Times-Italic'] = 'FoxitSerifItalic.pfb'),
                (A.Symbol = 'FoxitSymbol.pfb'),
                (A.ZapfDingbats = 'FoxitDingbats.pfb'),
                (A['LiberationSans-Regular'] = 'LiberationSans-Regular.ttf'),
                (A['LiberationSans-Bold'] = 'LiberationSans-Bold.ttf'),
                (A['LiberationSans-Italic'] = 'LiberationSans-Italic.ttf'),
                (A['LiberationSans-BoldItalic'] =
                  'LiberationSans-BoldItalic.ttf');
            }),
            t4 = Ah(function (A) {
              (A.Calibri = 'Helvetica'),
                (A['Calibri-Bold'] = 'Helvetica-Bold'),
                (A['Calibri-BoldItalic'] = 'Helvetica-BoldOblique'),
                (A['Calibri-Italic'] = 'Helvetica-Oblique'),
                (A.CenturyGothic = 'Helvetica'),
                (A['CenturyGothic-Bold'] = 'Helvetica-Bold'),
                (A['CenturyGothic-BoldItalic'] = 'Helvetica-BoldOblique'),
                (A['CenturyGothic-Italic'] = 'Helvetica-Oblique'),
                (A.ComicSansMS = 'Comic Sans MS'),
                (A['ComicSansMS-Bold'] = 'Comic Sans MS-Bold'),
                (A['ComicSansMS-BoldItalic'] = 'Comic Sans MS-BoldItalic'),
                (A['ComicSansMS-Italic'] = 'Comic Sans MS-Italic'),
                (A.GillSansMT = 'Helvetica'),
                (A['GillSansMT-Bold'] = 'Helvetica-Bold'),
                (A['GillSansMT-BoldItalic'] = 'Helvetica-BoldOblique'),
                (A['GillSansMT-Italic'] = 'Helvetica-Oblique'),
                (A.Impact = 'Helvetica'),
                (A['ItcSymbol-Bold'] = 'Helvetica-Bold'),
                (A['ItcSymbol-BoldItalic'] = 'Helvetica-BoldOblique'),
                (A['ItcSymbol-Book'] = 'Helvetica'),
                (A['ItcSymbol-BookItalic'] = 'Helvetica-Oblique'),
                (A['ItcSymbol-Medium'] = 'Helvetica'),
                (A['ItcSymbol-MediumItalic'] = 'Helvetica-Oblique'),
                (A.LucidaConsole = 'Courier'),
                (A['LucidaConsole-Bold'] = 'Courier-Bold'),
                (A['LucidaConsole-BoldItalic'] = 'Courier-BoldOblique'),
                (A['LucidaConsole-Italic'] = 'Courier-Oblique'),
                (A['LucidaSans-Demi'] = 'Helvetica-Bold'),
                (A['MS-Gothic'] = 'MS Gothic'),
                (A['MS-Gothic-Bold'] = 'MS Gothic-Bold'),
                (A['MS-Gothic-BoldItalic'] = 'MS Gothic-BoldItalic'),
                (A['MS-Gothic-Italic'] = 'MS Gothic-Italic'),
                (A['MS-Mincho'] = 'MS Mincho'),
                (A['MS-Mincho-Bold'] = 'MS Mincho-Bold'),
                (A['MS-Mincho-BoldItalic'] = 'MS Mincho-BoldItalic'),
                (A['MS-Mincho-Italic'] = 'MS Mincho-Italic'),
                (A['MS-PGothic'] = 'MS PGothic'),
                (A['MS-PGothic-Bold'] = 'MS PGothic-Bold'),
                (A['MS-PGothic-BoldItalic'] = 'MS PGothic-BoldItalic'),
                (A['MS-PGothic-Italic'] = 'MS PGothic-Italic'),
                (A['MS-PMincho'] = 'MS PMincho'),
                (A['MS-PMincho-Bold'] = 'MS PMincho-Bold'),
                (A['MS-PMincho-BoldItalic'] = 'MS PMincho-BoldItalic'),
                (A['MS-PMincho-Italic'] = 'MS PMincho-Italic'),
                (A.NuptialScript = 'Times-Italic'),
                (A.SegoeUISymbol = 'Helvetica');
            }),
            iA = Ah(function (A) {
              (A['Adobe Jenson'] = !0),
                (A['Adobe Text'] = !0),
                (A.Albertus = !0),
                (A.Aldus = !0),
                (A.Alexandria = !0),
                (A.Algerian = !0),
                (A['American Typewriter'] = !0),
                (A.Antiqua = !0),
                (A.Apex = !0),
                (A.Arno = !0),
                (A.Aster = !0),
                (A.Aurora = !0),
                (A.Baskerville = !0),
                (A.Bell = !0),
                (A.Bembo = !0),
                (A['Bembo Schoolbook'] = !0),
                (A.Benguiat = !0),
                (A['Berkeley Old Style'] = !0),
                (A['Bernhard Modern'] = !0),
                (A['Berthold City'] = !0),
                (A.Bodoni = !0),
                (A['Bauer Bodoni'] = !0),
                (A['Book Antiqua'] = !0),
                (A.Bookman = !0),
                (A['Bordeaux Roman'] = !0),
                (A['Californian FB'] = !0),
                (A.Calisto = !0),
                (A.Calvert = !0),
                (A.Capitals = !0),
                (A.Cambria = !0),
                (A.Cartier = !0),
                (A.Caslon = !0),
                (A.Catull = !0),
                (A.Centaur = !0),
                (A['Century Old Style'] = !0),
                (A['Century Schoolbook'] = !0),
                (A.Chaparral = !0),
                (A['Charis SIL'] = !0),
                (A.Cheltenham = !0),
                (A['Cholla Slab'] = !0),
                (A.Clarendon = !0),
                (A.Clearface = !0),
                (A.Cochin = !0),
                (A.Colonna = !0),
                (A['Computer Modern'] = !0),
                (A['Concrete Roman'] = !0),
                (A.Constantia = !0),
                (A['Cooper Black'] = !0),
                (A.Corona = !0),
                (A.Ecotype = !0),
                (A.Egyptienne = !0),
                (A.Elephant = !0),
                (A.Excelsior = !0),
                (A.Fairfield = !0),
                (A['FF Scala'] = !0),
                (A.Folkard = !0),
                (A.Footlight = !0),
                (A.FreeSerif = !0),
                (A['Friz Quadrata'] = !0),
                (A.Garamond = !0),
                (A.Gentium = !0),
                (A.Georgia = !0),
                (A.Gloucester = !0),
                (A['Goudy Old Style'] = !0),
                (A['Goudy Schoolbook'] = !0),
                (A['Goudy Pro Font'] = !0),
                (A.Granjon = !0),
                (A['Guardian Egyptian'] = !0),
                (A.Heather = !0),
                (A.Hercules = !0),
                (A['High Tower Text'] = !0),
                (A.Hiroshige = !0),
                (A['Hoefler Text'] = !0),
                (A['Humana Serif'] = !0),
                (A.Imprint = !0),
                (A['Ionic No. 5'] = !0),
                (A.Janson = !0),
                (A.Joanna = !0),
                (A.Korinna = !0),
                (A.Lexicon = !0),
                (A.LiberationSerif = !0),
                (A['Liberation Serif'] = !0),
                (A['Linux Libertine'] = !0),
                (A.Literaturnaya = !0),
                (A.Lucida = !0),
                (A['Lucida Bright'] = !0),
                (A.Melior = !0),
                (A.Memphis = !0),
                (A.Miller = !0),
                (A.Minion = !0),
                (A.Modern = !0),
                (A['Mona Lisa'] = !0),
                (A['Mrs Eaves'] = !0),
                (A['MS Serif'] = !0),
                (A['Museo Slab'] = !0),
                (A['New York'] = !0),
                (A['Nimbus Roman'] = !0),
                (A['NPS Rawlinson Roadway'] = !0),
                (A.NuptialScript = !0),
                (A.Palatino = !0),
                (A.Perpetua = !0),
                (A.Plantin = !0),
                (A['Plantin Schoolbook'] = !0),
                (A.Playbill = !0),
                (A['Poor Richard'] = !0),
                (A['Rawlinson Roadway'] = !0),
                (A.Renault = !0),
                (A.Requiem = !0),
                (A.Rockwell = !0),
                (A.Roman = !0),
                (A['Rotis Serif'] = !0),
                (A.Sabon = !0),
                (A.Scala = !0),
                (A.Seagull = !0),
                (A.Sistina = !0),
                (A.Souvenir = !0),
                (A.STIX = !0),
                (A['Stone Informal'] = !0),
                (A['Stone Serif'] = !0),
                (A.Sylfaen = !0),
                (A.Times = !0),
                (A.Trajan = !0),
                (A['Trinit\xe9'] = !0),
                (A['Trump Mediaeval'] = !0),
                (A.Utopia = !0),
                (A['Vale Type'] = !0),
                (A['Bitstream Vera'] = !0),
                (A['Vera Serif'] = !0),
                (A.Versailles = !0),
                (A.Wanted = !0),
                (A.Weiss = !0),
                (A['Wide Latin'] = !0),
                (A.Windsor = !0),
                (A.XITS = !0);
            }),
            ie = Ah(function (A) {
              (A.Dingbats = !0),
                (A.Symbol = !0),
                (A.ZapfDingbats = !0),
                (A.Wingdings = !0),
                (A['Wingdings-Bold'] = !0),
                (A['Wingdings-Regular'] = !0);
            }),
            it = Ah(function (A) {
              (A[2] = 10),
                (A[3] = 32),
                (A[4] = 33),
                (A[5] = 34),
                (A[6] = 35),
                (A[7] = 36),
                (A[8] = 37),
                (A[9] = 38),
                (A[10] = 39),
                (A[11] = 40),
                (A[12] = 41),
                (A[13] = 42),
                (A[14] = 43),
                (A[15] = 44),
                (A[16] = 45),
                (A[17] = 46),
                (A[18] = 47),
                (A[19] = 48),
                (A[20] = 49),
                (A[21] = 50),
                (A[22] = 51),
                (A[23] = 52),
                (A[24] = 53),
                (A[25] = 54),
                (A[26] = 55),
                (A[27] = 56),
                (A[28] = 57),
                (A[29] = 58),
                (A[30] = 894),
                (A[31] = 60),
                (A[32] = 61),
                (A[33] = 62),
                (A[34] = 63),
                (A[35] = 64),
                (A[36] = 65),
                (A[37] = 66),
                (A[38] = 67),
                (A[39] = 68),
                (A[40] = 69),
                (A[41] = 70),
                (A[42] = 71),
                (A[43] = 72),
                (A[44] = 73),
                (A[45] = 74),
                (A[46] = 75),
                (A[47] = 76),
                (A[48] = 77),
                (A[49] = 78),
                (A[50] = 79),
                (A[51] = 80),
                (A[52] = 81),
                (A[53] = 82),
                (A[54] = 83),
                (A[55] = 84),
                (A[56] = 85),
                (A[57] = 86),
                (A[58] = 87),
                (A[59] = 88),
                (A[60] = 89),
                (A[61] = 90),
                (A[62] = 91),
                (A[63] = 92),
                (A[64] = 93),
                (A[65] = 94),
                (A[66] = 95),
                (A[67] = 96),
                (A[68] = 97),
                (A[69] = 98),
                (A[70] = 99),
                (A[71] = 100),
                (A[72] = 101),
                (A[73] = 102),
                (A[74] = 103),
                (A[75] = 104),
                (A[76] = 105),
                (A[77] = 106),
                (A[78] = 107),
                (A[79] = 108),
                (A[80] = 109),
                (A[81] = 110),
                (A[82] = 111),
                (A[83] = 112),
                (A[84] = 113),
                (A[85] = 114),
                (A[86] = 115),
                (A[87] = 116),
                (A[88] = 117),
                (A[89] = 118),
                (A[90] = 119),
                (A[91] = 120),
                (A[92] = 121),
                (A[93] = 122),
                (A[94] = 123),
                (A[95] = 124),
                (A[96] = 125),
                (A[97] = 126),
                (A[98] = 196),
                (A[99] = 197),
                (A[100] = 199),
                (A[101] = 201),
                (A[102] = 209),
                (A[103] = 214),
                (A[104] = 220),
                (A[105] = 225),
                (A[106] = 224),
                (A[107] = 226),
                (A[108] = 228),
                (A[109] = 227),
                (A[110] = 229),
                (A[111] = 231),
                (A[112] = 233),
                (A[113] = 232),
                (A[114] = 234),
                (A[115] = 235),
                (A[116] = 237),
                (A[117] = 236),
                (A[118] = 238),
                (A[119] = 239),
                (A[120] = 241),
                (A[121] = 243),
                (A[122] = 242),
                (A[123] = 244),
                (A[124] = 246),
                (A[125] = 245),
                (A[126] = 250),
                (A[127] = 249),
                (A[128] = 251),
                (A[129] = 252),
                (A[130] = 8224),
                (A[131] = 176),
                (A[132] = 162),
                (A[133] = 163),
                (A[134] = 167),
                (A[135] = 8226),
                (A[136] = 182),
                (A[137] = 223),
                (A[138] = 174),
                (A[139] = 169),
                (A[140] = 8482),
                (A[141] = 180),
                (A[142] = 168),
                (A[143] = 8800),
                (A[144] = 198),
                (A[145] = 216),
                (A[146] = 8734),
                (A[147] = 177),
                (A[148] = 8804),
                (A[149] = 8805),
                (A[150] = 165),
                (A[151] = 181),
                (A[152] = 8706),
                (A[153] = 8721),
                (A[154] = 8719),
                (A[156] = 8747),
                (A[157] = 170),
                (A[158] = 186),
                (A[159] = 8486),
                (A[160] = 230),
                (A[161] = 248),
                (A[162] = 191),
                (A[163] = 161),
                (A[164] = 172),
                (A[165] = 8730),
                (A[166] = 402),
                (A[167] = 8776),
                (A[168] = 8710),
                (A[169] = 171),
                (A[170] = 187),
                (A[171] = 8230),
                (A[179] = 8220),
                (A[180] = 8221),
                (A[181] = 8216),
                (A[182] = 8217),
                (A[200] = 193),
                (A[203] = 205),
                (A[207] = 211),
                (A[210] = 218),
                (A[223] = 711),
                (A[224] = 321),
                (A[225] = 322),
                (A[226] = 352),
                (A[227] = 353),
                (A[228] = 381),
                (A[229] = 382),
                (A[233] = 221),
                (A[234] = 253),
                (A[252] = 263),
                (A[253] = 268),
                (A[254] = 269),
                (A[258] = 258),
                (A[260] = 260),
                (A[261] = 261),
                (A[265] = 280),
                (A[266] = 281),
                (A[267] = 282),
                (A[268] = 283),
                (A[269] = 313),
                (A[275] = 323),
                (A[276] = 324),
                (A[278] = 328),
                (A[283] = 344),
                (A[284] = 345),
                (A[285] = 346),
                (A[286] = 347),
                (A[292] = 367),
                (A[295] = 377),
                (A[296] = 378),
                (A[298] = 380),
                (A[305] = 963),
                (A[306] = 964),
                (A[307] = 966),
                (A[308] = 8215),
                (A[309] = 8252),
                (A[310] = 8319),
                (A[311] = 8359),
                (A[312] = 8592),
                (A[313] = 8593),
                (A[337] = 9552),
                (A[493] = 1039),
                (A[494] = 1040),
                (A[672] = 1488),
                (A[673] = 1489),
                (A[674] = 1490),
                (A[675] = 1491),
                (A[676] = 1492),
                (A[677] = 1493),
                (A[678] = 1494),
                (A[679] = 1495),
                (A[680] = 1496),
                (A[681] = 1497),
                (A[682] = 1498),
                (A[683] = 1499),
                (A[684] = 1500),
                (A[685] = 1501),
                (A[686] = 1502),
                (A[687] = 1503),
                (A[688] = 1504),
                (A[689] = 1505),
                (A[690] = 1506),
                (A[691] = 1507),
                (A[692] = 1508),
                (A[693] = 1509),
                (A[694] = 1510),
                (A[695] = 1511),
                (A[696] = 1512),
                (A[697] = 1513),
                (A[698] = 1514),
                (A[705] = 1524),
                (A[706] = 8362),
                (A[710] = 64288),
                (A[711] = 64298),
                (A[759] = 1617),
                (A[761] = 1776),
                (A[763] = 1778),
                (A[775] = 1652),
                (A[777] = 1764),
                (A[778] = 1780),
                (A[779] = 1781),
                (A[780] = 1782),
                (A[782] = 771),
                (A[783] = 64726),
                (A[786] = 8363),
                (A[788] = 8532),
                (A[790] = 768),
                (A[791] = 769),
                (A[792] = 768),
                (A[795] = 803),
                (A[797] = 64336),
                (A[798] = 64337),
                (A[799] = 64342),
                (A[800] = 64343),
                (A[801] = 64344),
                (A[802] = 64345),
                (A[803] = 64362),
                (A[804] = 64363),
                (A[805] = 64364),
                (A[2424] = 7821),
                (A[2425] = 7822),
                (A[2426] = 7823),
                (A[2427] = 7824),
                (A[2428] = 7825),
                (A[2429] = 7826),
                (A[2430] = 7827),
                (A[2433] = 7682),
                (A[2678] = 8045),
                (A[2679] = 8046),
                (A[2830] = 1552),
                (A[2838] = 686),
                (A[2840] = 751),
                (A[2842] = 753),
                (A[2843] = 754),
                (A[2844] = 755),
                (A[2846] = 757),
                (A[2856] = 767),
                (A[2857] = 848),
                (A[2858] = 849),
                (A[2862] = 853),
                (A[2863] = 854),
                (A[2864] = 855),
                (A[2865] = 861),
                (A[2866] = 862),
                (A[2906] = 7460),
                (A[2908] = 7462),
                (A[2909] = 7463),
                (A[2910] = 7464),
                (A[2912] = 7466),
                (A[2913] = 7467),
                (A[2914] = 7468),
                (A[2916] = 7470),
                (A[2917] = 7471),
                (A[2918] = 7472),
                (A[2920] = 7474),
                (A[2921] = 7475),
                (A[2922] = 7476),
                (A[2924] = 7478),
                (A[2925] = 7479),
                (A[2926] = 7480),
                (A[2928] = 7482),
                (A[2929] = 7483),
                (A[2930] = 7484),
                (A[2932] = 7486),
                (A[2933] = 7487),
                (A[2934] = 7488),
                (A[2936] = 7490),
                (A[2937] = 7491),
                (A[2938] = 7492),
                (A[2940] = 7494),
                (A[2941] = 7495),
                (A[2942] = 7496),
                (A[2944] = 7498),
                (A[2946] = 7500),
                (A[2948] = 7502),
                (A[2950] = 7504),
                (A[2951] = 7505),
                (A[2952] = 7506),
                (A[2954] = 7508),
                (A[2955] = 7509),
                (A[2956] = 7510),
                (A[2958] = 7512),
                (A[2959] = 7513),
                (A[2960] = 7514),
                (A[2962] = 7516),
                (A[2963] = 7517),
                (A[2964] = 7518),
                (A[2966] = 7520),
                (A[2967] = 7521),
                (A[2968] = 7522),
                (A[2970] = 7524),
                (A[2971] = 7525),
                (A[2972] = 7526),
                (A[2974] = 7528),
                (A[2975] = 7529),
                (A[2976] = 7530),
                (A[2978] = 1537),
                (A[2979] = 1538),
                (A[2980] = 1539),
                (A[2982] = 1549),
                (A[2983] = 1551),
                (A[2984] = 1552),
                (A[2986] = 1554),
                (A[2987] = 1555),
                (A[2988] = 1556),
                (A[2990] = 1623),
                (A[2991] = 1624),
                (A[2995] = 1775),
                (A[2999] = 1791),
                (A[3002] = 64290),
                (A[3003] = 64291),
                (A[3004] = 64292),
                (A[3006] = 64294),
                (A[3007] = 64295),
                (A[3008] = 64296),
                (A[3011] = 1900),
                (A[3014] = 8223),
                (A[3015] = 8244),
                (A[3017] = 7532),
                (A[3018] = 7533),
                (A[3019] = 7534),
                (A[3075] = 7590),
                (A[3076] = 7591),
                (A[3079] = 7594),
                (A[3080] = 7595),
                (A[3083] = 7598),
                (A[3084] = 7599),
                (A[3087] = 7602),
                (A[3088] = 7603),
                (A[3091] = 7606),
                (A[3092] = 7607),
                (A[3095] = 7610),
                (A[3096] = 7611),
                (A[3099] = 7614),
                (A[3100] = 7615),
                (A[3103] = 7618),
                (A[3104] = 7619),
                (A[3107] = 8337),
                (A[3108] = 8338),
                (A[3116] = 1884),
                (A[3119] = 1885),
                (A[3120] = 1885),
                (A[3123] = 1886),
                (A[3124] = 1886),
                (A[3127] = 1887),
                (A[3128] = 1887),
                (A[3131] = 1888),
                (A[3132] = 1888),
                (A[3135] = 1889),
                (A[3136] = 1889),
                (A[3139] = 1890),
                (A[3140] = 1890),
                (A[3143] = 1891),
                (A[3144] = 1891),
                (A[3147] = 1892),
                (A[3148] = 1892),
                (A[3153] = 580),
                (A[3154] = 581),
                (A[3157] = 584),
                (A[3158] = 585),
                (A[3161] = 588),
                (A[3162] = 589),
                (A[3165] = 891),
                (A[3166] = 892),
                (A[3169] = 1274),
                (A[3170] = 1275),
                (A[3173] = 1278),
                (A[3174] = 1279),
                (A[3181] = 7622),
                (A[3182] = 7623),
                (A[3282] = 11799),
                (A[3316] = 578),
                (A[3379] = 42785),
                (A[3393] = 1159),
                (A[3416] = 8377);
            }),
            ii = Ah(function (A) {
              (A[227] = 322), (A[264] = 261), (A[291] = 346);
            }),
            ia = Ah(function (A) {
              (A[1] = 32),
                (A[4] = 65),
                (A[5] = 192),
                (A[6] = 193),
                (A[9] = 196),
                (A[17] = 66),
                (A[18] = 67),
                (A[21] = 268),
                (A[24] = 68),
                (A[28] = 69),
                (A[29] = 200),
                (A[30] = 201),
                (A[32] = 282),
                (A[38] = 70),
                (A[39] = 71),
                (A[44] = 72),
                (A[47] = 73),
                (A[48] = 204),
                (A[49] = 205),
                (A[58] = 74),
                (A[60] = 75),
                (A[62] = 76),
                (A[68] = 77),
                (A[69] = 78),
                (A[75] = 79),
                (A[76] = 210),
                (A[80] = 214),
                (A[87] = 80),
                (A[89] = 81),
                (A[90] = 82),
                (A[92] = 344),
                (A[94] = 83),
                (A[97] = 352),
                (A[100] = 84),
                (A[104] = 85),
                (A[109] = 220),
                (A[115] = 86),
                (A[116] = 87),
                (A[121] = 88),
                (A[122] = 89),
                (A[124] = 221),
                (A[127] = 90),
                (A[129] = 381),
                (A[258] = 97),
                (A[259] = 224),
                (A[260] = 225),
                (A[263] = 228),
                (A[268] = 261),
                (A[271] = 98),
                (A[272] = 99),
                (A[273] = 263),
                (A[275] = 269),
                (A[282] = 100),
                (A[286] = 101),
                (A[287] = 232),
                (A[288] = 233),
                (A[290] = 283),
                (A[295] = 281),
                (A[296] = 102),
                (A[336] = 103),
                (A[346] = 104),
                (A[349] = 105),
                (A[350] = 236),
                (A[351] = 237),
                (A[361] = 106),
                (A[364] = 107),
                (A[367] = 108),
                (A[371] = 322),
                (A[373] = 109),
                (A[374] = 110),
                (A[381] = 111),
                (A[382] = 242),
                (A[383] = 243),
                (A[386] = 246),
                (A[393] = 112),
                (A[395] = 113),
                (A[396] = 114),
                (A[398] = 345),
                (A[400] = 115),
                (A[401] = 347),
                (A[403] = 353),
                (A[410] = 116),
                (A[437] = 117),
                (A[442] = 252),
                (A[448] = 118),
                (A[449] = 119),
                (A[454] = 120),
                (A[455] = 121),
                (A[457] = 253),
                (A[460] = 122),
                (A[462] = 382),
                (A[463] = 380),
                (A[853] = 44),
                (A[855] = 58),
                (A[856] = 46),
                (A[876] = 47),
                (A[878] = 45),
                (A[882] = 45),
                (A[894] = 40),
                (A[895] = 41),
                (A[896] = 91),
                (A[897] = 93),
                (A[923] = 64),
                (A[1004] = 48),
                (A[1005] = 49),
                (A[1006] = 50),
                (A[1007] = 51),
                (A[1008] = 52),
                (A[1009] = 53),
                (A[1010] = 54),
                (A[1011] = 55),
                (A[1012] = 56),
                (A[1013] = 57),
                (A[1081] = 37),
                (A[1085] = 43),
                (A[1086] = 45);
            });
          function is(A) {
            let t = t5(A);
            return t6()[t];
          }
          function ig(A) {
            let t = t5(A);
            return !!(t6()[t] || t4()[t] || iA()[t] || ie()[t]);
          }
          class ir {
            constructor(A = []) {
              this._map = A;
            }
            get length() {
              return this._map.length;
            }
            forEach(A) {
              for (let t in this._map) A(t, this._map[t].charCodeAt(0));
            }
            has(A) {
              return void 0 !== this._map[A];
            }
            get(A) {
              return this._map[A];
            }
            charCodeOf(A) {
              let t = this._map;
              if (t.length <= 65536) return t.indexOf(A);
              for (let i in t) if (t[i] === A) return 0 | i;
              return -1;
            }
            amend(A) {
              for (let t in A) this._map[t] = A[t];
            }
          }
          class io {
            constructor(A, t) {
              (this.firstChar = A), (this.lastChar = t);
            }
            get length() {
              return this.lastChar + 1 - this.firstChar;
            }
            forEach(A) {
              for (let t = this.firstChar, i = this.lastChar; t <= i; t++)
                A(t, t);
            }
            has(A) {
              return this.firstChar <= A && A <= this.lastChar;
            }
            get(A) {
              if (this.firstChar <= A && A <= this.lastChar)
                return String.fromCharCode(A);
            }
            charCodeOf(A) {
              return Number.isInteger(A) &&
                A >= this.firstChar &&
                A <= this.lastChar
                ? A
                : -1;
            }
            amend(A) {
              y('Should not call amend()');
            }
          }
          class iI {
            constructor(A, t) {
              this.properties = t;
              let i = new tx(A, t, !0);
              (this.cff = i.parse()), this.cff.duplicateFirstGlyph();
              let a = new tX(this.cff);
              this.seacs = this.cff.seacs;
              try {
                this.data = a.compile();
              } catch {
                m('Failed to compile font ' + t.loadedName), (this.data = A);
              }
              this._createBuiltInEncoding();
            }
            get numGlyphs() {
              return this.cff.charStrings.count;
            }
            getCharset() {
              return this.cff.charset.charset;
            }
            getGlyphMapping() {
              let A, t;
              let i = this.cff,
                a = this.properties,
                { cidToGidMap: s, cMap: g } = a,
                r = i.charset.charset;
              if (a.composite) {
                let a, n;
                if (s?.length > 0) {
                  a = Object.create(null);
                  for (let A = 0, t = s.length; A < t; A++) {
                    let t = s[A];
                    void 0 !== t && (a[t] = A);
                  }
                }
                if (((A = Object.create(null)), i.isCIDFont))
                  for (t = 0; t < r.length; t++) {
                    let i = r[t];
                    (n = g.charCodeOf(i)),
                      void 0 !== a?.[n] && (n = a[n]),
                      (A[n] = t);
                  }
                else
                  for (t = 0; t < i.charStrings.count; t++)
                    A[(n = g.charCodeOf(t))] = t;
                return A;
              }
              let n = i.encoding ? i.encoding.encoding : null;
              return (
                a.isInternalFont && (n = a.defaultEncoding), (A = t3(a, n, r))
              );
            }
            hasGlyphId(A) {
              return this.cff.hasGlyphId(A);
            }
            _createBuiltInEncoding() {
              let { charset: A, encoding: t } = this.cff;
              if (!A || !t) return;
              let i = A.charset,
                a = t.encoding,
                s = [];
              for (let A in a) {
                let t = a[A];
                if (t >= 0) {
                  let a = i[t];
                  a && (s[A] = a);
                }
              }
              s.length > 0 && (this.properties.builtInEncoding = s);
            }
          }
          function il(A, t) {
            return (
              ((A[t] << 24) | (A[t + 1] << 16) | (A[t + 2] << 8) | A[t + 3]) >>>
              0
            );
          }
          function iC(A, t) {
            return (A[t] << 8) | A[t + 1];
          }
          function iB(A, t) {
            return ((A[t] << 24) | (A[t + 1] << 16)) >> 16;
          }
          function ih(A, t) {
            return (A[t] << 24) >> 24;
          }
          function iQ(A, t) {
            return iB(A, t) / 16384;
          }
          function ic(A) {
            let t = A.length,
              i = 32768;
            return t < 1240 ? (i = 107) : t < 33900 && (i = 1131), i;
          }
          function iE(A, t) {
            let i = t.codePointAt(0),
              a = 0,
              s = 0,
              g = A.length - 1;
            for (; s < g; ) {
              let t = (s + g + 1) >> 1;
              i < A[t].start ? (g = t - 1) : (s = t);
            }
            return (
              A[s].start <= i &&
                i <= A[s].end &&
                (a =
                  (A[s].idDelta + (A[s].ids ? A[s].ids[i - A[s].start] : i)) &
                  65535),
              { charCode: i, glyphId: a }
            );
          }
          let iu = [];
          class id {
            cmds = [];
            add(A, t) {
              if (t) {
                if (Ak(t, null)) this.cmds.push(A, ...t);
                else {
                  m(
                    `Commands.add - "${A}" has at least one non-number arg: "${t}".`
                  );
                  let i = t.map((A) => ('number' == typeof A ? A : 0));
                  this.cmds.push(A, ...i);
                }
              } else this.cmds.push(A);
            }
          }
          class ip {
            constructor(A) {
              (this.fontMatrix = A),
                (this.compiledGlyphs = Object.create(null)),
                (this.compiledCharCodeToGlyphId = Object.create(null));
            }
            getPathJs(A) {
              let { charCode: t, glyphId: i } = iE(this.cmap, A),
                a,
                s = this.compiledGlyphs[i];
              if (!s) {
                try {
                  s = this.compileGlyph(this.glyphs[i], i);
                } catch (A) {
                  (s = iu), (a = A);
                }
                this.compiledGlyphs[i] = s;
              }
              if (((this.compiledCharCodeToGlyphId[t] ??= i), a)) throw a;
              return s;
            }
            compileGlyph(A, t) {
              if (!A || 0 === A.length || 14 === A[0]) return iu;
              let i = this.fontMatrix;
              if (this.isCFFCIDFont) {
                let A = this.fdSelect.getFDIndex(t);
                A >= 0 && A < this.fdArray.length
                  ? (i = this.fdArray[A].getByName('FontMatrix') || l)
                  : m('Invalid fd index for glyph index.');
              }
              let a = new id();
              return (
                a.add(5),
                a.add(7, i.slice()),
                a.add(6),
                this.compileGlyphImpl(A, a, t),
                a.add(4),
                a.cmds
              );
            }
            compileGlyphImpl() {
              y('Children classes should implement this.');
            }
            hasBuiltPath(A) {
              let { charCode: t, glyphId: i } = iE(this.cmap, A);
              return (
                void 0 !== this.compiledGlyphs[i] &&
                void 0 !== this.compiledCharCodeToGlyphId[t]
              );
            }
          }
          class im extends ip {
            constructor(A, t, i) {
              super(i || [488e-6, 0, 0, 488e-6, 0, 0]),
                (this.glyphs = A),
                (this.cmap = t);
            }
            compileGlyphImpl(A, t) {
              !(function A(t, i, a) {
                function s(A, t, a, s) {
                  i.add(3, [A, t, a, s]);
                }
                let g = 0,
                  r = iB(t, g),
                  n,
                  o = 0,
                  I = 0;
                if (((g += 10), r < 0))
                  do {
                    let s, r;
                    n = iC(t, g);
                    let l = iC(t, g + 2);
                    (g += 4),
                      1 & n
                        ? (2 & n
                            ? ((s = iB(t, g)), (r = iB(t, g + 2)))
                            : ((s = iC(t, g)), (r = iC(t, g + 2))),
                          (g += 4))
                        : 2 & n
                          ? ((s = ih(t, g++)), (r = ih(t, g++)))
                          : ((s = t[g++]), (r = t[g++])),
                      2 & n ? ((o = s), (I = r)) : ((o = 0), (I = 0));
                    let C = 1,
                      B = 1,
                      h = 0,
                      Q = 0;
                    8 & n
                      ? ((C = B = iQ(t, g)), (g += 2))
                      : 64 & n
                        ? ((C = iQ(t, g)), (B = iQ(t, g + 2)), (g += 4))
                        : 128 & n &&
                          ((C = iQ(t, g)),
                          (h = iQ(t, g + 2)),
                          (Q = iQ(t, g + 4)),
                          (B = iQ(t, g + 6)),
                          (g += 8));
                    let c = a.glyphs[l];
                    c &&
                      (i.add(5),
                      i.add(7, [C, h, Q, B, o, I]),
                      A(c, i, a),
                      i.add(4));
                  } while (32 & n);
                else {
                  let A, a;
                  let Q = [];
                  for (A = 0; A < r; A++) Q.push(iC(t, g)), (g += 2);
                  g += 2 + iC(t, g);
                  let c = Q.at(-1) + 1,
                    E = [];
                  for (; E.length < c; ) {
                    n = t[g++];
                    let A = 1;
                    for (8 & n && (A += t[g++]); A-- > 0; )
                      E.push({ flags: n });
                  }
                  for (A = 0; A < c; A++) {
                    switch (18 & E[A].flags) {
                      case 0:
                        (o += iB(t, g)), (g += 2);
                        break;
                      case 2:
                        o -= t[g++];
                        break;
                      case 18:
                        o += t[g++];
                    }
                    E[A].x = o;
                  }
                  for (A = 0; A < c; A++) {
                    switch (36 & E[A].flags) {
                      case 0:
                        (I += iB(t, g)), (g += 2);
                        break;
                      case 4:
                        I -= t[g++];
                        break;
                      case 36:
                        I += t[g++];
                    }
                    E[A].y = I;
                  }
                  let u = 0;
                  for (g = 0; g < r; g++) {
                    var l, C, B, h;
                    let t = Q[g],
                      r = E.slice(u, t + 1);
                    if (1 & r[0].flags) r.push(r[0]);
                    else if (1 & r.at(-1).flags) r.unshift(r.at(-1));
                    else {
                      let A = {
                        flags: 1,
                        x: (r[0].x + r.at(-1).x) / 2,
                        y: (r[0].y + r.at(-1).y) / 2,
                      };
                      r.unshift(A), r.push(A);
                    }
                    for (
                      l = r[0].x,
                        C = r[0].y,
                        i.add(1, [l, C]),
                        A = 1,
                        a = r.length;
                      A < a;
                      A++
                    )
                      1 & r[A].flags
                        ? ((B = r[A].x), (h = r[A].y), i.add(2, [B, h]))
                        : 1 & r[A + 1].flags
                          ? (s(r[A].x, r[A].y, r[A + 1].x, r[A + 1].y), A++)
                          : s(
                              r[A].x,
                              r[A].y,
                              (r[A].x + r[A + 1].x) / 2,
                              (r[A].y + r[A + 1].y) / 2
                            );
                    u = t + 1;
                  }
                }
              })(A, t, this);
            }
          }
          class iy extends ip {
            constructor(A, t, i, a) {
              super(i || [0.001, 0, 0, 0.001, 0, 0]),
                (this.glyphs = A.glyphs),
                (this.gsubrs = A.gsubrs || []),
                (this.subrs = A.subrs || []),
                (this.cmap = t),
                (this.glyphNameMap = a || tV()),
                (this.gsubrsBias = ic(this.gsubrs)),
                (this.subrsBias = ic(this.subrs)),
                (this.isCFFCIDFont = A.isCFFCIDFont),
                (this.fdSelect = A.fdSelect),
                (this.fdArray = A.fdArray);
            }
            compileGlyphImpl(A, t, i) {
              !(function A(t, i, a, s) {
                function g(A, t) {
                  i.add(1, [A, t]);
                }
                function r(A, t) {
                  i.add(2, [A, t]);
                }
                function n(A, t, a, s, g, r) {
                  i.add(0, [A, t, a, s, g, r]);
                }
                let o = [],
                  I = 0,
                  l = 0,
                  C = 0;
                !(function t(B) {
                  let h = 0;
                  for (; h < B.length; ) {
                    let Q,
                      c,
                      E,
                      u,
                      d,
                      f,
                      p,
                      y,
                      w,
                      D = !1,
                      b = B[h++];
                    switch (b) {
                      case 1:
                      case 3:
                      case 18:
                      case 23:
                        (C += o.length >> 1), (D = !0);
                        break;
                      case 4:
                        (l += o.pop()), g(I, l), (D = !0);
                        break;
                      case 5:
                        for (; o.length > 0; )
                          (I += o.shift()), (l += o.shift()), r(I, l);
                        break;
                      case 6:
                        for (
                          ;
                          o.length > 0 &&
                          (r((I += o.shift()), l), 0 !== o.length);

                        )
                          (l += o.shift()), r(I, l);
                        break;
                      case 7:
                        for (
                          ;
                          o.length > 0 &&
                          ((l += o.shift()), r(I, l), 0 !== o.length);

                        )
                          r((I += o.shift()), l);
                        break;
                      case 8:
                        for (; o.length > 0; )
                          (Q = I + o.shift()),
                            (E = l + o.shift()),
                            (c = Q + o.shift()),
                            (u = E + o.shift()),
                            (I = c + o.shift()),
                            (l = u + o.shift()),
                            n(Q, E, c, u, I, l);
                        break;
                      case 10:
                        if (((y = o.pop()), (w = null), a.isCFFCIDFont)) {
                          let A = a.fdSelect.getFDIndex(s);
                          if (A >= 0 && A < a.fdArray.length) {
                            let t;
                            let i = a.fdArray[A];
                            i.privateDict?.subrsIndex &&
                              (t = i.privateDict.subrsIndex.objects),
                              t && ((y += ic(t)), (w = t[y]));
                          } else m('Invalid fd index for glyph index.');
                        } else w = a.subrs[y + a.subrsBias];
                        w && t(w);
                        break;
                      case 11:
                        return;
                      case 12:
                        switch ((b = B[h++])) {
                          case 34:
                            (c = (Q = I + o.shift()) + o.shift()),
                              (d = l + o.shift()),
                              (I = c + o.shift()),
                              n(Q, l, c, d, I, d),
                              (I =
                                (c = (Q = I + o.shift()) + o.shift()) +
                                o.shift()),
                              n(Q, d, c, l, I, l);
                            break;
                          case 35:
                            (Q = I + o.shift()),
                              (E = l + o.shift()),
                              (c = Q + o.shift()),
                              (u = E + o.shift()),
                              (I = c + o.shift()),
                              (l = u + o.shift()),
                              n(Q, E, c, u, I, l),
                              (Q = I + o.shift()),
                              (E = l + o.shift()),
                              (c = Q + o.shift()),
                              (u = E + o.shift()),
                              (I = c + o.shift()),
                              (l = u + o.shift()),
                              n(Q, E, c, u, I, l),
                              o.pop();
                            break;
                          case 36:
                            (Q = I + o.shift()),
                              (d = l + o.shift()),
                              (c = Q + o.shift()),
                              (f = d + o.shift()),
                              (I = c + o.shift()),
                              n(Q, d, c, f, I, f),
                              (c = (Q = I + o.shift()) + o.shift()),
                              (p = f + o.shift()),
                              (I = c + o.shift()),
                              n(Q, f, c, p, I, l);
                            break;
                          case 37:
                            let k = I,
                              F = l;
                            (Q = I + o.shift()),
                              (E = l + o.shift()),
                              (c = Q + o.shift()),
                              (u = E + o.shift()),
                              (I = c + o.shift()),
                              (l = u + o.shift()),
                              n(Q, E, c, u, I, l),
                              (Q = I + o.shift()),
                              (E = l + o.shift()),
                              (c = Q + o.shift()),
                              (u = E + o.shift()),
                              Math.abs((I = c) - k) > Math.abs((l = u) - F)
                                ? (I += o.shift())
                                : (l += o.shift()),
                              n(Q, E, c, u, I, l);
                            break;
                          default:
                            throw new x(`unknown operator: 12 ${b}`);
                        }
                        break;
                      case 14:
                        if (o.length >= 4) {
                          let t = o.pop(),
                            s = o.pop();
                          (l = o.pop()),
                            (I = o.pop()),
                            i.add(5),
                            i.add(8, [I, l]);
                          let g = iE(
                            a.cmap,
                            String.fromCharCode(a.glyphNameMap[tD[t]])
                          );
                          A(a.glyphs[g.glyphId], i, a, g.glyphId),
                            i.add(4),
                            (g = iE(
                              a.cmap,
                              String.fromCharCode(a.glyphNameMap[tD[s]])
                            )),
                            A(a.glyphs[g.glyphId], i, a, g.glyphId);
                        }
                        return;
                      case 19:
                      case 20:
                        (C += o.length >> 1), (h += (C + 7) >> 3), (D = !0);
                        break;
                      case 21:
                        (l += o.pop()), g((I += o.pop()), l), (D = !0);
                        break;
                      case 22:
                        g((I += o.pop()), l), (D = !0);
                        break;
                      case 24:
                        for (; o.length > 2; )
                          (Q = I + o.shift()),
                            (E = l + o.shift()),
                            (c = Q + o.shift()),
                            (u = E + o.shift()),
                            (I = c + o.shift()),
                            (l = u + o.shift()),
                            n(Q, E, c, u, I, l);
                        (I += o.shift()), (l += o.shift()), r(I, l);
                        break;
                      case 25:
                        for (; o.length > 6; )
                          (I += o.shift()), (l += o.shift()), r(I, l);
                        (Q = I + o.shift()),
                          (E = l + o.shift()),
                          (c = Q + o.shift()),
                          (u = E + o.shift()),
                          (I = c + o.shift()),
                          (l = u + o.shift()),
                          n(Q, E, c, u, I, l);
                        break;
                      case 26:
                        for (o.length % 2 && (I += o.shift()); o.length > 0; )
                          (Q = I),
                            (E = l + o.shift()),
                            (c = Q + o.shift()),
                            (u = E + o.shift()),
                            (I = c),
                            (l = u + o.shift()),
                            n(Q, E, c, u, I, l);
                        break;
                      case 27:
                        for (o.length % 2 && (l += o.shift()); o.length > 0; )
                          (Q = I + o.shift()),
                            (E = l),
                            (c = Q + o.shift()),
                            (u = E + o.shift()),
                            (I = c + o.shift()),
                            (l = u),
                            n(Q, E, c, u, I, l);
                        break;
                      case 28:
                        o.push(((B[h] << 24) | (B[h + 1] << 16)) >> 16),
                          (h += 2);
                        break;
                      case 29:
                        (y = o.pop() + a.gsubrsBias), (w = a.gsubrs[y]) && t(w);
                        break;
                      case 30:
                        for (
                          ;
                          o.length > 0 &&
                          ((Q = I),
                          (E = l + o.shift()),
                          (c = Q + o.shift()),
                          (u = E + o.shift()),
                          (I = c + o.shift()),
                          (l = u + (1 === o.length ? o.shift() : 0)),
                          n(Q, E, c, u, I, l),
                          0 !== o.length);

                        )
                          (Q = I + o.shift()),
                            (E = l),
                            (c = Q + o.shift()),
                            (l = (u = E + o.shift()) + o.shift()),
                            (I = c + (1 === o.length ? o.shift() : 0)),
                            n(Q, E, c, u, I, l);
                        break;
                      case 31:
                        for (
                          ;
                          o.length > 0 &&
                          ((Q = I + o.shift()),
                          (E = l),
                          (c = Q + o.shift()),
                          (l = (u = E + o.shift()) + o.shift()),
                          (I = c + (1 === o.length ? o.shift() : 0)),
                          n(Q, E, c, u, I, l),
                          0 !== o.length);

                        )
                          (Q = I),
                            (E = l + o.shift()),
                            (c = Q + o.shift()),
                            (u = E + o.shift()),
                            (I = c + o.shift()),
                            (l = u + (1 === o.length ? o.shift() : 0)),
                            n(Q, E, c, u, I, l);
                        break;
                      default:
                        if (b < 32) throw new x(`unknown operator: ${b}`);
                        b < 247
                          ? o.push(b - 139)
                          : b < 251
                            ? o.push(256 * (b - 247) + B[h++] + 108)
                            : b < 255
                              ? o.push(-(256 * (b - 251)) - B[h++] - 108)
                              : (o.push(
                                  ((B[h] << 24) |
                                    (B[h + 1] << 16) |
                                    (B[h + 2] << 8) |
                                    B[h + 3]) /
                                    65536
                                ),
                                (h += 4));
                    }
                    D && (o.length = 0);
                  }
                })(t);
              })(A, t, this, i);
            }
          }
          class iw {
            static create(A, t) {
              let i, a, s, g, r, n;
              let o = new Uint8Array(A.data),
                I = iC(o, 4);
              for (let A = 0, l = 12; A < I; A++, l += 16) {
                let A = M(o.subarray(l, l + 4)),
                  I = il(o, l + 8),
                  C = il(o, l + 12);
                switch (A) {
                  case 'cmap':
                    i = (function (A, t, i) {
                      let a, s, g;
                      let r = 1 === iC(A, t + 2) ? il(A, t + 8) : il(A, t + 16),
                        n = iC(A, t + r);
                      if (4 === n) {
                        iC(A, t + r + 2);
                        let i = iC(A, t + r + 6) >> 1;
                        for (g = 0, s = t + r + 14, a = []; g < i; g++, s += 2)
                          a[g] = { end: iC(A, s) };
                        for (s += 2, g = 0; g < i; g++, s += 2)
                          a[g].start = iC(A, s);
                        for (g = 0; g < i; g++, s += 2) a[g].idDelta = iC(A, s);
                        for (g = 0; g < i; g++, s += 2) {
                          let t = iC(A, s);
                          if (0 !== t) {
                            a[g].ids = [];
                            for (
                              let i = 0, r = a[g].end - a[g].start + 1;
                              i < r;
                              i++
                            )
                              (a[g].ids[i] = iC(A, s + t)), (t += 2);
                          }
                        }
                        return a;
                      }
                      if (12 === n) {
                        let i = il(A, t + r + 12);
                        for (g = 0, s = t + r + 16, a = []; g < i; g++)
                          (t = il(A, s)),
                            a.push({
                              start: t,
                              end: il(A, s + 4),
                              idDelta: il(A, s + 8) - t,
                            }),
                            (s += 12);
                        return a;
                      }
                      throw new x(`unsupported cmap: ${n}`);
                    })(o, I);
                    break;
                  case 'glyf':
                    a = o.subarray(I, I + C);
                    break;
                  case 'loca':
                    s = o.subarray(I, I + C);
                    break;
                  case 'head':
                    (n = iC(o, I + 18)), (r = iC(o, I + 50));
                    break;
                  case 'CFF ':
                    g = (function (A, t, i, a) {
                      let s = new tx(new AZ(A, t, i - t), {}, a).parse();
                      return {
                        glyphs: s.charStrings.objects,
                        subrs: s.topDict.privateDict?.subrsIndex?.objects,
                        gsubrs: s.globalSubrIndex?.objects,
                        isCFFCIDFont: s.isCIDFont,
                        fdSelect: s.fdSelect,
                        fdArray: s.fdArray,
                      };
                    })(o, I, I + C, t);
                }
              }
              if (a) {
                let t = n ? [1 / n, 0, 0, 1 / n, 0, 0] : A.fontMatrix;
                return new im(
                  (function (A, t, i) {
                    let a, s;
                    i
                      ? ((a = 4), (s = il))
                      : ((a = 2), (s = (A, t) => 2 * iC(A, t)));
                    let g = [],
                      r = s(t, 0);
                    for (let i = a; i < t.length; i += a) {
                      let a = s(t, i);
                      g.push(A.subarray(r, a)), (r = a);
                    }
                    return g;
                  })(a, s, r),
                  i,
                  t
                );
              }
              return new iy(g, i, A.fontMatrix, A.glyphNameMap);
            }
          }
          let iD = Ah(function (A) {
              (A.Courier = 600),
                (A['Courier-Bold'] = 600),
                (A['Courier-BoldOblique'] = 600),
                (A['Courier-Oblique'] = 600),
                (A.Helvetica = Ah(function (A) {
                  (A.space = 278),
                    (A.exclam = 278),
                    (A.quotedbl = 355),
                    (A.numbersign = 556),
                    (A.dollar = 556),
                    (A.percent = 889),
                    (A.ampersand = 667),
                    (A.quoteright = 222),
                    (A.parenleft = 333),
                    (A.parenright = 333),
                    (A.asterisk = 389),
                    (A.plus = 584),
                    (A.comma = 278),
                    (A.hyphen = 333),
                    (A.period = 278),
                    (A.slash = 278),
                    (A.zero = 556),
                    (A.one = 556),
                    (A.two = 556),
                    (A.three = 556),
                    (A.four = 556),
                    (A.five = 556),
                    (A.six = 556),
                    (A.seven = 556),
                    (A.eight = 556),
                    (A.nine = 556),
                    (A.colon = 278),
                    (A.semicolon = 278),
                    (A.less = 584),
                    (A.equal = 584),
                    (A.greater = 584),
                    (A.question = 556),
                    (A.at = 1015),
                    (A.A = 667),
                    (A.B = 667),
                    (A.C = 722),
                    (A.D = 722),
                    (A.E = 667),
                    (A.F = 611),
                    (A.G = 778),
                    (A.H = 722),
                    (A.I = 278),
                    (A.J = 500),
                    (A.K = 667),
                    (A.L = 556),
                    (A.M = 833),
                    (A.N = 722),
                    (A.O = 778),
                    (A.P = 667),
                    (A.Q = 778),
                    (A.R = 722),
                    (A.S = 667),
                    (A.T = 611),
                    (A.U = 722),
                    (A.V = 667),
                    (A.W = 944),
                    (A.X = 667),
                    (A.Y = 667),
                    (A.Z = 611),
                    (A.bracketleft = 278),
                    (A.backslash = 278),
                    (A.bracketright = 278),
                    (A.asciicircum = 469),
                    (A.underscore = 556),
                    (A.quoteleft = 222),
                    (A.a = 556),
                    (A.b = 556),
                    (A.c = 500),
                    (A.d = 556),
                    (A.e = 556),
                    (A.f = 278),
                    (A.g = 556),
                    (A.h = 556),
                    (A.i = 222),
                    (A.j = 222),
                    (A.k = 500),
                    (A.l = 222),
                    (A.m = 833),
                    (A.n = 556),
                    (A.o = 556),
                    (A.p = 556),
                    (A.q = 556),
                    (A.r = 333),
                    (A.s = 500),
                    (A.t = 278),
                    (A.u = 556),
                    (A.v = 500),
                    (A.w = 722),
                    (A.x = 500),
                    (A.y = 500),
                    (A.z = 500),
                    (A.braceleft = 334),
                    (A.bar = 260),
                    (A.braceright = 334),
                    (A.asciitilde = 584),
                    (A.exclamdown = 333),
                    (A.cent = 556),
                    (A.sterling = 556),
                    (A.fraction = 167),
                    (A.yen = 556),
                    (A.florin = 556),
                    (A.section = 556),
                    (A.currency = 556),
                    (A.quotesingle = 191),
                    (A.quotedblleft = 333),
                    (A.guillemotleft = 556),
                    (A.guilsinglleft = 333),
                    (A.guilsinglright = 333),
                    (A.fi = 500),
                    (A.fl = 500),
                    (A.endash = 556),
                    (A.dagger = 556),
                    (A.daggerdbl = 556),
                    (A.periodcentered = 278),
                    (A.paragraph = 537),
                    (A.bullet = 350),
                    (A.quotesinglbase = 222),
                    (A.quotedblbase = 333),
                    (A.quotedblright = 333),
                    (A.guillemotright = 556),
                    (A.ellipsis = 1e3),
                    (A.perthousand = 1e3),
                    (A.questiondown = 611),
                    (A.grave = 333),
                    (A.acute = 333),
                    (A.circumflex = 333),
                    (A.tilde = 333),
                    (A.macron = 333),
                    (A.breve = 333),
                    (A.dotaccent = 333),
                    (A.dieresis = 333),
                    (A.ring = 333),
                    (A.cedilla = 333),
                    (A.hungarumlaut = 333),
                    (A.ogonek = 333),
                    (A.caron = 333),
                    (A.emdash = 1e3),
                    (A.AE = 1e3),
                    (A.ordfeminine = 370),
                    (A.Lslash = 556),
                    (A.Oslash = 778),
                    (A.OE = 1e3),
                    (A.ordmasculine = 365),
                    (A.ae = 889),
                    (A.dotlessi = 278),
                    (A.lslash = 222),
                    (A.oslash = 611),
                    (A.oe = 944),
                    (A.germandbls = 611),
                    (A.Idieresis = 278),
                    (A.eacute = 556),
                    (A.abreve = 556),
                    (A.uhungarumlaut = 556),
                    (A.ecaron = 556),
                    (A.Ydieresis = 667),
                    (A.divide = 584),
                    (A.Yacute = 667),
                    (A.Acircumflex = 667),
                    (A.aacute = 556),
                    (A.Ucircumflex = 722),
                    (A.yacute = 500),
                    (A.scommaaccent = 500),
                    (A.ecircumflex = 556),
                    (A.Uring = 722),
                    (A.Udieresis = 722),
                    (A.aogonek = 556),
                    (A.Uacute = 722),
                    (A.uogonek = 556),
                    (A.Edieresis = 667),
                    (A.Dcroat = 722),
                    (A.commaaccent = 250),
                    (A.copyright = 737),
                    (A.Emacron = 667),
                    (A.ccaron = 500),
                    (A.aring = 556),
                    (A.Ncommaaccent = 722),
                    (A.lacute = 222),
                    (A.agrave = 556),
                    (A.Tcommaaccent = 611),
                    (A.Cacute = 722),
                    (A.atilde = 556),
                    (A.Edotaccent = 667),
                    (A.scaron = 500),
                    (A.scedilla = 500),
                    (A.iacute = 278),
                    (A.lozenge = 471),
                    (A.Rcaron = 722),
                    (A.Gcommaaccent = 778),
                    (A.ucircumflex = 556),
                    (A.acircumflex = 556),
                    (A.Amacron = 667),
                    (A.rcaron = 333),
                    (A.ccedilla = 500),
                    (A.Zdotaccent = 611),
                    (A.Thorn = 667),
                    (A.Omacron = 778),
                    (A.Racute = 722),
                    (A.Sacute = 667),
                    (A.dcaron = 643),
                    (A.Umacron = 722),
                    (A.uring = 556),
                    (A.threesuperior = 333),
                    (A.Ograve = 778),
                    (A.Agrave = 667),
                    (A.Abreve = 667),
                    (A.multiply = 584),
                    (A.uacute = 556),
                    (A.Tcaron = 611),
                    (A.partialdiff = 476),
                    (A.ydieresis = 500),
                    (A.Nacute = 722),
                    (A.icircumflex = 278),
                    (A.Ecircumflex = 667),
                    (A.adieresis = 556),
                    (A.edieresis = 556),
                    (A.cacute = 500),
                    (A.nacute = 556),
                    (A.umacron = 556),
                    (A.Ncaron = 722),
                    (A.Iacute = 278),
                    (A.plusminus = 584),
                    (A.brokenbar = 260),
                    (A.registered = 737),
                    (A.Gbreve = 778),
                    (A.Idotaccent = 278),
                    (A.summation = 600),
                    (A.Egrave = 667),
                    (A.racute = 333),
                    (A.omacron = 556),
                    (A.Zacute = 611),
                    (A.Zcaron = 611),
                    (A.greaterequal = 549),
                    (A.Eth = 722),
                    (A.Ccedilla = 722),
                    (A.lcommaaccent = 222),
                    (A.tcaron = 317),
                    (A.eogonek = 556),
                    (A.Uogonek = 722),
                    (A.Aacute = 667),
                    (A.Adieresis = 667),
                    (A.egrave = 556),
                    (A.zacute = 500),
                    (A.iogonek = 222),
                    (A.Oacute = 778),
                    (A.oacute = 556),
                    (A.amacron = 556),
                    (A.sacute = 500),
                    (A.idieresis = 278),
                    (A.Ocircumflex = 778),
                    (A.Ugrave = 722),
                    (A.Delta = 612),
                    (A.thorn = 556),
                    (A.twosuperior = 333),
                    (A.Odieresis = 778),
                    (A.mu = 556),
                    (A.igrave = 278),
                    (A.ohungarumlaut = 556),
                    (A.Eogonek = 667),
                    (A.dcroat = 556),
                    (A.threequarters = 834),
                    (A.Scedilla = 667),
                    (A.lcaron = 299),
                    (A.Kcommaaccent = 667),
                    (A.Lacute = 556),
                    (A.trademark = 1e3),
                    (A.edotaccent = 556),
                    (A.Igrave = 278),
                    (A.Imacron = 278),
                    (A.Lcaron = 556),
                    (A.onehalf = 834),
                    (A.lessequal = 549),
                    (A.ocircumflex = 556),
                    (A.ntilde = 556),
                    (A.Uhungarumlaut = 722),
                    (A.Eacute = 667),
                    (A.emacron = 556),
                    (A.gbreve = 556),
                    (A.onequarter = 834),
                    (A.Scaron = 667),
                    (A.Scommaaccent = 667),
                    (A.Ohungarumlaut = 778),
                    (A.degree = 400),
                    (A.ograve = 556),
                    (A.Ccaron = 722),
                    (A.ugrave = 556),
                    (A.radical = 453),
                    (A.Dcaron = 722),
                    (A.rcommaaccent = 333),
                    (A.Ntilde = 722),
                    (A.otilde = 556),
                    (A.Rcommaaccent = 722),
                    (A.Lcommaaccent = 556),
                    (A.Atilde = 667),
                    (A.Aogonek = 667),
                    (A.Aring = 667),
                    (A.Otilde = 778),
                    (A.zdotaccent = 500),
                    (A.Ecaron = 667),
                    (A.Iogonek = 278),
                    (A.kcommaaccent = 500),
                    (A.minus = 584),
                    (A.Icircumflex = 278),
                    (A.ncaron = 556),
                    (A.tcommaaccent = 278),
                    (A.logicalnot = 584),
                    (A.odieresis = 556),
                    (A.udieresis = 556),
                    (A.notequal = 549),
                    (A.gcommaaccent = 556),
                    (A.eth = 556),
                    (A.zcaron = 500),
                    (A.ncommaaccent = 556),
                    (A.onesuperior = 333),
                    (A.imacron = 278),
                    (A.Euro = 556);
                })),
                (A['Helvetica-Bold'] = Ah(function (A) {
                  (A.space = 278),
                    (A.exclam = 333),
                    (A.quotedbl = 474),
                    (A.numbersign = 556),
                    (A.dollar = 556),
                    (A.percent = 889),
                    (A.ampersand = 722),
                    (A.quoteright = 278),
                    (A.parenleft = 333),
                    (A.parenright = 333),
                    (A.asterisk = 389),
                    (A.plus = 584),
                    (A.comma = 278),
                    (A.hyphen = 333),
                    (A.period = 278),
                    (A.slash = 278),
                    (A.zero = 556),
                    (A.one = 556),
                    (A.two = 556),
                    (A.three = 556),
                    (A.four = 556),
                    (A.five = 556),
                    (A.six = 556),
                    (A.seven = 556),
                    (A.eight = 556),
                    (A.nine = 556),
                    (A.colon = 333),
                    (A.semicolon = 333),
                    (A.less = 584),
                    (A.equal = 584),
                    (A.greater = 584),
                    (A.question = 611),
                    (A.at = 975),
                    (A.A = 722),
                    (A.B = 722),
                    (A.C = 722),
                    (A.D = 722),
                    (A.E = 667),
                    (A.F = 611),
                    (A.G = 778),
                    (A.H = 722),
                    (A.I = 278),
                    (A.J = 556),
                    (A.K = 722),
                    (A.L = 611),
                    (A.M = 833),
                    (A.N = 722),
                    (A.O = 778),
                    (A.P = 667),
                    (A.Q = 778),
                    (A.R = 722),
                    (A.S = 667),
                    (A.T = 611),
                    (A.U = 722),
                    (A.V = 667),
                    (A.W = 944),
                    (A.X = 667),
                    (A.Y = 667),
                    (A.Z = 611),
                    (A.bracketleft = 333),
                    (A.backslash = 278),
                    (A.bracketright = 333),
                    (A.asciicircum = 584),
                    (A.underscore = 556),
                    (A.quoteleft = 278),
                    (A.a = 556),
                    (A.b = 611),
                    (A.c = 556),
                    (A.d = 611),
                    (A.e = 556),
                    (A.f = 333),
                    (A.g = 611),
                    (A.h = 611),
                    (A.i = 278),
                    (A.j = 278),
                    (A.k = 556),
                    (A.l = 278),
                    (A.m = 889),
                    (A.n = 611),
                    (A.o = 611),
                    (A.p = 611),
                    (A.q = 611),
                    (A.r = 389),
                    (A.s = 556),
                    (A.t = 333),
                    (A.u = 611),
                    (A.v = 556),
                    (A.w = 778),
                    (A.x = 556),
                    (A.y = 556),
                    (A.z = 500),
                    (A.braceleft = 389),
                    (A.bar = 280),
                    (A.braceright = 389),
                    (A.asciitilde = 584),
                    (A.exclamdown = 333),
                    (A.cent = 556),
                    (A.sterling = 556),
                    (A.fraction = 167),
                    (A.yen = 556),
                    (A.florin = 556),
                    (A.section = 556),
                    (A.currency = 556),
                    (A.quotesingle = 238),
                    (A.quotedblleft = 500),
                    (A.guillemotleft = 556),
                    (A.guilsinglleft = 333),
                    (A.guilsinglright = 333),
                    (A.fi = 611),
                    (A.fl = 611),
                    (A.endash = 556),
                    (A.dagger = 556),
                    (A.daggerdbl = 556),
                    (A.periodcentered = 278),
                    (A.paragraph = 556),
                    (A.bullet = 350),
                    (A.quotesinglbase = 278),
                    (A.quotedblbase = 500),
                    (A.quotedblright = 500),
                    (A.guillemotright = 556),
                    (A.ellipsis = 1e3),
                    (A.perthousand = 1e3),
                    (A.questiondown = 611),
                    (A.grave = 333),
                    (A.acute = 333),
                    (A.circumflex = 333),
                    (A.tilde = 333),
                    (A.macron = 333),
                    (A.breve = 333),
                    (A.dotaccent = 333),
                    (A.dieresis = 333),
                    (A.ring = 333),
                    (A.cedilla = 333),
                    (A.hungarumlaut = 333),
                    (A.ogonek = 333),
                    (A.caron = 333),
                    (A.emdash = 1e3),
                    (A.AE = 1e3),
                    (A.ordfeminine = 370),
                    (A.Lslash = 611),
                    (A.Oslash = 778),
                    (A.OE = 1e3),
                    (A.ordmasculine = 365),
                    (A.ae = 889),
                    (A.dotlessi = 278),
                    (A.lslash = 278),
                    (A.oslash = 611),
                    (A.oe = 944),
                    (A.germandbls = 611),
                    (A.Idieresis = 278),
                    (A.eacute = 556),
                    (A.abreve = 556),
                    (A.uhungarumlaut = 611),
                    (A.ecaron = 556),
                    (A.Ydieresis = 667),
                    (A.divide = 584),
                    (A.Yacute = 667),
                    (A.Acircumflex = 722),
                    (A.aacute = 556),
                    (A.Ucircumflex = 722),
                    (A.yacute = 556),
                    (A.scommaaccent = 556),
                    (A.ecircumflex = 556),
                    (A.Uring = 722),
                    (A.Udieresis = 722),
                    (A.aogonek = 556),
                    (A.Uacute = 722),
                    (A.uogonek = 611),
                    (A.Edieresis = 667),
                    (A.Dcroat = 722),
                    (A.commaaccent = 250),
                    (A.copyright = 737),
                    (A.Emacron = 667),
                    (A.ccaron = 556),
                    (A.aring = 556),
                    (A.Ncommaaccent = 722),
                    (A.lacute = 278),
                    (A.agrave = 556),
                    (A.Tcommaaccent = 611),
                    (A.Cacute = 722),
                    (A.atilde = 556),
                    (A.Edotaccent = 667),
                    (A.scaron = 556),
                    (A.scedilla = 556),
                    (A.iacute = 278),
                    (A.lozenge = 494),
                    (A.Rcaron = 722),
                    (A.Gcommaaccent = 778),
                    (A.ucircumflex = 611),
                    (A.acircumflex = 556),
                    (A.Amacron = 722),
                    (A.rcaron = 389),
                    (A.ccedilla = 556),
                    (A.Zdotaccent = 611),
                    (A.Thorn = 667),
                    (A.Omacron = 778),
                    (A.Racute = 722),
                    (A.Sacute = 667),
                    (A.dcaron = 743),
                    (A.Umacron = 722),
                    (A.uring = 611),
                    (A.threesuperior = 333),
                    (A.Ograve = 778),
                    (A.Agrave = 722),
                    (A.Abreve = 722),
                    (A.multiply = 584),
                    (A.uacute = 611),
                    (A.Tcaron = 611),
                    (A.partialdiff = 494),
                    (A.ydieresis = 556),
                    (A.Nacute = 722),
                    (A.icircumflex = 278),
                    (A.Ecircumflex = 667),
                    (A.adieresis = 556),
                    (A.edieresis = 556),
                    (A.cacute = 556),
                    (A.nacute = 611),
                    (A.umacron = 611),
                    (A.Ncaron = 722),
                    (A.Iacute = 278),
                    (A.plusminus = 584),
                    (A.brokenbar = 280),
                    (A.registered = 737),
                    (A.Gbreve = 778),
                    (A.Idotaccent = 278),
                    (A.summation = 600),
                    (A.Egrave = 667),
                    (A.racute = 389),
                    (A.omacron = 611),
                    (A.Zacute = 611),
                    (A.Zcaron = 611),
                    (A.greaterequal = 549),
                    (A.Eth = 722),
                    (A.Ccedilla = 722),
                    (A.lcommaaccent = 278),
                    (A.tcaron = 389),
                    (A.eogonek = 556),
                    (A.Uogonek = 722),
                    (A.Aacute = 722),
                    (A.Adieresis = 722),
                    (A.egrave = 556),
                    (A.zacute = 500),
                    (A.iogonek = 278),
                    (A.Oacute = 778),
                    (A.oacute = 611),
                    (A.amacron = 556),
                    (A.sacute = 556),
                    (A.idieresis = 278),
                    (A.Ocircumflex = 778),
                    (A.Ugrave = 722),
                    (A.Delta = 612),
                    (A.thorn = 611),
                    (A.twosuperior = 333),
                    (A.Odieresis = 778),
                    (A.mu = 611),
                    (A.igrave = 278),
                    (A.ohungarumlaut = 611),
                    (A.Eogonek = 667),
                    (A.dcroat = 611),
                    (A.threequarters = 834),
                    (A.Scedilla = 667),
                    (A.lcaron = 400),
                    (A.Kcommaaccent = 722),
                    (A.Lacute = 611),
                    (A.trademark = 1e3),
                    (A.edotaccent = 556),
                    (A.Igrave = 278),
                    (A.Imacron = 278),
                    (A.Lcaron = 611),
                    (A.onehalf = 834),
                    (A.lessequal = 549),
                    (A.ocircumflex = 611),
                    (A.ntilde = 611),
                    (A.Uhungarumlaut = 722),
                    (A.Eacute = 667),
                    (A.emacron = 556),
                    (A.gbreve = 611),
                    (A.onequarter = 834),
                    (A.Scaron = 667),
                    (A.Scommaaccent = 667),
                    (A.Ohungarumlaut = 778),
                    (A.degree = 400),
                    (A.ograve = 611),
                    (A.Ccaron = 722),
                    (A.ugrave = 611),
                    (A.radical = 549),
                    (A.Dcaron = 722),
                    (A.rcommaaccent = 389),
                    (A.Ntilde = 722),
                    (A.otilde = 611),
                    (A.Rcommaaccent = 722),
                    (A.Lcommaaccent = 611),
                    (A.Atilde = 722),
                    (A.Aogonek = 722),
                    (A.Aring = 722),
                    (A.Otilde = 778),
                    (A.zdotaccent = 500),
                    (A.Ecaron = 667),
                    (A.Iogonek = 278),
                    (A.kcommaaccent = 556),
                    (A.minus = 584),
                    (A.Icircumflex = 278),
                    (A.ncaron = 611),
                    (A.tcommaaccent = 333),
                    (A.logicalnot = 584),
                    (A.odieresis = 611),
                    (A.udieresis = 611),
                    (A.notequal = 549),
                    (A.gcommaaccent = 611),
                    (A.eth = 611),
                    (A.zcaron = 500),
                    (A.ncommaaccent = 611),
                    (A.onesuperior = 333),
                    (A.imacron = 278),
                    (A.Euro = 556);
                })),
                (A['Helvetica-BoldOblique'] = Ah(function (A) {
                  (A.space = 278),
                    (A.exclam = 333),
                    (A.quotedbl = 474),
                    (A.numbersign = 556),
                    (A.dollar = 556),
                    (A.percent = 889),
                    (A.ampersand = 722),
                    (A.quoteright = 278),
                    (A.parenleft = 333),
                    (A.parenright = 333),
                    (A.asterisk = 389),
                    (A.plus = 584),
                    (A.comma = 278),
                    (A.hyphen = 333),
                    (A.period = 278),
                    (A.slash = 278),
                    (A.zero = 556),
                    (A.one = 556),
                    (A.two = 556),
                    (A.three = 556),
                    (A.four = 556),
                    (A.five = 556),
                    (A.six = 556),
                    (A.seven = 556),
                    (A.eight = 556),
                    (A.nine = 556),
                    (A.colon = 333),
                    (A.semicolon = 333),
                    (A.less = 584),
                    (A.equal = 584),
                    (A.greater = 584),
                    (A.question = 611),
                    (A.at = 975),
                    (A.A = 722),
                    (A.B = 722),
                    (A.C = 722),
                    (A.D = 722),
                    (A.E = 667),
                    (A.F = 611),
                    (A.G = 778),
                    (A.H = 722),
                    (A.I = 278),
                    (A.J = 556),
                    (A.K = 722),
                    (A.L = 611),
                    (A.M = 833),
                    (A.N = 722),
                    (A.O = 778),
                    (A.P = 667),
                    (A.Q = 778),
                    (A.R = 722),
                    (A.S = 667),
                    (A.T = 611),
                    (A.U = 722),
                    (A.V = 667),
                    (A.W = 944),
                    (A.X = 667),
                    (A.Y = 667),
                    (A.Z = 611),
                    (A.bracketleft = 333),
                    (A.backslash = 278),
                    (A.bracketright = 333),
                    (A.asciicircum = 584),
                    (A.underscore = 556),
                    (A.quoteleft = 278),
                    (A.a = 556),
                    (A.b = 611),
                    (A.c = 556),
                    (A.d = 611),
                    (A.e = 556),
                    (A.f = 333),
                    (A.g = 611),
                    (A.h = 611),
                    (A.i = 278),
                    (A.j = 278),
                    (A.k = 556),
                    (A.l = 278),
                    (A.m = 889),
                    (A.n = 611),
                    (A.o = 611),
                    (A.p = 611),
                    (A.q = 611),
                    (A.r = 389),
                    (A.s = 556),
                    (A.t = 333),
                    (A.u = 611),
                    (A.v = 556),
                    (A.w = 778),
                    (A.x = 556),
                    (A.y = 556),
                    (A.z = 500),
                    (A.braceleft = 389),
                    (A.bar = 280),
                    (A.braceright = 389),
                    (A.asciitilde = 584),
                    (A.exclamdown = 333),
                    (A.cent = 556),
                    (A.sterling = 556),
                    (A.fraction = 167),
                    (A.yen = 556),
                    (A.florin = 556),
                    (A.section = 556),
                    (A.currency = 556),
                    (A.quotesingle = 238),
                    (A.quotedblleft = 500),
                    (A.guillemotleft = 556),
                    (A.guilsinglleft = 333),
                    (A.guilsinglright = 333),
                    (A.fi = 611),
                    (A.fl = 611),
                    (A.endash = 556),
                    (A.dagger = 556),
                    (A.daggerdbl = 556),
                    (A.periodcentered = 278),
                    (A.paragraph = 556),
                    (A.bullet = 350),
                    (A.quotesinglbase = 278),
                    (A.quotedblbase = 500),
                    (A.quotedblright = 500),
                    (A.guillemotright = 556),
                    (A.ellipsis = 1e3),
                    (A.perthousand = 1e3),
                    (A.questiondown = 611),
                    (A.grave = 333),
                    (A.acute = 333),
                    (A.circumflex = 333),
                    (A.tilde = 333),
                    (A.macron = 333),
                    (A.breve = 333),
                    (A.dotaccent = 333),
                    (A.dieresis = 333),
                    (A.ring = 333),
                    (A.cedilla = 333),
                    (A.hungarumlaut = 333),
                    (A.ogonek = 333),
                    (A.caron = 333),
                    (A.emdash = 1e3),
                    (A.AE = 1e3),
                    (A.ordfeminine = 370),
                    (A.Lslash = 611),
                    (A.Oslash = 778),
                    (A.OE = 1e3),
                    (A.ordmasculine = 365),
                    (A.ae = 889),
                    (A.dotlessi = 278),
                    (A.lslash = 278),
                    (A.oslash = 611),
                    (A.oe = 944),
                    (A.germandbls = 611),
                    (A.Idieresis = 278),
                    (A.eacute = 556),
                    (A.abreve = 556),
                    (A.uhungarumlaut = 611),
                    (A.ecaron = 556),
                    (A.Ydieresis = 667),
                    (A.divide = 584),
                    (A.Yacute = 667),
                    (A.Acircumflex = 722),
                    (A.aacute = 556),
                    (A.Ucircumflex = 722),
                    (A.yacute = 556),
                    (A.scommaaccent = 556),
                    (A.ecircumflex = 556),
                    (A.Uring = 722),
                    (A.Udieresis = 722),
                    (A.aogonek = 556),
                    (A.Uacute = 722),
                    (A.uogonek = 611),
                    (A.Edieresis = 667),
                    (A.Dcroat = 722),
                    (A.commaaccent = 250),
                    (A.copyright = 737),
                    (A.Emacron = 667),
                    (A.ccaron = 556),
                    (A.aring = 556),
                    (A.Ncommaaccent = 722),
                    (A.lacute = 278),
                    (A.agrave = 556),
                    (A.Tcommaaccent = 611),
                    (A.Cacute = 722),
                    (A.atilde = 556),
                    (A.Edotaccent = 667),
                    (A.scaron = 556),
                    (A.scedilla = 556),
                    (A.iacute = 278),
                    (A.lozenge = 494),
                    (A.Rcaron = 722),
                    (A.Gcommaaccent = 778),
                    (A.ucircumflex = 611),
                    (A.acircumflex = 556),
                    (A.Amacron = 722),
                    (A.rcaron = 389),
                    (A.ccedilla = 556),
                    (A.Zdotaccent = 611),
                    (A.Thorn = 667),
                    (A.Omacron = 778),
                    (A.Racute = 722),
                    (A.Sacute = 667),
                    (A.dcaron = 743),
                    (A.Umacron = 722),
                    (A.uring = 611),
                    (A.threesuperior = 333),
                    (A.Ograve = 778),
                    (A.Agrave = 722),
                    (A.Abreve = 722),
                    (A.multiply = 584),
                    (A.uacute = 611),
                    (A.Tcaron = 611),
                    (A.partialdiff = 494),
                    (A.ydieresis = 556),
                    (A.Nacute = 722),
                    (A.icircumflex = 278),
                    (A.Ecircumflex = 667),
                    (A.adieresis = 556),
                    (A.edieresis = 556),
                    (A.cacute = 556),
                    (A.nacute = 611),
                    (A.umacron = 611),
                    (A.Ncaron = 722),
                    (A.Iacute = 278),
                    (A.plusminus = 584),
                    (A.brokenbar = 280),
                    (A.registered = 737),
                    (A.Gbreve = 778),
                    (A.Idotaccent = 278),
                    (A.summation = 600),
                    (A.Egrave = 667),
                    (A.racute = 389),
                    (A.omacron = 611),
                    (A.Zacute = 611),
                    (A.Zcaron = 611),
                    (A.greaterequal = 549),
                    (A.Eth = 722),
                    (A.Ccedilla = 722),
                    (A.lcommaaccent = 278),
                    (A.tcaron = 389),
                    (A.eogonek = 556),
                    (A.Uogonek = 722),
                    (A.Aacute = 722),
                    (A.Adieresis = 722),
                    (A.egrave = 556),
                    (A.zacute = 500),
                    (A.iogonek = 278),
                    (A.Oacute = 778),
                    (A.oacute = 611),
                    (A.amacron = 556),
                    (A.sacute = 556),
                    (A.idieresis = 278),
                    (A.Ocircumflex = 778),
                    (A.Ugrave = 722),
                    (A.Delta = 612),
                    (A.thorn = 611),
                    (A.twosuperior = 333),
                    (A.Odieresis = 778),
                    (A.mu = 611),
                    (A.igrave = 278),
                    (A.ohungarumlaut = 611),
                    (A.Eogonek = 667),
                    (A.dcroat = 611),
                    (A.threequarters = 834),
                    (A.Scedilla = 667),
                    (A.lcaron = 400),
                    (A.Kcommaaccent = 722),
                    (A.Lacute = 611),
                    (A.trademark = 1e3),
                    (A.edotaccent = 556),
                    (A.Igrave = 278),
                    (A.Imacron = 278),
                    (A.Lcaron = 611),
                    (A.onehalf = 834),
                    (A.lessequal = 549),
                    (A.ocircumflex = 611),
                    (A.ntilde = 611),
                    (A.Uhungarumlaut = 722),
                    (A.Eacute = 667),
                    (A.emacron = 556),
                    (A.gbreve = 611),
                    (A.onequarter = 834),
                    (A.Scaron = 667),
                    (A.Scommaaccent = 667),
                    (A.Ohungarumlaut = 778),
                    (A.degree = 400),
                    (A.ograve = 611),
                    (A.Ccaron = 722),
                    (A.ugrave = 611),
                    (A.radical = 549),
                    (A.Dcaron = 722),
                    (A.rcommaaccent = 389),
                    (A.Ntilde = 722),
                    (A.otilde = 611),
                    (A.Rcommaaccent = 722),
                    (A.Lcommaaccent = 611),
                    (A.Atilde = 722),
                    (A.Aogonek = 722),
                    (A.Aring = 722),
                    (A.Otilde = 778),
                    (A.zdotaccent = 500),
                    (A.Ecaron = 667),
                    (A.Iogonek = 278),
                    (A.kcommaaccent = 556),
                    (A.minus = 584),
                    (A.Icircumflex = 278),
                    (A.ncaron = 611),
                    (A.tcommaaccent = 333),
                    (A.logicalnot = 584),
                    (A.odieresis = 611),
                    (A.udieresis = 611),
                    (A.notequal = 549),
                    (A.gcommaaccent = 611),
                    (A.eth = 611),
                    (A.zcaron = 500),
                    (A.ncommaaccent = 611),
                    (A.onesuperior = 333),
                    (A.imacron = 278),
                    (A.Euro = 556);
                })),
                (A['Helvetica-Oblique'] = Ah(function (A) {
                  (A.space = 278),
                    (A.exclam = 278),
                    (A.quotedbl = 355),
                    (A.numbersign = 556),
                    (A.dollar = 556),
                    (A.percent = 889),
                    (A.ampersand = 667),
                    (A.quoteright = 222),
                    (A.parenleft = 333),
                    (A.parenright = 333),
                    (A.asterisk = 389),
                    (A.plus = 584),
                    (A.comma = 278),
                    (A.hyphen = 333),
                    (A.period = 278),
                    (A.slash = 278),
                    (A.zero = 556),
                    (A.one = 556),
                    (A.two = 556),
                    (A.three = 556),
                    (A.four = 556),
                    (A.five = 556),
                    (A.six = 556),
                    (A.seven = 556),
                    (A.eight = 556),
                    (A.nine = 556),
                    (A.colon = 278),
                    (A.semicolon = 278),
                    (A.less = 584),
                    (A.equal = 584),
                    (A.greater = 584),
                    (A.question = 556),
                    (A.at = 1015),
                    (A.A = 667),
                    (A.B = 667),
                    (A.C = 722),
                    (A.D = 722),
                    (A.E = 667),
                    (A.F = 611),
                    (A.G = 778),
                    (A.H = 722),
                    (A.I = 278),
                    (A.J = 500),
                    (A.K = 667),
                    (A.L = 556),
                    (A.M = 833),
                    (A.N = 722),
                    (A.O = 778),
                    (A.P = 667),
                    (A.Q = 778),
                    (A.R = 722),
                    (A.S = 667),
                    (A.T = 611),
                    (A.U = 722),
                    (A.V = 667),
                    (A.W = 944),
                    (A.X = 667),
                    (A.Y = 667),
                    (A.Z = 611),
                    (A.bracketleft = 278),
                    (A.backslash = 278),
                    (A.bracketright = 278),
                    (A.asciicircum = 469),
                    (A.underscore = 556),
                    (A.quoteleft = 222),
                    (A.a = 556),
                    (A.b = 556),
                    (A.c = 500),
                    (A.d = 556),
                    (A.e = 556),
                    (A.f = 278),
                    (A.g = 556),
                    (A.h = 556),
                    (A.i = 222),
                    (A.j = 222),
                    (A.k = 500),
                    (A.l = 222),
                    (A.m = 833),
                    (A.n = 556),
                    (A.o = 556),
                    (A.p = 556),
                    (A.q = 556),
                    (A.r = 333),
                    (A.s = 500),
                    (A.t = 278),
                    (A.u = 556),
                    (A.v = 500),
                    (A.w = 722),
                    (A.x = 500),
                    (A.y = 500),
                    (A.z = 500),
                    (A.braceleft = 334),
                    (A.bar = 260),
                    (A.braceright = 334),
                    (A.asciitilde = 584),
                    (A.exclamdown = 333),
                    (A.cent = 556),
                    (A.sterling = 556),
                    (A.fraction = 167),
                    (A.yen = 556),
                    (A.florin = 556),
                    (A.section = 556),
                    (A.currency = 556),
                    (A.quotesingle = 191),
                    (A.quotedblleft = 333),
                    (A.guillemotleft = 556),
                    (A.guilsinglleft = 333),
                    (A.guilsinglright = 333),
                    (A.fi = 500),
                    (A.fl = 500),
                    (A.endash = 556),
                    (A.dagger = 556),
                    (A.daggerdbl = 556),
                    (A.periodcentered = 278),
                    (A.paragraph = 537),
                    (A.bullet = 350),
                    (A.quotesinglbase = 222),
                    (A.quotedblbase = 333),
                    (A.quotedblright = 333),
                    (A.guillemotright = 556),
                    (A.ellipsis = 1e3),
                    (A.perthousand = 1e3),
                    (A.questiondown = 611),
                    (A.grave = 333),
                    (A.acute = 333),
                    (A.circumflex = 333),
                    (A.tilde = 333),
                    (A.macron = 333),
                    (A.breve = 333),
                    (A.dotaccent = 333),
                    (A.dieresis = 333),
                    (A.ring = 333),
                    (A.cedilla = 333),
                    (A.hungarumlaut = 333),
                    (A.ogonek = 333),
                    (A.caron = 333),
                    (A.emdash = 1e3),
                    (A.AE = 1e3),
                    (A.ordfeminine = 370),
                    (A.Lslash = 556),
                    (A.Oslash = 778),
                    (A.OE = 1e3),
                    (A.ordmasculine = 365),
                    (A.ae = 889),
                    (A.dotlessi = 278),
                    (A.lslash = 222),
                    (A.oslash = 611),
                    (A.oe = 944),
                    (A.germandbls = 611),
                    (A.Idieresis = 278),
                    (A.eacute = 556),
                    (A.abreve = 556),
                    (A.uhungarumlaut = 556),
                    (A.ecaron = 556),
                    (A.Ydieresis = 667),
                    (A.divide = 584),
                    (A.Yacute = 667),
                    (A.Acircumflex = 667),
                    (A.aacute = 556),
                    (A.Ucircumflex = 722),
                    (A.yacute = 500),
                    (A.scommaaccent = 500),
                    (A.ecircumflex = 556),
                    (A.Uring = 722),
                    (A.Udieresis = 722),
                    (A.aogonek = 556),
                    (A.Uacute = 722),
                    (A.uogonek = 556),
                    (A.Edieresis = 667),
                    (A.Dcroat = 722),
                    (A.commaaccent = 250),
                    (A.copyright = 737),
                    (A.Emacron = 667),
                    (A.ccaron = 500),
                    (A.aring = 556),
                    (A.Ncommaaccent = 722),
                    (A.lacute = 222),
                    (A.agrave = 556),
                    (A.Tcommaaccent = 611),
                    (A.Cacute = 722),
                    (A.atilde = 556),
                    (A.Edotaccent = 667),
                    (A.scaron = 500),
                    (A.scedilla = 500),
                    (A.iacute = 278),
                    (A.lozenge = 471),
                    (A.Rcaron = 722),
                    (A.Gcommaaccent = 778),
                    (A.ucircumflex = 556),
                    (A.acircumflex = 556),
                    (A.Amacron = 667),
                    (A.rcaron = 333),
                    (A.ccedilla = 500),
                    (A.Zdotaccent = 611),
                    (A.Thorn = 667),
                    (A.Omacron = 778),
                    (A.Racute = 722),
                    (A.Sacute = 667),
                    (A.dcaron = 643),
                    (A.Umacron = 722),
                    (A.uring = 556),
                    (A.threesuperior = 333),
                    (A.Ograve = 778),
                    (A.Agrave = 667),
                    (A.Abreve = 667),
                    (A.multiply = 584),
                    (A.uacute = 556),
                    (A.Tcaron = 611),
                    (A.partialdiff = 476),
                    (A.ydieresis = 500),
                    (A.Nacute = 722),
                    (A.icircumflex = 278),
                    (A.Ecircumflex = 667),
                    (A.adieresis = 556),
                    (A.edieresis = 556),
                    (A.cacute = 500),
                    (A.nacute = 556),
                    (A.umacron = 556),
                    (A.Ncaron = 722),
                    (A.Iacute = 278),
                    (A.plusminus = 584),
                    (A.brokenbar = 260),
                    (A.registered = 737),
                    (A.Gbreve = 778),
                    (A.Idotaccent = 278),
                    (A.summation = 600),
                    (A.Egrave = 667),
                    (A.racute = 333),
                    (A.omacron = 556),
                    (A.Zacute = 611),
                    (A.Zcaron = 611),
                    (A.greaterequal = 549),
                    (A.Eth = 722),
                    (A.Ccedilla = 722),
                    (A.lcommaaccent = 222),
                    (A.tcaron = 317),
                    (A.eogonek = 556),
                    (A.Uogonek = 722),
                    (A.Aacute = 667),
                    (A.Adieresis = 667),
                    (A.egrave = 556),
                    (A.zacute = 500),
                    (A.iogonek = 222),
                    (A.Oacute = 778),
                    (A.oacute = 556),
                    (A.amacron = 556),
                    (A.sacute = 500),
                    (A.idieresis = 278),
                    (A.Ocircumflex = 778),
                    (A.Ugrave = 722),
                    (A.Delta = 612),
                    (A.thorn = 556),
                    (A.twosuperior = 333),
                    (A.Odieresis = 778),
                    (A.mu = 556),
                    (A.igrave = 278),
                    (A.ohungarumlaut = 556),
                    (A.Eogonek = 667),
                    (A.dcroat = 556),
                    (A.threequarters = 834),
                    (A.Scedilla = 667),
                    (A.lcaron = 299),
                    (A.Kcommaaccent = 667),
                    (A.Lacute = 556),
                    (A.trademark = 1e3),
                    (A.edotaccent = 556),
                    (A.Igrave = 278),
                    (A.Imacron = 278),
                    (A.Lcaron = 556),
                    (A.onehalf = 834),
                    (A.lessequal = 549),
                    (A.ocircumflex = 556),
                    (A.ntilde = 556),
                    (A.Uhungarumlaut = 722),
                    (A.Eacute = 667),
                    (A.emacron = 556),
                    (A.gbreve = 556),
                    (A.onequarter = 834),
                    (A.Scaron = 667),
                    (A.Scommaaccent = 667),
                    (A.Ohungarumlaut = 778),
                    (A.degree = 400),
                    (A.ograve = 556),
                    (A.Ccaron = 722),
                    (A.ugrave = 556),
                    (A.radical = 453),
                    (A.Dcaron = 722),
                    (A.rcommaaccent = 333),
                    (A.Ntilde = 722),
                    (A.otilde = 556),
                    (A.Rcommaaccent = 722),
                    (A.Lcommaaccent = 556),
                    (A.Atilde = 667),
                    (A.Aogonek = 667),
                    (A.Aring = 667),
                    (A.Otilde = 778),
                    (A.zdotaccent = 500),
                    (A.Ecaron = 667),
                    (A.Iogonek = 278),
                    (A.kcommaaccent = 500),
                    (A.minus = 584),
                    (A.Icircumflex = 278),
                    (A.ncaron = 556),
                    (A.tcommaaccent = 278),
                    (A.logicalnot = 584),
                    (A.odieresis = 556),
                    (A.udieresis = 556),
                    (A.notequal = 549),
                    (A.gcommaaccent = 556),
                    (A.eth = 556),
                    (A.zcaron = 500),
                    (A.ncommaaccent = 556),
                    (A.onesuperior = 333),
                    (A.imacron = 278),
                    (A.Euro = 556);
                })),
                (A.Symbol = Ah(function (A) {
                  (A.space = 250),
                    (A.exclam = 333),
                    (A.universal = 713),
                    (A.numbersign = 500),
                    (A.existential = 549),
                    (A.percent = 833),
                    (A.ampersand = 778),
                    (A.suchthat = 439),
                    (A.parenleft = 333),
                    (A.parenright = 333),
                    (A.asteriskmath = 500),
                    (A.plus = 549),
                    (A.comma = 250),
                    (A.minus = 549),
                    (A.period = 250),
                    (A.slash = 278),
                    (A.zero = 500),
                    (A.one = 500),
                    (A.two = 500),
                    (A.three = 500),
                    (A.four = 500),
                    (A.five = 500),
                    (A.six = 500),
                    (A.seven = 500),
                    (A.eight = 500),
                    (A.nine = 500),
                    (A.colon = 278),
                    (A.semicolon = 278),
                    (A.less = 549),
                    (A.equal = 549),
                    (A.greater = 549),
                    (A.question = 444),
                    (A.congruent = 549),
                    (A.Alpha = 722),
                    (A.Beta = 667),
                    (A.Chi = 722),
                    (A.Delta = 612),
                    (A.Epsilon = 611),
                    (A.Phi = 763),
                    (A.Gamma = 603),
                    (A.Eta = 722),
                    (A.Iota = 333),
                    (A.theta1 = 631),
                    (A.Kappa = 722),
                    (A.Lambda = 686),
                    (A.Mu = 889),
                    (A.Nu = 722),
                    (A.Omicron = 722),
                    (A.Pi = 768),
                    (A.Theta = 741),
                    (A.Rho = 556),
                    (A.Sigma = 592),
                    (A.Tau = 611),
                    (A.Upsilon = 690),
                    (A.sigma1 = 439),
                    (A.Omega = 768),
                    (A.Xi = 645),
                    (A.Psi = 795),
                    (A.Zeta = 611),
                    (A.bracketleft = 333),
                    (A.therefore = 863),
                    (A.bracketright = 333),
                    (A.perpendicular = 658),
                    (A.underscore = 500),
                    (A.radicalex = 500),
                    (A.alpha = 631),
                    (A.beta = 549),
                    (A.chi = 549),
                    (A.delta = 494),
                    (A.epsilon = 439),
                    (A.phi = 521),
                    (A.gamma = 411),
                    (A.eta = 603),
                    (A.iota = 329),
                    (A.phi1 = 603),
                    (A.kappa = 549),
                    (A.lambda = 549),
                    (A.mu = 576),
                    (A.nu = 521),
                    (A.omicron = 549),
                    (A.pi = 549),
                    (A.theta = 521),
                    (A.rho = 549),
                    (A.sigma = 603),
                    (A.tau = 439),
                    (A.upsilon = 576),
                    (A.omega1 = 713),
                    (A.omega = 686),
                    (A.xi = 493),
                    (A.psi = 686),
                    (A.zeta = 494),
                    (A.braceleft = 480),
                    (A.bar = 200),
                    (A.braceright = 480),
                    (A.similar = 549),
                    (A.Euro = 750),
                    (A.Upsilon1 = 620),
                    (A.minute = 247),
                    (A.lessequal = 549),
                    (A.fraction = 167),
                    (A.infinity = 713),
                    (A.florin = 500),
                    (A.club = 753),
                    (A.diamond = 753),
                    (A.heart = 753),
                    (A.spade = 753),
                    (A.arrowboth = 1042),
                    (A.arrowleft = 987),
                    (A.arrowup = 603),
                    (A.arrowright = 987),
                    (A.arrowdown = 603),
                    (A.degree = 400),
                    (A.plusminus = 549),
                    (A.second = 411),
                    (A.greaterequal = 549),
                    (A.multiply = 549),
                    (A.proportional = 713),
                    (A.partialdiff = 494),
                    (A.bullet = 460),
                    (A.divide = 549),
                    (A.notequal = 549),
                    (A.equivalence = 549),
                    (A.approxequal = 549),
                    (A.ellipsis = 1e3),
                    (A.arrowvertex = 603),
                    (A.arrowhorizex = 1e3),
                    (A.carriagereturn = 658),
                    (A.aleph = 823),
                    (A.Ifraktur = 686),
                    (A.Rfraktur = 795),
                    (A.weierstrass = 987),
                    (A.circlemultiply = 768),
                    (A.circleplus = 768),
                    (A.emptyset = 823),
                    (A.intersection = 768),
                    (A.union = 768),
                    (A.propersuperset = 713),
                    (A.reflexsuperset = 713),
                    (A.notsubset = 713),
                    (A.propersubset = 713),
                    (A.reflexsubset = 713),
                    (A.element = 713),
                    (A.notelement = 713),
                    (A.angle = 768),
                    (A.gradient = 713),
                    (A.registerserif = 790),
                    (A.copyrightserif = 790),
                    (A.trademarkserif = 890),
                    (A.product = 823),
                    (A.radical = 549),
                    (A.dotmath = 250),
                    (A.logicalnot = 713),
                    (A.logicaland = 603),
                    (A.logicalor = 603),
                    (A.arrowdblboth = 1042),
                    (A.arrowdblleft = 987),
                    (A.arrowdblup = 603),
                    (A.arrowdblright = 987),
                    (A.arrowdbldown = 603),
                    (A.lozenge = 494),
                    (A.angleleft = 329),
                    (A.registersans = 790),
                    (A.copyrightsans = 790),
                    (A.trademarksans = 786),
                    (A.summation = 713),
                    (A.parenlefttp = 384),
                    (A.parenleftex = 384),
                    (A.parenleftbt = 384),
                    (A.bracketlefttp = 384),
                    (A.bracketleftex = 384),
                    (A.bracketleftbt = 384),
                    (A.bracelefttp = 494),
                    (A.braceleftmid = 494),
                    (A.braceleftbt = 494),
                    (A.braceex = 494),
                    (A.angleright = 329),
                    (A.integral = 274),
                    (A.integraltp = 686),
                    (A.integralex = 686),
                    (A.integralbt = 686),
                    (A.parenrighttp = 384),
                    (A.parenrightex = 384),
                    (A.parenrightbt = 384),
                    (A.bracketrighttp = 384),
                    (A.bracketrightex = 384),
                    (A.bracketrightbt = 384),
                    (A.bracerighttp = 494),
                    (A.bracerightmid = 494),
                    (A.bracerightbt = 494),
                    (A.apple = 790);
                })),
                (A['Times-Roman'] = Ah(function (A) {
                  (A.space = 250),
                    (A.exclam = 333),
                    (A.quotedbl = 408),
                    (A.numbersign = 500),
                    (A.dollar = 500),
                    (A.percent = 833),
                    (A.ampersand = 778),
                    (A.quoteright = 333),
                    (A.parenleft = 333),
                    (A.parenright = 333),
                    (A.asterisk = 500),
                    (A.plus = 564),
                    (A.comma = 250),
                    (A.hyphen = 333),
                    (A.period = 250),
                    (A.slash = 278),
                    (A.zero = 500),
                    (A.one = 500),
                    (A.two = 500),
                    (A.three = 500),
                    (A.four = 500),
                    (A.five = 500),
                    (A.six = 500),
                    (A.seven = 500),
                    (A.eight = 500),
                    (A.nine = 500),
                    (A.colon = 278),
                    (A.semicolon = 278),
                    (A.less = 564),
                    (A.equal = 564),
                    (A.greater = 564),
                    (A.question = 444),
                    (A.at = 921),
                    (A.A = 722),
                    (A.B = 667),
                    (A.C = 667),
                    (A.D = 722),
                    (A.E = 611),
                    (A.F = 556),
                    (A.G = 722),
                    (A.H = 722),
                    (A.I = 333),
                    (A.J = 389),
                    (A.K = 722),
                    (A.L = 611),
                    (A.M = 889),
                    (A.N = 722),
                    (A.O = 722),
                    (A.P = 556),
                    (A.Q = 722),
                    (A.R = 667),
                    (A.S = 556),
                    (A.T = 611),
                    (A.U = 722),
                    (A.V = 722),
                    (A.W = 944),
                    (A.X = 722),
                    (A.Y = 722),
                    (A.Z = 611),
                    (A.bracketleft = 333),
                    (A.backslash = 278),
                    (A.bracketright = 333),
                    (A.asciicircum = 469),
                    (A.underscore = 500),
                    (A.quoteleft = 333),
                    (A.a = 444),
                    (A.b = 500),
                    (A.c = 444),
                    (A.d = 500),
                    (A.e = 444),
                    (A.f = 333),
                    (A.g = 500),
                    (A.h = 500),
                    (A.i = 278),
                    (A.j = 278),
                    (A.k = 500),
                    (A.l = 278),
                    (A.m = 778),
                    (A.n = 500),
                    (A.o = 500),
                    (A.p = 500),
                    (A.q = 500),
                    (A.r = 333),
                    (A.s = 389),
                    (A.t = 278),
                    (A.u = 500),
                    (A.v = 500),
                    (A.w = 722),
                    (A.x = 500),
                    (A.y = 500),
                    (A.z = 444),
                    (A.braceleft = 480),
                    (A.bar = 200),
                    (A.braceright = 480),
                    (A.asciitilde = 541),
                    (A.exclamdown = 333),
                    (A.cent = 500),
                    (A.sterling = 500),
                    (A.fraction = 167),
                    (A.yen = 500),
                    (A.florin = 500),
                    (A.section = 500),
                    (A.currency = 500),
                    (A.quotesingle = 180),
                    (A.quotedblleft = 444),
                    (A.guillemotleft = 500),
                    (A.guilsinglleft = 333),
                    (A.guilsinglright = 333),
                    (A.fi = 556),
                    (A.fl = 556),
                    (A.endash = 500),
                    (A.dagger = 500),
                    (A.daggerdbl = 500),
                    (A.periodcentered = 250),
                    (A.paragraph = 453),
                    (A.bullet = 350),
                    (A.quotesinglbase = 333),
                    (A.quotedblbase = 444),
                    (A.quotedblright = 444),
                    (A.guillemotright = 500),
                    (A.ellipsis = 1e3),
                    (A.perthousand = 1e3),
                    (A.questiondown = 444),
                    (A.grave = 333),
                    (A.acute = 333),
                    (A.circumflex = 333),
                    (A.tilde = 333),
                    (A.macron = 333),
                    (A.breve = 333),
                    (A.dotaccent = 333),
                    (A.dieresis = 333),
                    (A.ring = 333),
                    (A.cedilla = 333),
                    (A.hungarumlaut = 333),
                    (A.ogonek = 333),
                    (A.caron = 333),
                    (A.emdash = 1e3),
                    (A.AE = 889),
                    (A.ordfeminine = 276),
                    (A.Lslash = 611),
                    (A.Oslash = 722),
                    (A.OE = 889),
                    (A.ordmasculine = 310),
                    (A.ae = 667),
                    (A.dotlessi = 278),
                    (A.lslash = 278),
                    (A.oslash = 500),
                    (A.oe = 722),
                    (A.germandbls = 500),
                    (A.Idieresis = 333),
                    (A.eacute = 444),
                    (A.abreve = 444),
                    (A.uhungarumlaut = 500),
                    (A.ecaron = 444),
                    (A.Ydieresis = 722),
                    (A.divide = 564),
                    (A.Yacute = 722),
                    (A.Acircumflex = 722),
                    (A.aacute = 444),
                    (A.Ucircumflex = 722),
                    (A.yacute = 500),
                    (A.scommaaccent = 389),
                    (A.ecircumflex = 444),
                    (A.Uring = 722),
                    (A.Udieresis = 722),
                    (A.aogonek = 444),
                    (A.Uacute = 722),
                    (A.uogonek = 500),
                    (A.Edieresis = 611),
                    (A.Dcroat = 722),
                    (A.commaaccent = 250),
                    (A.copyright = 760),
                    (A.Emacron = 611),
                    (A.ccaron = 444),
                    (A.aring = 444),
                    (A.Ncommaaccent = 722),
                    (A.lacute = 278),
                    (A.agrave = 444),
                    (A.Tcommaaccent = 611),
                    (A.Cacute = 667),
                    (A.atilde = 444),
                    (A.Edotaccent = 611),
                    (A.scaron = 389),
                    (A.scedilla = 389),
                    (A.iacute = 278),
                    (A.lozenge = 471),
                    (A.Rcaron = 667),
                    (A.Gcommaaccent = 722),
                    (A.ucircumflex = 500),
                    (A.acircumflex = 444),
                    (A.Amacron = 722),
                    (A.rcaron = 333),
                    (A.ccedilla = 444),
                    (A.Zdotaccent = 611),
                    (A.Thorn = 556),
                    (A.Omacron = 722),
                    (A.Racute = 667),
                    (A.Sacute = 556),
                    (A.dcaron = 588),
                    (A.Umacron = 722),
                    (A.uring = 500),
                    (A.threesuperior = 300),
                    (A.Ograve = 722),
                    (A.Agrave = 722),
                    (A.Abreve = 722),
                    (A.multiply = 564),
                    (A.uacute = 500),
                    (A.Tcaron = 611),
                    (A.partialdiff = 476),
                    (A.ydieresis = 500),
                    (A.Nacute = 722),
                    (A.icircumflex = 278),
                    (A.Ecircumflex = 611),
                    (A.adieresis = 444),
                    (A.edieresis = 444),
                    (A.cacute = 444),
                    (A.nacute = 500),
                    (A.umacron = 500),
                    (A.Ncaron = 722),
                    (A.Iacute = 333),
                    (A.plusminus = 564),
                    (A.brokenbar = 200),
                    (A.registered = 760),
                    (A.Gbreve = 722),
                    (A.Idotaccent = 333),
                    (A.summation = 600),
                    (A.Egrave = 611),
                    (A.racute = 333),
                    (A.omacron = 500),
                    (A.Zacute = 611),
                    (A.Zcaron = 611),
                    (A.greaterequal = 549),
                    (A.Eth = 722),
                    (A.Ccedilla = 667),
                    (A.lcommaaccent = 278),
                    (A.tcaron = 326),
                    (A.eogonek = 444),
                    (A.Uogonek = 722),
                    (A.Aacute = 722),
                    (A.Adieresis = 722),
                    (A.egrave = 444),
                    (A.zacute = 444),
                    (A.iogonek = 278),
                    (A.Oacute = 722),
                    (A.oacute = 500),
                    (A.amacron = 444),
                    (A.sacute = 389),
                    (A.idieresis = 278),
                    (A.Ocircumflex = 722),
                    (A.Ugrave = 722),
                    (A.Delta = 612),
                    (A.thorn = 500),
                    (A.twosuperior = 300),
                    (A.Odieresis = 722),
                    (A.mu = 500),
                    (A.igrave = 278),
                    (A.ohungarumlaut = 500),
                    (A.Eogonek = 611),
                    (A.dcroat = 500),
                    (A.threequarters = 750),
                    (A.Scedilla = 556),
                    (A.lcaron = 344),
                    (A.Kcommaaccent = 722),
                    (A.Lacute = 611),
                    (A.trademark = 980),
                    (A.edotaccent = 444),
                    (A.Igrave = 333),
                    (A.Imacron = 333),
                    (A.Lcaron = 611),
                    (A.onehalf = 750),
                    (A.lessequal = 549),
                    (A.ocircumflex = 500),
                    (A.ntilde = 500),
                    (A.Uhungarumlaut = 722),
                    (A.Eacute = 611),
                    (A.emacron = 444),
                    (A.gbreve = 500),
                    (A.onequarter = 750),
                    (A.Scaron = 556),
                    (A.Scommaaccent = 556),
                    (A.Ohungarumlaut = 722),
                    (A.degree = 400),
                    (A.ograve = 500),
                    (A.Ccaron = 667),
                    (A.ugrave = 500),
                    (A.radical = 453),
                    (A.Dcaron = 722),
                    (A.rcommaaccent = 333),
                    (A.Ntilde = 722),
                    (A.otilde = 500),
                    (A.Rcommaaccent = 667),
                    (A.Lcommaaccent = 611),
                    (A.Atilde = 722),
                    (A.Aogonek = 722),
                    (A.Aring = 722),
                    (A.Otilde = 722),
                    (A.zdotaccent = 444),
                    (A.Ecaron = 611),
                    (A.Iogonek = 333),
                    (A.kcommaaccent = 500),
                    (A.minus = 564),
                    (A.Icircumflex = 333),
                    (A.ncaron = 500),
                    (A.tcommaaccent = 278),
                    (A.logicalnot = 564),
                    (A.odieresis = 500),
                    (A.udieresis = 500),
                    (A.notequal = 549),
                    (A.gcommaaccent = 500),
                    (A.eth = 500),
                    (A.zcaron = 444),
                    (A.ncommaaccent = 500),
                    (A.onesuperior = 300),
                    (A.imacron = 278),
                    (A.Euro = 500);
                })),
                (A['Times-Bold'] = Ah(function (A) {
                  (A.space = 250),
                    (A.exclam = 333),
                    (A.quotedbl = 555),
                    (A.numbersign = 500),
                    (A.dollar = 500),
                    (A.percent = 1e3),
                    (A.ampersand = 833),
                    (A.quoteright = 333),
                    (A.parenleft = 333),
                    (A.parenright = 333),
                    (A.asterisk = 500),
                    (A.plus = 570),
                    (A.comma = 250),
                    (A.hyphen = 333),
                    (A.period = 250),
                    (A.slash = 278),
                    (A.zero = 500),
                    (A.one = 500),
                    (A.two = 500),
                    (A.three = 500),
                    (A.four = 500),
                    (A.five = 500),
                    (A.six = 500),
                    (A.seven = 500),
                    (A.eight = 500),
                    (A.nine = 500),
                    (A.colon = 333),
                    (A.semicolon = 333),
                    (A.less = 570),
                    (A.equal = 570),
                    (A.greater = 570),
                    (A.question = 500),
                    (A.at = 930),
                    (A.A = 722),
                    (A.B = 667),
                    (A.C = 722),
                    (A.D = 722),
                    (A.E = 667),
                    (A.F = 611),
                    (A.G = 778),
                    (A.H = 778),
                    (A.I = 389),
                    (A.J = 500),
                    (A.K = 778),
                    (A.L = 667),
                    (A.M = 944),
                    (A.N = 722),
                    (A.O = 778),
                    (A.P = 611),
                    (A.Q = 778),
                    (A.R = 722),
                    (A.S = 556),
                    (A.T = 667),
                    (A.U = 722),
                    (A.V = 722),
                    (A.W = 1e3),
                    (A.X = 722),
                    (A.Y = 722),
                    (A.Z = 667),
                    (A.bracketleft = 333),
                    (A.backslash = 278),
                    (A.bracketright = 333),
                    (A.asciicircum = 581),
                    (A.underscore = 500),
                    (A.quoteleft = 333),
                    (A.a = 500),
                    (A.b = 556),
                    (A.c = 444),
                    (A.d = 556),
                    (A.e = 444),
                    (A.f = 333),
                    (A.g = 500),
                    (A.h = 556),
                    (A.i = 278),
                    (A.j = 333),
                    (A.k = 556),
                    (A.l = 278),
                    (A.m = 833),
                    (A.n = 556),
                    (A.o = 500),
                    (A.p = 556),
                    (A.q = 556),
                    (A.r = 444),
                    (A.s = 389),
                    (A.t = 333),
                    (A.u = 556),
                    (A.v = 500),
                    (A.w = 722),
                    (A.x = 500),
                    (A.y = 500),
                    (A.z = 444),
                    (A.braceleft = 394),
                    (A.bar = 220),
                    (A.braceright = 394),
                    (A.asciitilde = 520),
                    (A.exclamdown = 333),
                    (A.cent = 500),
                    (A.sterling = 500),
                    (A.fraction = 167),
                    (A.yen = 500),
                    (A.florin = 500),
                    (A.section = 500),
                    (A.currency = 500),
                    (A.quotesingle = 278),
                    (A.quotedblleft = 500),
                    (A.guillemotleft = 500),
                    (A.guilsinglleft = 333),
                    (A.guilsinglright = 333),
                    (A.fi = 556),
                    (A.fl = 556),
                    (A.endash = 500),
                    (A.dagger = 500),
                    (A.daggerdbl = 500),
                    (A.periodcentered = 250),
                    (A.paragraph = 540),
                    (A.bullet = 350),
                    (A.quotesinglbase = 333),
                    (A.quotedblbase = 500),
                    (A.quotedblright = 500),
                    (A.guillemotright = 500),
                    (A.ellipsis = 1e3),
                    (A.perthousand = 1e3),
                    (A.questiondown = 500),
                    (A.grave = 333),
                    (A.acute = 333),
                    (A.circumflex = 333),
                    (A.tilde = 333),
                    (A.macron = 333),
                    (A.breve = 333),
                    (A.dotaccent = 333),
                    (A.dieresis = 333),
                    (A.ring = 333),
                    (A.cedilla = 333),
                    (A.hungarumlaut = 333),
                    (A.ogonek = 333),
                    (A.caron = 333),
                    (A.emdash = 1e3),
                    (A.AE = 1e3),
                    (A.ordfeminine = 300),
                    (A.Lslash = 667),
                    (A.Oslash = 778),
                    (A.OE = 1e3),
                    (A.ordmasculine = 330),
                    (A.ae = 722),
                    (A.dotlessi = 278),
                    (A.lslash = 278),
                    (A.oslash = 500),
                    (A.oe = 722),
                    (A.germandbls = 556),
                    (A.Idieresis = 389),
                    (A.eacute = 444),
                    (A.abreve = 500),
                    (A.uhungarumlaut = 556),
                    (A.ecaron = 444),
                    (A.Ydieresis = 722),
                    (A.divide = 570),
                    (A.Yacute = 722),
                    (A.Acircumflex = 722),
                    (A.aacute = 500),
                    (A.Ucircumflex = 722),
                    (A.yacute = 500),
                    (A.scommaaccent = 389),
                    (A.ecircumflex = 444),
                    (A.Uring = 722),
                    (A.Udieresis = 722),
                    (A.aogonek = 500),
                    (A.Uacute = 722),
                    (A.uogonek = 556),
                    (A.Edieresis = 667),
                    (A.Dcroat = 722),
                    (A.commaaccent = 250),
                    (A.copyright = 747),
                    (A.Emacron = 667),
                    (A.ccaron = 444),
                    (A.aring = 500),
                    (A.Ncommaaccent = 722),
                    (A.lacute = 278),
                    (A.agrave = 500),
                    (A.Tcommaaccent = 667),
                    (A.Cacute = 722),
                    (A.atilde = 500),
                    (A.Edotaccent = 667),
                    (A.scaron = 389),
                    (A.scedilla = 389),
                    (A.iacute = 278),
                    (A.lozenge = 494),
                    (A.Rcaron = 722),
                    (A.Gcommaaccent = 778),
                    (A.ucircumflex = 556),
                    (A.acircumflex = 500),
                    (A.Amacron = 722),
                    (A.rcaron = 444),
                    (A.ccedilla = 444),
                    (A.Zdotaccent = 667),
                    (A.Thorn = 611),
                    (A.Omacron = 778),
                    (A.Racute = 722),
                    (A.Sacute = 556),
                    (A.dcaron = 672),
                    (A.Umacron = 722),
                    (A.uring = 556),
                    (A.threesuperior = 300),
                    (A.Ograve = 778),
                    (A.Agrave = 722),
                    (A.Abreve = 722),
                    (A.multiply = 570),
                    (A.uacute = 556),
                    (A.Tcaron = 667),
                    (A.partialdiff = 494),
                    (A.ydieresis = 500),
                    (A.Nacute = 722),
                    (A.icircumflex = 278),
                    (A.Ecircumflex = 667),
                    (A.adieresis = 500),
                    (A.edieresis = 444),
                    (A.cacute = 444),
                    (A.nacute = 556),
                    (A.umacron = 556),
                    (A.Ncaron = 722),
                    (A.Iacute = 389),
                    (A.plusminus = 570),
                    (A.brokenbar = 220),
                    (A.registered = 747),
                    (A.Gbreve = 778),
                    (A.Idotaccent = 389),
                    (A.summation = 600),
                    (A.Egrave = 667),
                    (A.racute = 444),
                    (A.omacron = 500),
                    (A.Zacute = 667),
                    (A.Zcaron = 667),
                    (A.greaterequal = 549),
                    (A.Eth = 722),
                    (A.Ccedilla = 722),
                    (A.lcommaaccent = 278),
                    (A.tcaron = 416),
                    (A.eogonek = 444),
                    (A.Uogonek = 722),
                    (A.Aacute = 722),
                    (A.Adieresis = 722),
                    (A.egrave = 444),
                    (A.zacute = 444),
                    (A.iogonek = 278),
                    (A.Oacute = 778),
                    (A.oacute = 500),
                    (A.amacron = 500),
                    (A.sacute = 389),
                    (A.idieresis = 278),
                    (A.Ocircumflex = 778),
                    (A.Ugrave = 722),
                    (A.Delta = 612),
                    (A.thorn = 556),
                    (A.twosuperior = 300),
                    (A.Odieresis = 778),
                    (A.mu = 556),
                    (A.igrave = 278),
                    (A.ohungarumlaut = 500),
                    (A.Eogonek = 667),
                    (A.dcroat = 556),
                    (A.threequarters = 750),
                    (A.Scedilla = 556),
                    (A.lcaron = 394),
                    (A.Kcommaaccent = 778),
                    (A.Lacute = 667),
                    (A.trademark = 1e3),
                    (A.edotaccent = 444),
                    (A.Igrave = 389),
                    (A.Imacron = 389),
                    (A.Lcaron = 667),
                    (A.onehalf = 750),
                    (A.lessequal = 549),
                    (A.ocircumflex = 500),
                    (A.ntilde = 556),
                    (A.Uhungarumlaut = 722),
                    (A.Eacute = 667),
                    (A.emacron = 444),
                    (A.gbreve = 500),
                    (A.onequarter = 750),
                    (A.Scaron = 556),
                    (A.Scommaaccent = 556),
                    (A.Ohungarumlaut = 778),
                    (A.degree = 400),
                    (A.ograve = 500),
                    (A.Ccaron = 722),
                    (A.ugrave = 556),
                    (A.radical = 549),
                    (A.Dcaron = 722),
                    (A.rcommaaccent = 444),
                    (A.Ntilde = 722),
                    (A.otilde = 500),
                    (A.Rcommaaccent = 722),
                    (A.Lcommaaccent = 667),
                    (A.Atilde = 722),
                    (A.Aogonek = 722),
                    (A.Aring = 722),
                    (A.Otilde = 778),
                    (A.zdotaccent = 444),
                    (A.Ecaron = 667),
                    (A.Iogonek = 389),
                    (A.kcommaaccent = 556),
                    (A.minus = 570),
                    (A.Icircumflex = 389),
                    (A.ncaron = 556),
                    (A.tcommaaccent = 333),
                    (A.logicalnot = 570),
                    (A.odieresis = 500),
                    (A.udieresis = 556),
                    (A.notequal = 549),
                    (A.gcommaaccent = 500),
                    (A.eth = 500),
                    (A.zcaron = 444),
                    (A.ncommaaccent = 556),
                    (A.onesuperior = 300),
                    (A.imacron = 278),
                    (A.Euro = 500);
                })),
                (A['Times-BoldItalic'] = Ah(function (A) {
                  (A.space = 250),
                    (A.exclam = 389),
                    (A.quotedbl = 555),
                    (A.numbersign = 500),
                    (A.dollar = 500),
                    (A.percent = 833),
                    (A.ampersand = 778),
                    (A.quoteright = 333),
                    (A.parenleft = 333),
                    (A.parenright = 333),
                    (A.asterisk = 500),
                    (A.plus = 570),
                    (A.comma = 250),
                    (A.hyphen = 333),
                    (A.period = 250),
                    (A.slash = 278),
                    (A.zero = 500),
                    (A.one = 500),
                    (A.two = 500),
                    (A.three = 500),
                    (A.four = 500),
                    (A.five = 500),
                    (A.six = 500),
                    (A.seven = 500),
                    (A.eight = 500),
                    (A.nine = 500),
                    (A.colon = 333),
                    (A.semicolon = 333),
                    (A.less = 570),
                    (A.equal = 570),
                    (A.greater = 570),
                    (A.question = 500),
                    (A.at = 832),
                    (A.A = 667),
                    (A.B = 667),
                    (A.C = 667),
                    (A.D = 722),
                    (A.E = 667),
                    (A.F = 667),
                    (A.G = 722),
                    (A.H = 778),
                    (A.I = 389),
                    (A.J = 500),
                    (A.K = 667),
                    (A.L = 611),
                    (A.M = 889),
                    (A.N = 722),
                    (A.O = 722),
                    (A.P = 611),
                    (A.Q = 722),
                    (A.R = 667),
                    (A.S = 556),
                    (A.T = 611),
                    (A.U = 722),
                    (A.V = 667),
                    (A.W = 889),
                    (A.X = 667),
                    (A.Y = 611),
                    (A.Z = 611),
                    (A.bracketleft = 333),
                    (A.backslash = 278),
                    (A.bracketright = 333),
                    (A.asciicircum = 570),
                    (A.underscore = 500),
                    (A.quoteleft = 333),
                    (A.a = 500),
                    (A.b = 500),
                    (A.c = 444),
                    (A.d = 500),
                    (A.e = 444),
                    (A.f = 333),
                    (A.g = 500),
                    (A.h = 556),
                    (A.i = 278),
                    (A.j = 278),
                    (A.k = 500),
                    (A.l = 278),
                    (A.m = 778),
                    (A.n = 556),
                    (A.o = 500),
                    (A.p = 500),
                    (A.q = 500),
                    (A.r = 389),
                    (A.s = 389),
                    (A.t = 278),
                    (A.u = 556),
                    (A.v = 444),
                    (A.w = 667),
                    (A.x = 500),
                    (A.y = 444),
                    (A.z = 389),
                    (A.braceleft = 348),
                    (A.bar = 220),
                    (A.braceright = 348),
                    (A.asciitilde = 570),
                    (A.exclamdown = 389),
                    (A.cent = 500),
                    (A.sterling = 500),
                    (A.fraction = 167),
                    (A.yen = 500),
                    (A.florin = 500),
                    (A.section = 500),
                    (A.currency = 500),
                    (A.quotesingle = 278),
                    (A.quotedblleft = 500),
                    (A.guillemotleft = 500),
                    (A.guilsinglleft = 333),
                    (A.guilsinglright = 333),
                    (A.fi = 556),
                    (A.fl = 556),
                    (A.endash = 500),
                    (A.dagger = 500),
                    (A.daggerdbl = 500),
                    (A.periodcentered = 250),
                    (A.paragraph = 500),
                    (A.bullet = 350),
                    (A.quotesinglbase = 333),
                    (A.quotedblbase = 500),
                    (A.quotedblright = 500),
                    (A.guillemotright = 500),
                    (A.ellipsis = 1e3),
                    (A.perthousand = 1e3),
                    (A.questiondown = 500),
                    (A.grave = 333),
                    (A.acute = 333),
                    (A.circumflex = 333),
                    (A.tilde = 333),
                    (A.macron = 333),
                    (A.breve = 333),
                    (A.dotaccent = 333),
                    (A.dieresis = 333),
                    (A.ring = 333),
                    (A.cedilla = 333),
                    (A.hungarumlaut = 333),
                    (A.ogonek = 333),
                    (A.caron = 333),
                    (A.emdash = 1e3),
                    (A.AE = 944),
                    (A.ordfeminine = 266),
                    (A.Lslash = 611),
                    (A.Oslash = 722),
                    (A.OE = 944),
                    (A.ordmasculine = 300),
                    (A.ae = 722),
                    (A.dotlessi = 278),
                    (A.lslash = 278),
                    (A.oslash = 500),
                    (A.oe = 722),
                    (A.germandbls = 500),
                    (A.Idieresis = 389),
                    (A.eacute = 444),
                    (A.abreve = 500),
                    (A.uhungarumlaut = 556),
                    (A.ecaron = 444),
                    (A.Ydieresis = 611),
                    (A.divide = 570),
                    (A.Yacute = 611),
                    (A.Acircumflex = 667),
                    (A.aacute = 500),
                    (A.Ucircumflex = 722),
                    (A.yacute = 444),
                    (A.scommaaccent = 389),
                    (A.ecircumflex = 444),
                    (A.Uring = 722),
                    (A.Udieresis = 722),
                    (A.aogonek = 500),
                    (A.Uacute = 722),
                    (A.uogonek = 556),
                    (A.Edieresis = 667),
                    (A.Dcroat = 722),
                    (A.commaaccent = 250),
                    (A.copyright = 747),
                    (A.Emacron = 667),
                    (A.ccaron = 444),
                    (A.aring = 500),
                    (A.Ncommaaccent = 722),
                    (A.lacute = 278),
                    (A.agrave = 500),
                    (A.Tcommaaccent = 611),
                    (A.Cacute = 667),
                    (A.atilde = 500),
                    (A.Edotaccent = 667),
                    (A.scaron = 389),
                    (A.scedilla = 389),
                    (A.iacute = 278),
                    (A.lozenge = 494),
                    (A.Rcaron = 667),
                    (A.Gcommaaccent = 722),
                    (A.ucircumflex = 556),
                    (A.acircumflex = 500),
                    (A.Amacron = 667),
                    (A.rcaron = 389),
                    (A.ccedilla = 444),
                    (A.Zdotaccent = 611),
                    (A.Thorn = 611),
                    (A.Omacron = 722),
                    (A.Racute = 667),
                    (A.Sacute = 556),
                    (A.dcaron = 608),
                    (A.Umacron = 722),
                    (A.uring = 556),
                    (A.threesuperior = 300),
                    (A.Ograve = 722),
                    (A.Agrave = 667),
                    (A.Abreve = 667),
                    (A.multiply = 570),
                    (A.uacute = 556),
                    (A.Tcaron = 611),
                    (A.partialdiff = 494),
                    (A.ydieresis = 444),
                    (A.Nacute = 722),
                    (A.icircumflex = 278),
                    (A.Ecircumflex = 667),
                    (A.adieresis = 500),
                    (A.edieresis = 444),
                    (A.cacute = 444),
                    (A.nacute = 556),
                    (A.umacron = 556),
                    (A.Ncaron = 722),
                    (A.Iacute = 389),
                    (A.plusminus = 570),
                    (A.brokenbar = 220),
                    (A.registered = 747),
                    (A.Gbreve = 722),
                    (A.Idotaccent = 389),
                    (A.summation = 600),
                    (A.Egrave = 667),
                    (A.racute = 389),
                    (A.omacron = 500),
                    (A.Zacute = 611),
                    (A.Zcaron = 611),
                    (A.greaterequal = 549),
                    (A.Eth = 722),
                    (A.Ccedilla = 667),
                    (A.lcommaaccent = 278),
                    (A.tcaron = 366),
                    (A.eogonek = 444),
                    (A.Uogonek = 722),
                    (A.Aacute = 667),
                    (A.Adieresis = 667),
                    (A.egrave = 444),
                    (A.zacute = 389),
                    (A.iogonek = 278),
                    (A.Oacute = 722),
                    (A.oacute = 500),
                    (A.amacron = 500),
                    (A.sacute = 389),
                    (A.idieresis = 278),
                    (A.Ocircumflex = 722),
                    (A.Ugrave = 722),
                    (A.Delta = 612),
                    (A.thorn = 500),
                    (A.twosuperior = 300),
                    (A.Odieresis = 722),
                    (A.mu = 576),
                    (A.igrave = 278),
                    (A.ohungarumlaut = 500),
                    (A.Eogonek = 667),
                    (A.dcroat = 500),
                    (A.threequarters = 750),
                    (A.Scedilla = 556),
                    (A.lcaron = 382),
                    (A.Kcommaaccent = 667),
                    (A.Lacute = 611),
                    (A.trademark = 1e3),
                    (A.edotaccent = 444),
                    (A.Igrave = 389),
                    (A.Imacron = 389),
                    (A.Lcaron = 611),
                    (A.onehalf = 750),
                    (A.lessequal = 549),
                    (A.ocircumflex = 500),
                    (A.ntilde = 556),
                    (A.Uhungarumlaut = 722),
                    (A.Eacute = 667),
                    (A.emacron = 444),
                    (A.gbreve = 500),
                    (A.onequarter = 750),
                    (A.Scaron = 556),
                    (A.Scommaaccent = 556),
                    (A.Ohungarumlaut = 722),
                    (A.degree = 400),
                    (A.ograve = 500),
                    (A.Ccaron = 667),
                    (A.ugrave = 556),
                    (A.radical = 549),
                    (A.Dcaron = 722),
                    (A.rcommaaccent = 389),
                    (A.Ntilde = 722),
                    (A.otilde = 500),
                    (A.Rcommaaccent = 667),
                    (A.Lcommaaccent = 611),
                    (A.Atilde = 667),
                    (A.Aogonek = 667),
                    (A.Aring = 667),
                    (A.Otilde = 722),
                    (A.zdotaccent = 389),
                    (A.Ecaron = 667),
                    (A.Iogonek = 389),
                    (A.kcommaaccent = 500),
                    (A.minus = 606),
                    (A.Icircumflex = 389),
                    (A.ncaron = 556),
                    (A.tcommaaccent = 278),
                    (A.logicalnot = 606),
                    (A.odieresis = 500),
                    (A.udieresis = 556),
                    (A.notequal = 549),
                    (A.gcommaaccent = 500),
                    (A.eth = 500),
                    (A.zcaron = 389),
                    (A.ncommaaccent = 556),
                    (A.onesuperior = 300),
                    (A.imacron = 278),
                    (A.Euro = 500);
                })),
                (A['Times-Italic'] = Ah(function (A) {
                  (A.space = 250),
                    (A.exclam = 333),
                    (A.quotedbl = 420),
                    (A.numbersign = 500),
                    (A.dollar = 500),
                    (A.percent = 833),
                    (A.ampersand = 778),
                    (A.quoteright = 333),
                    (A.parenleft = 333),
                    (A.parenright = 333),
                    (A.asterisk = 500),
                    (A.plus = 675),
                    (A.comma = 250),
                    (A.hyphen = 333),
                    (A.period = 250),
                    (A.slash = 278),
                    (A.zero = 500),
                    (A.one = 500),
                    (A.two = 500),
                    (A.three = 500),
                    (A.four = 500),
                    (A.five = 500),
                    (A.six = 500),
                    (A.seven = 500),
                    (A.eight = 500),
                    (A.nine = 500),
                    (A.colon = 333),
                    (A.semicolon = 333),
                    (A.less = 675),
                    (A.equal = 675),
                    (A.greater = 675),
                    (A.question = 500),
                    (A.at = 920),
                    (A.A = 611),
                    (A.B = 611),
                    (A.C = 667),
                    (A.D = 722),
                    (A.E = 611),
                    (A.F = 611),
                    (A.G = 722),
                    (A.H = 722),
                    (A.I = 333),
                    (A.J = 444),
                    (A.K = 667),
                    (A.L = 556),
                    (A.M = 833),
                    (A.N = 667),
                    (A.O = 722),
                    (A.P = 611),
                    (A.Q = 722),
                    (A.R = 611),
                    (A.S = 500),
                    (A.T = 556),
                    (A.U = 722),
                    (A.V = 611),
                    (A.W = 833),
                    (A.X = 611),
                    (A.Y = 556),
                    (A.Z = 556),
                    (A.bracketleft = 389),
                    (A.backslash = 278),
                    (A.bracketright = 389),
                    (A.asciicircum = 422),
                    (A.underscore = 500),
                    (A.quoteleft = 333),
                    (A.a = 500),
                    (A.b = 500),
                    (A.c = 444),
                    (A.d = 500),
                    (A.e = 444),
                    (A.f = 278),
                    (A.g = 500),
                    (A.h = 500),
                    (A.i = 278),
                    (A.j = 278),
                    (A.k = 444),
                    (A.l = 278),
                    (A.m = 722),
                    (A.n = 500),
                    (A.o = 500),
                    (A.p = 500),
                    (A.q = 500),
                    (A.r = 389),
                    (A.s = 389),
                    (A.t = 278),
                    (A.u = 500),
                    (A.v = 444),
                    (A.w = 667),
                    (A.x = 444),
                    (A.y = 444),
                    (A.z = 389),
                    (A.braceleft = 400),
                    (A.bar = 275),
                    (A.braceright = 400),
                    (A.asciitilde = 541),
                    (A.exclamdown = 389),
                    (A.cent = 500),
                    (A.sterling = 500),
                    (A.fraction = 167),
                    (A.yen = 500),
                    (A.florin = 500),
                    (A.section = 500),
                    (A.currency = 500),
                    (A.quotesingle = 214),
                    (A.quotedblleft = 556),
                    (A.guillemotleft = 500),
                    (A.guilsinglleft = 333),
                    (A.guilsinglright = 333),
                    (A.fi = 500),
                    (A.fl = 500),
                    (A.endash = 500),
                    (A.dagger = 500),
                    (A.daggerdbl = 500),
                    (A.periodcentered = 250),
                    (A.paragraph = 523),
                    (A.bullet = 350),
                    (A.quotesinglbase = 333),
                    (A.quotedblbase = 556),
                    (A.quotedblright = 556),
                    (A.guillemotright = 500),
                    (A.ellipsis = 889),
                    (A.perthousand = 1e3),
                    (A.questiondown = 500),
                    (A.grave = 333),
                    (A.acute = 333),
                    (A.circumflex = 333),
                    (A.tilde = 333),
                    (A.macron = 333),
                    (A.breve = 333),
                    (A.dotaccent = 333),
                    (A.dieresis = 333),
                    (A.ring = 333),
                    (A.cedilla = 333),
                    (A.hungarumlaut = 333),
                    (A.ogonek = 333),
                    (A.caron = 333),
                    (A.emdash = 889),
                    (A.AE = 889),
                    (A.ordfeminine = 276),
                    (A.Lslash = 556),
                    (A.Oslash = 722),
                    (A.OE = 944),
                    (A.ordmasculine = 310),
                    (A.ae = 667),
                    (A.dotlessi = 278),
                    (A.lslash = 278),
                    (A.oslash = 500),
                    (A.oe = 667),
                    (A.germandbls = 500),
                    (A.Idieresis = 333),
                    (A.eacute = 444),
                    (A.abreve = 500),
                    (A.uhungarumlaut = 500),
                    (A.ecaron = 444),
                    (A.Ydieresis = 556),
                    (A.divide = 675),
                    (A.Yacute = 556),
                    (A.Acircumflex = 611),
                    (A.aacute = 500),
                    (A.Ucircumflex = 722),
                    (A.yacute = 444),
                    (A.scommaaccent = 389),
                    (A.ecircumflex = 444),
                    (A.Uring = 722),
                    (A.Udieresis = 722),
                    (A.aogonek = 500),
                    (A.Uacute = 722),
                    (A.uogonek = 500),
                    (A.Edieresis = 611),
                    (A.Dcroat = 722),
                    (A.commaaccent = 250),
                    (A.copyright = 760),
                    (A.Emacron = 611),
                    (A.ccaron = 444),
                    (A.aring = 500),
                    (A.Ncommaaccent = 667),
                    (A.lacute = 278),
                    (A.agrave = 500),
                    (A.Tcommaaccent = 556),
                    (A.Cacute = 667),
                    (A.atilde = 500),
                    (A.Edotaccent = 611),
                    (A.scaron = 389),
                    (A.scedilla = 389),
                    (A.iacute = 278),
                    (A.lozenge = 471),
                    (A.Rcaron = 611),
                    (A.Gcommaaccent = 722),
                    (A.ucircumflex = 500),
                    (A.acircumflex = 500),
                    (A.Amacron = 611),
                    (A.rcaron = 389),
                    (A.ccedilla = 444),
                    (A.Zdotaccent = 556),
                    (A.Thorn = 611),
                    (A.Omacron = 722),
                    (A.Racute = 611),
                    (A.Sacute = 500),
                    (A.dcaron = 544),
                    (A.Umacron = 722),
                    (A.uring = 500),
                    (A.threesuperior = 300),
                    (A.Ograve = 722),
                    (A.Agrave = 611),
                    (A.Abreve = 611),
                    (A.multiply = 675),
                    (A.uacute = 500),
                    (A.Tcaron = 556),
                    (A.partialdiff = 476),
                    (A.ydieresis = 444),
                    (A.Nacute = 667),
                    (A.icircumflex = 278),
                    (A.Ecircumflex = 611),
                    (A.adieresis = 500),
                    (A.edieresis = 444),
                    (A.cacute = 444),
                    (A.nacute = 500),
                    (A.umacron = 500),
                    (A.Ncaron = 667),
                    (A.Iacute = 333),
                    (A.plusminus = 675),
                    (A.brokenbar = 275),
                    (A.registered = 760),
                    (A.Gbreve = 722),
                    (A.Idotaccent = 333),
                    (A.summation = 600),
                    (A.Egrave = 611),
                    (A.racute = 389),
                    (A.omacron = 500),
                    (A.Zacute = 556),
                    (A.Zcaron = 556),
                    (A.greaterequal = 549),
                    (A.Eth = 722),
                    (A.Ccedilla = 667),
                    (A.lcommaaccent = 278),
                    (A.tcaron = 300),
                    (A.eogonek = 444),
                    (A.Uogonek = 722),
                    (A.Aacute = 611),
                    (A.Adieresis = 611),
                    (A.egrave = 444),
                    (A.zacute = 389),
                    (A.iogonek = 278),
                    (A.Oacute = 722),
                    (A.oacute = 500),
                    (A.amacron = 500),
                    (A.sacute = 389),
                    (A.idieresis = 278),
                    (A.Ocircumflex = 722),
                    (A.Ugrave = 722),
                    (A.Delta = 612),
                    (A.thorn = 500),
                    (A.twosuperior = 300),
                    (A.Odieresis = 722),
                    (A.mu = 500),
                    (A.igrave = 278),
                    (A.ohungarumlaut = 500),
                    (A.Eogonek = 611),
                    (A.dcroat = 500),
                    (A.threequarters = 750),
                    (A.Scedilla = 500),
                    (A.lcaron = 300),
                    (A.Kcommaaccent = 667),
                    (A.Lacute = 556),
                    (A.trademark = 980),
                    (A.edotaccent = 444),
                    (A.Igrave = 333),
                    (A.Imacron = 333),
                    (A.Lcaron = 611),
                    (A.onehalf = 750),
                    (A.lessequal = 549),
                    (A.ocircumflex = 500),
                    (A.ntilde = 500),
                    (A.Uhungarumlaut = 722),
                    (A.Eacute = 611),
                    (A.emacron = 444),
                    (A.gbreve = 500),
                    (A.onequarter = 750),
                    (A.Scaron = 500),
                    (A.Scommaaccent = 500),
                    (A.Ohungarumlaut = 722),
                    (A.degree = 400),
                    (A.ograve = 500),
                    (A.Ccaron = 667),
                    (A.ugrave = 500),
                    (A.radical = 453),
                    (A.Dcaron = 722),
                    (A.rcommaaccent = 389),
                    (A.Ntilde = 667),
                    (A.otilde = 500),
                    (A.Rcommaaccent = 611),
                    (A.Lcommaaccent = 556),
                    (A.Atilde = 611),
                    (A.Aogonek = 611),
                    (A.Aring = 611),
                    (A.Otilde = 722),
                    (A.zdotaccent = 389),
                    (A.Ecaron = 611),
                    (A.Iogonek = 333),
                    (A.kcommaaccent = 444),
                    (A.minus = 675),
                    (A.Icircumflex = 333),
                    (A.ncaron = 500),
                    (A.tcommaaccent = 278),
                    (A.logicalnot = 675),
                    (A.odieresis = 500),
                    (A.udieresis = 500),
                    (A.notequal = 549),
                    (A.gcommaaccent = 500),
                    (A.eth = 500),
                    (A.zcaron = 389),
                    (A.ncommaaccent = 500),
                    (A.onesuperior = 300),
                    (A.imacron = 278),
                    (A.Euro = 500);
                })),
                (A.ZapfDingbats = Ah(function (A) {
                  (A.space = 278),
                    (A.a1 = 974),
                    (A.a2 = 961),
                    (A.a202 = 974),
                    (A.a3 = 980),
                    (A.a4 = 719),
                    (A.a5 = 789),
                    (A.a119 = 790),
                    (A.a118 = 791),
                    (A.a117 = 690),
                    (A.a11 = 960),
                    (A.a12 = 939),
                    (A.a13 = 549),
                    (A.a14 = 855),
                    (A.a15 = 911),
                    (A.a16 = 933),
                    (A.a105 = 911),
                    (A.a17 = 945),
                    (A.a18 = 974),
                    (A.a19 = 755),
                    (A.a20 = 846),
                    (A.a21 = 762),
                    (A.a22 = 761),
                    (A.a23 = 571),
                    (A.a24 = 677),
                    (A.a25 = 763),
                    (A.a26 = 760),
                    (A.a27 = 759),
                    (A.a28 = 754),
                    (A.a6 = 494),
                    (A.a7 = 552),
                    (A.a8 = 537),
                    (A.a9 = 577),
                    (A.a10 = 692),
                    (A.a29 = 786),
                    (A.a30 = 788),
                    (A.a31 = 788),
                    (A.a32 = 790),
                    (A.a33 = 793),
                    (A.a34 = 794),
                    (A.a35 = 816),
                    (A.a36 = 823),
                    (A.a37 = 789),
                    (A.a38 = 841),
                    (A.a39 = 823),
                    (A.a40 = 833),
                    (A.a41 = 816),
                    (A.a42 = 831),
                    (A.a43 = 923),
                    (A.a44 = 744),
                    (A.a45 = 723),
                    (A.a46 = 749),
                    (A.a47 = 790),
                    (A.a48 = 792),
                    (A.a49 = 695),
                    (A.a50 = 776),
                    (A.a51 = 768),
                    (A.a52 = 792),
                    (A.a53 = 759),
                    (A.a54 = 707),
                    (A.a55 = 708),
                    (A.a56 = 682),
                    (A.a57 = 701),
                    (A.a58 = 826),
                    (A.a59 = 815),
                    (A.a60 = 789),
                    (A.a61 = 789),
                    (A.a62 = 707),
                    (A.a63 = 687),
                    (A.a64 = 696),
                    (A.a65 = 689),
                    (A.a66 = 786),
                    (A.a67 = 787),
                    (A.a68 = 713),
                    (A.a69 = 791),
                    (A.a70 = 785),
                    (A.a71 = 791),
                    (A.a72 = 873),
                    (A.a73 = 761),
                    (A.a74 = 762),
                    (A.a203 = 762),
                    (A.a75 = 759),
                    (A.a204 = 759),
                    (A.a76 = 892),
                    (A.a77 = 892),
                    (A.a78 = 788),
                    (A.a79 = 784),
                    (A.a81 = 438),
                    (A.a82 = 138),
                    (A.a83 = 277),
                    (A.a84 = 415),
                    (A.a97 = 392),
                    (A.a98 = 392),
                    (A.a99 = 668),
                    (A.a100 = 668),
                    (A.a89 = 390),
                    (A.a90 = 390),
                    (A.a93 = 317),
                    (A.a94 = 317),
                    (A.a91 = 276),
                    (A.a92 = 276),
                    (A.a205 = 509),
                    (A.a85 = 509),
                    (A.a206 = 410),
                    (A.a86 = 410),
                    (A.a87 = 234),
                    (A.a88 = 234),
                    (A.a95 = 334),
                    (A.a96 = 334),
                    (A.a101 = 732),
                    (A.a102 = 544),
                    (A.a103 = 544),
                    (A.a104 = 910),
                    (A.a106 = 667),
                    (A.a107 = 760),
                    (A.a108 = 760),
                    (A.a112 = 776),
                    (A.a111 = 595),
                    (A.a110 = 694),
                    (A.a109 = 626),
                    (A.a120 = 788),
                    (A.a121 = 788),
                    (A.a122 = 788),
                    (A.a123 = 788),
                    (A.a124 = 788),
                    (A.a125 = 788),
                    (A.a126 = 788),
                    (A.a127 = 788),
                    (A.a128 = 788),
                    (A.a129 = 788),
                    (A.a130 = 788),
                    (A.a131 = 788),
                    (A.a132 = 788),
                    (A.a133 = 788),
                    (A.a134 = 788),
                    (A.a135 = 788),
                    (A.a136 = 788),
                    (A.a137 = 788),
                    (A.a138 = 788),
                    (A.a139 = 788),
                    (A.a140 = 788),
                    (A.a141 = 788),
                    (A.a142 = 788),
                    (A.a143 = 788),
                    (A.a144 = 788),
                    (A.a145 = 788),
                    (A.a146 = 788),
                    (A.a147 = 788),
                    (A.a148 = 788),
                    (A.a149 = 788),
                    (A.a150 = 788),
                    (A.a151 = 788),
                    (A.a152 = 788),
                    (A.a153 = 788),
                    (A.a154 = 788),
                    (A.a155 = 788),
                    (A.a156 = 788),
                    (A.a157 = 788),
                    (A.a158 = 788),
                    (A.a159 = 788),
                    (A.a160 = 894),
                    (A.a161 = 838),
                    (A.a163 = 1016),
                    (A.a164 = 458),
                    (A.a196 = 748),
                    (A.a165 = 924),
                    (A.a192 = 748),
                    (A.a166 = 918),
                    (A.a167 = 927),
                    (A.a168 = 928),
                    (A.a169 = 928),
                    (A.a170 = 834),
                    (A.a171 = 873),
                    (A.a172 = 828),
                    (A.a173 = 924),
                    (A.a162 = 924),
                    (A.a174 = 917),
                    (A.a175 = 930),
                    (A.a176 = 931),
                    (A.a177 = 463),
                    (A.a178 = 883),
                    (A.a179 = 836),
                    (A.a193 = 836),
                    (A.a180 = 867),
                    (A.a199 = 867),
                    (A.a181 = 696),
                    (A.a200 = 696),
                    (A.a182 = 874),
                    (A.a201 = 874),
                    (A.a183 = 760),
                    (A.a184 = 946),
                    (A.a197 = 771),
                    (A.a185 = 865),
                    (A.a194 = 771),
                    (A.a198 = 888),
                    (A.a186 = 967),
                    (A.a195 = 888),
                    (A.a187 = 831),
                    (A.a188 = 873),
                    (A.a189 = 927),
                    (A.a190 = 970),
                    (A.a191 = 918);
                }));
            }),
            ib = Ah(function (A) {
              (A.Courier = {
                ascent: 629,
                descent: -157,
                capHeight: 562,
                xHeight: -426,
              }),
                (A['Courier-Bold'] = {
                  ascent: 629,
                  descent: -157,
                  capHeight: 562,
                  xHeight: 439,
                }),
                (A['Courier-Oblique'] = {
                  ascent: 629,
                  descent: -157,
                  capHeight: 562,
                  xHeight: 426,
                }),
                (A['Courier-BoldOblique'] = {
                  ascent: 629,
                  descent: -157,
                  capHeight: 562,
                  xHeight: 426,
                }),
                (A.Helvetica = {
                  ascent: 718,
                  descent: -207,
                  capHeight: 718,
                  xHeight: 523,
                }),
                (A['Helvetica-Bold'] = {
                  ascent: 718,
                  descent: -207,
                  capHeight: 718,
                  xHeight: 532,
                }),
                (A['Helvetica-Oblique'] = {
                  ascent: 718,
                  descent: -207,
                  capHeight: 718,
                  xHeight: 523,
                }),
                (A['Helvetica-BoldOblique'] = {
                  ascent: 718,
                  descent: -207,
                  capHeight: 718,
                  xHeight: 532,
                }),
                (A['Times-Roman'] = {
                  ascent: 683,
                  descent: -217,
                  capHeight: 662,
                  xHeight: 450,
                }),
                (A['Times-Bold'] = {
                  ascent: 683,
                  descent: -217,
                  capHeight: 676,
                  xHeight: 461,
                }),
                (A['Times-Italic'] = {
                  ascent: 683,
                  descent: -217,
                  capHeight: 653,
                  xHeight: 441,
                }),
                (A['Times-BoldItalic'] = {
                  ascent: 683,
                  descent: -217,
                  capHeight: 669,
                  xHeight: 462,
                }),
                (A.Symbol = {
                  ascent: Math.NaN,
                  descent: Math.NaN,
                  capHeight: Math.NaN,
                  xHeight: Math.NaN,
                }),
                (A.ZapfDingbats = {
                  ascent: Math.NaN,
                  descent: Math.NaN,
                  capHeight: Math.NaN,
                  xHeight: Math.NaN,
                });
            });
          class ik {
            constructor({
              glyfTable: A,
              isGlyphLocationsLong: t,
              locaTable: i,
              numGlyphs: a,
            }) {
              this.glyphs = [];
              let s = new DataView(i.buffer, i.byteOffset, i.byteLength),
                g = new DataView(A.buffer, A.byteOffset, A.byteLength),
                r = t ? 4 : 2,
                n = t ? s.getUint32(0) : 2 * s.getUint16(0),
                o = 0;
              for (let A = 0; A < a; A++) {
                o += r;
                let A = t ? s.getUint32(o) : 2 * s.getUint16(o);
                if (A === n) {
                  this.glyphs.push(new iF({}));
                  continue;
                }
                let i = iF.parse(n, g);
                this.glyphs.push(i), (n = A);
              }
            }
            getSize() {
              return this.glyphs.reduce(
                (A, t) => A + ((t.getSize() + 3) & -4),
                0
              );
            }
            write() {
              let A = this.getSize(),
                t = new DataView(new ArrayBuffer(A)),
                i = A > 131070,
                a = i ? 4 : 2,
                s = new DataView(new ArrayBuffer((this.glyphs.length + 1) * a));
              i ? s.setUint32(0, 0) : s.setUint16(0, 0);
              let g = 0,
                r = 0;
              for (let A of this.glyphs)
                (g += A.write(g, t)),
                  (g = (g + 3) & -4),
                  (r += a),
                  i ? s.setUint32(r, g) : s.setUint16(r, g >> 1);
              return {
                isLocationLong: i,
                loca: new Uint8Array(s.buffer),
                glyf: new Uint8Array(t.buffer),
              };
            }
            scale(A) {
              for (let t = 0, i = this.glyphs.length; t < i; t++)
                this.glyphs[t].scale(A[t]);
            }
          }
          class iF {
            constructor({
              header: A = null,
              simple: t = null,
              composites: i = null,
            }) {
              (this.header = A), (this.simple = t), (this.composites = i);
            }
            static parse(A, t) {
              let [i, a] = iS.parse(A, t);
              if (((A += i), a.numberOfContours < 0)) {
                let i = [];
                for (;;) {
                  let [a, s] = iN.parse(A, t);
                  if (((A += a), i.push(s), !(32 & s.flags))) break;
                }
                return new iF({ header: a, composites: i });
              }
              let s = iG.parse(A, t, a.numberOfContours);
              return new iF({ header: a, simple: s });
            }
            getSize() {
              if (!this.header) return 0;
              let A = this.simple
                ? this.simple.getSize()
                : this.composites.reduce((A, t) => A + t.getSize(), 0);
              return this.header.getSize() + A;
            }
            write(A, t) {
              if (!this.header) return 0;
              let i = A;
              if (((A += this.header.write(A, t)), this.simple))
                A += this.simple.write(A, t);
              else for (let i of this.composites) A += i.write(A, t);
              return A - i;
            }
            scale(A) {
              if (!this.header) return;
              let t = (this.header.xMin + this.header.xMax) / 2;
              if ((this.header.scale(t, A), this.simple))
                this.simple.scale(t, A);
              else for (let i of this.composites) i.scale(t, A);
            }
          }
          class iS {
            constructor({
              numberOfContours: A,
              xMin: t,
              yMin: i,
              xMax: a,
              yMax: s,
            }) {
              (this.numberOfContours = A),
                (this.xMin = t),
                (this.yMin = i),
                (this.xMax = a),
                (this.yMax = s);
            }
            static parse(A, t) {
              return [
                10,
                new iS({
                  numberOfContours: t.getInt16(A),
                  xMin: t.getInt16(A + 2),
                  yMin: t.getInt16(A + 4),
                  xMax: t.getInt16(A + 6),
                  yMax: t.getInt16(A + 8),
                }),
              ];
            }
            getSize() {
              return 10;
            }
            write(A, t) {
              return (
                t.setInt16(A, this.numberOfContours),
                t.setInt16(A + 2, this.xMin),
                t.setInt16(A + 4, this.yMin),
                t.setInt16(A + 6, this.xMax),
                t.setInt16(A + 8, this.yMax),
                10
              );
            }
            scale(A, t) {
              (this.xMin = Math.round(A + (this.xMin - A) * t)),
                (this.xMax = Math.round(A + (this.xMax - A) * t));
            }
          }
          class iR {
            constructor({ flags: A, xCoordinates: t, yCoordinates: i }) {
              (this.xCoordinates = t),
                (this.yCoordinates = i),
                (this.flags = A);
            }
          }
          class iG {
            constructor({ contours: A, instructions: t }) {
              (this.contours = A), (this.instructions = t);
            }
            static parse(A, t, i) {
              let a = [];
              for (let s = 0; s < i; s++) {
                let i = t.getUint16(A);
                (A += 2), a.push(i);
              }
              let s = a[i - 1] + 1,
                g = t.getUint16(A);
              A += 2;
              let r = new Uint8Array(t).slice(A, A + g);
              A += g;
              let n = [];
              for (let i = 0; i < s; A++, i++) {
                let a = t.getUint8(A);
                if ((n.push(a), 8 & a)) {
                  let s = t.getUint8(++A);
                  a ^= 8;
                  for (let A = 0; A < s; A++) n.push(a);
                  i += s;
                }
              }
              let o = [],
                I = [],
                l = [],
                C = [],
                B = [],
                h = 0,
                Q = 0;
              for (let i = 0; i < s; i++) {
                let s = n[i];
                if (2 & s) {
                  let i = t.getUint8(A++);
                  (Q += 16 & s ? i : -i), I.push(Q);
                } else 16 & s || ((Q += t.getInt16(A)), (A += 2)), I.push(Q);
                a[h] === i && (h++, o.push(I), (I = []));
              }
              (Q = 0), (h = 0);
              for (let i = 0; i < s; i++) {
                let s = n[i];
                if (4 & s) {
                  let i = t.getUint8(A++);
                  (Q += 32 & s ? i : -i), l.push(Q);
                } else 32 & s || ((Q += t.getInt16(A)), (A += 2)), l.push(Q);
                C.push((1 & s) | (64 & s)),
                  a[h] === i &&
                    ((I = o[h]),
                    h++,
                    B.push(
                      new iR({ flags: C, xCoordinates: I, yCoordinates: l })
                    ),
                    (l = []),
                    (C = []));
              }
              return new iG({ contours: B, instructions: r });
            }
            getSize() {
              let A = 2 * this.contours.length + 2 + this.instructions.length,
                t = 0,
                i = 0;
              for (let a of this.contours) {
                A += a.flags.length;
                for (let s = 0, g = a.xCoordinates.length; s < g; s++) {
                  let g = a.xCoordinates[s],
                    r = a.yCoordinates[s],
                    n = Math.abs(g - t);
                  n > 255 ? (A += 2) : n > 0 && (A += 1),
                    (t = g),
                    (n = Math.abs(r - i)) > 255 ? (A += 2) : n > 0 && (A += 1),
                    (i = r);
                }
              }
              return A;
            }
            write(A, t) {
              let i = A,
                a = [],
                s = [],
                g = [],
                r = 0,
                n = 0;
              for (let i of this.contours) {
                for (let A = 0, t = i.xCoordinates.length; A < t; A++) {
                  let t = i.flags[A],
                    o = i.xCoordinates[A],
                    I = o - r;
                  if (0 === I) (t |= 16), a.push(0);
                  else {
                    let A = Math.abs(I);
                    A <= 255 ? ((t |= I >= 0 ? 18 : 2), a.push(A)) : a.push(I);
                  }
                  r = o;
                  let l = i.yCoordinates[A];
                  if (0 == (I = l - n)) (t |= 32), s.push(0);
                  else {
                    let A = Math.abs(I);
                    A <= 255 ? ((t |= I >= 0 ? 36 : 4), s.push(A)) : s.push(I);
                  }
                  (n = l), g.push(t);
                }
                t.setUint16(A, a.length - 1), (A += 2);
              }
              for (let i of (t.setUint16(A, this.instructions.length),
              (A += 2),
              this.instructions.length &&
                (new Uint8Array(t.buffer, 0, t.buffer.byteLength).set(
                  this.instructions,
                  A
                ),
                (A += this.instructions.length)),
              g))
                t.setUint8(A++, i);
              for (let i = 0, s = a.length; i < s; i++) {
                let s = a[i],
                  r = g[i];
                2 & r
                  ? t.setUint8(A++, s)
                  : 16 & r || (t.setInt16(A, s), (A += 2));
              }
              for (let i = 0, a = s.length; i < a; i++) {
                let a = s[i],
                  r = g[i];
                4 & r
                  ? t.setUint8(A++, a)
                  : 32 & r || (t.setInt16(A, a), (A += 2));
              }
              return A - i;
            }
            scale(A, t) {
              for (let i of this.contours)
                if (0 !== i.xCoordinates.length)
                  for (let a = 0, s = i.xCoordinates.length; a < s; a++)
                    i.xCoordinates[a] = Math.round(
                      A + (i.xCoordinates[a] - A) * t
                    );
            }
          }
          class iN {
            constructor({
              flags: A,
              glyphIndex: t,
              argument1: i,
              argument2: a,
              transf: s,
              instructions: g,
            }) {
              (this.flags = A),
                (this.glyphIndex = t),
                (this.argument1 = i),
                (this.argument2 = a),
                (this.transf = s),
                (this.instructions = g);
            }
            static parse(A, t) {
              let i, a;
              let s = A,
                g = [],
                r = t.getUint16(A),
                n = t.getUint16(A + 2);
              (A += 4),
                1 & r
                  ? (2 & r
                      ? ((i = t.getInt16(A)), (a = t.getInt16(A + 2)))
                      : ((i = t.getUint16(A)), (a = t.getUint16(A + 2))),
                    (A += 4),
                    (r ^= 1))
                  : (2 & r
                      ? ((i = t.getInt8(A)), (a = t.getInt8(A + 1)))
                      : ((i = t.getUint8(A)), (a = t.getUint8(A + 1))),
                    (A += 2)),
                8 & r
                  ? (g.push(t.getUint16(A)), (A += 2))
                  : 64 & r
                    ? (g.push(t.getUint16(A), t.getUint16(A + 2)), (A += 4))
                    : 128 & r &&
                      (g.push(
                        t.getUint16(A),
                        t.getUint16(A + 2),
                        t.getUint16(A + 4),
                        t.getUint16(A + 6)
                      ),
                      (A += 8));
              let o = null;
              if (256 & r) {
                let i = t.getUint16(A);
                (A += 2), (o = new Uint8Array(t).slice(A, A + i)), (A += i);
              }
              return [
                A - s,
                new iN({
                  flags: r,
                  glyphIndex: n,
                  argument1: i,
                  argument2: a,
                  transf: g,
                  instructions: o,
                }),
              ];
            }
            getSize() {
              let A = 4 + 2 * this.transf.length;
              return (
                256 & this.flags && (A += 2 + this.instructions.length),
                (A += 2),
                2 & this.flags
                  ? (this.argument1 >= -128 &&
                      this.argument1 <= 127 &&
                      this.argument2 >= -128 &&
                      this.argument2 <= 127) ||
                    (A += 2)
                  : (this.argument1 >= 0 &&
                      this.argument1 <= 255 &&
                      this.argument2 >= 0 &&
                      this.argument2 <= 255) ||
                    (A += 2),
                A
              );
            }
            write(A, t) {
              let i = A;
              return (
                2 & this.flags
                  ? (this.argument1 >= -128 &&
                      this.argument1 <= 127 &&
                      this.argument2 >= -128 &&
                      this.argument2 <= 127) ||
                    (this.flags |= 1)
                  : (this.argument1 >= 0 &&
                      this.argument1 <= 255 &&
                      this.argument2 >= 0 &&
                      this.argument2 <= 255) ||
                    (this.flags |= 1),
                t.setUint16(A, this.flags),
                t.setUint16(A + 2, this.glyphIndex),
                (A += 4),
                1 & this.flags
                  ? (2 & this.flags
                      ? (t.setInt16(A, this.argument1),
                        t.setInt16(A + 2, this.argument2))
                      : (t.setUint16(A, this.argument1),
                        t.setUint16(A + 2, this.argument2)),
                    (A += 4))
                  : (t.setUint8(A, this.argument1),
                    t.setUint8(A + 1, this.argument2),
                    (A += 2)),
                256 & this.flags &&
                  (t.setUint16(A, this.instructions.length),
                  (A += 2),
                  this.instructions.length &&
                    (new Uint8Array(t.buffer, 0, t.buffer.byteLength).set(
                      this.instructions,
                      A
                    ),
                    (A += this.instructions.length))),
                A - i
              );
            }
            scale(A, t) {}
          }
          function ix(A, t, i) {
            (A[t] = (i >> 8) & 255), (A[t + 1] = 255 & i);
          }
          function iU(A, t, i) {
            (A[t] = (i >> 24) & 255),
              (A[t + 1] = (i >> 16) & 255),
              (A[t + 2] = (i >> 8) & 255),
              (A[t + 3] = 255 & i);
          }
          class iM {
            constructor(A) {
              (this.sfnt = A), (this.tables = Object.create(null));
            }
            static getSearchParams(A, t) {
              let i = 1,
                a = 0;
              for (; (i ^ A) > i; ) (i <<= 1), a++;
              let s = i * t;
              return { range: s, entry: a, rangeShift: t * A - s };
            }
            toArray() {
              let A = this.sfnt,
                t = this.tables,
                i = Object.keys(t);
              i.sort();
              let a = i.length,
                s,
                g,
                r,
                n,
                o,
                I = 12 + 16 * a,
                l = [I];
              for (s = 0; s < a; s++)
                (I += (((n = t[i[s]]).length + 3) & -4) >>> 0), l.push(I);
              let C = new Uint8Array(I);
              for (s = 0; s < a; s++)
                (n = t[i[s]]),
                  (function (A, t, i) {
                    if (i instanceof Uint8Array) A.set(i, t);
                    else if ('string' == typeof i)
                      for (let a = 0, s = i.length; a < s; a++)
                        A[t++] = 255 & i.charCodeAt(a);
                    else for (let a of i) A[t++] = 255 & a;
                  })(C, l[s], n);
              'true' === A && (A = L(65536)),
                (C[0] = 255 & A.charCodeAt(0)),
                (C[1] = 255 & A.charCodeAt(1)),
                (C[2] = 255 & A.charCodeAt(2)),
                (C[3] = 255 & A.charCodeAt(3)),
                ix(C, 4, a);
              let B = iM.getSearchParams(a, 16);
              for (
                ix(C, 6, B.range),
                  ix(C, 8, B.entry),
                  ix(C, 10, B.rangeShift),
                  I = 12,
                  s = 0;
                s < a;
                s++
              ) {
                (o = i[s]),
                  (C[I] = 255 & o.charCodeAt(0)),
                  (C[I + 1] = 255 & o.charCodeAt(1)),
                  (C[I + 2] = 255 & o.charCodeAt(2)),
                  (C[I + 3] = 255 & o.charCodeAt(3));
                let A = 0;
                for (g = l[s], r = l[s + 1]; g < r; g += 4)
                  A = (A + AD(C, g)) >>> 0;
                iU(C, I + 4, A),
                  iU(C, I + 8, l[s]),
                  iU(C, I + 12, t[o].length),
                  (I += 16);
              }
              return C;
            }
            addTable(A, t) {
              if (A in this.tables)
                throw Error('Table ' + A + ' already exists');
              this.tables[A] = t;
            }
          }
          let iJ = [4],
            iL = [5],
            iH = [6],
            iY = [7],
            iK = [8],
            iv = [12, 35],
            iq = [14],
            iT = [21],
            iP = [22],
            iW = [30],
            iZ = [31];
          class iO {
            constructor() {
              (this.width = 0),
                (this.lsb = 0),
                (this.flexing = !1),
                (this.output = []),
                (this.stack = []);
            }
            convert(A, t, i) {
              let a = A.length,
                s,
                g,
                r,
                n = !1;
              for (let o = 0; o < a; o++) {
                let a = A[o];
                if (a < 32) {
                  switch ((12 === a && (a = (a << 8) + A[++o]), a)) {
                    case 1:
                    case 3:
                    case 9:
                    case 3072:
                    case 3073:
                    case 3074:
                    case 3105:
                      this.stack = [];
                      break;
                    case 4:
                      if (this.flexing) {
                        if (this.stack.length < 1) {
                          n = !0;
                          break;
                        }
                        let A = this.stack.pop();
                        this.stack.push(0, A);
                        break;
                      }
                      n = this.executeCommand(1, iJ);
                      break;
                    case 5:
                      n = this.executeCommand(2, iL);
                      break;
                    case 6:
                      n = this.executeCommand(1, iH);
                      break;
                    case 7:
                      n = this.executeCommand(1, iY);
                      break;
                    case 8:
                      n = this.executeCommand(6, iK);
                      break;
                    case 10:
                      if (this.stack.length < 1 || !t[(r = this.stack.pop())]) {
                        n = !0;
                        break;
                      }
                      n = this.convert(t[r], t, i);
                      break;
                    case 11:
                      return n;
                    case 13:
                      if (this.stack.length < 2) {
                        n = !0;
                        break;
                      }
                      (s = this.stack.pop()),
                        (g = this.stack.pop()),
                        (this.lsb = g),
                        (this.width = s),
                        this.stack.push(s, g),
                        (n = this.executeCommand(2, iP));
                      break;
                    case 14:
                      this.output.push(iq[0]);
                      break;
                    case 21:
                      if (this.flexing) break;
                      n = this.executeCommand(2, iT);
                      break;
                    case 22:
                      if (this.flexing) {
                        this.stack.push(0);
                        break;
                      }
                      n = this.executeCommand(1, iP);
                      break;
                    case 30:
                      n = this.executeCommand(4, iW);
                      break;
                    case 31:
                      n = this.executeCommand(4, iZ);
                      break;
                    case 3078:
                      if (i) {
                        let A = this.stack.at(-5);
                        (this.seac = this.stack.splice(-4, 4)),
                          (this.seac[0] += this.lsb - A),
                          (n = this.executeCommand(0, iq));
                      } else n = this.executeCommand(4, iq);
                      break;
                    case 3079:
                      if (this.stack.length < 4) {
                        n = !0;
                        break;
                      }
                      this.stack.pop(), (s = this.stack.pop());
                      let I = this.stack.pop();
                      (g = this.stack.pop()),
                        (this.lsb = g),
                        (this.width = s),
                        this.stack.push(s, g, I),
                        (n = this.executeCommand(3, iT));
                      break;
                    case 3084:
                      if (this.stack.length < 2) {
                        n = !0;
                        break;
                      }
                      let l = this.stack.pop(),
                        C = this.stack.pop();
                      this.stack.push(C / l);
                      break;
                    case 3088:
                      if (this.stack.length < 2) {
                        n = !0;
                        break;
                      }
                      r = this.stack.pop();
                      let B = this.stack.pop();
                      if (0 === r && 3 === B) {
                        let A = this.stack.splice(-17, 17);
                        this.stack.push(
                          A[2] + A[0],
                          A[3] + A[1],
                          A[4],
                          A[5],
                          A[6],
                          A[7],
                          A[8],
                          A[9],
                          A[10],
                          A[11],
                          A[12],
                          A[13],
                          A[14]
                        ),
                          (n = this.executeCommand(13, iv, !0)),
                          (this.flexing = !1),
                          this.stack.push(A[15], A[16]);
                      } else 1 === r && 0 === B && (this.flexing = !0);
                      break;
                    case 3089:
                      break;
                    default:
                      m('Unknown type 1 charstring command of "' + a + '"');
                  }
                  if (n) break;
                } else
                  a <= 246
                    ? (a -= 139)
                    : (a =
                        a <= 250
                          ? 256 * (a - 247) + A[++o] + 108
                          : a <= 254
                            ? -256 * (a - 251) - A[++o] - 108
                            : ((255 & A[++o]) << 24) |
                              ((255 & A[++o]) << 16) |
                              ((255 & A[++o]) << 8) |
                              ((255 & A[++o]) << 0)),
                    this.stack.push(a);
              }
              return n;
            }
            executeCommand(A, t, i) {
              let a = this.stack.length;
              if (A > a) return !0;
              let s = a - A;
              for (let A = s; A < a; A++) {
                let t = this.stack[A];
                Number.isInteger(t)
                  ? this.output.push(28, (t >> 8) & 255, 255 & t)
                  : ((t = (65536 * t) | 0),
                    this.output.push(
                      255,
                      (t >> 24) & 255,
                      (t >> 16) & 255,
                      (t >> 8) & 255,
                      255 & t
                    ));
              }
              return (
                this.output.push(...t),
                i ? this.stack.splice(s, A) : (this.stack.length = 0),
                !1
              );
            }
          }
          function iX(A) {
            return (
              (A >= 48 && A <= 57) ||
              (A >= 65 && A <= 70) ||
              (A >= 97 && A <= 102)
            );
          }
          function iV(A, t, i) {
            if (i >= A.length) return new Uint8Array(0);
            let a,
              s,
              g = 0 | t;
            for (a = 0; a < i; a++) g = (52845 * (A[a] + g) + 22719) & 65535;
            let r = A.length - i,
              n = new Uint8Array(r);
            for (a = i, s = 0; s < r; a++, s++) {
              let t = A[a];
              (n[s] = t ^ (g >> 8)), (g = (52845 * (t + g) + 22719) & 65535);
            }
            return n;
          }
          function ij(A) {
            return (
              47 === A ||
              91 === A ||
              93 === A ||
              123 === A ||
              125 === A ||
              40 === A ||
              41 === A
            );
          }
          class iz {
            constructor(A, t, i) {
              if (t) {
                let t = A.getBytes(),
                  i = !(
                    (iX(t[0]) || Ab(t[0])) &&
                    iX(t[1]) &&
                    iX(t[2]) &&
                    iX(t[3]) &&
                    iX(t[4]) &&
                    iX(t[5]) &&
                    iX(t[6]) &&
                    iX(t[7])
                  );
                A = new AZ(
                  i
                    ? iV(t, 55665, 4)
                    : (function (A, t, i) {
                        let a,
                          s,
                          g = 55665,
                          r = A.length,
                          n = new Uint8Array(r >>> 1);
                        for (a = 0, s = 0; a < r; a++) {
                          let t;
                          let i = A[a];
                          if (iX(i)) {
                            for (a++; a < r && !iX((t = A[a])); ) a++;
                            if (a < r) {
                              let A = parseInt(String.fromCharCode(i, t), 16);
                              (n[s++] = A ^ (g >> 8)),
                                (g = (52845 * (A + g) + 22719) & 65535);
                            }
                          }
                        }
                        return n.slice(4, s);
                      })(t, 0, 0)
                );
              }
              (this.seacAnalysisEnabled = !!i),
                (this.stream = A),
                this.nextChar();
            }
            readNumberArray() {
              this.getToken();
              let A = [];
              for (;;) {
                let t = this.getToken();
                if (null === t || ']' === t || '}' === t) break;
                A.push(parseFloat(t || 0));
              }
              return A;
            }
            readNumber() {
              let A = this.getToken();
              return parseFloat(A || 0);
            }
            readInt() {
              let A = this.getToken();
              return 0 | parseInt(A || 0, 10);
            }
            readBoolean() {
              return 'true' === this.getToken() ? 1 : 0;
            }
            nextChar() {
              return (this.currentChar = this.stream.getByte());
            }
            prevChar() {
              return (
                this.stream.skip(-2), (this.currentChar = this.stream.getByte())
              );
            }
            getToken() {
              let A = !1,
                t = this.currentChar;
              for (;;) {
                if (-1 === t) return null;
                if (A) (10 !== t && 13 !== t) || (A = !1);
                else if (37 === t) A = !0;
                else if (!Ab(t)) break;
                t = this.nextChar();
              }
              if (ij(t)) return this.nextChar(), String.fromCharCode(t);
              let i = '';
              do (i += String.fromCharCode(t)), (t = this.nextChar());
              while (t >= 0 && !Ab(t) && !ij(t));
              return i;
            }
            readCharStrings(A, t) {
              return -1 === t ? A : iV(A, 4330, t);
            }
            extractFontProgram(A) {
              let t, i, a, s;
              let g = this.stream,
                r = [],
                n = [],
                o = Object.create(null);
              o.lenIV = 4;
              let I = {
                subrs: [],
                charstrings: [],
                properties: { privateData: o },
              };
              for (; null !== (t = this.getToken()); )
                if ('/' === t)
                  switch ((t = this.getToken())) {
                    case 'CharStrings':
                      for (
                        this.getToken(),
                          this.getToken(),
                          this.getToken(),
                          this.getToken();
                        null !== (t = this.getToken()) && 'end' !== t;

                      ) {
                        if ('/' !== t) continue;
                        let A = this.getToken();
                        (i = this.readInt()),
                          this.getToken(),
                          (a = i > 0 ? g.getBytes(i) : new Uint8Array(0)),
                          (s = I.properties.privateData.lenIV);
                        let r = this.readCharStrings(a, s);
                        this.nextChar(),
                          'noaccess' === (t = this.getToken())
                            ? this.getToken()
                            : '/' === t && this.prevChar(),
                          n.push({ glyph: A, encoded: r });
                      }
                      break;
                    case 'Subrs':
                      for (
                        this.readInt(), this.getToken();
                        'dup' === this.getToken();

                      ) {
                        let A = this.readInt();
                        (i = this.readInt()),
                          this.getToken(),
                          (a = i > 0 ? g.getBytes(i) : new Uint8Array(0)),
                          (s = I.properties.privateData.lenIV);
                        let n = this.readCharStrings(a, s);
                        this.nextChar(),
                          'noaccess' === (t = this.getToken()) &&
                            this.getToken(),
                          (r[A] = n);
                      }
                      break;
                    case 'BlueValues':
                    case 'OtherBlues':
                    case 'FamilyBlues':
                    case 'FamilyOtherBlues':
                      let A = this.readNumberArray();
                      A.length > 0 && A.length;
                      break;
                    case 'StemSnapH':
                    case 'StemSnapV':
                      I.properties.privateData[t] = this.readNumberArray();
                      break;
                    case 'StdHW':
                    case 'StdVW':
                      I.properties.privateData[t] = this.readNumberArray()[0];
                      break;
                    case 'BlueShift':
                    case 'lenIV':
                    case 'BlueFuzz':
                    case 'BlueScale':
                    case 'LanguageGroup':
                      I.properties.privateData[t] = this.readNumber();
                      break;
                    case 'ExpansionFactor':
                      I.properties.privateData[t] = this.readNumber() || 0.06;
                      break;
                    case 'ForceBold':
                      I.properties.privateData[t] = this.readBoolean();
                  }
              for (let { encoded: t, glyph: i } of n) {
                let a = new iO(),
                  s = a.convert(t, r, this.seacAnalysisEnabled),
                  g = a.output;
                s && (g = [14]);
                let n = {
                  glyphName: i,
                  charstring: g,
                  width: a.width,
                  lsb: a.lsb,
                  seac: a.seac,
                };
                if (
                  ('.notdef' === i
                    ? I.charstrings.unshift(n)
                    : I.charstrings.push(n),
                  A.builtInEncoding)
                ) {
                  let t = A.builtInEncoding.indexOf(i);
                  t > -1 &&
                    void 0 === A.widths[t] &&
                    t >= A.firstChar &&
                    t <= A.lastChar &&
                    (A.widths[t] = a.width);
                }
              }
              return I;
            }
            extractFontHeader(A) {
              let t;
              for (; null !== (t = this.getToken()); )
                if ('/' === t)
                  switch ((t = this.getToken())) {
                    case 'FontMatrix':
                      let i = this.readNumberArray();
                      A.fontMatrix = i;
                      break;
                    case 'Encoding':
                      let a;
                      let s = this.getToken();
                      if (/^\d+$/.test(s)) {
                        a = [];
                        let A = 0 | parseInt(s, 10);
                        this.getToken();
                        for (let i = 0; i < A; i++) {
                          for (
                            t = this.getToken();
                            'dup' !== t && 'def' !== t;

                          )
                            if (null === (t = this.getToken())) return;
                          if ('def' === t) break;
                          let A = this.readInt();
                          this.getToken();
                          let i = this.getToken();
                          (a[A] = i), this.getToken();
                        }
                      } else a = tS(s);
                      A.builtInEncoding = a;
                      break;
                    case 'FontBBox':
                      let g = this.readNumberArray();
                      (A.ascent = Math.max(g[3], g[1])),
                        (A.descent = Math.min(g[1], g[3])),
                        (A.ascentScaled = !0);
                  }
            }
          }
          function i_(A, t, i) {
            let a = A.length,
              s = t.length,
              g = a - s,
              r = i,
              n = !1;
            for (; r < g; ) {
              let i = 0;
              for (; i < s && A[r + i] === t[i]; ) i++;
              if (i >= s) {
                for (r += i; r < a && Ab(A[r]); ) r++;
                n = !0;
                break;
              }
              r++;
            }
            return { found: n, length: r };
          }
          class i$ {
            constructor(A, t, i) {
              let a = i.length1,
                s = (i.length2, t.peekBytes(6)),
                g = 128 === s[0] && 1 === s[1];
              g &&
                (t.skip(6),
                (a = (s[5] << 24) | (s[4] << 16) | (s[3] << 8) | s[2]));
              let r = (function (A, t) {
                let i, a, s, g;
                let r = [101, 101, 120, 101, 99],
                  n = A.pos;
                try {
                  a = (i = A.getBytes(t)).length;
                } catch {}
                if (
                  a === t &&
                  (s = i_(i, r, t - 2 * r.length)).found &&
                  s.length === t
                )
                  return { stream: new AZ(i), length: t };
                for (
                  m(
                    'Invalid "Length1" property in Type1 font -- trying to recover.'
                  ),
                    A.pos = n;
                  0 !== (s = i_(A.peekBytes(2048), r, 0)).length;

                )
                  if (((A.pos += s.length), s.found)) {
                    g = A.pos - n;
                    break;
                  }
                return ((A.pos = n), g)
                  ? { stream: new AZ(A.getBytes(g)), length: g }
                  : (m(
                      'Unable to recover "Length1" property in Type1 font -- using as is.'
                    ),
                    { stream: new AZ(A.getBytes(t)), length: t });
              })(t, a);
              new iz(r.stream, !1, !0).extractFontHeader(i),
                g && ((s = t.getBytes(6))[5], s[4], s[3], s[2]);
              let n = (function (A, t) {
                  let i = A.getBytes();
                  if (0 === i.length)
                    throw new x('getEexecBlock - no font program found.');
                  return { stream: new AZ(i), length: i.length };
                })(t),
                o = new iz(n.stream, !0, !0).extractFontProgram(i);
              for (let A in o.properties) i[A] = o.properties[A];
              let I = o.charstrings,
                l = this.getType2Charstrings(I),
                C = this.getType2Subrs(o.subrs);
              (this.charstrings = I),
                (this.data = this.wrap(A, l, this.charstrings, C, i)),
                (this.seacs = this.getSeacs(o.charstrings));
            }
            get numGlyphs() {
              return this.charstrings.length + 1;
            }
            getCharset() {
              let A = ['.notdef'];
              for (let { glyphName: t } of this.charstrings) A.push(t);
              return A;
            }
            getGlyphMapping(A) {
              let t, i;
              let a = this.charstrings;
              if (A.composite) {
                let t = Object.create(null);
                for (let i = 0, s = a.length; i < s; i++)
                  t[A.cMap.charCodeOf(i)] = i + 1;
                return t;
              }
              let s = ['.notdef'];
              for (i = 0; i < a.length; i++) s.push(a[i].glyphName);
              let g = A.builtInEncoding;
              if (g)
                for (let A in ((t = Object.create(null)), g))
                  (i = s.indexOf(g[A])) >= 0 && (t[A] = i);
              return t3(A, t, s);
            }
            hasGlyphId(A) {
              return (
                !(A < 0) &&
                !(A >= this.numGlyphs) &&
                (0 === A || this.charstrings[A - 1].charstring.length > 0)
              );
            }
            getSeacs(A) {
              let t = [];
              for (let i = 0, a = A.length; i < a; i++) {
                let a = A[i];
                a.seac && (t[i + 1] = a.seac);
              }
              return t;
            }
            getType2Charstrings(A) {
              let t = [];
              for (let i of A) t.push(i.charstring);
              return t;
            }
            getType2Subrs(A) {
              let t,
                i = 0,
                a = A.length;
              i = a < 1133 ? 107 : a < 33769 ? 1131 : 32768;
              let s = [];
              for (t = 0; t < i; t++) s.push([11]);
              for (t = 0; t < a; t++) s.push(A[t]);
              return s;
            }
            wrap(A, t, i, a, s) {
              let g, r;
              let n = new tU();
              (n.header = new tM(1, 0, 4, 4)), (n.names = [A]);
              let o = new tK();
              o.setByName('version', 391),
                o.setByName('Notice', 392),
                o.setByName('FullName', 393),
                o.setByName('FamilyName', 394),
                o.setByName('Weight', 395),
                o.setByName('Encoding', null),
                o.setByName('FontMatrix', s.fontMatrix),
                o.setByName('FontBBox', s.bbox),
                o.setByName('charset', null),
                o.setByName('CharStrings', null),
                o.setByName('Private', null),
                (n.topDict = o);
              let I = new tJ();
              I.add('Version 0.11'),
                I.add('See original notice'),
                I.add(A),
                I.add(A),
                I.add('Medium'),
                (n.strings = I),
                (n.globalSubrIndex = new tL());
              let l = t.length,
                C = ['.notdef'];
              for (g = 0; g < l; g++) {
                let A = i[g].glyphName;
                -1 === tR.indexOf(A) && I.add(A), C.push(A);
              }
              n.charset = new tP(!1, 0, C);
              let B = new tL();
              for (B.add([139, 14]), g = 0; g < l; g++) B.add(t[g]);
              n.charStrings = B;
              let h = new tq();
              h.setByName('Subrs', null);
              let Q = [
                'BlueValues',
                'OtherBlues',
                'FamilyBlues',
                'FamilyOtherBlues',
                'StemSnapH',
                'StemSnapV',
                'BlueShift',
                'BlueFuzz',
                'BlueScale',
                'LanguageGroup',
                'ExpansionFactor',
                'ForceBold',
                'StdHW',
                'StdVW',
              ];
              for (g = 0, r = Q.length; g < r; g++) {
                let A = Q[g];
                if (!(A in s.privateData)) continue;
                let t = s.privateData[A];
                if (Array.isArray(t))
                  for (let A = t.length - 1; A > 0; A--) t[A] -= t[A - 1];
                h.setByName(A, t);
              }
              n.topDict.privateDict = h;
              let c = new tL();
              for (g = 0, r = a.length; g < r; g++) c.add(a[g]);
              return (h.subrsIndex = c), new tX(n).compile();
            }
          }
          let i0 = [
              [57344, 63743],
              [1048576, 1114109],
            ],
            i1 = [
              'ascent',
              'bbox',
              'black',
              'bold',
              'charProcOperatorList',
              'composite',
              'cssFontInfo',
              'data',
              'defaultVMetrics',
              'defaultWidth',
              'descent',
              'fallbackName',
              'fontMatrix',
              'isInvalidPDFjsFont',
              'isType3Font',
              'italic',
              'loadedName',
              'mimetype',
              'missingFile',
              'name',
              'remeasure',
              'subtype',
              'systemFontInfo',
              'type',
              'vertical',
            ],
            i2 = [
              'cMap',
              'defaultEncoding',
              'differences',
              'isMonospace',
              'isSerifFont',
              'isSymbolicFont',
              'seacMap',
              'toFontChar',
              'toUnicode',
              'vmetrics',
              'widths',
            ];
          function i9(A) {
            if (!A.fontMatrix || A.fontMatrix[0] === l[0]) return;
            let t = 0.001 / A.fontMatrix[0],
              i = A.widths;
            for (let A in i) i[A] *= t;
            A.defaultWidth *= t;
          }
          function i3(A) {
            if (!A.fallbackToUnicode || A.toUnicode instanceof io) return;
            let t = [];
            for (let i in A.fallbackToUnicode)
              A.toUnicode.has(i) || (t[i] = A.fallbackToUnicode[i]);
            t.length > 0 && A.toUnicode.amend(t);
          }
          class i5 {
            constructor(A, t, i, a, s, g, r, n, o) {
              (this.originalCharCode = A),
                (this.fontChar = t),
                (this.unicode = i),
                (this.accent = a),
                (this.width = s),
                (this.vmetric = g),
                (this.operatorListId = r),
                (this.isSpace = n),
                (this.isInFont = o);
            }
            get category() {
              return b(
                this,
                'category',
                (function (A) {
                  let t = t1.get(A);
                  if (t) return t;
                  let i = A.match(t0),
                    a = {
                      isWhitespace: !!i?.[1],
                      isZeroWidthDiacritic: !!i?.[2],
                      isInvisibleFormatMark: !!i?.[3],
                    };
                  return t1.set(A, a), a;
                })(this.unicode),
                !0
              );
            }
          }
          function i8(A, t, i) {
            (A[t + 1] = i), (A[t] = i >>> 8);
          }
          function i6(A, t) {
            let i = (A << 8) + t;
            return 32768 & i ? i - 65536 : i;
          }
          function i7(A) {
            return String.fromCharCode((A >> 8) & 255, 255 & A);
          }
          function i4(A) {
            return (
              A > 32767 ? (A = 32767) : A < -32768 && (A = -32768),
              String.fromCharCode((A >> 8) & 255, 255 & A)
            );
          }
          function aA(A) {
            return 'ttcf' === M(A.peekBytes(4));
          }
          function ae(A, t) {
            for (let i in t) A[+i] = t[i];
          }
          function at(A, t, i) {
            let a;
            let s = [];
            for (let i = 0, g = A.length; i < g; i++)
              -1 !== (a = t_(A[i], t)) && (s[i] = a);
            for (let A in i) -1 !== (a = t_(i[A], t)) && (s[+A] = a);
            return s;
          }
          function ai(A) {
            return 3 === A.platform && 1 === A.encoding && 1033 === A.language;
          }
          function aa(A, t, i = !1) {
            switch (t.length) {
              case 1:
                return t.charCodeAt(0);
              case 2:
                return (t.charCodeAt(0) << 8) | t.charCodeAt(1);
            }
            let a = `Unsupported CID string (charCode ${A}): "${t}".`;
            if (i) throw new x(a);
            return m(a), t;
          }
          function as(A, t, i, a) {
            var s;
            let g = Object.create(null),
              r = new Map(),
              n = [],
              o = new Set(),
              I = 0,
              l = i0[0][0],
              C = i0[I][1];
            for (let B in A) {
              let h = A[B];
              if (!t(h)) continue;
              if (l > C) {
                if (++I >= i0.length) {
                  m('Ran out of space in font private use area.');
                  break;
                }
                (l = i0[I][0]), (C = i0[I][1]);
              }
              let Q = l++;
              0 === h && (h = i);
              let c = a.get(B);
              'string' == typeof c && (c = c.codePointAt(0)),
                !c ||
                  ((s = c),
                  (i0[0][0] <= s && s <= i0[0][1]) ||
                    (i0[1][0] <= s && s <= i0[1][1])) ||
                  o.has(h) ||
                  (r.set(c, h), o.add(h)),
                (g[Q] = h),
                (n[B] = Q);
            }
            return {
              toFontChar: n,
              charCodeToGlyphId: g,
              toUnicodeExtraMap: r,
              nextAvailableFontCharCode: l,
            };
          }
          function ag(A, t, i) {
            let a = (function (A, t, i) {
                let a = [];
                for (let t in A)
                  A[t] >= i || a.push({ fontCharCode: 0 | t, glyphId: A[t] });
                if (t)
                  for (let [A, s] of t)
                    s >= i || a.push({ fontCharCode: A, glyphId: s });
                0 === a.length && a.push({ fontCharCode: 0, glyphId: 0 }),
                  a.sort(function (A, t) {
                    return A.fontCharCode - t.fontCharCode;
                  });
                let s = [],
                  g = a.length;
                for (let A = 0; A < g; ) {
                  let t = a[A].fontCharCode,
                    i = [a[A].glyphId];
                  ++A;
                  let r = t;
                  for (
                    ;
                    A < g &&
                    r + 1 === a[A].fontCharCode &&
                    (i.push(a[A].glyphId), ++r, ++A, 65535 !== r);

                  );
                  s.push([t, r, i]);
                }
                return s;
              })(A, t, i),
              s = a.at(-1)[1] > 65535 ? 2 : 1,
              g,
              r,
              n,
              o,
              I = '\x00\x00' + i7(s) + '\x00\x03\x00\x01' + L(4 + 8 * s);
            for (g = a.length - 1; g >= 0 && !(a[g][0] <= 65535); --g);
            let l = g + 1;
            a[g][0] < 65535 && 65535 === a[g][1] && (a[g][1] = 65534);
            let C = a[g][1] < 65535 ? 1 : 0,
              B = l + C,
              h = iM.getSearchParams(B, 2),
              Q,
              c,
              E,
              u,
              d = '',
              f = '',
              p = '',
              m = '',
              y = '',
              w = 0;
            for (g = 0, r = l; g < r; g++) {
              (c = (Q = a[g])[0]), (E = Q[1]), (d += i7(c)), (f += i7(E));
              let A = !0;
              for (n = 1, o = (u = Q[2]).length; n < o; ++n)
                if (u[n] !== u[n - 1] + 1) {
                  A = !1;
                  break;
                }
              if (A) (p += i7((u[0] - c) & 65535)), (m += i7(0));
              else {
                let A = 2 * (B - g) + 2 * w;
                for (
                  w += E - c + 1, p += i7(0), m += i7(A), n = 0, o = u.length;
                  n < o;
                  ++n
                )
                  y += i7(u[n]);
              }
            }
            C > 0 &&
              ((f += '\xff\xff'),
              (d += '\xff\xff'),
              (p += '\x00\x01'),
              (m += '\x00\x00'));
            let D =
                '\x00\x00' +
                i7(2 * B) +
                i7(h.range) +
                i7(h.entry) +
                i7(h.rangeShift) +
                f +
                '\x00\x00' +
                d +
                p +
                m +
                y,
              b = '',
              k = '';
            if (s > 1) {
              for (
                I += '\x00\x03\x00\n' + L(4 + 8 * s + 4 + D.length),
                  b = '',
                  g = 0,
                  r = a.length;
                g < r;
                g++
              ) {
                c = (Q = a[g])[0];
                let A = (u = Q[2])[0];
                for (n = 1, o = u.length; n < o; ++n)
                  u[n] !== u[n - 1] + 1 &&
                    ((E = Q[0] + n - 1),
                    (b += L(c) + L(E) + L(A)),
                    (c = E + 1),
                    (A = u[n]));
                b += L(c) + L(Q[1]) + L(A);
              }
              k =
                '\x00\f\x00\x00' +
                L(b.length + 16) +
                '\x00\x00\x00\x00' +
                L(b.length / 12);
            }
            return I + '\x00\x04' + i7(D.length + 4) + D + k + b;
          }
          function ar(A, t, i) {
            i ||= { unitsPerEm: 0, yMax: 0, yMin: 0, ascent: 0, descent: 0 };
            let a = 0,
              s = 0,
              g = 0,
              r = 0,
              n = null,
              o = 0,
              I = -1;
            if (t) {
              for (let A in t)
                if (
                  ((n > (A |= 0) || !n) && (n = A),
                  o < A && (o = A),
                  (I = (function (A, t = -1) {
                    if (-1 !== t) {
                      let i = t$[t];
                      for (let a = 0, s = i.length; a < s; a += 2)
                        if (A >= i[a] && A <= i[a + 1]) return t;
                    }
                    for (let t = 0, i = t$.length; t < i; t++) {
                      let i = t$[t];
                      for (let a = 0, s = i.length; a < s; a += 2)
                        if (A >= i[a] && A <= i[a + 1]) return t;
                    }
                    return -1;
                  })(A, I)) < 32)
                )
                  a |= 1 << I;
                else if (I < 64) s |= 1 << (I - 32);
                else if (I < 96) g |= 1 << (I - 64);
                else {
                  if (!(I < 123))
                    throw new x(
                      'Unicode ranges Bits > 123 are reserved for internal usage'
                    );
                  r |= 1 << (I - 96);
                }
              o > 65535 && (o = 65535);
            } else (n = 0), (o = 255);
            let l = A.bbox || [0, 0, 0, 0],
              C =
                i.unitsPerEm ||
                (A.fontMatrix
                  ? 1 / Math.max(...A.fontMatrix.slice(0, 4).map(Math.abs))
                  : 1e3),
              B = A.ascentScaled ? 1 : C / 1e3,
              h = i.ascent || Math.round(B * (A.ascent || l[3])),
              Q = i.descent || Math.round(B * (A.descent || l[1]));
            Q > 0 && A.descent > 0 && l[1] < 0 && (Q = -Q);
            let c = i.yMax || h,
              E = -i.yMin || -Q;
            return (
/*
  Pattern: hexStrings
*/
              '\x00\x03\x02$\x01\xf4\x00\x05\x00\x00\x02\x8a\x02\xbb\x00\x00\x00\x8c\x02\x8a\x02\xbb\x00\x00\x01\xdf\x001\x01\x02\x00\x00\x00\x00\x06' +
              String.fromCharCode(A.fixedPitch ? 9 : 0) +
/*
  Pattern: hexStrings
*/
              '\x00\x00\x00\x00\x00\x00' +
              L(a) +
              L(s) +
              L(g) +
              L(r) +
              '*21*' +
              i7(A.italicAngle ? 1 : 0) +
              i7(n || A.firstChar) +
              i7(o || A.lastChar) +
              i7(h) +
              i7(Q) +
              '\x00d' +
              i7(c) +
              i7(E) +
/*
  Pattern: hexStrings
*/
              '\x00\x00\x00\x00\x00\x00\x00\x00' +
              i7(A.xHeight) +
              i7(A.capHeight) +
              i7(0) +
              i7(n || A.firstChar) +
              '\x00\x03'
            );
          }
          function an(A) {
            return (
              '\x00\x03\x00\x00' +
              L(Math.floor(65536 * A.italicAngle)) +
              '\x00\x00\x00\x00' +
              L(A.fixedPitch ? 1 : 0) +
/*
  Pattern: hexStrings
*/
              '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
            );
          }
          function ao(A, t) {
            let i, a, s, g, r;
            t || (t = [[], []]);
            let n = [
                t[0][0] || 'Original licence',
                t[0][1] || A,
                t[0][2] || 'Unknown',
                t[0][3] || 'uniqueID',
                t[0][4] || A,
                t[0][5] || 'Version 0.11',
                t[0][6] ||
                  A.replaceAll(/[^\x21-\x7E]|[[\](){}<>/%]/g, '').slice(0, 63),
                t[0][7] || 'Unknown',
                t[0][8] || 'Unknown',
                t[0][9] || 'Unknown',
              ],
              o = [];
            for (i = 0, a = n.length; i < a; i++) {
              r = t[1][i] || n[i];
              let A = [];
              for (s = 0, g = r.length; s < g; s++) A.push(i7(r.charCodeAt(s)));
              o.push(A.join(''));
            }
            let I = [n, o],
              l = ['\x00\x01', '\x00\x03'],
              C = ['\x00\x00', '\x00\x01'],
              B = ['\x00\x00', '\x04	'],
              h = n.length * l.length,
              Q = '\x00\x00' + i7(h) + i7(12 * h + 6),
              c = 0;
            for (i = 0, a = l.length; i < a; i++) {
              let A = I[i];
              for (s = 0, g = A.length; s < g; s++)
                (r = A[s]),
                  (Q += l[i] + C[i] + B[i] + i7(s) + i7(r.length) + i7(c)),
                  (c += r.length);
            }
            return Q + (n.join('') + o.join(''));
          }
          class aI {
            constructor(A, t, i) {
              let a;
              (this.name = A),
                (this.psName = null),
                (this.mimetype = null),
                (this.disableFontFace = !1),
                (this.loadedName = i.loadedName),
                (this.isType3Font = i.isType3Font),
                (this.missingFile = !1),
                (this.cssFontInfo = i.cssFontInfo),
                (this._charsCache = Object.create(null)),
                (this._glyphCache = Object.create(null));
              let s = !!(2 & i.flags);
              if (!s && !i.isSimulatedFlags) {
                let t = A.replaceAll(/[,_]/g, '-').split('-', 1)[0],
                  i = iA();
                for (let A of t.split('+'))
                  if (i[A]) {
                    s = !0;
                    break;
                  }
              }
              (this.isSerifFont = s),
                (this.isSymbolicFont = !!(4 & i.flags)),
                (this.isMonospace = !!(1 & i.flags));
              let { type: g, subtype: r } = i;
              (this.type = g),
                (this.subtype = r),
                (this.systemFontInfo = i.systemFontInfo);
              let n = A.match(/^InvalidPDFjsFont_(.*)_\d+$/);
              if (
                ((this.isInvalidPDFjsFont = !!n),
                this.isInvalidPDFjsFont
                  ? (this.fallbackName = n[1])
                  : this.isMonospace
                    ? (this.fallbackName = 'monospace')
                    : this.isSerifFont
                      ? (this.fallbackName = 'serif')
                      : (this.fallbackName = 'sans-serif'),
                this.systemFontInfo?.guessFallback &&
                  ((this.systemFontInfo.guessFallback = !1),
                  (this.systemFontInfo.css += `,${this.fallbackName}`)),
                (this.differences = i.differences),
                (this.widths = i.widths),
                (this.defaultWidth = i.defaultWidth),
                (this.composite = i.composite),
                (this.cMap = i.cMap),
                (this.capHeight = i.capHeight / 1e3),
                (this.ascent = i.ascent / 1e3),
                (this.descent = i.descent / 1e3),
                (this.lineHeight = this.ascent - this.descent),
                (this.fontMatrix = i.fontMatrix),
                (this.bbox = i.bbox),
                (this.defaultEncoding = i.defaultEncoding),
                (this.toUnicode = i.toUnicode),
                (this.toFontChar = []),
                'Type3' === i.type)
              ) {
                for (let A = 0; A < 256; A++)
                  this.toFontChar[A] =
                    this.differences[A] || i.defaultEncoding[A];
                return;
              }
              if (
                ((this.cidEncoding = i.cidEncoding || ''),
                (this.vertical = !!i.vertical),
                this.vertical &&
                  ((this.vmetrics = i.vmetrics),
                  (this.defaultVMetrics = i.defaultVMetrics)),
                !t || t.isEmpty)
              ) {
                t &&
                  m(
                    'Font file is empty in "' +
                      A +
                      '" (' +
                      this.loadedName +
                      ')'
                  ),
                  this.fallbackToSystemFont(i);
                return;
              }
              ([g, r] = (function (A, { type: t, subtype: i, composite: a }) {
                let s, g;
                return (
                  (function (A) {
                    let t = A.peekBytes(4);
                    return 65536 === AD(t, 0) || 'true' === M(t);
                  })(A) || aA(A)
                    ? (s = a ? 'CIDFontType2' : 'TrueType')
                    : 'OTTO' === M(A.peekBytes(4))
                      ? (s = a ? 'CIDFontType2' : 'OpenType')
                      : (function (A) {
                            let t = A.peekBytes(2);
                            return (
                              (37 === t[0] && 33 === t[1]) ||
                              (128 === t[0] && 1 === t[1])
                            );
                          })(A)
                        ? (s = a
                            ? 'CIDFontType0'
                            : 'MMType1' === t
                              ? 'MMType1'
                              : 'Type1')
                        : (function (A) {
                              let t = A.peekBytes(4);
                              return t[0] >= 1 && t[3] >= 1 && t[3] <= 4;
                            })(A)
                          ? a
                            ? ((s = 'CIDFontType0'), (g = 'CIDFontType0C'))
                            : ((s = 'MMType1' === t ? 'MMType1' : 'Type1'),
                              (g = 'Type1C'))
                          : (m(
                              'getFontFileType: Unable to detect correct font file Type/Subtype.'
                            ),
                            (s = t),
                            (g = i)),
                  [s, g]
                );
              })(t, i)),
                (g === this.type && r === this.subtype) ||
                  p(
                    `Inconsistent font file Type/SubType, expected: ${this.type}/${this.subtype} but found: ${g}/${r}.`
                  );
              try {
                switch (g) {
                  case 'MMType1':
                    p('MMType1 font (' + A + '), falling back to Type1.');
                  case 'Type1':
                  case 'CIDFontType0':
                    this.mimetype = 'font/opentype';
                    let s =
                      'Type1C' === r || 'CIDFontType0C' === r
                        ? new iI(t, i)
                        : new i$(A, t, i);
                    i9(i), (a = this.convert(A, s, i));
                    break;
                  case 'OpenType':
                  case 'TrueType':
                  case 'CIDFontType2':
                    (this.mimetype = 'font/opentype'),
                      (a = this.checkAndRepair(A, t, i)),
                      this.isOpenType && (i9(i), (g = 'OpenType'));
                    break;
                  default:
                    throw new x(`Font ${g} is not supported`);
                }
              } catch (A) {
                m(A), this.fallbackToSystemFont(i);
                return;
              }
              i3(i),
                (this.data = a),
                (this.type = g),
                (this.subtype = r),
                (this.fontMatrix = i.fontMatrix),
                (this.widths = i.widths),
                (this.defaultWidth = i.defaultWidth),
                (this.toUnicode = i.toUnicode),
                (this.seacMap = i.seacMap);
            }
            get renderer() {
              return b(this, 'renderer', iw.create(this, !0));
            }
            exportData(A = !1) {
              let t, i;
              let a = A ? [...i1, ...i2] : i1,
                s = Object.create(null);
              for (t of a) void 0 !== (i = this[t]) && (s[t] = i);
              return s;
            }
            fallbackToSystemFont(A) {
              this.missingFile = !0;
              let { name: t, type: i } = this,
                a = t5(t),
                s = t6(),
                g = t4(),
                r = !!s[a],
                n = !(!g[a] || !s[g[a]]);
              a = s[a] || g[a] || a;
              let o = ib()[a];
              o &&
                (isNaN(this.ascent) && (this.ascent = o.ascent / 1e3),
                isNaN(this.descent) && (this.descent = o.descent / 1e3),
                isNaN(this.capHeight) && (this.capHeight = o.capHeight / 1e3)),
                (this.bold = /bold/gi.test(a)),
                (this.italic = /oblique|italic/gi.test(a)),
                (this.black = /Black/g.test(t));
              let I = /Narrow/g.test(t);
              if (
                ((this.remeasure =
                  (!r || I) && Object.keys(this.widths).length > 0),
                (r || n) &&
                  'CIDFontType2' === i &&
                  this.cidEncoding.startsWith('Identity-'))
              ) {
                let i = A.cidToGidMap,
                  a = [];
                if (
                  (ae(a, it()),
                  /Arial-?Black/i.test(t)
                    ? ae(a, ii())
                    : /Calibri/i.test(t) && ae(a, ia()),
                  i)
                ) {
                  for (let A in a) {
                    let t = a[A];
                    void 0 !== i[t] && (a[+A] = i[t]);
                  }
                  i.length !== this.toUnicode.length &&
                    A.hasIncludedToUnicodeMap &&
                    this.toUnicode instanceof io &&
                    this.toUnicode.forEach(function (A, t) {
                      let s = a[A];
                      void 0 === i[s] && (a[+A] = t);
                    });
                }
                this.toUnicode instanceof io ||
                  this.toUnicode.forEach(function (A, t) {
                    a[+A] = t;
                  }),
                  (this.toFontChar = a),
                  (this.toUnicode = new ir(a));
              } else if (/Symbol/i.test(a))
                this.toFontChar = at(tk, tV(), this.differences);
              else if (/Dingbats/i.test(a))
                this.toFontChar = at(tF, tj(), this.differences);
              else if (r || n) {
                let A = at(this.defaultEncoding, tV(), this.differences);
                'CIDFontType2' !== i ||
                  this.cidEncoding.startsWith('Identity-') ||
                  this.toUnicode instanceof io ||
                  this.toUnicode.forEach(function (t, i) {
                    A[+t] = i;
                  }),
                  (this.toFontChar = A);
              } else {
                let A = tV(),
                  i = [];
                this.toUnicode.forEach((t, a) => {
                  if (!this.composite) {
                    let i = t_(
                      this.differences[t] || this.defaultEncoding[t],
                      A
                    );
                    -1 !== i && (a = i);
                  }
                  i[+t] = a;
                }),
                  this.composite &&
                    this.toUnicode instanceof io &&
                    /Tahoma|Verdana/i.test(t) &&
                    ae(i, it()),
                  (this.toFontChar = i);
              }
              i3(A), (this.loadedName = a.split('-', 1)[0]);
            }
            checkAndRepair(A, t, i) {
              var a, s;
              let g, r, n, o;
              let I = [
                'OS/2',
                'cmap',
                'head',
                'hhea',
                'hmtx',
                'maxp',
                'name',
                'post',
                'loca',
                'glyf',
                'fpgm',
                'prep',
                'cvt ',
                'CFF ',
              ];
              function l(A, t) {
                let i = Object.create(null);
                (i['OS/2'] = null),
                  (i.cmap = null),
                  (i.head = null),
                  (i.hhea = null),
                  (i.hmtx = null),
                  (i.maxp = null),
                  (i.name = null),
                  (i.post = null);
                for (let a = 0; a < t; a++) {
                  let t = (function (A) {
                    let t = A.getString(4),
                      i = A.getInt32() >>> 0,
                      a = A.getInt32() >>> 0,
                      s = A.getInt32() >>> 0,
                      g = A.pos;
                    (A.pos = A.start || 0), A.skip(a);
                    let r = A.getBytes(s);
                    return (
                      (A.pos = g),
                      'head' === t &&
                        ((r[8] = r[9] = r[10] = r[11] = 0), (r[17] |= 32)),
                      { tag: t, checksum: i, length: s, offset: a, data: r }
                    );
                  })(A);
                  I.includes(t.tag) && 0 !== t.length && (i[t.tag] = t);
                }
                return i;
              }
              function C(A) {
                return {
                  version: A.getString(4),
                  numTables: A.getUint16(),
                  searchRange: A.getUint16(),
                  entrySelector: A.getUint16(),
                  rangeShift: A.getUint16(),
                };
              }
              function B(A) {
                let i, a;
                let s = (t.start || 0) + A.offset;
                t.pos = s;
                let g = [[], []],
                  r = [],
                  n = A.length,
                  o = s + n;
                if (0 !== t.getUint16() || n < 6) return [g, r];
                let I = t.getUint16(),
                  l = t.getUint16();
                for (i = 0; i < I && t.pos + 12 <= o; i++) {
                  let A = {
                    platform: t.getUint16(),
                    encoding: t.getUint16(),
                    language: t.getUint16(),
                    name: t.getUint16(),
                    length: t.getUint16(),
                    offset: t.getUint16(),
                  };
                  ((1 === A.platform && 0 === A.encoding && 0 === A.language) ||
                    ai(A)) &&
                    r.push(A);
                }
                for (i = 0, a = r.length; i < a; i++) {
                  let A = r[i];
                  if (A.length <= 0) continue;
                  let a = s + l + A.offset;
                  if (a + A.length > o) continue;
                  t.pos = a;
                  let n = A.name;
                  if (A.encoding) {
                    let i = '';
                    for (let a = 0, s = A.length; a < s; a += 2)
                      i += String.fromCharCode(t.getUint16());
                    g[1][n] = i;
                  } else g[0][n] = t.getString(A.length);
                }
                return [g, r];
              }
              let h = [
                0, 0, 0, 0, 0, 0, 0, 0, -2, -2, -2, -2, 0, 0, -2, -5, -1, -1,
                -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, -1, -1, -1, -1, 1, -1,
                -999, 0, 1, 0, -1, -2, 0, -1, -2, -1, -1, 0, -1, -1, 0, 0, -999,
                -999, -1, -1, -1, -1, -2, -999, -2, -2, -999, 0, -2, -2, 0, 0,
                -2, 0, -2, 0, 0, 0, -2, -1, -1, 1, 1, 0, 0, -1, -1, -1, -1, -1,
                -1, -1, 0, 0, -1, 0, -1, -1, 0, -999, -1, -1, -1, -1, -1, -1, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, -999, -999, -999, -999,
                -999, -1, -1, -2, -2, 0, 0, 0, 0, -1, -1, -999, -2, -2, 0, 0,
                -1, -2, -2, 0, 0, 0, -1, -1, -1, -2,
              ];
              function Q(A, t) {
                let i,
                  a,
                  s,
                  g,
                  r,
                  n = A.data,
                  o = 0,
                  I = 0,
                  l = 0,
                  C = [],
                  B = [],
                  Q = [],
                  c = t.tooComplexToFollowFunctions,
                  E = !1,
                  u = 0,
                  d = 0;
                for (let A = n.length; o < A; ) {
                  let A = n[o++];
                  if (64 === A) {
                    if (((a = n[o++]), E || d)) o += a;
                    else for (i = 0; i < a; i++) C.push(n[o++]);
                  } else if (65 === A) {
                    if (((a = n[o++]), E || d)) o += 2 * a;
                    else
                      for (i = 0; i < a; i++)
                        (s = n[o++]), C.push((s << 8) | n[o++]);
                  } else if (176 == (248 & A)) {
                    if (((a = A - 176 + 1), E || d)) o += a;
                    else for (i = 0; i < a; i++) C.push(n[o++]);
                  } else if (184 == (248 & A)) {
                    if (((a = A - 184 + 1), E || d)) o += 2 * a;
                    else
                      for (i = 0; i < a; i++)
                        (s = n[o++]), C.push(i6(s, n[o++]));
                  } else if (43 !== A || c) {
                    if (44 !== A || c) {
                      if (45 === A) {
                        if (E) (E = !1), (I = o);
                        else {
                          if (!(r = B.pop())) {
                            m('TT: ENDF bad stack'), (t.hintsValid = !1);
                            return;
                          }
                          (g = Q.pop()),
                            (n = r.data),
                            (o = r.i),
                            (t.functionsStackDeltas[g] = C.length - r.stackTop);
                        }
                      } else if (137 === A)
                        (E || d) &&
                          (m('TT: nested IDEFs not allowed'), (c = !0)),
                          (E = !0),
                          (l = o);
                      else if (88 === A) ++u;
                      else if (27 === A) d = u;
                      else if (89 === A) d === u && (d = 0), --u;
                      else if (28 === A && !E && !d) {
                        let A = C.at(-1);
                        A > 0 && (o += A - 1);
                      }
                    } else
                      (E || d) && (m('TT: nested FDEFs not allowed'), (c = !0)),
                        (E = !0),
                        (l = o),
                        (g = C.pop()),
                        (t.functionsDefined[g] = { data: n, i: o });
                  } else if (!E && !d) {
                    if (isNaN((g = C.at(-1))))
                      p('TT: CALL empty stack (or invalid entry).');
                    else if (
                      ((t.functionsUsed[g] = !0), g in t.functionsStackDeltas)
                    ) {
                      let A = C.length + t.functionsStackDeltas[g];
                      if (A < 0) {
                        m('TT: CALL invalid functions stack delta.'),
                          (t.hintsValid = !1);
                        return;
                      }
                      C.length = A;
                    } else if (g in t.functionsDefined && !Q.includes(g)) {
                      if (
                        (B.push({ data: n, i: o, stackTop: C.length - 1 }),
                        Q.push(g),
                        !(r = t.functionsDefined[g]))
                      ) {
                        m('TT: CALL non-existent function'),
                          (t.hintsValid = !1);
                        return;
                      }
                      (n = r.data), (o = r.i);
                    }
                  }
                  if (!E && !d) {
                    let t = 0;
                    for (
                      A <= 142
                        ? (t = h[A])
                        : A >= 192 && A <= 223
                          ? (t = -1)
                          : A >= 224 && (t = -2),
                        A >= 113 &&
                          A <= 117 &&
                          (isNaN((a = C.pop())) || (t = -(2 * a)));
                      t < 0 && C.length > 0;

                    )
                      C.pop(), t++;
                    for (; t > 0; ) C.push(NaN), t--;
                  }
                }
                t.tooComplexToFollowFunctions = c;
                let f = [n];
                o > n.length && f.push(new Uint8Array(o - n.length)),
                  l > I &&
                    (m('TT: complementing a missing function tail'),
                    f.push(new Uint8Array([34, 45]))),
                  (function (A, t) {
                    if (t.length > 1) {
                      let i,
                        a,
                        s = 0;
                      for (i = 0, a = t.length; i < a; i++) s += t[i].length;
                      s = (s + 3) & -4;
                      let g = new Uint8Array(s),
                        r = 0;
                      for (i = 0, a = t.length; i < a; i++)
                        g.set(t[i], r), (r += t[i].length);
                      (A.data = g), (A.length = s);
                    }
                  })(A, f);
              }
              if (aA((t = new AZ(new Uint8Array(t.getBytes()))))) {
                let A = (function (A, t) {
                  let i;
                  let { numFonts: a, offsetTable: s } = (function (A) {
                      let t = A.getString(4);
                      w('ttcf' === t, 'Must be a TrueType Collection font.');
                      let i = A.getUint16(),
                        a = A.getUint16(),
                        s = A.getInt32() >>> 0,
                        g = [];
                      for (let t = 0; t < s; t++) g.push(A.getInt32() >>> 0);
                      let r = {
                        ttcTag: t,
                        majorVersion: i,
                        minorVersion: a,
                        numFonts: s,
                        offsetTable: g,
                      };
                      switch (i) {
                        case 1:
                          return r;
                        case 2:
                          return (
                            (r.dsigTag = A.getInt32() >>> 0),
                            (r.dsigLength = A.getInt32() >>> 0),
                            (r.dsigOffset = A.getInt32() >>> 0),
                            r
                          );
                      }
                      throw new x(
                        `Invalid TrueType Collection majorVersion: ${i}.`
                      );
                    })(A),
                    g = t.split('+');
                  for (let r = 0; r < a; r++) {
                    A.pos = (A.start || 0) + s[r];
                    let a = C(A),
                      n = l(A, a.numTables);
                    if (!n.name)
                      throw new x(
                        'TrueType Collection font must contain a "name" table.'
                      );
                    let [o] = B(n.name);
                    for (let A = 0, s = o.length; A < s; A++)
                      for (let s = 0, r = o[A].length; s < r; s++) {
                        let r = o[A][s]?.replaceAll(/\s/g, '');
                        if (r) {
                          if (r === t) return { header: a, tables: n };
                          if (!(g.length < 2))
                            for (let A of g)
                              r === A &&
                                (i = { name: A, header: a, tables: n });
                        }
                      }
                  }
                  if (i)
                    return (
                      m(
                        `TrueType Collection does not contain "${t}" font, falling back to "${i.name}" font instead.`
                      ),
                      { header: i.header, tables: i.tables }
                    );
                  throw new x(
                    `TrueType Collection does not contain "${t}" font.`
                  );
                })(t, this.name);
                (g = A.header), (r = A.tables);
              } else (g = C(t)), (r = l(t, g.numTables));
              let c = !r['CFF '];
              if (c) {
                if (!r.loca) throw new x('Required "loca" table is not found');
                r.glyf ||
                  (m(
                    'Required "glyf" table is not found -- trying to recover.'
                  ),
                  (r.glyf = { tag: 'glyf', data: new Uint8Array(0) })),
                  (this.isOpenType = !1);
              } else {
                let t =
                  i.composite &&
                  (i.cidToGidMap?.length > 0 || !(i.cMap instanceof tl));
                if (
                  ('OTTO' === g.version && !t) ||
                  !r.head ||
                  !r.hhea ||
                  !r.maxp ||
                  !r.post
                )
                  return (
                    (n = new iI((o = new AZ(r['CFF '].data)), i)),
                    i9(i),
                    this.convert(A, n, i)
                  );
                delete r.glyf,
                  delete r.loca,
                  delete r.fpgm,
                  delete r.prep,
                  delete r['cvt '],
                  (this.isOpenType = !0);
              }
              if (!r.maxp) throw new x('Required "maxp" table is not found');
              t.pos = (t.start || 0) + r.maxp.offset;
              let E = t.getInt32(),
                u = t.getUint16();
              if (65536 !== E && 20480 !== E) {
                if (6 === r.maxp.length) E = 20480;
                else {
                  if (!(r.maxp.length >= 32))
                    throw new x('"maxp" table has a wrong version number');
                  E = 65536;
                }
                (a = r.maxp.data),
                  (s = E),
                  (a[3] = 255 & s),
                  (a[2] = s >>> 8),
                  (a[1] = s >>> 16),
                  (a[0] = s >>> 24);
              }
              if (i.scaleFactors?.length === u && c) {
                let { scaleFactors: A } = i,
                  t = (r.head.data[50] << 8) + r.head.data[51],
                  a = new ik({
                    glyfTable: r.glyf.data,
                    isGlyphLocationsLong: t,
                    locaTable: r.loca.data,
                    numGlyphs: u,
                  });
                a.scale(A);
                let { glyf: s, loca: g, isLocationLong: n } = a.write();
                (r.glyf.data = s),
                  (r.loca.data = g),
                  !!t !== n &&
                    ((r.head.data[50] = 0), (r.head.data[51] = n ? 1 : 0));
                let o = r.hmtx.data;
                for (let t = 0; t < u; t++) {
                  let i = 4 * t,
                    a = Math.round(A[t] * ((o[i] << 8) + o[i + 1]));
                  (o[i] = (a >> 8) & 255),
                    (o[i + 1] = 255 & a),
                    i8(o, i + 2, Math.round(A[t] * i6(o[i + 2], o[i + 3])));
                }
              }
              let d = u + 1,
                f = !0;
              d > 65535 &&
                ((f = !1),
                (d = u),
                m('Not enough space in glyfs to duplicate first glyph.'));
              let y = 0,
                D = 0;
              E >= 65536 &&
                r.maxp.length >= 32 &&
                ((t.pos += 8),
                t.getUint16() > 2 &&
                  ((r.maxp.data[14] = 0), (r.maxp.data[15] = 2)),
                (t.pos += 4),
                (y = t.getUint16()),
                (t.pos += 4),
                (D = t.getUint16())),
                (r.maxp.data[4] = d >> 8),
                (r.maxp.data[5] = 255 & d);
              let b = (function (A, t, i, a) {
                let s = {
                  functionsDefined: [],
                  functionsUsed: [],
                  functionsStackDeltas: [],
                  tooComplexToFollowFunctions: !1,
                  hintsValid: !0,
                };
                if (
                  (A && Q(A, s),
                  t && Q(t, s),
                  A &&
                    (function (A, t) {
                      if (!A.tooComplexToFollowFunctions) {
                        if (A.functionsDefined.length > t)
                          m('TT: more functions defined than expected'),
                            (A.hintsValid = !1);
                        else
                          for (
                            let i = 0, a = A.functionsUsed.length;
                            i < a;
                            i++
                          ) {
                            if (i > t) {
                              m('TT: invalid function id: ' + i),
                                (A.hintsValid = !1);
                              return;
                            }
                            if (A.functionsUsed[i] && !A.functionsDefined[i]) {
                              m('TT: undefined function: ' + i),
                                (A.hintsValid = !1);
                              return;
                            }
                          }
                      }
                    })(s, a),
                  i && 1 & i.length)
                ) {
                  let A = new Uint8Array(i.length + 1);
                  A.set(i.data), (i.data = A);
                }
                return s.hintsValid;
              })(r.fpgm, r.prep, r['cvt '], y);
              if (
                (b || (delete r.fpgm, delete r.prep, delete r['cvt ']),
                (function (A, t, i, a, s, g) {
                  if (!t) {
                    i && (i.data = null);
                    return;
                  }
                  (A.pos = (A.start || 0) + t.offset),
                    (A.pos += 4),
                    (A.pos += 2),
                    (A.pos += 2),
                    (A.pos += 2),
                    (A.pos += 2),
                    (A.pos += 2),
                    (A.pos += 2),
                    (A.pos += 2),
                    (A.pos += 2),
                    (A.pos += 2);
                  let r = A.getUint16();
                  (A.pos += 8), (A.pos += 2);
                  let n = A.getUint16();
                  0 !== r &&
                    (2 & ((a.data[44] << 8) + a.data[45]) ||
                      ((t.data[22] = 0), (t.data[23] = 0))),
                    n > s &&
                      (p(
                        `The numOfMetrics (${n}) should not be greater than the numGlyphs (${s}).`
                      ),
                      (n = s),
                      (t.data[34] = (65280 & n) >> 8),
                      (t.data[35] = 255 & n));
                  let o = s - n - ((i.length - 4 * n) >> 1);
                  if (o > 0) {
                    let A = new Uint8Array(i.length + 2 * o);
                    A.set(i.data),
                      g &&
                        ((A[i.length] = i.data[2]),
                        (A[i.length + 1] = i.data[3])),
                      (i.data = A);
                  }
                })(t, r.hhea, r.hmtx, r.head, d, f),
                !r.head)
              )
                throw new x('Required "head" table is not found');
              !(function (A, t, i) {
                var a;
                let s = A.data,
                  g =
                    ((a = s[0]), (a << 24) + (s[1] << 16) + (s[2] << 8) + s[3]);
                g >> 16 != 1 &&
                  (p('Attempting to fix invalid version in head table: ' + g),
                  (s[0] = 0),
                  (s[1] = 1),
                  (s[2] = 0),
                  (s[3] = 0));
                let r = (s[50] << 8) + s[51];
                if (r < 0 || r > 1) {
                  p(
                    'Attempting to fix invalid indexToLocFormat in head table: ' +
                      r
                  );
                  let A = t + 1;
                  if (i === A << 1) (s[50] = 0), (s[51] = 0);
                  else {
                    if (i !== A << 2)
                      throw new x('Could not fix indexToLocFormat: ' + r);
                    (s[50] = 0), (s[51] = 1);
                  }
                }
              })(r.head, u, c ? r.loca.length : 0);
              let k = Object.create(null);
              if (c) {
                let A = (r.head.data[50] << 8) + r.head.data[51],
                  t = (function (A, t, i, a, s, g, r) {
                    let n, o, I, l, C;
                    a
                      ? ((n = 4),
                        (o = function (A, t) {
                          return (
                            (A[t] << 24) |
                            (A[t + 1] << 16) |
                            (A[t + 2] << 8) |
                            A[t + 3]
                          );
                        }),
                        (I = function (A, t, i) {
                          (A[t] = (i >>> 24) & 255),
                            (A[t + 1] = (i >> 16) & 255),
                            (A[t + 2] = (i >> 8) & 255),
                            (A[t + 3] = 255 & i);
                        }))
                      : ((n = 2),
                        (o = function (A, t) {
                          return (A[t] << 9) | (A[t + 1] << 1);
                        }),
                        (I = function (A, t, i) {
                          (A[t] = (i >> 9) & 255), (A[t + 1] = (i >> 1) & 255);
                        }));
                    let B = g ? i + 1 : i,
                      h = n * (1 + B),
                      Q = new Uint8Array(h);
                    Q.set(A.data.subarray(0, h)), (A.data = Q);
                    let c = t.data,
                      E = c.length,
                      u = new Uint8Array(E),
                      d = [];
                    for (l = 0, C = 0; l < i + 1; l++, C += n) {
                      let A = o(Q, C);
                      A > E && (A = E),
                        d.push({ index: l, offset: A, endOffset: 0 });
                    }
                    for (
                      d.sort((A, t) => A.offset - t.offset), l = 0;
                      l < i;
                      l++
                    )
                      d[l].endOffset = d[l + 1].offset;
                    for (
                      d.sort((A, t) => A.index - t.index), l = 0;
                      l < i;
                      l++
                    ) {
                      let { offset: A, endOffset: t } = d[l];
                      if (0 !== A || 0 !== t) break;
                      let i = d[l + 1].offset;
                      if (0 !== i) {
                        d[l].endOffset = i;
                        break;
                      }
                    }
                    let f = d.at(-2);
                    0 !== f.offset && 0 === f.endOffset && (f.endOffset = E);
                    let p = Object.create(null),
                      m = 0;
                    for (I(Q, 0, 0), l = 0, C = n; l < i; l++, C += n) {
                      let A = (function (A, t, i, a, s, g) {
                          let r = { length: 0, sizeOfInstructions: 0 };
                          if (
                            t < 0 ||
                            t >= A.length ||
                            i > A.length ||
                            i - t <= 12
                          )
                            return r;
                          let n = A.subarray(t, i),
                            o = i6(n[2], n[3]),
                            I = i6(n[4], n[5]),
                            l = i6(n[6], n[7]),
                            C = i6(n[8], n[9]);
                          o > l && (i8(n, 2, l), i8(n, 6, o)),
                            I > C && (i8(n, 4, C), i8(n, 8, I));
                          let B = i6(n[0], n[1]);
                          if (B < 0)
                            return (
                              B < -1 || (a.set(n, s), (r.length = n.length)), r
                            );
                          let h,
                            Q = 10,
                            c = 0;
                          for (h = 0; h < B; h++)
                            (c = ((n[Q] << 8) | n[Q + 1]) + 1), (Q += 2);
                          let E = Q,
                            u = (n[Q] << 8) | n[Q + 1];
                          (r.sizeOfInstructions = u), (Q += 2 + u);
                          let d = Q,
                            f = 0;
                          for (h = 0; h < c; h++) {
                            let A = n[Q++];
                            192 & A && (n[Q - 1] = 63 & A);
                            let t = 2;
                            2 & A ? (t = 1) : 16 & A && (t = 0);
                            let i = 2;
                            4 & A ? (i = 1) : 32 & A && (i = 0);
                            let a = t + i;
                            if (((f += a), 8 & A)) {
                              let A = n[Q++];
                              0 === A && (n[Q - 1] ^= 8),
                                (h += A),
                                (f += A * a);
                            }
                          }
                          if (0 === f) return r;
                          let p = Q + f;
                          return (
                            p > n.length ||
                              (!g && u > 0
                                ? (a.set(n.subarray(0, E), s),
                                  a.set([0, 0], s + E),
                                  a.set(n.subarray(d, p), s + E + 2),
                                  (p -= u),
                                  n.length - p > 3 && (p = (p + 3) & -4),
                                  (r.length = p))
                                : n.length - p > 3
                                  ? ((p = (p + 3) & -4),
                                    a.set(n.subarray(0, p), s),
                                    (r.length = p))
                                  : (a.set(n, s), (r.length = n.length))),
                            r
                          );
                        })(c, d[l].offset, d[l].endOffset, u, m, s),
                        t = A.length;
                      0 === t && (p[l] = !0),
                        A.sizeOfInstructions > r && (r = A.sizeOfInstructions),
                        I(Q, C, (m += t));
                    }
                    if (0 === m) {
                      let A = new Uint8Array([
                        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0,
                      ]);
                      for (l = 0, C = n; l < B; l++, C += n) I(Q, C, A.length);
                      t.data = A;
                    } else if (g) {
                      let i = o(Q, n);
                      u.length > i + m
                        ? (t.data = u.subarray(0, i + m))
                        : ((t.data = new Uint8Array(i + m)),
                          t.data.set(u.subarray(0, m))),
                        t.data.set(u.subarray(0, i), m),
                        I(A.data, Q.length - n, m + i);
                    } else t.data = u.subarray(0, m);
                    return { missingGlyphs: p, maxSizeOfInstructions: r };
                  })(r.loca, r.glyf, u, A, b, f, D);
                (k = t.missingGlyphs),
                  E >= 65536 &&
                    r.maxp.length >= 32 &&
                    ((r.maxp.data[26] = t.maxSizeOfInstructions >> 8),
                    (r.maxp.data[27] = 255 & t.maxSizeOfInstructions));
              }
              if (!r.hhea) throw new x('Required "hhea" table is not found');
              0 === r.hhea.data[10] &&
                0 === r.hhea.data[11] &&
                ((r.hhea.data[10] = 255), (r.hhea.data[11] = 255));
              let F = {
                unitsPerEm: (r.head.data[18] << 8) + r.head.data[19],
                yMax: i6(r.head.data[42], r.head.data[43]),
                yMin: i6(r.head.data[38], r.head.data[39]),
                ascent: i6(r.hhea.data[4], r.hhea.data[5]),
                descent: i6(r.hhea.data[6], r.hhea.data[7]),
                lineGap: i6(r.hhea.data[8], r.hhea.data[9]),
              };
              (this.ascent = F.ascent / F.unitsPerEm),
                (this.descent = F.descent / F.unitsPerEm),
                (this.lineGap = F.lineGap / F.unitsPerEm),
                this.cssFontInfo?.lineHeight
                  ? ((this.lineHeight = this.cssFontInfo.metrics.lineHeight),
                    (this.lineGap = this.cssFontInfo.metrics.lineGap))
                  : (this.lineHeight =
                      this.ascent - this.descent + this.lineGap),
                r.post &&
                  (function (A, i, a) {
                    let s = (t.start || 0) + A.offset;
                    t.pos = s;
                    let g = s + A.length,
                      r = t.getInt32();
                    t.skip(28);
                    let n,
                      o,
                      I = !0;
                    switch (r) {
                      case 65536:
                        n = t2;
                        break;
                      case 131072:
                        let l = t.getUint16();
                        if (l !== a) {
                          I = !1;
                          break;
                        }
                        let C = [];
                        for (o = 0; o < l; ++o) {
                          let A = t.getUint16();
                          if (A >= 32768) {
                            I = !1;
                            break;
                          }
                          C.push(A);
                        }
                        if (!I) break;
                        let B = [],
                          h = [];
                        for (; t.pos < g; ) {
                          let A = t.getByte();
                          for (o = 0, h.length = A; o < A; ++o)
                            h[o] = String.fromCharCode(t.getByte());
                          B.push(h.join(''));
                        }
                        for (o = 0, n = []; o < l; ++o) {
                          let A = C[o];
                          A < 258 ? n.push(t2[A]) : n.push(B[A - 258]);
                        }
                        break;
                      case 196608:
                        break;
                      default:
                        m('Unknown/unsupported post table version ' + r),
                          (I = !1),
                          i.defaultEncoding && (n = i.defaultEncoding);
                    }
                    i.glyphNames = n;
                  })(r.post, i, u),
                (r.post = { tag: 'post', data: an(i) });
              let S = Object.create(null);
              function R(A) {
                return !k[A];
              }
              if (i.composite) {
                let A = i.cidToGidMap || [],
                  t = 0 === A.length;
                i.cMap.forEach(function (i, a) {
                  if (('string' == typeof a && (a = aa(i, a, !0)), a > 65535))
                    throw new x('Max size of CID is 65,535');
                  let s = -1;
                  t ? (s = a) : void 0 !== A[a] && (s = A[a]),
                    s >= 0 && s < u && R(s) && (S[i] = s);
                });
              } else {
                let A = (function (A, t, i, a) {
                    let s, g;
                    if (!A)
                      return (
                        m('No cmap table available.'),
                        {
                          platformId: -1,
                          encodingId: -1,
                          mappings: [],
                          hasShortCmap: !1,
                        }
                      );
                    let r,
                      n = (t.start || 0) + A.offset;
                    (t.pos = n), t.skip(2);
                    let o = t.getUint16(),
                      I,
                      l = !1;
                    for (let A = 0; A < o; A++) {
                      let s = t.getUint16(),
                        g = t.getUint16(),
                        r = t.getInt32() >>> 0,
                        n = !1;
                      if (I?.platformId !== s || I?.encodingId !== g) {
                        if (0 !== s || (0 !== g && 1 !== g && 3 !== g)) {
                          if (1 === s && 0 === g) n = !0;
                          else if (3 !== s || 1 !== g || (!a && I)) {
                            if (i && 3 === s && 0 === g) {
                              n = !0;
                              let i = !0;
                              if (A < o - 1) {
                                let A = t.peekBytes(2);
                                (A[0] << 8) + A[1] < s && (i = !1);
                              }
                              i && (l = !0);
                            }
                          } else (n = !0), i || (l = !0);
                        } else n = !0;
                        if (
                          (n &&
                            (I = { platformId: s, encodingId: g, offset: r }),
                          l)
                        )
                          break;
                      }
                    }
                    if (
                      (I && (t.pos = n + I.offset), !I || -1 === t.peekByte())
                    )
                      return (
                        m('Could not find a preferred cmap table.'),
                        {
                          platformId: -1,
                          encodingId: -1,
                          mappings: [],
                          hasShortCmap: !1,
                        }
                      );
                    let C = t.getUint16(),
                      B = !1,
                      h = [];
                    if (0 === C) {
                      for (t.skip(4), s = 0; s < 256; s++) {
                        let A = t.getByte();
                        A && h.push({ charCode: s, glyphId: A });
                      }
                      B = !0;
                    } else if (2 === C) {
                      t.skip(4);
                      let A = [],
                        i = 0;
                      for (let a = 0; a < 256; a++) {
                        let a = t.getUint16() >> 3;
                        A.push(a), (i = Math.max(a, i));
                      }
                      let a = [];
                      for (let A = 0; A <= i; A++)
                        a.push({
                          firstCode: t.getUint16(),
                          entryCount: t.getUint16(),
                          idDelta: i6(t.getByte(), t.getByte()),
                          idRangePos: t.pos + t.getUint16(),
                        });
                      for (let i = 0; i < 256; i++)
                        if (0 === A[i])
                          (t.pos = a[0].idRangePos + 2 * i),
                            (g = t.getUint16()),
                            h.push({ charCode: i, glyphId: g });
                        else {
                          let r = a[A[i]];
                          for (s = 0; s < r.entryCount; s++) {
                            let A = (i << 8) + s + r.firstCode;
                            (t.pos = r.idRangePos + 2 * s),
                              0 !== (g = t.getUint16()) &&
                                (g = (g + r.idDelta) % 65536),
                              h.push({ charCode: A, glyphId: g });
                          }
                        }
                    } else if (4 === C) {
                      let A;
                      t.skip(4);
                      let i = t.getUint16() >> 1;
                      t.skip(6);
                      let a = [];
                      for (A = 0; A < i; A++) a.push({ end: t.getUint16() });
                      for (t.skip(2), A = 0; A < i; A++)
                        a[A].start = t.getUint16();
                      for (A = 0; A < i; A++) a[A].delta = t.getUint16();
                      let o,
                        I = 0;
                      for (A = 0; A < i; A++) {
                        r = a[A];
                        let s = t.getUint16();
                        s
                          ? ((o = (s >> 1) - (i - A)),
                            (r.offsetIndex = o),
                            (I = Math.max(I, o + r.end - r.start + 1)))
                          : (r.offsetIndex = -1);
                      }
                      let l = [];
                      for (s = 0; s < I; s++) l.push(t.getUint16());
                      for (A = 0; A < i; A++) {
                        n = (r = a[A]).start;
                        let t = r.end,
                          i = r.delta;
                        for (o = r.offsetIndex, s = n; s <= t; s++)
                          65535 !== s &&
                            ((g = ((g = o < 0 ? s : l[o + s - n]) + i) & 65535),
                            h.push({ charCode: s, glyphId: g }));
                      }
                    } else if (6 === C) {
                      t.skip(4);
                      let A = t.getUint16(),
                        i = t.getUint16();
                      for (s = 0; s < i; s++) {
                        g = t.getUint16();
                        let i = A + s;
                        h.push({ charCode: i, glyphId: g });
                      }
                    } else {
                      if (12 !== C)
                        return (
                          m('cmap table has unsupported format: ' + C),
                          {
                            platformId: -1,
                            encodingId: -1,
                            mappings: [],
                            hasShortCmap: !1,
                          }
                        );
                      {
                        t.skip(10);
                        let A = t.getInt32() >>> 0;
                        for (s = 0; s < A; s++) {
                          let A = t.getInt32() >>> 0,
                            i = t.getInt32() >>> 0,
                            a = t.getInt32() >>> 0;
                          for (let t = A; t <= i; t++)
                            h.push({ charCode: t, glyphId: a++ });
                        }
                      }
                    }
                    h.sort(function (A, t) {
                      return A.charCode - t.charCode;
                    });
                    for (let A = 1; A < h.length; A++)
                      h[A - 1].charCode === h[A].charCode &&
                        (h.splice(A, 1), A--);
                    return {
                      platformId: I.platformId,
                      encodingId: I.encodingId,
                      mappings: h,
                      hasShortCmap: B,
                    };
                  })(r.cmap, t, this.isSymbolicFont, i.hasEncoding),
                  a = A.platformId,
                  s = A.encodingId,
                  g = A.mappings,
                  n = [],
                  o = !1;
                if (
                  (i.hasEncoding &&
                    ('MacRomanEncoding' === i.baseEncodingName ||
                      'WinAnsiEncoding' === i.baseEncodingName) &&
                    (n = tS(i.baseEncodingName)),
                  i.hasEncoding &&
                    !this.isSymbolicFont &&
                    ((3 === a && 1 === s) || (1 === a && 0 === s)))
                ) {
                  let A = tV();
                  for (let t = 0; t < 256; t++) {
                    let r, o;
                    if (
                      !(r =
                        void 0 !== this.differences[t]
                          ? this.differences[t]
                          : n.length && '' !== n[t]
                            ? n[t]
                            : tD[t])
                    )
                      continue;
                    let I = t9(r, A);
                    if (
                      (3 === a && 1 === s
                        ? (o = A[I])
                        : 1 === a && 0 === s && (o = tw.indexOf(I)),
                      void 0 === o)
                    ) {
                      if (
                        !i.glyphNames &&
                        i.hasIncludedToUnicodeMap &&
                        !(this.toUnicode instanceof io)
                      ) {
                        let A = this.toUnicode.get(t);
                        A && (o = A.codePointAt(0));
                      }
                      if (void 0 === o) continue;
                    }
                    for (let A of g)
                      if (A.charCode === o) {
                        S[t] = A.glyphId;
                        break;
                      }
                  }
                } else if (0 === a) {
                  for (let A of g) S[A.charCode] = A.glyphId;
                  o = !0;
                } else if (3 === a && 0 === s)
                  for (let A of g) {
                    let t = A.charCode;
                    t >= 61440 && t <= 61695 && (t &= 255), (S[t] = A.glyphId);
                  }
                else for (let A of g) S[A.charCode] = A.glyphId;
                if (i.glyphNames && (n.length || this.differences.length))
                  for (let A = 0; A < 256; ++A) {
                    if (!o && void 0 !== S[A]) continue;
                    let t = this.differences[A] || n[A];
                    if (!t) continue;
                    let a = i.glyphNames.indexOf(t);
                    a > 0 && R(a) && (S[A] = a);
                  }
              }
              0 === S.length && (S[0] = 0);
              let G = d - 1;
              if ((f || (G = 0), !i.cssFontInfo)) {
                let A = as(S, R, G, this.toUnicode);
                (this.toFontChar = A.toFontChar),
                  (r.cmap = {
                    tag: 'cmap',
                    data: ag(A.charCodeToGlyphId, A.toUnicodeExtraMap, d),
                  }),
                  (r['OS/2'] &&
                    (function (A, t) {
                      t.pos = (t.start || 0) + A.offset;
                      let i = t.getUint16();
                      t.skip(60);
                      let a = t.getUint16();
                      return (
                        !(
                          (i < 4 && 768 & a) ||
                          t.getUint16() > t.getUint16()
                        ) &&
                        (t.skip(6),
                        0 !== t.getUint16() &&
                          ((A.data[8] = A.data[9] = 0), !0))
                      );
                    })(r['OS/2'], t)) ||
                    (r['OS/2'] = {
                      tag: 'OS/2',
                      data: ar(i, A.charCodeToGlyphId, F),
                    });
              }
              if (!c)
                try {
                  (o = new AZ(r['CFF '].data)),
                    (n = new tx(o, i, !0).parse()).duplicateFirstGlyph();
                  let A = new tX(n);
                  r['CFF '].data = A.compile();
                } catch {
                  m('Failed to compile font ' + i.loadedName);
                }
              if (r.name) {
                let [t, a] = B(r.name);
                (r.name.data = ao(A, t)),
                  (this.psName = t[0][6] || null),
                  i.composite ||
                    (function (A, t, i) {
                      if (
                        A.isInternalFont ||
                        A.hasIncludedToUnicodeMap ||
                        A.hasEncoding ||
                        A.toUnicode instanceof io ||
                        !t ||
                        0 === i.length ||
                        A.defaultEncoding === tb
                      )
                        return;
                      for (let A of i) if (!ai(A)) return;
                      let a = [],
                        s = tV();
                      for (let A in tb) {
                        let t = tb[A];
                        if ('' === t) continue;
                        let i = s[t];
                        void 0 !== i && (a[A] = String.fromCharCode(i));
                      }
                      a.length > 0 && A.toUnicode.amend(a);
                    })(i, this.isSymbolicFont, a);
              } else r.name = { tag: 'name', data: ao(this.name) };
              let N = new iM(g.version);
              for (let A in r) N.addTable(A, r[A].data);
              return N.toArray();
            }
            convert(A, t, i) {
              (i.fixedPitch = !1),
                i.builtInEncoding &&
                  (function (A, t) {
                    if (
                      A.isInternalFont ||
                      A.hasIncludedToUnicodeMap ||
                      t === A.defaultEncoding ||
                      A.toUnicode instanceof io
                    )
                      return;
                    let i = [],
                      a = tV();
                    for (let s in t) {
                      if (
                        A.hasEncoding &&
                        (A.baseEncodingName || void 0 !== A.differences[s])
                      )
                        continue;
                      let g = t_(t[s], a);
                      -1 !== g && (i[s] = String.fromCharCode(g));
                    }
                    i.length > 0 && A.toUnicode.amend(i);
                  })(i, i.builtInEncoding);
              let a = 1;
              t instanceof iI && (a = t.numGlyphs - 1);
              let s = t.getGlyphMapping(i),
                g = null,
                r = s,
                n = null;
              i.cssFontInfo ||
                ((g = as(s, t.hasGlyphId.bind(t), a, this.toUnicode)),
                (this.toFontChar = g.toFontChar),
                (r = g.charCodeToGlyphId),
                (n = g.toUnicodeExtraMap));
              let o = t.numGlyphs;
              function I(A, t) {
                for (let i in A) if (t === A[i]) return 0 | i;
                return (
                  (g.charCodeToGlyphId[g.nextAvailableFontCharCode] = t),
                  g.nextAvailableFontCharCode++
                );
              }
              let C = t.seacs;
              if (g && C?.length) {
                let A = i.fontMatrix || l,
                  a = t.getCharset(),
                  r = Object.create(null);
                for (let t in C) {
                  t |= 0;
                  let i = C[t],
                    n = tD[i[2]],
                    o = tD[i[3]],
                    l = a.indexOf(n),
                    B = a.indexOf(o);
                  if (l < 0 || B < 0) continue;
                  let h = {
                      x: i[0] * A[0] + i[1] * A[2] + A[4],
                      y: i[0] * A[1] + i[1] * A[3] + A[5],
                    },
                    Q = (function (A, t) {
                      let i = null;
                      for (let a in A) t === A[a] && (i ||= []).push(0 | a);
                      return i;
                    })(s, t);
                  if (Q)
                    for (let A of Q) {
                      let t = g.charCodeToGlyphId,
                        i = I(t, l),
                        a = I(t, B);
                      r[A] = {
                        baseFontCharCode: i,
                        accentFontCharCode: a,
                        accentOffset: h,
                      };
                    }
                }
                i.seacMap = r;
              }
              let B = i.fontMatrix
                  ? 1 / Math.max(...i.fontMatrix.slice(0, 4).map(Math.abs))
                  : 1e3,
                h = new iM('OTTO');
              return (
                h.addTable('CFF ', t.data),
                h.addTable('OS/2', ar(i, r)),
                h.addTable('cmap', ag(r, n, o)),
                h.addTable(
                  'head',
/*
  Pattern: hexStrings
*/
                  '\x00\x01\x00\x00\x00\x00\x10\x00\x00\x00\x00\x00_\x0f<\xf5\x00\x00' +
                    i4(B) +
                    "\x00\x00\x00\x00\x9e\v~'\x00\x00\x00\x00\x9e\v~'\x00\x00" +
                    i4(i.descent) +
                    '\x0f\xff' +
                    i4(i.ascent) +
                    i7(i.italicAngle ? 2 : 0) +
/*
  Pattern: hexStrings
*/
                    '\x00\x11\x00\x00\x00\x00\x00\x00'
                ),
                h.addTable(
                  'hhea',
                  '\x00\x01\x00\x00' +
                    i4(i.ascent) +
                    i4(i.descent) +
/*
  Pattern: hexStrings
*/
                    '\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00' +
                    i4(i.capHeight) +
                    i4(Math.tan(i.italicAngle) * i.xHeight) +
/*
  Pattern: hexStrings
*/
                    '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00' +
                    i7(o)
                ),
                h.addTable(
                  'hmtx',
                  (function () {
                    let A = t.charstrings,
                      i = t.cff ? t.cff.widths : null,
                      a = '\x00\x00\x00\x00';
                    for (let t = 1; t < o; t++) {
                      let s = 0;
                      if (A) {
                        let i = A[t - 1];
                        s = 'width' in i ? i.width : 0;
                      } else i && (s = Math.ceil(i[t] || 0));
                      a += i7(s) + i7(0);
                    }
                    return a;
                  })()
                ),
                h.addTable('maxp', '\x00\x00P\x00' + i7(o)),
                h.addTable('name', ao(A)),
                h.addTable('post', an(i)),
                h.toArray()
              );
            }
            get _spaceWidth() {
              let A;
              for (let t of ['space', 'minus', 'one', 'i', 'I']) {
                if (t in this.widths) {
                  A = this.widths[t];
                  break;
                }
                let i = tV()[t],
                  a = 0;
                if (
                  (this.composite &&
                    this.cMap.contains(i) &&
                    'string' == typeof (a = this.cMap.lookup(i)) &&
                    (a = aa(i, a)),
                  !a && this.toUnicode && (a = this.toUnicode.charCodeOf(i)),
                  a <= 0 && (a = i),
                  (A = this.widths[a]))
                )
                  break;
              }
              return b(this, '_spaceWidth', A || this.defaultWidth);
            }
            _charToGlyph(A, t = !1) {
              let i,
                a,
                s,
                g = this._glyphCache[A];
              if (g?.isSpace === t) return g;
              let r = A;
              this.cMap?.contains(A) &&
                'string' == typeof (r = this.cMap.lookup(A)) &&
                (r = aa(A, r)),
                'number' != typeof (a = this.widths[r]) &&
                  (a = this.defaultWidth);
              let n = this.vmetrics?.[r],
                o = this.toUnicode.get(A) || A;
              'number' == typeof o && (o = String.fromCharCode(o));
              let I = void 0 !== this.toFontChar[A];
              if (((i = this.toFontChar[A] || A), this.missingFile)) {
                var l;
                let t = this.differences[A] || this.defaultEncoding[A];
                ('.notdef' === t || '' === t) &&
                  'Type1' === this.type &&
                  ((i = 32),
                  '' === t &&
                    ((a ||= this._spaceWidth), (o = String.fromCharCode(i)))),
                  (i =
                    (l = i) >= 65520 && l <= 65535
                      ? 0
                      : l >= 62976 && l <= 63743
                        ? tz()[l] || l
                        : 173 === l
                          ? 45
                          : l);
              }
              this.isType3Font && (s = i);
              let C = null;
              if (this.seacMap?.[A]) {
                I = !0;
                let t = this.seacMap[A];
                (i = t.baseFontCharCode),
                  (C = {
                    fontChar: String.fromCodePoint(t.accentFontCharCode),
                    offset: t.accentOffset,
                  });
              }
              let B = '';
              if (
                ('number' == typeof i &&
                  (i <= 1114111
                    ? (B = String.fromCodePoint(i))
                    : m(`charToGlyph - invalid fontCharCode: ${i}`)),
                this.missingFile && this.vertical && 1 === B.length)
              ) {
                let A = t8()[B.charCodeAt(0)];
                A && (B = o = String.fromCharCode(A));
              }
              return (
                (g = new i5(A, B, o, C, a, n, s, t, I)),
                (this._glyphCache[A] = g)
              );
            }
            charsToGlyphs(A) {
              let t = this._charsCache[A];
              if (t) return t;
              if (((t = []), this.cMap)) {
                let i = Object.create(null),
                  a = A.length,
                  s = 0;
                for (; s < a; ) {
                  this.cMap.readCharCode(A, s, i);
                  let { charcode: a, length: g } = i;
                  s += g;
                  let r = this._charToGlyph(
                    a,
                    1 === g && 32 === A.charCodeAt(s - 1)
                  );
                  t.push(r);
                }
              } else
                for (let i = 0, a = A.length; i < a; ++i) {
                  let a = A.charCodeAt(i),
                    s = this._charToGlyph(a, 32 === a);
                  t.push(s);
                }
              return (this._charsCache[A] = t);
            }
            getCharPositions(A) {
              let t = [];
              if (this.cMap) {
                let i = Object.create(null),
                  a = 0;
                for (; a < A.length; ) {
                  this.cMap.readCharCode(A, a, i);
                  let s = i.length;
                  t.push([a, a + s]), (a += s);
                }
              } else
                for (let i = 0, a = A.length; i < a; ++i) t.push([i, i + 1]);
              return t;
            }
            get glyphCacheValues() {
              return Object.values(this._glyphCache);
            }
            encodeString(A) {
              let t = [],
                i = [],
                a = () => t.length % 2 == 1,
                s =
                  this.toUnicode instanceof io
                    ? (A) => this.toUnicode.charCodeOf(A)
                    : (A) => this.toUnicode.charCodeOf(String.fromCodePoint(A));
              for (let g = 0, r = A.length; g < r; g++) {
                let r = A.codePointAt(g);
                if (
                  (r > 55295 && (r < 57344 || r > 65533) && g++, this.toUnicode)
                ) {
                  let A = s(r);
                  if (-1 !== A) {
                    a() && (t.push(i.join('')), (i.length = 0));
                    for (
                      let t =
                        (this.cMap ? this.cMap.getCharCodeLength(A) : 1) - 1;
                      t >= 0;
                      t--
                    )
                      i.push(String.fromCharCode((A >> (8 * t)) & 255));
                    continue;
                  }
                }
                a() || (t.push(i.join('')), (i.length = 0)),
                  i.push(String.fromCodePoint(r));
              }
              return t.push(i.join('')), t;
            }
          }
          class al {
            constructor(A) {
              (this.error = A),
                (this.loadedName = 'g_font_error'),
                (this.missingFile = !0);
            }
            charsToGlyphs() {
              return [];
            }
            encodeString(A) {
              return [A];
            }
            exportData(A = !1) {
              return { error: this.error };
            }
          }
          class aC {
            constructor() {
              y('Cannot initialize Pattern.');
            }
            static parseShading(A, t, i, a, s) {
              let g = A instanceof AC ? A.dict : A,
                r = g.get('ShadingType');
              try {
                switch (r) {
                  case 2:
                  case 3:
                    return new ah(g, t, i, a, s);
                  case 4:
                  case 5:
                  case 6:
                  case 7:
                    return new au(A, t, i, a, s);
                  default:
                    throw new x('Unsupported ShadingType: ' + r);
                }
              } catch (A) {
                if (A instanceof AQ) throw A;
                return m(A), new ad();
              }
            }
          }
          class aB {
            static SMALL_NUMBER = 1e-6;
            getIR() {
              y('Abstract method `getIR` called.');
            }
          }
          class ah extends aB {
            constructor(A, t, i, a, s) {
              super(), (this.shadingType = A.get('ShadingType'));
              let g = 0;
              if (
                (2 === this.shadingType
                  ? (g = 4)
                  : 3 === this.shadingType && (g = 6),
                (this.coordsArr = A.getArray('Coords')),
                !Ak(this.coordsArr, g))
              )
                throw new x('RadialAxialShading: Invalid /Coords array.');
              let r = Az.parse({
                cs: A.getRaw('CS') || A.getRaw('ColorSpace'),
                xref: t,
                resources: i,
                pdfFunctionFactory: a,
                localColorSpaceCache: s,
              });
              this.bbox = AR(A.getArray('BBox'), null);
              let n = 0,
                o = 1,
                I = A.getArray('Domain');
              Ak(I, 2) && ([n, o] = I);
              let l = !1,
                C = !1,
                B = A.getArray('Extend');
              if (
                (Array.isArray(B) &&
                  2 === B.length &&
                  B.every((A) => 'boolean' == typeof A) &&
                  ([l, C] = B),
                !(3 !== this.shadingType || (l && C)))
              ) {
                let [A, t, i, a, s, g] = this.coordsArr,
                  r = Math.hypot(A - a, t - s);
                i <= g + r && g <= i + r && m('Unsupported radial gradient.');
              }
              (this.extendStart = l), (this.extendEnd = C);
              let h = A.getRaw('Function'),
                Q = a.createFromArray(h),
                c = (o - n) / 840,
                E = (this.colorStops = []);
              if (n >= o || c <= 0) {
                p('Bad shading domain.');
                return;
              }
              let u = new Float32Array(r.numComps),
                d = new Float32Array(1),
                f,
                y = 0;
              (d[0] = n), Q(d, 0, u, 0);
              let w = r.getRgb(u, 0),
                D = v.makeHexColor(w[0], w[1], w[2]);
              E.push([0, D]);
              let b = 1;
              (d[0] = n + c), Q(d, 0, u, 0);
              let k = r.getRgb(u, 0),
                F = k[0] - w[0] + 1,
                S = k[1] - w[1] + 1,
                R = k[2] - w[2] + 1,
                G = k[0] - w[0] - 1,
                N = k[1] - w[1] - 1,
                U = k[2] - w[2] - 1;
              for (let A = 2; A < 840; A++) {
                (d[0] = n + A * c), Q(d, 0, u, 0), (f = r.getRgb(u, 0));
                let t = A - y;
                if (
                  ((F = Math.min(F, (f[0] - w[0] + 1) / t)),
                  (S = Math.min(S, (f[1] - w[1] + 1) / t)),
                  (R = Math.min(R, (f[2] - w[2] + 1) / t)),
                  (G = Math.max(G, (f[0] - w[0] - 1) / t)),
                  (N = Math.max(N, (f[1] - w[1] - 1) / t)),
                  (U = Math.max(U, (f[2] - w[2] - 1) / t)),
                  !(G <= F && N <= S && U <= R))
                ) {
                  let A = v.makeHexColor(k[0], k[1], k[2]);
                  E.push([b / 840, A]),
                    (F = f[0] - k[0] + 1),
                    (S = f[1] - k[1] + 1),
                    (R = f[2] - k[2] + 1),
                    (G = f[0] - k[0] - 1),
                    (N = f[1] - k[1] - 1),
                    (U = f[2] - k[2] - 1),
                    (y = b),
                    (w = k);
                }
                (b = A), (k = f);
              }
              let M = v.makeHexColor(k[0], k[1], k[2]);
              E.push([1, M]);
              let J = 'transparent';
              A.has('Background') &&
                ((f = r.getRgb(A.get('Background'), 0)),
                (J = v.makeHexColor(f[0], f[1], f[2]))),
                l || (E.unshift([0, J]), (E[1][0] += aB.SMALL_NUMBER)),
                C || ((E.at(-1)[0] -= aB.SMALL_NUMBER), E.push([1, J])),
                (this.colorStops = E);
            }
            getIR() {
              let A, t, i, a, s;
              let { coordsArr: g, shadingType: r } = this;
              return (
                2 === r
                  ? ((t = [g[0], g[1]]),
                    (i = [g[2], g[3]]),
                    (a = null),
                    (s = null),
                    (A = 'axial'))
                  : 3 === r
                    ? ((t = [g[0], g[1]]),
                      (i = [g[3], g[4]]),
                      (a = g[2]),
                      (s = g[5]),
                      (A = 'radial'))
                    : y(`getPattern type unknown: ${r}`),
                ['RadialAxial', A, this.bbox, this.colorStops, t, i, a, s]
              );
            }
          }
          class aQ {
            constructor(A, t) {
              (this.stream = A),
                (this.context = t),
                (this.buffer = 0),
                (this.bufferLength = 0);
              let i = t.numComps;
              this.tmpCompsBuf = new Float32Array(i);
              let a = t.colorSpace.numComps;
              this.tmpCsCompsBuf = t.colorFn
                ? new Float32Array(a)
                : this.tmpCompsBuf;
            }
            get hasData() {
              if (this.stream.end) return this.stream.pos < this.stream.end;
              if (this.bufferLength > 0) return !0;
              let A = this.stream.getByte();
              return (
                !(A < 0) && ((this.buffer = A), (this.bufferLength = 8), !0)
              );
            }
            readBits(A) {
              let t = this.buffer,
                i = this.bufferLength;
              if (32 === A) {
                if (0 === i)
                  return (
                    ((this.stream.getByte() << 24) |
                      (this.stream.getByte() << 16) |
                      (this.stream.getByte() << 8) |
                      this.stream.getByte()) >>>
                    0
                  );
                t =
                  (t << 24) |
                  (this.stream.getByte() << 16) |
                  (this.stream.getByte() << 8) |
                  this.stream.getByte();
                let A = this.stream.getByte();
                return (
                  (this.buffer = A & ((1 << i) - 1)),
                  ((t << (8 - i)) | ((255 & A) >> i)) >>> 0
                );
              }
              if (8 === A && 0 === i) return this.stream.getByte();
              for (; i < A; ) (t = (t << 8) | this.stream.getByte()), (i += 8);
              return (
                (i -= A),
                (this.bufferLength = i),
                (this.buffer = t & ((1 << i) - 1)),
                t >> i
              );
            }
            align() {
              (this.buffer = 0), (this.bufferLength = 0);
            }
            readFlag() {
              return this.readBits(this.context.bitsPerFlag);
            }
            readCoordinate() {
              let A = this.context.bitsPerCoordinate,
                t = this.readBits(A),
                i = this.readBits(A),
                a = this.context.decode,
                s = A < 32 ? 1 / ((1 << A) - 1) : 23283064365386963e-26;
              return [
                t * s * (a[1] - a[0]) + a[0],
                i * s * (a[3] - a[2]) + a[2],
              ];
            }
            readComponents() {
              let A = this.context.numComps,
                t = this.context.bitsPerComponent,
                i = t < 32 ? 1 / ((1 << t) - 1) : 23283064365386963e-26,
                a = this.context.decode,
                s = this.tmpCompsBuf;
              for (let g = 0, r = 4; g < A; g++, r += 2) {
                let A = this.readBits(t);
                s[g] = A * i * (a[r + 1] - a[r]) + a[r];
              }
              let g = this.tmpCsCompsBuf;
              return (
                this.context.colorFn && this.context.colorFn(s, 0, g, 0),
                this.context.colorSpace.getRgb(g, 0)
              );
            }
          }
          let ac = Object.create(null);
          function aE(A) {
            return (ac[A] ||= (function (A) {
              let t = [];
              for (let i = 0; i <= A; i++) {
                let a = i / A,
                  s = 1 - a;
                t.push(
                  new Float32Array([
                    s ** 3,
                    3 * a * s ** 2,
                    3 * a ** 2 * s,
                    a ** 3,
                  ])
                );
              }
              return t;
            })(A));
          }
          class au extends aB {
            static MIN_SPLIT_PATCH_CHUNKS_AMOUNT = 3;
            static MAX_SPLIT_PATCH_CHUNKS_AMOUNT = 20;
            static TRIANGLE_DENSITY = 20;
            constructor(A, t, i, a, s) {
              if ((super(), !(A instanceof AC)))
                throw new x('Mesh data is not a stream');
              let g = A.dict;
              (this.shadingType = g.get('ShadingType')),
                (this.bbox = AR(g.getArray('BBox'), null));
              let r = Az.parse({
                cs: g.getRaw('CS') || g.getRaw('ColorSpace'),
                xref: t,
                resources: i,
                pdfFunctionFactory: a,
                localColorSpaceCache: s,
              });
              this.background = g.has('Background')
                ? r.getRgb(g.get('Background'), 0)
                : null;
              let n = g.getRaw('Function'),
                o = n ? a.createFromArray(n) : null;
              (this.coords = []), (this.colors = []), (this.figures = []);
              let I = {
                  bitsPerCoordinate: g.get('BitsPerCoordinate'),
                  bitsPerComponent: g.get('BitsPerComponent'),
                  bitsPerFlag: g.get('BitsPerFlag'),
                  decode: g.getArray('Decode'),
                  colorFn: o,
                  colorSpace: r,
                  numComps: o ? 1 : r.numComps,
                },
                l = new aQ(A, I),
                C = !1;
              switch (this.shadingType) {
                case 4:
                  this._decodeType4Shading(l);
                  break;
                case 5:
                  let B = 0 | g.get('VerticesPerRow');
                  if (B < 2) throw new x('Invalid VerticesPerRow');
                  this._decodeType5Shading(l, B);
                  break;
                case 6:
                  this._decodeType6Shading(l), (C = !0);
                  break;
                case 7:
                  this._decodeType7Shading(l), (C = !0);
                  break;
                default:
                  y('Unsupported mesh type.');
              }
              if (C) {
                this._updateBounds();
                for (let A = 0, t = this.figures.length; A < t; A++)
                  this._buildFigureFromPatch(A);
              }
              this._updateBounds(), this._packData();
            }
            _decodeType4Shading(A) {
              let t = this.coords,
                i = this.colors,
                a = [],
                s = [],
                g = 0;
              for (; A.hasData; ) {
                let r = A.readFlag(),
                  n = A.readCoordinate(),
                  o = A.readComponents();
                if (0 === g) {
                  if (!(0 <= r && r <= 2)) throw new x('Unknown type4 flag');
                  switch (r) {
                    case 0:
                      g = 3;
                      break;
                    case 1:
                      s.push(s.at(-2), s.at(-1)), (g = 1);
                      break;
                    case 2:
                      s.push(s.at(-3), s.at(-1)), (g = 1);
                  }
                  a.push(r);
                }
                s.push(t.length), t.push(n), i.push(o), g--, A.align();
              }
              this.figures.push({
                type: 'triangles',
                coords: new Int32Array(s),
                colors: new Int32Array(s),
              });
            }
            _decodeType5Shading(A, t) {
              let i = this.coords,
                a = this.colors,
                s = [];
              for (; A.hasData; ) {
                let t = A.readCoordinate(),
                  g = A.readComponents();
                s.push(i.length), i.push(t), a.push(g);
              }
              this.figures.push({
                type: 'lattice',
                coords: new Int32Array(s),
                colors: new Int32Array(s),
                verticesPerRow: t,
              });
            }
            _decodeType6Shading(A) {
              let t = this.coords,
                i = this.colors,
                a = new Int32Array(16),
                s = new Int32Array(4);
              for (; A.hasData; ) {
                let g, r, n, o;
                let I = A.readFlag();
                if (!(0 <= I && I <= 3)) throw new x('Unknown type6 flag');
                let l = t.length;
                for (let i = 0, a = 0 !== I ? 8 : 12; i < a; i++)
                  t.push(A.readCoordinate());
                let C = i.length;
                for (let t = 0, a = 0 !== I ? 2 : 4; t < a; t++)
                  i.push(A.readComponents());
                switch (I) {
                  case 0:
                    (a[12] = l + 3),
                      (a[13] = l + 4),
                      (a[14] = l + 5),
                      (a[15] = l + 6),
                      (a[8] = l + 2),
                      (a[11] = l + 7),
                      (a[4] = l + 1),
                      (a[7] = l + 8),
                      (a[0] = l),
                      (a[1] = l + 11),
                      (a[2] = l + 10),
                      (a[3] = l + 9),
                      (s[2] = C + 1),
                      (s[3] = C + 2),
                      (s[0] = C),
                      (s[1] = C + 3);
                    break;
                  case 1:
                    (g = a[12]),
                      (r = a[13]),
                      (n = a[14]),
                      (o = a[15]),
                      (a[12] = o),
                      (a[13] = l + 0),
                      (a[14] = l + 1),
                      (a[15] = l + 2),
                      (a[8] = n),
                      (a[11] = l + 3),
                      (a[4] = r),
                      (a[7] = l + 4),
                      (a[0] = g),
                      (a[1] = l + 7),
                      (a[2] = l + 6),
                      (a[3] = l + 5),
                      (g = s[2]),
                      (r = s[3]),
                      (s[2] = r),
                      (s[3] = C),
                      (s[0] = g),
                      (s[1] = C + 1);
                    break;
                  case 2:
                    (g = a[15]),
                      (r = a[11]),
                      (a[12] = a[3]),
                      (a[13] = l + 0),
                      (a[14] = l + 1),
                      (a[15] = l + 2),
                      (a[8] = a[7]),
                      (a[11] = l + 3),
                      (a[4] = r),
                      (a[7] = l + 4),
                      (a[0] = g),
                      (a[1] = l + 7),
                      (a[2] = l + 6),
                      (a[3] = l + 5),
                      (g = s[3]),
                      (s[2] = s[1]),
                      (s[3] = C),
                      (s[0] = g),
                      (s[1] = C + 1);
                    break;
                  case 3:
                    (a[12] = a[0]),
                      (a[13] = l + 0),
                      (a[14] = l + 1),
                      (a[15] = l + 2),
                      (a[8] = a[1]),
                      (a[11] = l + 3),
                      (a[4] = a[2]),
                      (a[7] = l + 4),
                      (a[0] = a[3]),
                      (a[1] = l + 7),
                      (a[2] = l + 6),
                      (a[3] = l + 5),
                      (s[2] = s[0]),
                      (s[3] = C),
                      (s[0] = s[1]),
                      (s[1] = C + 1);
                }
                (a[5] = t.length),
                  t.push([
                    (-4 * t[a[0]][0] -
                      t[a[15]][0] +
                      6 * (t[a[4]][0] + t[a[1]][0]) -
                      2 * (t[a[12]][0] + t[a[3]][0]) +
                      3 * (t[a[13]][0] + t[a[7]][0])) /
                      9,
                    (-4 * t[a[0]][1] -
                      t[a[15]][1] +
                      6 * (t[a[4]][1] + t[a[1]][1]) -
                      2 * (t[a[12]][1] + t[a[3]][1]) +
                      3 * (t[a[13]][1] + t[a[7]][1])) /
                      9,
                  ]),
                  (a[6] = t.length),
                  t.push([
                    (-4 * t[a[3]][0] -
                      t[a[12]][0] +
                      6 * (t[a[2]][0] + t[a[7]][0]) -
                      2 * (t[a[0]][0] + t[a[15]][0]) +
                      3 * (t[a[4]][0] + t[a[14]][0])) /
                      9,
                    (-4 * t[a[3]][1] -
                      t[a[12]][1] +
                      6 * (t[a[2]][1] + t[a[7]][1]) -
                      2 * (t[a[0]][1] + t[a[15]][1]) +
                      3 * (t[a[4]][1] + t[a[14]][1])) /
                      9,
                  ]),
                  (a[9] = t.length),
                  t.push([
                    (-4 * t[a[12]][0] -
                      t[a[3]][0] +
                      6 * (t[a[8]][0] + t[a[13]][0]) -
                      2 * (t[a[0]][0] + t[a[15]][0]) +
                      3 * (t[a[11]][0] + t[a[1]][0])) /
                      9,
                    (-4 * t[a[12]][1] -
                      t[a[3]][1] +
                      6 * (t[a[8]][1] + t[a[13]][1]) -
                      2 * (t[a[0]][1] + t[a[15]][1]) +
                      3 * (t[a[11]][1] + t[a[1]][1])) /
                      9,
                  ]),
                  (a[10] = t.length),
                  t.push([
                    (-4 * t[a[15]][0] -
                      t[a[0]][0] +
                      6 * (t[a[11]][0] + t[a[14]][0]) -
                      2 * (t[a[12]][0] + t[a[3]][0]) +
                      3 * (t[a[2]][0] + t[a[8]][0])) /
                      9,
                    (-4 * t[a[15]][1] -
                      t[a[0]][1] +
                      6 * (t[a[11]][1] + t[a[14]][1]) -
                      2 * (t[a[12]][1] + t[a[3]][1]) +
                      3 * (t[a[2]][1] + t[a[8]][1])) /
                      9,
                  ]),
                  this.figures.push({
                    type: 'patch',
                    coords: new Int32Array(a),
                    colors: new Int32Array(s),
                  });
              }
            }
            _decodeType7Shading(A) {
              let t = this.coords,
                i = this.colors,
                a = new Int32Array(16),
                s = new Int32Array(4);
              for (; A.hasData; ) {
                let g, r, n, o;
                let I = A.readFlag();
                if (!(0 <= I && I <= 3)) throw new x('Unknown type7 flag');
                let l = t.length;
                for (let i = 0, a = 0 !== I ? 12 : 16; i < a; i++)
                  t.push(A.readCoordinate());
                let C = i.length;
                for (let t = 0, a = 0 !== I ? 2 : 4; t < a; t++)
                  i.push(A.readComponents());
                switch (I) {
                  case 0:
                    (a[12] = l + 3),
                      (a[13] = l + 4),
                      (a[14] = l + 5),
                      (a[15] = l + 6),
                      (a[8] = l + 2),
                      (a[9] = l + 13),
                      (a[10] = l + 14),
                      (a[11] = l + 7),
                      (a[4] = l + 1),
                      (a[5] = l + 12),
                      (a[6] = l + 15),
                      (a[7] = l + 8),
                      (a[0] = l),
                      (a[1] = l + 11),
                      (a[2] = l + 10),
                      (a[3] = l + 9),
                      (s[2] = C + 1),
                      (s[3] = C + 2),
                      (s[0] = C),
                      (s[1] = C + 3);
                    break;
                  case 1:
                    (g = a[12]),
                      (r = a[13]),
                      (n = a[14]),
                      (o = a[15]),
                      (a[12] = o),
                      (a[13] = l + 0),
                      (a[14] = l + 1),
                      (a[15] = l + 2),
                      (a[8] = n),
                      (a[9] = l + 9),
                      (a[10] = l + 10),
                      (a[11] = l + 3),
                      (a[4] = r),
                      (a[5] = l + 8),
                      (a[6] = l + 11),
                      (a[7] = l + 4),
                      (a[0] = g),
                      (a[1] = l + 7),
                      (a[2] = l + 6),
                      (a[3] = l + 5),
                      (g = s[2]),
                      (r = s[3]),
                      (s[2] = r),
                      (s[3] = C),
                      (s[0] = g),
                      (s[1] = C + 1);
                    break;
                  case 2:
                    (g = a[15]),
                      (r = a[11]),
                      (a[12] = a[3]),
                      (a[13] = l + 0),
                      (a[14] = l + 1),
                      (a[15] = l + 2),
                      (a[8] = a[7]),
                      (a[9] = l + 9),
                      (a[10] = l + 10),
                      (a[11] = l + 3),
                      (a[4] = r),
                      (a[5] = l + 8),
                      (a[6] = l + 11),
                      (a[7] = l + 4),
                      (a[0] = g),
                      (a[1] = l + 7),
                      (a[2] = l + 6),
                      (a[3] = l + 5),
                      (g = s[3]),
                      (s[2] = s[1]),
                      (s[3] = C),
                      (s[0] = g),
                      (s[1] = C + 1);
                    break;
                  case 3:
                    (a[12] = a[0]),
                      (a[13] = l + 0),
                      (a[14] = l + 1),
                      (a[15] = l + 2),
                      (a[8] = a[1]),
                      (a[9] = l + 9),
                      (a[10] = l + 10),
                      (a[11] = l + 3),
                      (a[4] = a[2]),
                      (a[5] = l + 8),
                      (a[6] = l + 11),
                      (a[7] = l + 4),
                      (a[0] = a[3]),
                      (a[1] = l + 7),
                      (a[2] = l + 6),
                      (a[3] = l + 5),
                      (s[2] = s[0]),
                      (s[3] = C),
                      (s[0] = s[1]),
                      (s[1] = C + 1);
                }
                this.figures.push({
                  type: 'patch',
                  coords: new Int32Array(a),
                  colors: new Int32Array(s),
                });
              }
            }
            _buildFigureFromPatch(A) {
              let t = this.figures[A];
              w('patch' === t.type, 'Unexpected patch mesh figure');
              let i = this.coords,
                a = this.colors,
                s = t.coords,
                g = t.colors,
                r = Math.min(i[s[0]][0], i[s[3]][0], i[s[12]][0], i[s[15]][0]),
                n = Math.min(i[s[0]][1], i[s[3]][1], i[s[12]][1], i[s[15]][1]),
                o = Math.max(i[s[0]][0], i[s[3]][0], i[s[12]][0], i[s[15]][0]),
                I = Math.max(i[s[0]][1], i[s[3]][1], i[s[12]][1], i[s[15]][1]),
                l = Math.ceil(
                  ((o - r) * au.TRIANGLE_DENSITY) /
                    (this.bounds[2] - this.bounds[0])
                );
              l = Math.max(
                au.MIN_SPLIT_PATCH_CHUNKS_AMOUNT,
                Math.min(au.MAX_SPLIT_PATCH_CHUNKS_AMOUNT, l)
              );
              let C = Math.ceil(
                ((I - n) * au.TRIANGLE_DENSITY) /
                  (this.bounds[3] - this.bounds[1])
              );
              C = Math.max(
                au.MIN_SPLIT_PATCH_CHUNKS_AMOUNT,
                Math.min(au.MAX_SPLIT_PATCH_CHUNKS_AMOUNT, C)
              );
              let B = l + 1,
                h = new Int32Array((C + 1) * B),
                Q = new Int32Array((C + 1) * B),
                c = 0,
                E = new Uint8Array(3),
                u = new Uint8Array(3),
                d = a[g[0]],
                f = a[g[1]],
                p = a[g[2]],
                m = a[g[3]],
                y = aE(C),
                D = aE(l);
              for (let A = 0; A <= C; A++) {
                (E[0] = ((d[0] * (C - A) + p[0] * A) / C) | 0),
                  (E[1] = ((d[1] * (C - A) + p[1] * A) / C) | 0),
                  (E[2] = ((d[2] * (C - A) + p[2] * A) / C) | 0),
                  (u[0] = ((f[0] * (C - A) + m[0] * A) / C) | 0),
                  (u[1] = ((f[1] * (C - A) + m[1] * A) / C) | 0),
                  (u[2] = ((f[2] * (C - A) + m[2] * A) / C) | 0);
                for (let t = 0; t <= l; t++, c++) {
                  if (!((0 !== A && A !== C) || (0 !== t && t !== l))) continue;
                  let g = 0,
                    r = 0,
                    n = 0;
                  for (let a = 0; a <= 3; a++)
                    for (let o = 0; o <= 3; o++, n++) {
                      let I = y[A][a] * D[t][o];
                      (g += i[s[n]][0] * I), (r += i[s[n]][1] * I);
                    }
                  (h[c] = i.length), i.push([g, r]), (Q[c] = a.length);
                  let o = new Uint8Array(3);
                  (o[0] = ((E[0] * (l - t) + u[0] * t) / l) | 0),
                    (o[1] = ((E[1] * (l - t) + u[1] * t) / l) | 0),
                    (o[2] = ((E[2] * (l - t) + u[2] * t) / l) | 0),
                    a.push(o);
                }
              }
              (h[0] = s[0]),
                (Q[0] = g[0]),
                (h[l] = s[3]),
                (Q[l] = g[1]),
                (h[B * C] = s[12]),
                (Q[B * C] = g[2]),
                (h[B * C + l] = s[15]),
                (Q[B * C + l] = g[3]),
                (this.figures[A] = {
                  type: 'lattice',
                  coords: h,
                  colors: Q,
                  verticesPerRow: B,
                });
            }
            _updateBounds() {
              let A = this.coords[0][0],
                t = this.coords[0][1],
                i = A,
                a = t;
              for (let s = 1, g = this.coords.length; s < g; s++) {
                let g = this.coords[s][0],
                  r = this.coords[s][1];
                (A = A > g ? g : A),
                  (t = t > r ? r : t),
                  (i = i < g ? g : i),
                  (a = a < r ? r : a);
              }
              this.bounds = [A, t, i, a];
            }
            _packData() {
              let A, t, i, a;
              let s = this.coords,
                g = new Float32Array(2 * s.length);
              for (A = 0, i = 0, t = s.length; A < t; A++) {
                let t = s[A];
                (g[i++] = t[0]), (g[i++] = t[1]);
              }
              this.coords = g;
              let r = this.colors,
                n = new Uint8Array(3 * r.length);
              for (A = 0, i = 0, t = r.length; A < t; A++) {
                let t = r[A];
                (n[i++] = t[0]), (n[i++] = t[1]), (n[i++] = t[2]);
              }
              this.colors = n;
              let o = this.figures;
              for (A = 0, t = o.length; A < t; A++) {
                let t = o[A],
                  s = t.coords,
                  g = t.colors;
                for (i = 0, a = s.length; i < a; i++) (s[i] *= 2), (g[i] *= 3);
              }
            }
            getIR() {
              let { bounds: A } = this;
              if (A[2] - A[0] == 0 || A[3] - A[1] == 0)
                throw new x(`Invalid MeshShading bounds: [${A}].`);
              return [
                'Mesh',
                this.shadingType,
                this.coords,
                this.colors,
                this.figures,
                A,
                this.bbox,
                this.background,
              ];
            }
          }
          class ad extends aB {
            getIR() {
              return ['Dummy'];
            }
          }
          function af(A, t, i) {
            let a = AF(t.getArray('Matrix'), I),
              s = AR(t.getArray('BBox'), null);
            if (!s || s[2] - s[0] == 0 || s[3] - s[1] == 0)
              throw new x('Invalid getTilingPatternIR /BBox array.');
            let g = t.get('XStep');
            if ('number' != typeof g)
              throw new x('Invalid getTilingPatternIR /XStep value.');
            let r = t.get('YStep');
            if ('number' != typeof r)
              throw new x('Invalid getTilingPatternIR /YStep value.');
            let n = t.get('PaintType');
            if (!Number.isInteger(n))
              throw new x('Invalid getTilingPatternIR /PaintType value.');
            let o = t.get('TilingType');
            if (!Number.isInteger(o))
              throw new x('Invalid getTilingPatternIR /TilingType value.');
            return ['TilingPattern', i, A, a, s, g, r, n, o];
          }
          let ap = [
              1.3877, 1, 1, 1, 0.97801, 0.92482, 0.89552, 0.91133, 0.81988,
              0.97566, 0.98152, 0.93548, 0.93548, 1.2798, 0.85284, 0.92794, 1,
              0.96134, 1.54657, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133,
              0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.82845, 0.82845,
              0.85284, 0.85284, 0.85284, 0.75859, 0.92138, 0.83908, 0.7762,
              0.73293, 0.87289, 0.73133, 0.7514, 0.81921, 0.87356, 0.95958,
              0.59526, 0.75727, 0.69225, 1.04924, 0.9121, 0.86943, 0.79795,
              0.88198, 0.77958, 0.70864, 0.81055, 0.90399, 0.88653, 0.96017,
              0.82577, 0.77892, 0.78257, 0.97507, 1.54657, 0.97507, 0.85284,
              0.89552, 0.90176, 0.88762, 0.8785, 0.75241, 0.8785, 0.90518,
              0.95015, 0.77618, 0.8785, 0.88401, 0.91916, 0.86304, 0.88401,
              0.91488, 0.8785, 0.8801, 0.8785, 0.8785, 0.91343, 0.7173, 1.04106,
              0.8785, 0.85075, 0.95794, 0.82616, 0.85162, 0.79492, 0.88331,
              1.69808, 0.88331, 0.85284, 0.97801, 0.89552, 0.91133, 0.89552,
              0.91133, 1.7801, 0.89552, 1.24487, 1.13254, 1.12401, 0.96839,
              0.85284, 0.68787, 0.70645, 0.85592, 0.90747, 1.01466, 1.0088,
              0.90323, 1, 1.07463, 1, 0.91056, 0.75806, 1.19118, 0.96839,
              0.78864, 0.82845, 0.84133, 0.75859, 0.83908, 0.83908, 0.83908,
              0.83908, 0.83908, 0.83908, 0.77539, 0.73293, 0.73133, 0.73133,
              0.73133, 0.73133, 0.95958, 0.95958, 0.95958, 0.95958, 0.88506,
              0.9121, 0.86943, 0.86943, 0.86943, 0.86943, 0.86943, 0.85284,
              0.87508, 0.90399, 0.90399, 0.90399, 0.90399, 0.77892, 0.79795,
              0.90807, 0.88762, 0.88762, 0.88762, 0.88762, 0.88762, 0.88762,
              0.8715, 0.75241, 0.90518, 0.90518, 0.90518, 0.90518, 0.88401,
              0.88401, 0.88401, 0.88401, 0.8785, 0.8785, 0.8801, 0.8801, 0.8801,
              0.8801, 0.8801, 0.90747, 0.89049, 0.8785, 0.8785, 0.8785, 0.8785,
              0.85162, 0.8785, 0.85162, 0.83908, 0.88762, 0.83908, 0.88762,
              0.83908, 0.88762, 0.73293, 0.75241, 0.73293, 0.75241, 0.73293,
              0.75241, 0.73293, 0.75241, 0.87289, 0.83016, 0.88506, 0.93125,
              0.73133, 0.90518, 0.73133, 0.90518, 0.73133, 0.90518, 0.73133,
              0.90518, 0.73133, 0.90518, 0.81921, 0.77618, 0.81921, 0.77618,
              0.81921, 0.77618, 1, 1, 0.87356, 0.8785, 0.91075, 0.89608,
              0.95958, 0.88401, 0.95958, 0.88401, 0.95958, 0.88401, 0.95958,
              0.88401, 0.95958, 0.88401, 0.76229, 0.90167, 0.59526, 0.91916, 1,
              1, 0.86304, 0.69225, 0.88401, 1, 1, 0.70424, 0.79468, 0.91926,
              0.88175, 0.70823, 0.94903, 0.9121, 0.8785, 1, 1, 0.9121, 0.8785,
              0.87802, 0.88656, 0.8785, 0.86943, 0.8801, 0.86943, 0.8801,
              0.86943, 0.8801, 0.87402, 0.89291, 0.77958, 0.91343, 1, 1,
              0.77958, 0.91343, 0.70864, 0.7173, 0.70864, 0.7173, 0.70864,
              0.7173, 0.70864, 0.7173, 1, 1, 0.81055, 0.75841, 0.81055, 1.06452,
              0.90399, 0.8785, 0.90399, 0.8785, 0.90399, 0.8785, 0.90399,
              0.8785, 0.90399, 0.8785, 0.90399, 0.8785, 0.96017, 0.95794,
              0.77892, 0.85162, 0.77892, 0.78257, 0.79492, 0.78257, 0.79492,
              0.78257, 0.79492, 0.9297, 0.56892, 0.83908, 0.88762, 0.77539,
              0.8715, 0.87508, 0.89049, 1, 1, 0.81055, 1.04106, 1.20528,
              1.20528, 1, 1.15543, 0.70674, 0.98387, 0.94721, 1.33431, 1.45894,
              0.95161, 1.06303, 0.83908, 0.80352, 0.57184, 0.6965, 0.56289,
              0.82001, 0.56029, 0.81235, 1.02988, 0.83908, 0.7762, 0.68156,
              0.80367, 0.73133, 0.78257, 0.87356, 0.86943, 0.95958, 0.75727,
              0.89019, 1.04924, 0.9121, 0.7648, 0.86943, 0.87356, 0.79795,
              0.78275, 0.81055, 0.77892, 0.9762, 0.82577, 0.99819, 0.84896,
              0.95958, 0.77892, 0.96108, 1.01407, 0.89049, 1.02988, 0.94211,
              0.96108, 0.8936, 0.84021, 0.87842, 0.96399, 0.79109, 0.89049,
              1.00813, 1.02988, 0.86077, 0.87445, 0.92099, 0.84723, 0.86513,
              0.8801, 0.75638, 0.85714, 0.78216, 0.79586, 0.87965, 0.94211,
              0.97747, 0.78287, 0.97926, 0.84971, 1.02988, 0.94211, 0.8801,
              0.94211, 0.84971, 0.73133, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              0.90264, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 0.90518, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.90548, 1,
              1, 1, 1, 1, 1, 0.96017, 0.95794, 0.96017, 0.95794, 0.96017,
              0.95794, 0.77892, 0.85162, 1, 1, 0.89552, 0.90527, 1, 0.90363,
              0.92794, 0.92794, 0.92794, 0.92794, 0.87012, 0.87012, 0.87012,
              0.89552, 0.89552, 1.42259, 0.71143, 1.06152, 1, 1, 1.03372,
              1.03372, 0.97171, 1.4956, 2.2807, 0.93835, 0.83406, 0.91133,
              0.84107, 0.91133, 1, 1, 1, 0.72021, 1, 1.23108, 0.83489, 0.88525,
              0.88525, 0.81499, 0.90527, 1.81055, 0.90527, 1.81055, 1.31006,
              1.53711, 0.94434, 1.08696, 1, 0.95018, 0.77192, 0.85284, 0.90747,
              1.17534, 0.69825, 0.9716, 1.37077, 0.90747, 0.90747, 0.85356,
              0.90747, 0.90747, 1.44947, 0.85284, 0.8941, 0.8941, 0.70572, 0.8,
              0.70572, 0.70572, 0.70572, 0.70572, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.99862, 0.99862, 1, 1, 1, 1,
              1, 1.08004, 0.91027, 1, 1, 1, 0.99862, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 0.90727, 0.90727, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1,
            ],
            am = { lineHeight: 1.2207, lineGap: 0.2207 },
            ay = [
              1.3877, 1, 1, 1, 0.97801, 0.92482, 0.89552, 0.91133, 0.81988,
              0.97566, 0.98152, 0.93548, 0.93548, 1.2798, 0.85284, 0.92794, 1,
              0.96134, 1.56239, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133,
              0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.82845, 0.82845,
              0.85284, 0.85284, 0.85284, 0.75859, 0.92138, 0.83908, 0.7762,
              0.71805, 0.87289, 0.73133, 0.7514, 0.81921, 0.87356, 0.95958,
              0.59526, 0.75727, 0.69225, 1.04924, 0.90872, 0.85938, 0.79795,
              0.87068, 0.77958, 0.69766, 0.81055, 0.90399, 0.88653, 0.96068,
              0.82577, 0.77892, 0.78257, 0.97507, 1.529, 0.97507, 0.85284,
              0.89552, 0.90176, 0.94908, 0.86411, 0.74012, 0.86411, 0.88323,
              0.95015, 0.86411, 0.86331, 0.88401, 0.91916, 0.86304, 0.88401,
              0.9039, 0.86331, 0.86331, 0.86411, 0.86411, 0.90464, 0.70852,
              1.04106, 0.86331, 0.84372, 0.95794, 0.82616, 0.84548, 0.79492,
              0.88331, 1.69808, 0.88331, 0.85284, 0.97801, 0.89552, 0.91133,
              0.89552, 0.91133, 1.7801, 0.89552, 1.24487, 1.13254, 1.19129,
              0.96839, 0.85284, 0.68787, 0.70645, 0.85592, 0.90747, 1.01466,
              1.0088, 0.90323, 1, 1.07463, 1, 0.91056, 0.75806, 1.19118,
              0.96839, 0.78864, 0.82845, 0.84133, 0.75859, 0.83908, 0.83908,
              0.83908, 0.83908, 0.83908, 0.83908, 0.77539, 0.71805, 0.73133,
              0.73133, 0.73133, 0.73133, 0.95958, 0.95958, 0.95958, 0.95958,
              0.88506, 0.90872, 0.85938, 0.85938, 0.85938, 0.85938, 0.85938,
              0.85284, 0.87068, 0.90399, 0.90399, 0.90399, 0.90399, 0.77892,
              0.79795, 0.90807, 0.94908, 0.94908, 0.94908, 0.94908, 0.94908,
              0.94908, 0.85887, 0.74012, 0.88323, 0.88323, 0.88323, 0.88323,
              0.88401, 0.88401, 0.88401, 0.88401, 0.8785, 0.86331, 0.86331,
              0.86331, 0.86331, 0.86331, 0.86331, 0.90747, 0.89049, 0.86331,
              0.86331, 0.86331, 0.86331, 0.84548, 0.86411, 0.84548, 0.83908,
              0.94908, 0.83908, 0.94908, 0.83908, 0.94908, 0.71805, 0.74012,
              0.71805, 0.74012, 0.71805, 0.74012, 0.71805, 0.74012, 0.87289,
              0.79538, 0.88506, 0.92726, 0.73133, 0.88323, 0.73133, 0.88323,
              0.73133, 0.88323, 0.73133, 0.88323, 0.73133, 0.88323, 0.81921,
              0.86411, 0.81921, 0.86411, 0.81921, 0.86411, 1, 1, 0.87356,
              0.86331, 0.91075, 0.8777, 0.95958, 0.88401, 0.95958, 0.88401,
              0.95958, 0.88401, 0.95958, 0.88401, 0.95958, 0.88401, 0.76467,
              0.90167, 0.59526, 0.91916, 1, 1, 0.86304, 0.69225, 0.88401, 1, 1,
              0.70424, 0.77312, 0.91926, 0.88175, 0.70823, 0.94903, 0.90872,
              0.86331, 1, 1, 0.90872, 0.86331, 0.86906, 0.88116, 0.86331,
              0.85938, 0.86331, 0.85938, 0.86331, 0.85938, 0.86331, 0.87402,
              0.86549, 0.77958, 0.90464, 1, 1, 0.77958, 0.90464, 0.69766,
              0.70852, 0.69766, 0.70852, 0.69766, 0.70852, 0.69766, 0.70852, 1,
              1, 0.81055, 0.75841, 0.81055, 1.06452, 0.90399, 0.86331, 0.90399,
              0.86331, 0.90399, 0.86331, 0.90399, 0.86331, 0.90399, 0.86331,
              0.90399, 0.86331, 0.96068, 0.95794, 0.77892, 0.84548, 0.77892,
              0.78257, 0.79492, 0.78257, 0.79492, 0.78257, 0.79492, 0.9297,
              0.56892, 0.83908, 0.94908, 0.77539, 0.85887, 0.87068, 0.89049, 1,
              1, 0.81055, 1.04106, 1.20528, 1.20528, 1, 1.15543, 0.70088,
              0.98387, 0.94721, 1.33431, 1.45894, 0.95161, 1.48387, 0.83908,
              0.80352, 0.57118, 0.6965, 0.56347, 0.79179, 0.55853, 0.80346,
              1.02988, 0.83908, 0.7762, 0.67174, 0.86036, 0.73133, 0.78257,
              0.87356, 0.86441, 0.95958, 0.75727, 0.89019, 1.04924, 0.90872,
              0.74889, 0.85938, 0.87891, 0.79795, 0.7957, 0.81055, 0.77892,
              0.97447, 0.82577, 0.97466, 0.87179, 0.95958, 0.77892, 0.94252,
              0.95612, 0.8753, 1.02988, 0.92733, 0.94252, 0.87411, 0.84021,
              0.8728, 0.95612, 0.74081, 0.8753, 1.02189, 1.02988, 0.84814,
              0.87445, 0.91822, 0.84723, 0.85668, 0.86331, 0.81344, 0.87581,
              0.76422, 0.82046, 0.96057, 0.92733, 0.99375, 0.78022, 0.95452,
              0.86015, 1.02988, 0.92733, 0.86331, 0.92733, 0.86015, 0.73133, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.90631, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.88323, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 0.85174, 1, 1, 1, 1, 1, 1, 0.96068, 0.95794,
              0.96068, 0.95794, 0.96068, 0.95794, 0.77892, 0.84548, 1, 1,
              0.89552, 0.90527, 1, 0.90363, 0.92794, 0.92794, 0.92794, 0.89807,
              0.87012, 0.87012, 0.87012, 0.89552, 0.89552, 1.42259, 0.71094,
              1.06152, 1, 1, 1.03372, 1.03372, 0.97171, 1.4956, 2.2807, 0.92972,
              0.83406, 0.91133, 0.83326, 0.91133, 1, 1, 1, 0.72021, 1, 1.23108,
              0.83489, 0.88525, 0.88525, 0.81499, 0.90616, 1.81055, 0.90527,
              1.81055, 1.3107, 1.53711, 0.94434, 1.08696, 1, 0.95018, 0.77192,
              0.85284, 0.90747, 1.17534, 0.69825, 0.9716, 1.37077, 0.90747,
              0.90747, 0.85356, 0.90747, 0.90747, 1.44947, 0.85284, 0.8941,
              0.8941, 0.70572, 0.8, 0.70572, 0.70572, 0.70572, 0.70572, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.99862,
              0.99862, 1, 1, 1, 1, 1, 1.08004, 0.91027, 1, 1, 1, 0.99862, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.90727, 0.90727, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            ],
            aw = { lineHeight: 1.2207, lineGap: 0.2207 },
            aD = [
              1.3877, 1, 1, 1, 1.17223, 1.1293, 0.89552, 0.91133, 0.80395,
              1.02269, 1.15601, 0.91056, 0.91056, 1.2798, 0.85284, 0.89807, 1,
              0.90861, 1.39543, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133,
              0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.96309, 0.96309,
              0.85284, 0.85284, 0.85284, 0.83319, 0.88071, 0.8675, 0.81552,
              0.72346, 0.85193, 0.73206, 0.7522, 0.81105, 0.86275, 0.90685,
              0.6377, 0.77892, 0.75593, 1.02638, 0.89249, 0.84118, 0.77452,
              0.85374, 0.75186, 0.67789, 0.79776, 0.88844, 0.85066, 0.94309,
              0.77818, 0.7306, 0.76659, 1.10369, 1.38313, 1.10369, 1.06139,
              0.89552, 0.8739, 0.9245, 0.9245, 0.83203, 0.9245, 0.85865,
              1.09842, 0.9245, 0.9245, 1.03297, 1.07692, 0.90918, 1.03297,
              0.94959, 0.9245, 0.92274, 0.9245, 0.9245, 1.02933, 0.77832,
              1.20562, 0.9245, 0.8916, 0.98986, 0.86621, 0.89453, 0.79004,
              0.94152, 1.77256, 0.94152, 0.85284, 0.97801, 0.89552, 0.91133,
              0.89552, 0.91133, 1.91729, 0.89552, 1.17889, 1.13254, 1.16359,
              0.92098, 0.85284, 0.68787, 0.71353, 0.84737, 0.90747, 1.0088,
              1.0044, 0.87683, 1, 1.09091, 1, 0.92229, 0.739, 1.15642, 0.92098,
              0.76288, 0.80504, 0.80972, 0.75859, 0.8675, 0.8675, 0.8675,
              0.8675, 0.8675, 0.8675, 0.76318, 0.72346, 0.73206, 0.73206,
              0.73206, 0.73206, 0.90685, 0.90685, 0.90685, 0.90685, 0.86477,
              0.89249, 0.84118, 0.84118, 0.84118, 0.84118, 0.84118, 0.85284,
              0.84557, 0.88844, 0.88844, 0.88844, 0.88844, 0.7306, 0.77452,
              0.86331, 0.9245, 0.9245, 0.9245, 0.9245, 0.9245, 0.9245, 0.84843,
              0.83203, 0.85865, 0.85865, 0.85865, 0.85865, 0.82601, 0.82601,
              0.82601, 0.82601, 0.94469, 0.9245, 0.92274, 0.92274, 0.92274,
              0.92274, 0.92274, 0.90747, 0.86651, 0.9245, 0.9245, 0.9245,
              0.9245, 0.89453, 0.9245, 0.89453, 0.8675, 0.9245, 0.8675, 0.9245,
              0.8675, 0.9245, 0.72346, 0.83203, 0.72346, 0.83203, 0.72346,
              0.83203, 0.72346, 0.83203, 0.85193, 0.8875, 0.86477, 0.99034,
              0.73206, 0.85865, 0.73206, 0.85865, 0.73206, 0.85865, 0.73206,
              0.85865, 0.73206, 0.85865, 0.81105, 0.9245, 0.81105, 0.9245,
              0.81105, 0.9245, 1, 1, 0.86275, 0.9245, 0.90872, 0.93591, 0.90685,
              0.82601, 0.90685, 0.82601, 0.90685, 0.82601, 0.90685, 1.03297,
              0.90685, 0.82601, 0.77896, 1.05611, 0.6377, 1.07692, 1, 1,
              0.90918, 0.75593, 1.03297, 1, 1, 0.76032, 0.9375, 0.98156,
              0.93407, 0.77261, 1.11429, 0.89249, 0.9245, 1, 1, 0.89249, 0.9245,
              0.92534, 0.86698, 0.9245, 0.84118, 0.92274, 0.84118, 0.92274,
              0.84118, 0.92274, 0.8667, 0.86291, 0.75186, 1.02933, 1, 1,
              0.75186, 1.02933, 0.67789, 0.77832, 0.67789, 0.77832, 0.67789,
              0.77832, 0.67789, 0.77832, 1, 1, 0.79776, 0.97655, 0.79776,
              1.23023, 0.88844, 0.9245, 0.88844, 0.9245, 0.88844, 0.9245,
              0.88844, 0.9245, 0.88844, 0.9245, 0.88844, 0.9245, 0.94309,
              0.98986, 0.7306, 0.89453, 0.7306, 0.76659, 0.79004, 0.76659,
              0.79004, 0.76659, 0.79004, 1.09231, 0.54873, 0.8675, 0.9245,
              0.76318, 0.84843, 0.84557, 0.86651, 1, 1, 0.79776, 1.20562,
              1.18622, 1.18622, 1, 1.1437, 0.67009, 0.96334, 0.93695, 1.35191,
              1.40909, 0.95161, 1.48387, 0.8675, 0.90861, 0.6192, 0.7363,
              0.64824, 0.82411, 0.56321, 0.85696, 1.23516, 0.8675, 0.81552,
              0.7286, 0.84134, 0.73206, 0.76659, 0.86275, 0.84369, 0.90685,
              0.77892, 0.85871, 1.02638, 0.89249, 0.75828, 0.84118, 0.85984,
              0.77452, 0.76466, 0.79776, 0.7306, 0.90782, 0.77818, 0.903,
              0.87291, 0.90685, 0.7306, 0.99058, 1.03667, 0.94635, 1.23516,
              0.9849, 0.99058, 0.92393, 0.8916, 0.942, 1.03667, 0.75026,
              0.94635, 1.0297, 1.23516, 0.90918, 0.94048, 0.98217, 0.89746,
              0.84153, 0.92274, 0.82507, 0.88832, 0.84438, 0.88178, 1.03525,
              0.9849, 1.00225, 0.78086, 0.97248, 0.89404, 1.23516, 0.9849,
              0.92274, 0.9849, 0.89404, 0.73206, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 0.89693, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 0.85865, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              0.90933, 1, 1, 1, 1, 1, 1, 0.94309, 0.98986, 0.94309, 0.98986,
              0.94309, 0.98986, 0.7306, 0.89453, 1, 1, 0.89552, 0.90527, 1,
              0.90186, 1.12308, 1.12308, 1.12308, 1.12308, 1.2566, 1.2566,
              1.2566, 0.89552, 0.89552, 1.42259, 0.68994, 1.03809, 1, 1, 1.0176,
              1.0176, 1.11523, 1.4956, 2.01462, 0.97858, 0.82616, 0.91133,
              0.83437, 0.91133, 1, 1, 1, 0.70508, 1, 1.23108, 0.79801, 0.84426,
              0.84426, 0.774, 0.90572, 1.81055, 0.90749, 1.81055, 1.28809,
              1.55469, 0.94434, 1.07806, 1, 0.97094, 0.7589, 0.85284, 0.90747,
              1.19658, 0.69825, 0.97622, 1.33512, 0.90747, 0.90747, 0.85284,
              0.90747, 0.90747, 1.44947, 0.85284, 0.8941, 0.8941, 0.70572, 0.8,
              0.70572, 0.70572, 0.70572, 0.70572, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.99862, 0.99862, 1, 1, 1, 1,
              1, 1.0336, 0.91027, 1, 1, 1, 0.99862, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1.05859, 1.05859, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1,
            ],
            ab = { lineHeight: 1.2207, lineGap: 0.2207 },
            ak = [
              1.3877, 1, 1, 1, 1.17223, 1.1293, 0.89552, 0.91133, 0.80395,
              1.02269, 1.15601, 0.91056, 0.91056, 1.2798, 0.85284, 0.89807, 1,
              0.90861, 1.39016, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133,
              0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.96309, 0.96309,
              0.85284, 0.85284, 0.85284, 0.83319, 0.88071, 0.8675, 0.81552,
              0.73834, 0.85193, 0.73206, 0.7522, 0.81105, 0.86275, 0.90685,
              0.6377, 0.77892, 0.75593, 1.02638, 0.89385, 0.85122, 0.77452,
              0.86503, 0.75186, 0.68887, 0.79776, 0.88844, 0.85066, 0.94258,
              0.77818, 0.7306, 0.76659, 1.10369, 1.39016, 1.10369, 1.06139,
              0.89552, 0.8739, 0.86128, 0.94469, 0.8457, 0.94469, 0.89464,
              1.09842, 0.84636, 0.94469, 1.03297, 1.07692, 0.90918, 1.03297,
              0.95897, 0.94469, 0.9482, 0.94469, 0.94469, 1.04692, 0.78223,
              1.20562, 0.94469, 0.90332, 0.98986, 0.86621, 0.90527, 0.79004,
              0.94152, 1.77256, 0.94152, 0.85284, 0.97801, 0.89552, 0.91133,
              0.89552, 0.91133, 1.91729, 0.89552, 1.17889, 1.13254, 1.08707,
              0.92098, 0.85284, 0.68787, 0.71353, 0.84737, 0.90747, 1.0088,
              1.0044, 0.87683, 1, 1.09091, 1, 0.92229, 0.739, 1.15642, 0.92098,
              0.76288, 0.80504, 0.80972, 0.75859, 0.8675, 0.8675, 0.8675,
              0.8675, 0.8675, 0.8675, 0.76318, 0.73834, 0.73206, 0.73206,
              0.73206, 0.73206, 0.90685, 0.90685, 0.90685, 0.90685, 0.86477,
              0.89385, 0.85122, 0.85122, 0.85122, 0.85122, 0.85122, 0.85284,
              0.85311, 0.88844, 0.88844, 0.88844, 0.88844, 0.7306, 0.77452,
              0.86331, 0.86128, 0.86128, 0.86128, 0.86128, 0.86128, 0.86128,
              0.8693, 0.8457, 0.89464, 0.89464, 0.89464, 0.89464, 0.82601,
              0.82601, 0.82601, 0.82601, 0.94469, 0.94469, 0.9482, 0.9482,
              0.9482, 0.9482, 0.9482, 0.90747, 0.86651, 0.94469, 0.94469,
              0.94469, 0.94469, 0.90527, 0.94469, 0.90527, 0.8675, 0.86128,
              0.8675, 0.86128, 0.8675, 0.86128, 0.73834, 0.8457, 0.73834,
              0.8457, 0.73834, 0.8457, 0.73834, 0.8457, 0.85193, 0.92454,
              0.86477, 0.9921, 0.73206, 0.89464, 0.73206, 0.89464, 0.73206,
              0.89464, 0.73206, 0.89464, 0.73206, 0.89464, 0.81105, 0.84636,
              0.81105, 0.84636, 0.81105, 0.84636, 1, 1, 0.86275, 0.94469,
              0.90872, 0.95786, 0.90685, 0.82601, 0.90685, 0.82601, 0.90685,
              0.82601, 0.90685, 1.03297, 0.90685, 0.82601, 0.77741, 1.05611,
              0.6377, 1.07692, 1, 1, 0.90918, 0.75593, 1.03297, 1, 1, 0.76032,
              0.90452, 0.98156, 1.11842, 0.77261, 1.11429, 0.89385, 0.94469, 1,
              1, 0.89385, 0.94469, 0.95877, 0.86901, 0.94469, 0.85122, 0.9482,
              0.85122, 0.9482, 0.85122, 0.9482, 0.8667, 0.90016, 0.75186,
              1.04692, 1, 1, 0.75186, 1.04692, 0.68887, 0.78223, 0.68887,
              0.78223, 0.68887, 0.78223, 0.68887, 0.78223, 1, 1, 0.79776,
              0.92188, 0.79776, 1.23023, 0.88844, 0.94469, 0.88844, 0.94469,
              0.88844, 0.94469, 0.88844, 0.94469, 0.88844, 0.94469, 0.88844,
              0.94469, 0.94258, 0.98986, 0.7306, 0.90527, 0.7306, 0.76659,
              0.79004, 0.76659, 0.79004, 0.76659, 0.79004, 1.09231, 0.54873,
              0.8675, 0.86128, 0.76318, 0.8693, 0.85311, 0.86651, 1, 1, 0.79776,
              1.20562, 1.18622, 1.18622, 1, 1.1437, 0.67742, 0.96334, 0.93695,
              1.35191, 1.40909, 0.95161, 1.48387, 0.86686, 0.90861, 0.62267,
              0.74359, 0.65649, 0.85498, 0.56963, 0.88254, 1.23516, 0.8675,
              0.81552, 0.75443, 0.84503, 0.73206, 0.76659, 0.86275, 0.85122,
              0.90685, 0.77892, 0.85746, 1.02638, 0.89385, 0.75657, 0.85122,
              0.86275, 0.77452, 0.74171, 0.79776, 0.7306, 0.95165, 0.77818,
              0.89772, 0.88831, 0.90685, 0.7306, 0.98142, 1.02191, 0.96576,
              1.23516, 0.99018, 0.98142, 0.9236, 0.89258, 0.94035, 1.02191,
              0.78848, 0.96576, 0.9561, 1.23516, 0.90918, 0.92578, 0.95424,
              0.89746, 0.83969, 0.9482, 0.80113, 0.89442, 0.85208, 0.86155,
              0.98022, 0.99018, 1.00452, 0.81209, 0.99247, 0.89181, 1.23516,
              0.99018, 0.9482, 0.99018, 0.89181, 0.73206, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 0.88844, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 0.89464, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 0.96766, 1, 1, 1, 1, 1, 1, 0.94258, 0.98986, 0.94258, 0.98986,
              0.94258, 0.98986, 0.7306, 0.90527, 1, 1, 0.89552, 0.90527, 1,
              0.90186, 1.12308, 1.12308, 1.12308, 1.12308, 1.2566, 1.2566,
              1.2566, 0.89552, 0.89552, 1.42259, 0.69043, 1.03809, 1, 1, 1.0176,
              1.0176, 1.11523, 1.4956, 2.01462, 0.99331, 0.82616, 0.91133,
              0.84286, 0.91133, 1, 1, 1, 0.70508, 1, 1.23108, 0.79801, 0.84426,
              0.84426, 0.774, 0.90527, 1.81055, 0.90527, 1.81055, 1.28809,
              1.55469, 0.94434, 1.07806, 1, 0.97094, 0.7589, 0.85284, 0.90747,
              1.19658, 0.69825, 0.97622, 1.33512, 0.90747, 0.90747, 0.85356,
              0.90747, 0.90747, 1.44947, 0.85284, 0.8941, 0.8941, 0.70572, 0.8,
              0.70572, 0.70572, 0.70572, 0.70572, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.99862, 0.99862, 1, 1, 1, 1,
              1, 1.0336, 0.91027, 1, 1, 1, 0.99862, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1.05859, 1.05859, 1, 1, 1, 1.07185, 0.99413, 0.96334,
              1.08065, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            ],
            aF = { lineHeight: 1.2207, lineGap: 0.2207 },
            aS = [
              0.76116, 1, 1, 1.0006, 0.99998, 0.99974, 0.99973, 0.99973,
              0.99982, 0.99977, 1.00087, 0.99998, 0.99998, 0.99959, 1.00003,
              1.0006, 0.99998, 1.0006, 1.0006, 0.99973, 0.99973, 0.99973,
              0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973,
              0.99998, 1, 1.00003, 1.00003, 1.00003, 1.00026, 0.9999, 0.99977,
              0.99977, 0.99977, 0.99977, 1.00001, 1.00026, 1.00022, 0.99977,
              1.0006, 0.99973, 0.99977, 1.00026, 0.99999, 0.99977, 1.00022,
              1.00001, 1.00022, 0.99977, 1.00001, 1.00026, 0.99977, 1.00001,
              1.00016, 1.00001, 1.00001, 1.00026, 0.99998, 1.0006, 0.99998,
              1.00003, 0.99973, 0.99998, 0.99973, 1.00026, 0.99973, 1.00026,
              0.99973, 0.99998, 1.00026, 1.00026, 1.0006, 1.0006, 0.99973,
              1.0006, 0.99982, 1.00026, 1.00026, 1.00026, 1.00026, 0.99959,
              0.99973, 0.99998, 1.00026, 0.99973, 1.00022, 0.99973, 0.99973, 1,
              0.99959, 1.00077, 0.99959, 1.00003, 0.99998, 0.99973, 0.99973,
              0.99973, 0.99973, 1.00077, 0.99973, 0.99998, 1.00025, 0.99968,
              0.99973, 1.00003, 1.00025, 0.60299, 1.00024, 1.06409, 1, 1,
              0.99998, 1, 0.99973, 1.0006, 0.99998, 1, 0.99936, 0.99973,
              1.00002, 1.00002, 1.00002, 1.00026, 0.99977, 0.99977, 0.99977,
              0.99977, 0.99977, 0.99977, 1, 0.99977, 1.00001, 1.00001, 1.00001,
              1.00001, 1.0006, 1.0006, 1.0006, 1.0006, 0.99977, 0.99977,
              1.00022, 1.00022, 1.00022, 1.00022, 1.00022, 1.00003, 1.00022,
              0.99977, 0.99977, 0.99977, 0.99977, 1.00001, 1.00001, 1.00026,
              0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99982,
              0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 1.0006, 1.0006,
              1.0006, 1.0006, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026,
              1.00026, 1.00026, 1.06409, 1.00026, 1.00026, 1.00026, 1.00026,
              1.00026, 0.99973, 1.00026, 0.99973, 0.99977, 0.99973, 0.99977,
              0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973,
              0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 1.03374, 0.99977,
              1.00026, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973,
              1.00001, 0.99973, 1.00001, 0.99973, 1.00022, 1.00026, 1.00022,
              1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 0.99977, 1.00026,
              0.99977, 1.00026, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006,
              1.0006, 1.0006, 1.0006, 1.0006, 1.00042, 0.99973, 0.99973, 1.0006,
              0.99977, 0.99973, 0.99973, 1.00026, 1.0006, 1.00026, 1.0006,
              1.00026, 1.03828, 1.00026, 0.99999, 1.00026, 1.0006, 0.99977,
              1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 0.9993, 0.9998,
              1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 1,
              1.00016, 0.99977, 0.99959, 0.99977, 0.99959, 0.99977, 0.99959,
              1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001,
              0.99973, 1.00026, 0.99998, 1.00026, 0.8121, 1.00026, 0.99998,
              0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977,
              1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 1.00016, 1.00022,
              1.00001, 0.99973, 1.00001, 1.00026, 1, 1.00026, 1, 1.00026, 1,
              1.0006, 0.99973, 0.99977, 0.99973, 1, 0.99982, 1.00022, 1.00026,
              1.00001, 0.99973, 1.00026, 0.99998, 0.99998, 0.99998, 0.99998,
              0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998,
              1.00034, 0.99977, 1, 0.99997, 1.00026, 1.00078, 1.00036, 0.99973,
              1.00013, 1.0006, 0.99977, 0.99977, 0.99988, 0.85148, 1.00001,
              1.00026, 0.99977, 1.00022, 1.0006, 0.99977, 1.00001, 0.99999,
              0.99977, 1.00069, 1.00022, 0.99977, 1.00001, 0.99984, 1.00026,
              1.00001, 1.00024, 1.00001, 0.9999, 1, 1.0006, 1.00001, 1.00041,
              0.99962, 1.00026, 1.0006, 0.99995, 1.00041, 0.99942, 0.99973,
              0.99927, 1.00082, 0.99902, 1.00026, 1.00087, 1.0006, 1.00069,
              0.99973, 0.99867, 0.99973, 0.9993, 1.00026, 1.00049, 1.00056, 1,
              0.99988, 0.99935, 0.99995, 0.99954, 1.00055, 0.99945, 1.00032,
              1.0006, 0.99995, 1.00026, 0.99995, 1.00032, 1.00001, 1.00008,
              0.99971, 1.00019, 0.9994, 1.00001, 1.0006, 1.00044, 0.99973,
              1.00023, 1.00047, 1, 0.99942, 0.99561, 0.99989, 1.00035, 0.99977,
              1.00035, 0.99977, 1.00019, 0.99944, 1.00001, 1.00021, 0.99926,
              1.00035, 1.00035, 0.99942, 1.00048, 0.99999, 0.99977, 1.00022,
              1.00035, 1.00001, 0.99977, 1.00026, 0.99989, 1.00057, 1.00001,
              0.99936, 1.00052, 1.00012, 0.99996, 1.00043, 1, 1.00035, 0.9994,
              0.99976, 1.00035, 0.99973, 1.00052, 1.00041, 1.00119, 1.00037,
              0.99973, 1.00002, 0.99986, 1.00041, 1.00041, 0.99902, 0.9996,
              1.00034, 0.99999, 1.00026, 0.99999, 1.00026, 0.99973, 1.00052,
              0.99973, 1, 0.99973, 1.00041, 1.00075, 0.9994, 1.0003, 0.99999, 1,
              1.00041, 0.99955, 1, 0.99915, 0.99973, 0.99973, 1.00026, 1.00119,
              0.99955, 0.99973, 1.0006, 0.99911, 1.0006, 1.00026, 0.99972,
              1.00026, 0.99902, 1.00041, 0.99973, 0.99999, 1, 1, 1.00038,
              1.0005, 1.00016, 1.00022, 1.00016, 1.00022, 1.00016, 1.00022,
              1.00001, 0.99973, 1, 1, 0.99973, 1, 1, 0.99955, 1.0006, 1.0006,
              1.0006, 1.0006, 1, 1, 1, 0.99973, 0.99973, 0.99972, 1, 1, 1.00106,
              0.99999, 0.99998, 0.99998, 0.99999, 0.99998, 1.66475, 1, 0.99973,
              0.99973, 1.00023, 0.99973, 0.99971, 1.00047, 1.00023, 1, 0.99991,
              0.99984, 1.00002, 1.00002, 1.00002, 1.00002, 1, 1, 1, 1, 1, 1, 1,
              0.99972, 1, 1.20985, 1.39713, 1.00003, 1.00031, 1.00015, 1,
              0.99561, 1.00027, 1.00031, 1.00031, 0.99915, 1.00031, 1.00031,
              0.99999, 1.00003, 0.99999, 0.99999, 1.41144, 1.6, 1.41144,
              1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
              1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
              1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
              1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
              1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
              1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
              1.40579, 1.40579, 1.36625, 0.99999, 1, 0.99861, 0.99861, 1,
              1.00026, 1.00026, 1.00026, 1.00026, 0.99972, 0.99999, 0.99999,
              0.99999, 0.99999, 1.40483, 1, 0.99977, 1.00054, 1, 1, 0.99953,
              0.99962, 1.00042, 0.9995, 1, 1, 1, 1, 1, 1, 1, 1, 0.99998,
              0.99998, 0.99998, 0.99998, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            ],
            aR = { lineHeight: 1.2, lineGap: 0.2 },
            aG = [
              0.76116, 1, 1, 1.0006, 0.99998, 0.99974, 0.99973, 0.99973,
              0.99982, 0.99977, 1.00087, 0.99998, 0.99998, 0.99959, 1.00003,
              1.0006, 0.99998, 1.0006, 1.0006, 0.99973, 0.99973, 0.99973,
              0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973,
              0.99998, 1, 1.00003, 1.00003, 1.00003, 1.00026, 0.9999, 0.99977,
              0.99977, 0.99977, 0.99977, 1.00001, 1.00026, 1.00022, 0.99977,
              1.0006, 0.99973, 0.99977, 1.00026, 0.99999, 0.99977, 1.00022,
              1.00001, 1.00022, 0.99977, 1.00001, 1.00026, 0.99977, 1.00001,
              1.00016, 1.00001, 1.00001, 1.00026, 0.99998, 1.0006, 0.99998,
              1.00003, 0.99973, 0.99998, 0.99973, 1.00026, 0.99973, 1.00026,
              0.99973, 0.99998, 1.00026, 1.00026, 1.0006, 1.0006, 0.99973,
              1.0006, 0.99982, 1.00026, 1.00026, 1.00026, 1.00026, 0.99959,
              0.99973, 0.99998, 1.00026, 0.99973, 1.00022, 0.99973, 0.99973, 1,
              0.99959, 1.00077, 0.99959, 1.00003, 0.99998, 0.99973, 0.99973,
              0.99973, 0.99973, 1.00077, 0.99973, 0.99998, 1.00025, 0.99968,
              0.99973, 1.00003, 1.00025, 0.60299, 1.00024, 1.06409, 1, 1,
              0.99998, 1, 0.99973, 1.0006, 0.99998, 1, 0.99936, 0.99973,
              1.00002, 1.00002, 1.00002, 1.00026, 0.99977, 0.99977, 0.99977,
              0.99977, 0.99977, 0.99977, 1, 0.99977, 1.00001, 1.00001, 1.00001,
              1.00001, 1.0006, 1.0006, 1.0006, 1.0006, 0.99977, 0.99977,
              1.00022, 1.00022, 1.00022, 1.00022, 1.00022, 1.00003, 1.00022,
              0.99977, 0.99977, 0.99977, 0.99977, 1.00001, 1.00001, 1.00026,
              0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99982,
              0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 1.0006, 1.0006,
              1.0006, 1.0006, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026,
              1.00026, 1.00026, 1.06409, 1.00026, 1.00026, 1.00026, 1.00026,
              1.00026, 0.99973, 1.00026, 0.99973, 0.99977, 0.99973, 0.99977,
              0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973,
              0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 1.0044, 0.99977,
              1.00026, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973,
              1.00001, 0.99973, 1.00001, 0.99973, 1.00022, 1.00026, 1.00022,
              1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 0.99977, 1.00026,
              0.99977, 1.00026, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006,
              1.0006, 1.0006, 1.0006, 1.0006, 0.99971, 0.99973, 0.99973, 1.0006,
              0.99977, 0.99973, 0.99973, 1.00026, 1.0006, 1.00026, 1.0006,
              1.00026, 1.01011, 1.00026, 0.99999, 1.00026, 1.0006, 0.99977,
              1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 0.9993, 0.9998,
              1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 1,
              1.00016, 0.99977, 0.99959, 0.99977, 0.99959, 0.99977, 0.99959,
              1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001,
              0.99973, 1.00026, 0.99998, 1.00026, 0.8121, 1.00026, 0.99998,
              0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977,
              1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 1.00016, 1.00022,
              1.00001, 0.99973, 1.00001, 1.00026, 1, 1.00026, 1, 1.00026, 1,
              1.0006, 0.99973, 0.99977, 0.99973, 1, 0.99982, 1.00022, 1.00026,
              1.00001, 0.99973, 1.00026, 0.99998, 0.99998, 0.99998, 0.99998,
              0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998,
              0.99998, 0.99977, 1, 1, 1.00026, 0.99969, 0.99972, 0.99981,
              0.9998, 1.0006, 0.99977, 0.99977, 1.00022, 0.91155, 1.00001,
              1.00026, 0.99977, 1.00022, 1.0006, 0.99977, 1.00001, 0.99999,
              0.99977, 0.99966, 1.00022, 1.00032, 1.00001, 0.99944, 1.00026,
              1.00001, 0.99968, 1.00001, 1.00047, 1, 1.0006, 1.00001, 0.99981,
              1.00101, 1.00026, 1.0006, 0.99948, 0.99981, 1.00064, 0.99973,
              0.99942, 1.00101, 1.00061, 1.00026, 1.00069, 1.0006, 1.00014,
              0.99973, 1.01322, 0.99973, 1.00065, 1.00026, 1.00012, 0.99923, 1,
              1.00064, 1.00076, 0.99948, 1.00055, 1.00063, 1.00007, 0.99943,
              1.0006, 0.99948, 1.00026, 0.99948, 0.99943, 1.00001, 1.00001,
              1.00029, 1.00038, 1.00035, 1.00001, 1.0006, 1.0006, 0.99973,
              0.99978, 1.00001, 1.00057, 0.99989, 0.99967, 0.99964, 0.99967,
              0.99977, 0.99999, 0.99977, 1.00038, 0.99977, 1.00001, 0.99973,
              1.00066, 0.99967, 0.99967, 1.00041, 0.99998, 0.99999, 0.99977,
              1.00022, 0.99967, 1.00001, 0.99977, 1.00026, 0.99964, 1.00031,
              1.00001, 0.99999, 0.99999, 1, 1.00023, 1, 1, 0.99999, 1.00035,
              1.00001, 0.99999, 0.99973, 0.99977, 0.99999, 1.00058, 0.99973,
              0.99973, 0.99955, 0.9995, 1.00026, 1.00026, 1.00032, 0.99989,
              1.00034, 0.99999, 1.00026, 1.00026, 1.00026, 0.99973, 0.45998,
              0.99973, 1.00026, 0.99973, 1.00001, 0.99999, 0.99982, 0.99994,
              0.99996, 1, 1.00042, 1.00044, 1.00029, 1.00023, 0.99973, 0.99973,
              1.00026, 0.99949, 1.00002, 0.99973, 1.0006, 1.0006, 1.0006,
              0.99975, 1.00026, 1.00026, 1.00032, 0.98685, 0.99973, 1.00026, 1,
              1, 0.99966, 1.00044, 1.00016, 1.00022, 1.00016, 1.00022, 1.00016,
              1.00022, 1.00001, 0.99973, 1, 1, 0.99973, 1, 1, 0.99955, 1.0006,
              1.0006, 1.0006, 1.0006, 1, 1, 1, 0.99973, 0.99973, 0.99972, 1, 1,
              1.00106, 0.99999, 0.99998, 0.99998, 0.99999, 0.99998, 1.66475, 1,
              0.99973, 0.99973, 1, 0.99973, 0.99971, 0.99978, 1, 1, 0.99991,
              0.99984, 1.00002, 1.00002, 1.00002, 1.00002, 1.00098, 1, 1, 1,
              1.00049, 1, 1, 0.99972, 1, 1.20985, 1.39713, 1.00003, 1.00031,
              1.00015, 1, 0.99561, 1.00027, 1.00031, 1.00031, 0.99915, 1.00031,
              1.00031, 0.99999, 1.00003, 0.99999, 0.99999, 1.41144, 1.6,
              1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
              1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
              1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
              1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
              1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
              1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
              1.41144, 1.40579, 1.40579, 1.36625, 0.99999, 1, 0.99861, 0.99861,
              1, 1.00026, 1.00026, 1.00026, 1.00026, 0.99972, 0.99999, 0.99999,
              0.99999, 0.99999, 1.40483, 1, 0.99977, 1.00054, 1, 1, 0.99953,
              0.99962, 1.00042, 0.9995, 1, 1, 1, 1, 1, 1, 1, 1, 0.99998,
              0.99998, 0.99998, 0.99998, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            ],
            aN = { lineHeight: 1.35, lineGap: 0.2 },
            ax = [
              0.76116, 1, 1, 1.0006, 1.0006, 1.00006, 0.99973, 0.99973, 0.99982,
              1.00001, 1.00043, 0.99998, 0.99998, 0.99959, 1.00003, 1.0006,
              0.99998, 1.0006, 1.0006, 0.99973, 0.99973, 0.99973, 0.99973,
              0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 1.0006, 1,
              1.00003, 1.00003, 1.00003, 0.99973, 0.99987, 1.00001, 1.00001,
              0.99977, 0.99977, 1.00001, 1.00026, 1.00022, 0.99977, 1.0006, 1,
              1.00001, 0.99973, 0.99999, 0.99977, 1.00022, 1.00001, 1.00022,
              0.99977, 1.00001, 1.00026, 0.99977, 1.00001, 1.00016, 1.00001,
              1.00001, 1.00026, 1.0006, 1.0006, 1.0006, 0.99949, 0.99973,
              0.99998, 0.99973, 0.99973, 1, 0.99973, 0.99973, 1.0006, 0.99973,
              0.99973, 0.99924, 0.99924, 1, 0.99924, 0.99999, 0.99973, 0.99973,
              0.99973, 0.99973, 0.99998, 1, 1.0006, 0.99973, 1, 0.99977, 1, 1,
              1, 1.00005, 1.0009, 1.00005, 1.00003, 0.99998, 0.99973, 0.99973,
              0.99973, 0.99973, 1.0009, 0.99973, 0.99998, 1.00025, 0.99968,
              0.99973, 1.00003, 1.00025, 0.60299, 1.00024, 1.06409, 1, 1,
              0.99998, 1, 0.9998, 1.0006, 0.99998, 1, 0.99936, 0.99973, 1.00002,
              1.00002, 1.00002, 1.00026, 1.00001, 1.00001, 1.00001, 1.00001,
              1.00001, 1.00001, 1, 0.99977, 1.00001, 1.00001, 1.00001, 1.00001,
              1.0006, 1.0006, 1.0006, 1.0006, 0.99977, 0.99977, 1.00022,
              1.00022, 1.00022, 1.00022, 1.00022, 1.00003, 1.00022, 0.99977,
              0.99977, 0.99977, 0.99977, 1.00001, 1.00001, 1.00026, 0.99973,
              0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99982, 1, 0.99973,
              0.99973, 0.99973, 0.99973, 1.0006, 1.0006, 1.0006, 1.0006,
              0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973,
              1.06409, 1.00026, 0.99973, 0.99973, 0.99973, 0.99973, 1, 0.99973,
              1, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 0.99977,
              1, 0.99977, 1, 0.99977, 1, 0.99977, 1, 0.99977, 1.0288, 0.99977,
              0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973,
              1.00001, 0.99973, 1.00001, 0.99973, 1.00022, 0.99973, 1.00022,
              0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 0.99977, 0.99973,
              0.99977, 0.99973, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006,
              1.0006, 0.99924, 1.0006, 1.0006, 0.99946, 1.00034, 1, 0.99924,
              1.00001, 1, 1, 0.99973, 0.99924, 0.99973, 0.99924, 0.99973,
              1.06311, 0.99973, 1.00024, 0.99973, 0.99924, 0.99977, 0.99973,
              0.99977, 0.99973, 0.99977, 0.99973, 1.00041, 0.9998, 0.99973,
              1.00022, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 1, 1.00016,
              0.99977, 0.99998, 0.99977, 0.99998, 0.99977, 0.99998, 1.00001, 1,
              1.00001, 1, 1.00001, 1, 1.00001, 1, 1.00026, 1.0006, 1.00026,
              0.89547, 1.00026, 1.0006, 0.99977, 0.99973, 0.99977, 0.99973,
              0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977,
              0.99973, 1.00016, 0.99977, 1.00001, 1, 1.00001, 1.00026, 1,
              1.00026, 1, 1.00026, 1, 0.99924, 0.99973, 1.00001, 0.99973, 1,
              0.99982, 1.00022, 1.00026, 1.00001, 1, 1.00026, 1.0006, 0.99998,
              0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998,
              0.99998, 0.99998, 0.99998, 1.00001, 1, 1.00054, 0.99977, 1.00084,
              1.00007, 0.99973, 1.00013, 0.99924, 1.00001, 1.00001, 0.99945,
              0.91221, 1.00001, 1.00026, 0.99977, 1.00022, 1.0006, 1.00001,
              1.00001, 0.99999, 0.99977, 0.99933, 1.00022, 1.00054, 1.00001,
              1.00065, 1.00026, 1.00001, 1.0001, 1.00001, 1.00052, 1, 1.0006,
              1.00001, 0.99945, 0.99897, 0.99968, 0.99924, 1.00036, 0.99945,
              0.99949, 1, 1.0006, 0.99897, 0.99918, 0.99968, 0.99911, 0.99924,
              1, 0.99962, 1.01487, 1, 1.0005, 0.99973, 1.00012, 1.00043, 1,
              0.99995, 0.99994, 1.00036, 0.99947, 1.00019, 1.00063, 1.00025,
              0.99924, 1.00036, 0.99973, 1.00036, 1.00025, 1.00001, 1.00001,
              1.00027, 1.0001, 1.00068, 1.00001, 1.0006, 1.0006, 1, 1.00008,
              0.99957, 0.99972, 0.9994, 0.99954, 0.99975, 1.00051, 1.00001,
              1.00019, 1.00001, 1.0001, 0.99986, 1.00001, 1.00001, 1.00038,
              0.99954, 0.99954, 0.9994, 1.00066, 0.99999, 0.99977, 1.00022,
              1.00054, 1.00001, 0.99977, 1.00026, 0.99975, 1.0001, 1.00001,
              0.99993, 0.9995, 0.99955, 1.00016, 0.99978, 0.99974, 1.00019,
              1.00022, 0.99955, 1.00053, 0.99973, 1.00089, 1.00005, 0.99967,
              1.00048, 0.99973, 1.00002, 1.00034, 0.99973, 0.99973, 0.99964,
              1.00006, 1.00066, 0.99947, 0.99973, 0.98894, 0.99973, 1, 0.44898,
              1, 0.99946, 1, 1.00039, 1.00082, 0.99991, 0.99991, 0.99985,
              1.00022, 1.00023, 1.00061, 1.00006, 0.99966, 0.99973, 0.99973,
              0.99973, 1.00019, 1.0008, 1, 0.99924, 0.99924, 0.99924, 0.99983,
              1.00044, 0.99973, 0.99964, 0.98332, 1, 0.99973, 1, 1, 0.99962,
              0.99895, 1.00016, 0.99977, 1.00016, 0.99977, 1.00016, 0.99977,
              1.00001, 1, 1, 1, 0.99973, 1, 1, 0.99955, 0.99924, 0.99924,
              0.99924, 0.99924, 0.99998, 0.99998, 0.99998, 0.99973, 0.99973,
              0.99972, 1, 1, 1.00267, 0.99999, 0.99998, 0.99998, 1, 0.99998,
              1.66475, 1, 0.99973, 0.99973, 1.00023, 0.99973, 1.00423, 0.99925,
              0.99999, 1, 0.99991, 0.99984, 1.00002, 1.00002, 1.00002, 1.00002,
              1.00049, 1, 1.00245, 1, 1, 1, 1, 0.96329, 1, 1.20985, 1.39713,
              1.00003, 0.8254, 1.00015, 1, 1.00035, 1.00027, 1.00031, 1.00031,
              1.00003, 1.00031, 1.00031, 0.99999, 1.00003, 0.99999, 0.99999,
              1.41144, 1.6, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
              1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
              1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
              1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
              1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
              1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
              1.41144, 1.41144, 1.41144, 1.40579, 1.40579, 1.36625, 0.99999, 1,
              0.99861, 0.99861, 1, 1.00026, 1.00026, 1.00026, 1.00026, 0.95317,
              0.99999, 0.99999, 0.99999, 0.99999, 1.40483, 1, 0.99977, 1.00054,
              1, 1, 0.99953, 0.99962, 1.00042, 0.9995, 1, 1, 1, 1, 1, 1, 1, 1,
              0.99998, 0.99998, 0.99998, 0.99998, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1,
            ],
            aU = { lineHeight: 1.35, lineGap: 0.2 },
            aM = [
              0.76116, 1, 1, 1.0006, 1.0006, 1.00006, 0.99973, 0.99973, 0.99982,
              1.00001, 1.00043, 0.99998, 0.99998, 0.99959, 1.00003, 1.0006,
              0.99998, 1.0006, 1.0006, 0.99973, 0.99973, 0.99973, 0.99973,
              0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 1.0006, 1,
              1.00003, 1.00003, 1.00003, 0.99973, 0.99987, 1.00001, 1.00001,
              0.99977, 0.99977, 1.00001, 1.00026, 1.00022, 0.99977, 1.0006, 1,
              1.00001, 0.99973, 0.99999, 0.99977, 1.00022, 1.00001, 1.00022,
              0.99977, 1.00001, 1.00026, 0.99977, 1.00001, 1.00016, 1.00001,
              1.00001, 1.00026, 1.0006, 1.0006, 1.0006, 0.99949, 0.99973,
              0.99998, 0.99973, 0.99973, 1, 0.99973, 0.99973, 1.0006, 0.99973,
              0.99973, 0.99924, 0.99924, 1, 0.99924, 0.99999, 0.99973, 0.99973,
              0.99973, 0.99973, 0.99998, 1, 1.0006, 0.99973, 1, 0.99977, 1, 1,
              1, 1.00005, 1.0009, 1.00005, 1.00003, 0.99998, 0.99973, 0.99973,
              0.99973, 0.99973, 1.0009, 0.99973, 0.99998, 1.00025, 0.99968,
              0.99973, 1.00003, 1.00025, 0.60299, 1.00024, 1.06409, 1, 1,
              0.99998, 1, 0.9998, 1.0006, 0.99998, 1, 0.99936, 0.99973, 1.00002,
              1.00002, 1.00002, 1.00026, 1.00001, 1.00001, 1.00001, 1.00001,
              1.00001, 1.00001, 1, 0.99977, 1.00001, 1.00001, 1.00001, 1.00001,
              1.0006, 1.0006, 1.0006, 1.0006, 0.99977, 0.99977, 1.00022,
              1.00022, 1.00022, 1.00022, 1.00022, 1.00003, 1.00022, 0.99977,
              0.99977, 0.99977, 0.99977, 1.00001, 1.00001, 1.00026, 0.99973,
              0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99982, 1, 0.99973,
              0.99973, 0.99973, 0.99973, 1.0006, 1.0006, 1.0006, 1.0006,
              0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973,
              1.06409, 1.00026, 0.99973, 0.99973, 0.99973, 0.99973, 1, 0.99973,
              1, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 0.99977,
              1, 0.99977, 1, 0.99977, 1, 0.99977, 1, 0.99977, 1.04596, 0.99977,
              0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973,
              1.00001, 0.99973, 1.00001, 0.99973, 1.00022, 0.99973, 1.00022,
              0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 0.99977, 0.99973,
              0.99977, 0.99973, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006,
              1.0006, 0.99924, 1.0006, 1.0006, 1.00019, 1.00034, 1, 0.99924,
              1.00001, 1, 1, 0.99973, 0.99924, 0.99973, 0.99924, 0.99973,
              1.02572, 0.99973, 1.00005, 0.99973, 0.99924, 0.99977, 0.99973,
              0.99977, 0.99973, 0.99977, 0.99973, 0.99999, 0.9998, 0.99973,
              1.00022, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 1, 1.00016,
              0.99977, 0.99998, 0.99977, 0.99998, 0.99977, 0.99998, 1.00001, 1,
              1.00001, 1, 1.00001, 1, 1.00001, 1, 1.00026, 1.0006, 1.00026,
              0.84533, 1.00026, 1.0006, 0.99977, 0.99973, 0.99977, 0.99973,
              0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977,
              0.99973, 1.00016, 0.99977, 1.00001, 1, 1.00001, 1.00026, 1,
              1.00026, 1, 1.00026, 1, 0.99924, 0.99973, 1.00001, 0.99973, 1,
              0.99982, 1.00022, 1.00026, 1.00001, 1, 1.00026, 1.0006, 0.99998,
              0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998,
              0.99998, 0.99998, 0.99998, 0.99928, 1, 0.99977, 1.00013, 1.00055,
              0.99947, 0.99945, 0.99941, 0.99924, 1.00001, 1.00001, 1.0004,
              0.91621, 1.00001, 1.00026, 0.99977, 1.00022, 1.0006, 1.00001,
              1.00005, 0.99999, 0.99977, 1.00015, 1.00022, 0.99977, 1.00001,
              0.99973, 1.00026, 1.00001, 1.00019, 1.00001, 0.99946, 1, 1.0006,
              1.00001, 0.99978, 1.00045, 0.99973, 0.99924, 1.00023, 0.99978,
              0.99966, 1, 1.00065, 1.00045, 1.00019, 0.99973, 0.99973, 0.99924,
              1, 1, 0.96499, 1, 1.00055, 0.99973, 1.00008, 1.00027, 1, 0.9997,
              0.99995, 1.00023, 0.99933, 1.00019, 1.00015, 1.00031, 0.99924,
              1.00023, 0.99973, 1.00023, 1.00031, 1.00001, 0.99928, 1.00029,
              1.00092, 1.00035, 1.00001, 1.0006, 1.0006, 1, 0.99988, 0.99975, 1,
              1.00082, 0.99561, 0.9996, 1.00035, 1.00001, 0.99962, 1.00001,
              1.00092, 0.99964, 1.00001, 0.99963, 0.99999, 1.00035, 1.00035,
              1.00082, 0.99962, 0.99999, 0.99977, 1.00022, 1.00035, 1.00001,
              0.99977, 1.00026, 0.9996, 0.99967, 1.00001, 1.00034, 1.00074,
              1.00054, 1.00053, 1.00063, 0.99971, 0.99962, 1.00035, 0.99975,
              0.99977, 0.99973, 1.00043, 0.99953, 1.0007, 0.99915, 0.99973,
              1.00008, 0.99892, 1.00073, 1.00073, 1.00114, 0.99915, 1.00073,
              0.99955, 0.99973, 1.00092, 0.99973, 1, 0.99998, 1, 1.0003, 1,
              1.00043, 1.00001, 0.99969, 1.0003, 1, 1.00035, 1.00001, 0.9995, 1,
              1.00092, 0.99973, 0.99973, 0.99973, 1.0007, 0.9995, 1, 0.99924,
              1.0006, 0.99924, 0.99972, 1.00062, 0.99973, 1.00114, 1.00073, 1,
              0.99955, 1, 1, 1.00047, 0.99968, 1.00016, 0.99977, 1.00016,
              0.99977, 1.00016, 0.99977, 1.00001, 1, 1, 1, 0.99973, 1, 1,
              0.99955, 0.99924, 0.99924, 0.99924, 0.99924, 0.99998, 0.99998,
              0.99998, 0.99973, 0.99973, 0.99972, 1, 1, 1.00267, 0.99999,
              0.99998, 0.99998, 1, 0.99998, 1.66475, 1, 0.99973, 0.99973,
              1.00023, 0.99973, 0.99971, 0.99925, 1.00023, 1, 0.99991, 0.99984,
              1.00002, 1.00002, 1.00002, 1.00002, 1, 1, 1, 1, 1, 1, 1, 0.96329,
              1, 1.20985, 1.39713, 1.00003, 0.8254, 1.00015, 1, 1.00035,
              1.00027, 1.00031, 1.00031, 0.99915, 1.00031, 1.00031, 0.99999,
              1.00003, 0.99999, 0.99999, 1.41144, 1.6, 1.41144, 1.41144,
              1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
              1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
              1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
              1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
              1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
              1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.40579,
              1.40579, 1.36625, 0.99999, 1, 0.99861, 0.99861, 1, 1.00026,
              1.00026, 1.00026, 1.00026, 0.95317, 0.99999, 0.99999, 0.99999,
              0.99999, 1.40483, 1, 0.99977, 1.00054, 1, 1, 0.99953, 0.99962,
              1.00042, 0.9995, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1,
            ],
            aJ = { lineHeight: 1.2, lineGap: 0.2 },
            aL = [
              365, 0, 333, 278, 333, 474, 556, 556, 889, 722, 238, 333, 333,
              389, 584, 278, 333, 278, 278, 556, 556, 556, 556, 556, 556, 556,
              556, 556, 556, 333, 333, 584, 584, 584, 611, 975, 722, 722, 722,
              722, 667, 611, 778, 722, 278, 556, 722, 611, 833, 722, 778, 667,
              778, 722, 667, 611, 722, 667, 944, 667, 667, 611, 333, 278, 333,
              584, 556, 333, 556, 611, 556, 611, 556, 333, 611, 611, 278, 278,
              556, 278, 889, 611, 611, 611, 611, 389, 556, 333, 611, 556, 778,
              556, 556, 500, 389, 280, 389, 584, 333, 556, 556, 556, 556, 280,
              556, 333, 737, 370, 556, 584, 737, 552, 400, 549, 333, 333, 333,
              576, 556, 278, 333, 333, 365, 556, 834, 834, 834, 611, 722, 722,
              722, 722, 722, 722, 1e3, 722, 667, 667, 667, 667, 278, 278, 278,
              278, 722, 722, 778, 778, 778, 778, 778, 584, 778, 722, 722, 722,
              722, 667, 667, 611, 556, 556, 556, 556, 556, 556, 889, 556, 556,
              556, 556, 556, 278, 278, 278, 278, 611, 611, 611, 611, 611, 611,
              611, 549, 611, 611, 611, 611, 611, 556, 611, 556, 722, 556, 722,
              556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 719,
              722, 611, 667, 556, 667, 556, 667, 556, 667, 556, 667, 556, 778,
              611, 778, 611, 778, 611, 778, 611, 722, 611, 722, 611, 278, 278,
              278, 278, 278, 278, 278, 278, 278, 278, 785, 556, 556, 278, 722,
              556, 556, 611, 278, 611, 278, 611, 385, 611, 479, 611, 278, 722,
              611, 722, 611, 722, 611, 708, 723, 611, 778, 611, 778, 611, 778,
              611, 1e3, 944, 722, 389, 722, 389, 722, 389, 667, 556, 667, 556,
              667, 556, 667, 556, 611, 333, 611, 479, 611, 333, 722, 611, 722,
              611, 722, 611, 722, 611, 722, 611, 722, 611, 944, 778, 667, 556,
              667, 611, 500, 611, 500, 611, 500, 278, 556, 722, 556, 1e3, 889,
              778, 611, 667, 556, 611, 333, 333, 333, 333, 333, 333, 333, 333,
              333, 333, 333, 465, 722, 333, 853, 906, 474, 825, 927, 838, 278,
              722, 722, 601, 719, 667, 611, 722, 778, 278, 722, 667, 833, 722,
              644, 778, 722, 667, 600, 611, 667, 821, 667, 809, 802, 278, 667,
              615, 451, 611, 278, 582, 615, 610, 556, 606, 475, 460, 611, 541,
              278, 558, 556, 612, 556, 445, 611, 766, 619, 520, 684, 446, 582,
              715, 576, 753, 845, 278, 582, 611, 582, 845, 667, 669, 885, 567,
              711, 667, 278, 276, 556, 1094, 1062, 875, 610, 722, 622, 719, 722,
              719, 722, 567, 712, 667, 904, 626, 719, 719, 610, 702, 833, 722,
              778, 719, 667, 722, 611, 622, 854, 667, 730, 703, 1005, 1019, 870,
              979, 719, 711, 1031, 719, 556, 618, 615, 417, 635, 556, 709, 497,
              615, 615, 500, 635, 740, 604, 611, 604, 611, 556, 490, 556, 875,
              556, 615, 581, 833, 844, 729, 854, 615, 552, 854, 583, 556, 556,
              611, 417, 552, 556, 278, 281, 278, 969, 906, 611, 500, 615, 556,
              604, 778, 611, 487, 447, 944, 778, 944, 778, 944, 778, 667, 556,
              333, 333, 556, 1e3, 1e3, 552, 278, 278, 278, 278, 500, 500, 500,
              556, 556, 350, 1e3, 1e3, 240, 479, 333, 333, 604, 333, 167, 396,
              556, 556, 1094, 556, 885, 489, 1115, 1e3, 768, 600, 834, 834, 834,
              834, 1e3, 500, 1e3, 500, 1e3, 500, 500, 494, 612, 823, 713, 584,
              549, 713, 979, 722, 274, 549, 549, 583, 549, 549, 604, 584, 604,
              604, 708, 625, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708,
              708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708,
              708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708,
              708, 708, 708, 708, 708, 708, 708, 708, 708, 729, 604, 604, 354,
              354, 1e3, 990, 990, 990, 990, 494, 604, 604, 604, 604, 354, 1021,
              1052, 917, 750, 750, 531, 656, 594, 510, 500, 750, 750, 611, 611,
              333, 333, 333, 333, 333, 333, 333, 333, 222, 222, 333, 333, 333,
              333, 333, 333, 333, 333,
            ],
            aH = [
              -1, -1, -1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
              45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
              61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
              77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,
              93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
              107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
              120, 121, 122, 123, 124, 125, 126, 161, 162, 163, 164, 165, 166,
              167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180,
              181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193,
              194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
              207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219,
              220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
              233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
              246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
              259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
              272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284,
              285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297,
              298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310,
              311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323,
              324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336,
              337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349,
              350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362,
              363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375,
              376, 377, 378, 379, 380, 381, 382, 383, 402, 506, 507, 508, 509,
              510, 511, 536, 537, 538, 539, 710, 711, 713, 728, 729, 730, 731,
              732, 733, 900, 901, 902, 903, 904, 905, 906, 908, 910, 911, 912,
              913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
              926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939,
              940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952,
              953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
              966, 967, 968, 969, 970, 971, 972, 973, 974, 1024, 1025, 1026,
              1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037,
              1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
              1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059,
              1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
              1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081,
              1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092,
              1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103,
              1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114,
              1115, 1116, 1117, 1118, 1119, 1138, 1139, 1168, 1169, 7808, 7809,
              7810, 7811, 7812, 7813, 7922, 7923, 8208, 8209, 8211, 8212, 8213,
              8215, 8216, 8217, 8218, 8219, 8220, 8221, 8222, 8224, 8225, 8226,
              8230, 8240, 8242, 8243, 8249, 8250, 8252, 8254, 8260, 8319, 8355,
              8356, 8359, 8364, 8453, 8467, 8470, 8482, 8486, 8494, 8539, 8540,
              8541, 8542, 8592, 8593, 8594, 8595, 8596, 8597, 8616, 8706, 8710,
              8719, 8721, 8722, 8730, 8734, 8735, 8745, 8747, 8776, 8800, 8801,
              8804, 8805, 8962, 8976, 8992, 8993, 9472, 9474, 9484, 9488, 9492,
              9496, 9500, 9508, 9516, 9524, 9532, 9552, 9553, 9554, 9555, 9556,
              9557, 9558, 9559, 9560, 9561, 9562, 9563, 9564, 9565, 9566, 9567,
              9568, 9569, 9570, 9571, 9572, 9573, 9574, 9575, 9576, 9577, 9578,
              9579, 9580, 9600, 9604, 9608, 9612, 9616, 9617, 9618, 9619, 9632,
              9633, 9642, 9643, 9644, 9650, 9658, 9660, 9668, 9674, 9675, 9679,
              9688, 9689, 9702, 9786, 9787, 9788, 9792, 9794, 9824, 9827, 9829,
              9830, 9834, 9835, 9836, 61441, 61442, 61445, -1, -1, -1, -1, -1,
              -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            ],
            aY = [
              365, 0, 333, 278, 333, 474, 556, 556, 889, 722, 238, 333, 333,
              389, 584, 278, 333, 278, 278, 556, 556, 556, 556, 556, 556, 556,
              556, 556, 556, 333, 333, 584, 584, 584, 611, 975, 722, 722, 722,
              722, 667, 611, 778, 722, 278, 556, 722, 611, 833, 722, 778, 667,
              778, 722, 667, 611, 722, 667, 944, 667, 667, 611, 333, 278, 333,
              584, 556, 333, 556, 611, 556, 611, 556, 333, 611, 611, 278, 278,
              556, 278, 889, 611, 611, 611, 611, 389, 556, 333, 611, 556, 778,
              556, 556, 500, 389, 280, 389, 584, 333, 556, 556, 556, 556, 280,
              556, 333, 737, 370, 556, 584, 737, 552, 400, 549, 333, 333, 333,
              576, 556, 278, 333, 333, 365, 556, 834, 834, 834, 611, 722, 722,
              722, 722, 722, 722, 1e3, 722, 667, 667, 667, 667, 278, 278, 278,
              278, 722, 722, 778, 778, 778, 778, 778, 584, 778, 722, 722, 722,
              722, 667, 667, 611, 556, 556, 556, 556, 556, 556, 889, 556, 556,
              556, 556, 556, 278, 278, 278, 278, 611, 611, 611, 611, 611, 611,
              611, 549, 611, 611, 611, 611, 611, 556, 611, 556, 722, 556, 722,
              556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 740,
              722, 611, 667, 556, 667, 556, 667, 556, 667, 556, 667, 556, 778,
              611, 778, 611, 778, 611, 778, 611, 722, 611, 722, 611, 278, 278,
              278, 278, 278, 278, 278, 278, 278, 278, 782, 556, 556, 278, 722,
              556, 556, 611, 278, 611, 278, 611, 396, 611, 479, 611, 278, 722,
              611, 722, 611, 722, 611, 708, 723, 611, 778, 611, 778, 611, 778,
              611, 1e3, 944, 722, 389, 722, 389, 722, 389, 667, 556, 667, 556,
              667, 556, 667, 556, 611, 333, 611, 479, 611, 333, 722, 611, 722,
              611, 722, 611, 722, 611, 722, 611, 722, 611, 944, 778, 667, 556,
              667, 611, 500, 611, 500, 611, 500, 278, 556, 722, 556, 1e3, 889,
              778, 611, 667, 556, 611, 333, 333, 333, 333, 333, 333, 333, 333,
              333, 333, 333, 333, 722, 333, 854, 906, 473, 844, 930, 847, 278,
              722, 722, 610, 671, 667, 611, 722, 778, 278, 722, 667, 833, 722,
              657, 778, 718, 667, 590, 611, 667, 822, 667, 829, 781, 278, 667,
              620, 479, 611, 278, 591, 620, 621, 556, 610, 479, 492, 611, 558,
              278, 566, 556, 603, 556, 450, 611, 712, 605, 532, 664, 409, 591,
              704, 578, 773, 834, 278, 591, 611, 591, 834, 667, 667, 886, 614,
              719, 667, 278, 278, 556, 1094, 1042, 854, 622, 719, 677, 719, 722,
              708, 722, 614, 722, 667, 927, 643, 719, 719, 615, 687, 833, 722,
              778, 719, 667, 722, 611, 677, 781, 667, 729, 708, 979, 989, 854,
              1e3, 708, 719, 1042, 729, 556, 619, 604, 534, 618, 556, 736, 510,
              611, 611, 507, 622, 740, 604, 611, 611, 611, 556, 889, 556, 885,
              556, 646, 583, 889, 935, 707, 854, 594, 552, 865, 589, 556, 556,
              611, 469, 563, 556, 278, 278, 278, 969, 906, 611, 507, 619, 556,
              611, 778, 611, 575, 467, 944, 778, 944, 778, 944, 778, 667, 556,
              333, 333, 556, 1e3, 1e3, 552, 278, 278, 278, 278, 500, 500, 500,
              556, 556, 350, 1e3, 1e3, 240, 479, 333, 333, 604, 333, 167, 396,
              556, 556, 1104, 556, 885, 516, 1146, 1e3, 768, 600, 834, 834, 834,
              834, 999, 500, 1e3, 500, 1e3, 500, 500, 494, 612, 823, 713, 584,
              549, 713, 979, 722, 274, 549, 549, 583, 549, 549, 604, 584, 604,
              604, 708, 625, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708,
              708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708,
              708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708,
              708, 708, 708, 708, 708, 708, 708, 708, 708, 729, 604, 604, 354,
              354, 1e3, 990, 990, 990, 990, 494, 604, 604, 604, 604, 354, 1021,
              1052, 917, 750, 750, 531, 656, 594, 510, 500, 750, 750, 611, 611,
              333, 333, 333, 333, 333, 333, 333, 333, 222, 222, 333, 333, 333,
              333, 333, 333, 333, 333,
            ],
            aK = [
              -1, -1, -1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
              45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
              61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
              77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,
              93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
              107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
              120, 121, 122, 123, 124, 125, 126, 161, 162, 163, 164, 165, 166,
              167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180,
              181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193,
              194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
              207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219,
              220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
              233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
              246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
              259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
              272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284,
              285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297,
              298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310,
              311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323,
              324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336,
              337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349,
              350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362,
              363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375,
              376, 377, 378, 379, 380, 381, 382, 383, 402, 506, 507, 508, 509,
              510, 511, 536, 537, 538, 539, 710, 711, 713, 728, 729, 730, 731,
              732, 733, 900, 901, 902, 903, 904, 905, 906, 908, 910, 911, 912,
              913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
              926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939,
              940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952,
              953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
              966, 967, 968, 969, 970, 971, 972, 973, 974, 1024, 1025, 1026,
              1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037,
              1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
              1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059,
              1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
              1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081,
              1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092,
              1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103,
              1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114,
              1115, 1116, 1117, 1118, 1119, 1138, 1139, 1168, 1169, 7808, 7809,
              7810, 7811, 7812, 7813, 7922, 7923, 8208, 8209, 8211, 8212, 8213,
              8215, 8216, 8217, 8218, 8219, 8220, 8221, 8222, 8224, 8225, 8226,
              8230, 8240, 8242, 8243, 8249, 8250, 8252, 8254, 8260, 8319, 8355,
              8356, 8359, 8364, 8453, 8467, 8470, 8482, 8486, 8494, 8539, 8540,
              8541, 8542, 8592, 8593, 8594, 8595, 8596, 8597, 8616, 8706, 8710,
              8719, 8721, 8722, 8730, 8734, 8735, 8745, 8747, 8776, 8800, 8801,
              8804, 8805, 8962, 8976, 8992, 8993, 9472, 9474, 9484, 9488, 9492,
              9496, 9500, 9508, 9516, 9524, 9532, 9552, 9553, 9554, 9555, 9556,
              9557, 9558, 9559, 9560, 9561, 9562, 9563, 9564, 9565, 9566, 9567,
              9568, 9569, 9570, 9571, 9572, 9573, 9574, 9575, 9576, 9577, 9578,
              9579, 9580, 9600, 9604, 9608, 9612, 9616, 9617, 9618, 9619, 9632,
              9633, 9642, 9643, 9644, 9650, 9658, 9660, 9668, 9674, 9675, 9679,
              9688, 9689, 9702, 9786, 9787, 9788, 9792, 9794, 9824, 9827, 9829,
              9830, 9834, 9835, 9836, 61441, 61442, 61445, -1, -1, -1, -1, -1,
              -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            ],
            av = [
              365, 0, 333, 278, 278, 355, 556, 556, 889, 667, 191, 333, 333,
              389, 584, 278, 333, 278, 278, 556, 556, 556, 556, 556, 556, 556,
              556, 556, 556, 278, 278, 584, 584, 584, 556, 1015, 667, 667, 722,
              722, 667, 611, 778, 722, 278, 500, 667, 556, 833, 722, 778, 667,
              778, 722, 667, 611, 722, 667, 944, 667, 667, 611, 278, 278, 278,
              469, 556, 333, 556, 556, 500, 556, 556, 278, 556, 556, 222, 222,
              500, 222, 833, 556, 556, 556, 556, 333, 500, 278, 556, 500, 722,
              500, 500, 500, 334, 260, 334, 584, 333, 556, 556, 556, 556, 260,
              556, 333, 737, 370, 556, 584, 737, 552, 400, 549, 333, 333, 333,
              576, 537, 278, 333, 333, 365, 556, 834, 834, 834, 611, 667, 667,
              667, 667, 667, 667, 1e3, 722, 667, 667, 667, 667, 278, 278, 278,
              278, 722, 722, 778, 778, 778, 778, 778, 584, 778, 722, 722, 722,
              722, 667, 667, 611, 556, 556, 556, 556, 556, 556, 889, 500, 556,
              556, 556, 556, 278, 278, 278, 278, 556, 556, 556, 556, 556, 556,
              556, 549, 611, 556, 556, 556, 556, 500, 556, 500, 667, 556, 667,
              556, 667, 556, 722, 500, 722, 500, 722, 500, 722, 500, 722, 625,
              722, 556, 667, 556, 667, 556, 667, 556, 667, 556, 667, 556, 778,
              556, 778, 556, 778, 556, 778, 556, 722, 556, 722, 556, 278, 278,
              278, 278, 278, 278, 278, 222, 278, 278, 733, 444, 500, 222, 667,
              500, 500, 556, 222, 556, 222, 556, 281, 556, 400, 556, 222, 722,
              556, 722, 556, 722, 556, 615, 723, 556, 778, 556, 778, 556, 778,
              556, 1e3, 944, 722, 333, 722, 333, 722, 333, 667, 500, 667, 500,
              667, 500, 667, 500, 611, 278, 611, 354, 611, 278, 722, 556, 722,
              556, 722, 556, 722, 556, 722, 556, 722, 556, 944, 722, 667, 500,
              667, 611, 500, 611, 500, 611, 500, 222, 556, 667, 556, 1e3, 889,
              778, 611, 667, 500, 611, 278, 333, 333, 333, 333, 333, 333, 333,
              333, 333, 333, 333, 667, 278, 789, 846, 389, 794, 865, 775, 222,
              667, 667, 570, 671, 667, 611, 722, 778, 278, 667, 667, 833, 722,
              648, 778, 725, 667, 600, 611, 667, 837, 667, 831, 761, 278, 667,
              570, 439, 555, 222, 550, 570, 571, 500, 556, 439, 463, 555, 542,
              222, 500, 492, 548, 500, 447, 556, 670, 573, 486, 603, 374, 550,
              652, 546, 728, 779, 222, 550, 556, 550, 779, 667, 667, 843, 544,
              708, 667, 278, 278, 500, 1066, 982, 844, 589, 715, 639, 724, 667,
              651, 667, 544, 704, 667, 917, 614, 715, 715, 589, 686, 833, 722,
              778, 725, 667, 722, 611, 639, 795, 667, 727, 673, 920, 923, 805,
              886, 651, 694, 1022, 682, 556, 562, 522, 493, 553, 556, 688, 465,
              556, 556, 472, 564, 686, 550, 556, 556, 556, 500, 833, 500, 835,
              500, 572, 518, 830, 851, 621, 736, 526, 492, 752, 534, 556, 556,
              556, 378, 496, 500, 222, 222, 222, 910, 828, 556, 472, 565, 500,
              556, 778, 556, 492, 339, 944, 722, 944, 722, 944, 722, 667, 500,
              333, 333, 556, 1e3, 1e3, 552, 222, 222, 222, 222, 333, 333, 333,
              556, 556, 350, 1e3, 1e3, 188, 354, 333, 333, 500, 333, 167, 365,
              556, 556, 1094, 556, 885, 323, 1083, 1e3, 768, 600, 834, 834, 834,
              834, 1e3, 500, 998, 500, 1e3, 500, 500, 494, 612, 823, 713, 584,
              549, 713, 979, 719, 274, 549, 549, 584, 549, 549, 604, 584, 604,
              604, 708, 625, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708,
              708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708,
              708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708,
              708, 708, 708, 708, 708, 708, 708, 708, 708, 729, 604, 604, 354,
              354, 1e3, 990, 990, 990, 990, 494, 604, 604, 604, 604, 354, 1021,
              1052, 917, 750, 750, 531, 656, 594, 510, 500, 750, 750, 500, 500,
              333, 333, 333, 333, 333, 333, 333, 333, 222, 222, 294, 294, 324,
              324, 316, 328, 398, 285,
            ],
            aq = [
              -1, -1, -1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
              45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
              61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
              77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,
              93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
              107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
              120, 121, 122, 123, 124, 125, 126, 161, 162, 163, 164, 165, 166,
              167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180,
              181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193,
              194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
              207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219,
              220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
              233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
              246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
              259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
              272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284,
              285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297,
              298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310,
              311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323,
              324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336,
              337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349,
              350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362,
              363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375,
              376, 377, 378, 379, 380, 381, 382, 383, 402, 506, 507, 508, 509,
              510, 511, 536, 537, 538, 539, 710, 711, 713, 728, 729, 730, 731,
              732, 733, 900, 901, 902, 903, 904, 905, 906, 908, 910, 911, 912,
              913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
              926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939,
              940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952,
              953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
              966, 967, 968, 969, 970, 971, 972, 973, 974, 1024, 1025, 1026,
              1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037,
              1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
              1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059,
              1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
              1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081,
              1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092,
              1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103,
              1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114,
              1115, 1116, 1117, 1118, 1119, 1138, 1139, 1168, 1169, 7808, 7809,
              7810, 7811, 7812, 7813, 7922, 7923, 8208, 8209, 8211, 8212, 8213,
              8215, 8216, 8217, 8218, 8219, 8220, 8221, 8222, 8224, 8225, 8226,
              8230, 8240, 8242, 8243, 8249, 8250, 8252, 8254, 8260, 8319, 8355,
              8356, 8359, 8364, 8453, 8467, 8470, 8482, 8486, 8494, 8539, 8540,
              8541, 8542, 8592, 8593, 8594, 8595, 8596, 8597, 8616, 8706, 8710,
              8719, 8721, 8722, 8730, 8734, 8735, 8745, 8747, 8776, 8800, 8801,
              8804, 8805, 8962, 8976, 8992, 8993, 9472, 9474, 9484, 9488, 9492,
              9496, 9500, 9508, 9516, 9524, 9532, 9552, 9553, 9554, 9555, 9556,
              9557, 9558, 9559, 9560, 9561, 9562, 9563, 9564, 9565, 9566, 9567,
              9568, 9569, 9570, 9571, 9572, 9573, 9574, 9575, 9576, 9577, 9578,
              9579, 9580, 9600, 9604, 9608, 9612, 9616, 9617, 9618, 9619, 9632,
              9633, 9642, 9643, 9644, 9650, 9658, 9660, 9668, 9674, 9675, 9679,
              9688, 9689, 9702, 9786, 9787, 9788, 9792, 9794, 9824, 9827, 9829,
              9830, 9834, 9835, 9836, 61441, 61442, 61445, -1, -1, -1, -1, -1,
              -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            ],
            aT = [
              365, 0, 333, 278, 278, 355, 556, 556, 889, 667, 191, 333, 333,
              389, 584, 278, 333, 278, 278, 556, 556, 556, 556, 556, 556, 556,
              556, 556, 556, 278, 278, 584, 584, 584, 556, 1015, 667, 667, 722,
              722, 667, 611, 778, 722, 278, 500, 667, 556, 833, 722, 778, 667,
              778, 722, 667, 611, 722, 667, 944, 667, 667, 611, 278, 278, 278,
              469, 556, 333, 556, 556, 500, 556, 556, 278, 556, 556, 222, 222,
              500, 222, 833, 556, 556, 556, 556, 333, 500, 278, 556, 500, 722,
              500, 500, 500, 334, 260, 334, 584, 333, 556, 556, 556, 556, 260,
              556, 333, 737, 370, 556, 584, 737, 552, 400, 549, 333, 333, 333,
              576, 537, 278, 333, 333, 365, 556, 834, 834, 834, 611, 667, 667,
              667, 667, 667, 667, 1e3, 722, 667, 667, 667, 667, 278, 278, 278,
              278, 722, 722, 778, 778, 778, 778, 778, 584, 778, 722, 722, 722,
              722, 667, 667, 611, 556, 556, 556, 556, 556, 556, 889, 500, 556,
              556, 556, 556, 278, 278, 278, 278, 556, 556, 556, 556, 556, 556,
              556, 549, 611, 556, 556, 556, 556, 500, 556, 500, 667, 556, 667,
              556, 667, 556, 722, 500, 722, 500, 722, 500, 722, 500, 722, 615,
              722, 556, 667, 556, 667, 556, 667, 556, 667, 556, 667, 556, 778,
              556, 778, 556, 778, 556, 778, 556, 722, 556, 722, 556, 278, 278,
              278, 278, 278, 278, 278, 222, 278, 278, 735, 444, 500, 222, 667,
              500, 500, 556, 222, 556, 222, 556, 292, 556, 334, 556, 222, 722,
              556, 722, 556, 722, 556, 604, 723, 556, 778, 556, 778, 556, 778,
              556, 1e3, 944, 722, 333, 722, 333, 722, 333, 667, 500, 667, 500,
              667, 500, 667, 500, 611, 278, 611, 375, 611, 278, 722, 556, 722,
              556, 722, 556, 722, 556, 722, 556, 722, 556, 944, 722, 667, 500,
              667, 611, 500, 611, 500, 611, 500, 222, 556, 667, 556, 1e3, 889,
              778, 611, 667, 500, 611, 278, 333, 333, 333, 333, 333, 333, 333,
              333, 333, 333, 333, 667, 278, 784, 838, 384, 774, 855, 752, 222,
              667, 667, 551, 668, 667, 611, 722, 778, 278, 667, 668, 833, 722,
              650, 778, 722, 667, 618, 611, 667, 798, 667, 835, 748, 278, 667,
              578, 446, 556, 222, 547, 578, 575, 500, 557, 446, 441, 556, 556,
              222, 500, 500, 576, 500, 448, 556, 690, 569, 482, 617, 395, 547,
              648, 525, 713, 781, 222, 547, 556, 547, 781, 667, 667, 865, 542,
              719, 667, 278, 278, 500, 1057, 1010, 854, 583, 722, 635, 719, 667,
              656, 667, 542, 677, 667, 923, 604, 719, 719, 583, 656, 833, 722,
              778, 719, 667, 722, 611, 635, 760, 667, 740, 667, 917, 938, 792,
              885, 656, 719, 1010, 722, 556, 573, 531, 365, 583, 556, 669, 458,
              559, 559, 438, 583, 688, 552, 556, 542, 556, 500, 458, 500, 823,
              500, 573, 521, 802, 823, 625, 719, 521, 510, 750, 542, 556, 556,
              556, 365, 510, 500, 222, 278, 222, 906, 812, 556, 438, 559, 500,
              552, 778, 556, 489, 411, 944, 722, 944, 722, 944, 722, 667, 500,
              333, 333, 556, 1e3, 1e3, 552, 222, 222, 222, 222, 333, 333, 333,
              556, 556, 350, 1e3, 1e3, 188, 354, 333, 333, 500, 333, 167, 365,
              556, 556, 1094, 556, 885, 323, 1073, 1e3, 768, 600, 834, 834, 834,
              834, 1e3, 500, 1e3, 500, 1e3, 500, 500, 494, 612, 823, 713, 584,
              549, 713, 979, 719, 274, 549, 549, 583, 549, 549, 604, 584, 604,
              604, 708, 625, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708,
              708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708,
              708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708,
              708, 708, 708, 708, 708, 708, 708, 708, 708, 729, 604, 604, 354,
              354, 1e3, 990, 990, 990, 990, 494, 604, 604, 604, 604, 354, 1021,
              1052, 917, 750, 750, 531, 656, 594, 510, 500, 750, 750, 500, 500,
              333, 333, 333, 333, 333, 333, 333, 333, 222, 222, 294, 294, 324,
              324, 316, 328, 398, 285,
            ],
            aP = [
              -1, -1, -1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
              45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
              61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
              77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,
              93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106,
              107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,
              120, 121, 122, 123, 124, 125, 126, 161, 162, 163, 164, 165, 166,
              167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180,
              181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193,
              194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206,
              207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219,
              220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232,
              233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245,
              246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
              259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271,
              272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284,
              285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297,
              298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310,
              311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323,
              324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336,
              337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349,
              350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362,
              363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375,
              376, 377, 378, 379, 380, 381, 382, 383, 402, 506, 507, 508, 509,
              510, 511, 536, 537, 538, 539, 710, 711, 713, 728, 729, 730, 731,
              732, 733, 900, 901, 902, 903, 904, 905, 906, 908, 910, 911, 912,
              913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
              926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 938, 939,
              940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952,
              953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
              966, 967, 968, 969, 970, 971, 972, 973, 974, 1024, 1025, 1026,
              1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037,
              1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048,
              1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059,
              1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070,
              1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081,
              1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092,
              1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103,
              1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114,
              1115, 1116, 1117, 1118, 1119, 1138, 1139, 1168, 1169, 7808, 7809,
              7810, 7811, 7812, 7813, 7922, 7923, 8208, 8209, 8211, 8212, 8213,
              8215, 8216, 8217, 8218, 8219, 8220, 8221, 8222, 8224, 8225, 8226,
              8230, 8240, 8242, 8243, 8249, 8250, 8252, 8254, 8260, 8319, 8355,
              8356, 8359, 8364, 8453, 8467, 8470, 8482, 8486, 8494, 8539, 8540,
              8541, 8542, 8592, 8593, 8594, 8595, 8596, 8597, 8616, 8706, 8710,
              8719, 8721, 8722, 8730, 8734, 8735, 8745, 8747, 8776, 8800, 8801,
              8804, 8805, 8962, 8976, 8992, 8993, 9472, 9474, 9484, 9488, 9492,
              9496, 9500, 9508, 9516, 9524, 9532, 9552, 9553, 9554, 9555, 9556,
              9557, 9558, 9559, 9560, 9561, 9562, 9563, 9564, 9565, 9566, 9567,
              9568, 9569, 9570, 9571, 9572, 9573, 9574, 9575, 9576, 9577, 9578,
              9579, 9580, 9600, 9604, 9608, 9612, 9616, 9617, 9618, 9619, 9632,
              9633, 9642, 9643, 9644, 9650, 9658, 9660, 9668, 9674, 9675, 9679,
              9688, 9689, 9702, 9786, 9787, 9788, 9792, 9794, 9824, 9827, 9829,
              9830, 9834, 9835, 9836, 61441, 61442, 61445, -1, -1, -1, -1, -1,
              -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            ],
            aW = [
              1.36898, 1, 1, 0.72706, 0.80479, 0.83734, 0.98894, 0.99793,
              0.9897, 0.93884, 0.86209, 0.94292, 0.94292, 1.16661, 1.02058,
              0.93582, 0.96694, 0.93582, 1.19137, 0.99793, 0.99793, 0.99793,
              0.99793, 0.99793, 0.99793, 0.99793, 0.99793, 0.99793, 0.99793,
              0.78076, 0.78076, 1.02058, 1.02058, 1.02058, 0.72851, 0.78966,
              0.90838, 0.83637, 0.82391, 0.96376, 0.80061, 0.86275, 0.8768,
              0.95407, 1.0258, 0.73901, 0.85022, 0.83655, 1.0156, 0.95546,
              0.92179, 0.87107, 0.92179, 0.82114, 0.8096, 0.89713, 0.94438,
              0.95353, 0.94083, 0.91905, 0.90406, 0.9446, 0.94292, 1.18777,
              0.94292, 1.02058, 0.89903, 0.90088, 0.94938, 0.97898, 0.81093,
              0.97571, 0.94938, 1.024, 0.9577, 0.95933, 0.98621, 1.0474,
              0.97455, 0.98981, 0.9672, 0.95933, 0.9446, 0.97898, 0.97407,
              0.97646, 0.78036, 1.10208, 0.95442, 0.95298, 0.97579, 0.9332,
              0.94039, 0.938, 0.80687, 1.01149, 0.80687, 1.02058, 0.80479,
              0.99793, 0.99793, 0.99793, 0.99793, 1.01149, 1.00872, 0.90088,
              0.91882, 1.0213, 0.8361, 1.02058, 0.62295, 0.54324, 0.89022,
              1.08595, 1, 1, 0.90088, 1, 0.97455, 0.93582, 0.90088, 1, 1.05686,
              0.8361, 0.99642, 0.99642, 0.99642, 0.72851, 0.90838, 0.90838,
              0.90838, 0.90838, 0.90838, 0.90838, 0.868, 0.82391, 0.80061,
              0.80061, 0.80061, 0.80061, 1.0258, 1.0258, 1.0258, 1.0258,
              0.97484, 0.95546, 0.92179, 0.92179, 0.92179, 0.92179, 0.92179,
              1.02058, 0.92179, 0.94438, 0.94438, 0.94438, 0.94438, 0.90406,
              0.86958, 0.98225, 0.94938, 0.94938, 0.94938, 0.94938, 0.94938,
              0.94938, 0.9031, 0.81093, 0.94938, 0.94938, 0.94938, 0.94938,
              0.98621, 0.98621, 0.98621, 0.98621, 0.93969, 0.95933, 0.9446,
              0.9446, 0.9446, 0.9446, 0.9446, 1.08595, 0.9446, 0.95442, 0.95442,
              0.95442, 0.95442, 0.94039, 0.97898, 0.94039, 0.90838, 0.94938,
              0.90838, 0.94938, 0.90838, 0.94938, 0.82391, 0.81093, 0.82391,
              0.81093, 0.82391, 0.81093, 0.82391, 0.81093, 0.96376, 0.84313,
              0.97484, 0.97571, 0.80061, 0.94938, 0.80061, 0.94938, 0.80061,
              0.94938, 0.80061, 0.94938, 0.80061, 0.94938, 0.8768, 0.9577,
              0.8768, 0.9577, 0.8768, 0.9577, 1, 1, 0.95407, 0.95933, 0.97069,
              0.95933, 1.0258, 0.98621, 1.0258, 0.98621, 1.0258, 0.98621,
              1.0258, 0.98621, 1.0258, 0.98621, 0.887, 1.01591, 0.73901, 1.0474,
              1, 1, 0.97455, 0.83655, 0.98981, 1, 1, 0.83655, 0.73977, 0.83655,
              0.73903, 0.84638, 1.033, 0.95546, 0.95933, 1, 1, 0.95546, 0.95933,
              0.8271, 0.95417, 0.95933, 0.92179, 0.9446, 0.92179, 0.9446,
              0.92179, 0.9446, 0.936, 0.91964, 0.82114, 0.97646, 1, 1, 0.82114,
              0.97646, 0.8096, 0.78036, 0.8096, 0.78036, 1, 1, 0.8096, 0.78036,
              1, 1, 0.89713, 0.77452, 0.89713, 1.10208, 0.94438, 0.95442,
              0.94438, 0.95442, 0.94438, 0.95442, 0.94438, 0.95442, 0.94438,
              0.95442, 0.94438, 0.95442, 0.94083, 0.97579, 0.90406, 0.94039,
              0.90406, 0.9446, 0.938, 0.9446, 0.938, 0.9446, 0.938, 1, 0.99793,
              0.90838, 0.94938, 0.868, 0.9031, 0.92179, 0.9446, 1, 1, 0.89713,
              1.10208, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088,
              0.90088, 0.90088, 0.90088, 0.90989, 0.9358, 0.91945, 0.83181,
              0.75261, 0.87992, 0.82976, 0.96034, 0.83689, 0.97268, 1.0078,
              0.90838, 0.83637, 0.8019, 0.90157, 0.80061, 0.9446, 0.95407,
              0.92436, 1.0258, 0.85022, 0.97153, 1.0156, 0.95546, 0.89192,
              0.92179, 0.92361, 0.87107, 0.96318, 0.89713, 0.93704, 0.95638,
              0.91905, 0.91709, 0.92796, 1.0258, 0.93704, 0.94836, 1.0373,
              0.95933, 1.0078, 0.95871, 0.94836, 0.96174, 0.92601, 0.9498,
              0.98607, 0.95776, 0.95933, 1.05453, 1.0078, 0.98275, 0.9314,
              0.95617, 0.91701, 1.05993, 0.9446, 0.78367, 0.9553, 1, 0.86832,
              1.0128, 0.95871, 0.99394, 0.87548, 0.96361, 0.86774, 1.0078,
              0.95871, 0.9446, 0.95871, 0.86774, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 0.94083, 0.97579, 0.94083, 0.97579, 0.94083, 0.97579,
              0.90406, 0.94039, 0.96694, 1, 0.89903, 1, 1, 1, 0.93582, 0.93582,
              0.93582, 1, 0.908, 0.908, 0.918, 0.94219, 0.94219, 0.96544, 1,
              1.285, 1, 1, 0.81079, 0.81079, 1, 1, 0.74854, 1, 1, 1, 1, 0.99793,
              1, 1, 1, 0.65, 1, 1.36145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1.17173, 1, 0.80535, 0.76169, 1.02058, 1.0732, 1.05486, 1, 1,
              1.30692, 1.08595, 1.08595, 1, 1.08595, 1.08595, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.16161, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1,
            ],
            aZ = { lineHeight: 1.2, lineGap: 0.2 },
            aO = [
              1.36898, 1, 1, 0.66227, 0.80779, 0.81625, 0.97276, 0.97276,
              0.97733, 0.92222, 0.83266, 0.94292, 0.94292, 1.16148, 1.02058,
              0.93582, 0.96694, 0.93582, 1.17337, 0.97276, 0.97276, 0.97276,
              0.97276, 0.97276, 0.97276, 0.97276, 0.97276, 0.97276, 0.97276,
              0.78076, 0.78076, 1.02058, 1.02058, 1.02058, 0.71541, 0.76813,
              0.85576, 0.80591, 0.80729, 0.94299, 0.77512, 0.83655, 0.86523,
              0.92222, 0.98621, 0.71743, 0.81698, 0.79726, 0.98558, 0.92222,
              0.90637, 0.83809, 0.90637, 0.80729, 0.76463, 0.86275, 0.90699,
              0.91605, 0.9154, 0.85308, 0.85458, 0.90531, 0.94292, 1.21296,
              0.94292, 1.02058, 0.89903, 1.18616, 0.99613, 0.91677, 0.78216,
              0.91677, 0.90083, 0.98796, 0.9135, 0.92168, 0.95381, 0.98981,
              0.95298, 0.95381, 0.93459, 0.92168, 0.91513, 0.92004, 0.91677,
              0.95077, 0.748, 1.04502, 0.91677, 0.92061, 0.94236, 0.89544,
              0.89364, 0.9, 0.80687, 0.8578, 0.80687, 1.02058, 0.80779, 0.97276,
              0.97276, 0.97276, 0.97276, 0.8578, 0.99973, 1.18616, 0.91339,
              1.08074, 0.82891, 1.02058, 0.55509, 0.71526, 0.89022, 1.08595, 1,
              1, 1.18616, 1, 0.96736, 0.93582, 1.18616, 1, 1.04864, 0.82711,
              0.99043, 0.99043, 0.99043, 0.71541, 0.85576, 0.85576, 0.85576,
              0.85576, 0.85576, 0.85576, 0.845, 0.80729, 0.77512, 0.77512,
              0.77512, 0.77512, 0.98621, 0.98621, 0.98621, 0.98621, 0.95961,
              0.92222, 0.90637, 0.90637, 0.90637, 0.90637, 0.90637, 1.02058,
              0.90251, 0.90699, 0.90699, 0.90699, 0.90699, 0.85458, 0.83659,
              0.94951, 0.99613, 0.99613, 0.99613, 0.99613, 0.99613, 0.99613,
              0.85811, 0.78216, 0.90083, 0.90083, 0.90083, 0.90083, 0.95381,
              0.95381, 0.95381, 0.95381, 0.9135, 0.92168, 0.91513, 0.91513,
              0.91513, 0.91513, 0.91513, 1.08595, 0.91677, 0.91677, 0.91677,
              0.91677, 0.91677, 0.89364, 0.92332, 0.89364, 0.85576, 0.99613,
              0.85576, 0.99613, 0.85576, 0.99613, 0.80729, 0.78216, 0.80729,
              0.78216, 0.80729, 0.78216, 0.80729, 0.78216, 0.94299, 0.76783,
              0.95961, 0.91677, 0.77512, 0.90083, 0.77512, 0.90083, 0.77512,
              0.90083, 0.77512, 0.90083, 0.77512, 0.90083, 0.86523, 0.9135,
              0.86523, 0.9135, 0.86523, 0.9135, 1, 1, 0.92222, 0.92168, 0.92222,
              0.92168, 0.98621, 0.95381, 0.98621, 0.95381, 0.98621, 0.95381,
              0.98621, 0.95381, 0.98621, 0.95381, 0.86036, 0.97096, 0.71743,
              0.98981, 1, 1, 0.95298, 0.79726, 0.95381, 1, 1, 0.79726, 0.6894,
              0.79726, 0.74321, 0.81691, 1.0006, 0.92222, 0.92168, 1, 1,
              0.92222, 0.92168, 0.79464, 0.92098, 0.92168, 0.90637, 0.91513,
              0.90637, 0.91513, 0.90637, 0.91513, 0.909, 0.87514, 0.80729,
              0.95077, 1, 1, 0.80729, 0.95077, 0.76463, 0.748, 0.76463, 0.748,
              1, 1, 0.76463, 0.748, 1, 1, 0.86275, 0.72651, 0.86275, 1.04502,
              0.90699, 0.91677, 0.90699, 0.91677, 0.90699, 0.91677, 0.90699,
              0.91677, 0.90699, 0.91677, 0.90699, 0.91677, 0.9154, 0.94236,
              0.85458, 0.89364, 0.85458, 0.90531, 0.9, 0.90531, 0.9, 0.90531,
              0.9, 1, 0.97276, 0.85576, 0.99613, 0.845, 0.85811, 0.90251,
              0.91677, 1, 1, 0.86275, 1.04502, 1.18616, 1.18616, 1.18616,
              1.18616, 1.18616, 1.18616, 1.18616, 1.18616, 1.18616, 1.00899,
              1.30628, 0.85576, 0.80178, 0.66862, 0.7927, 0.69323, 0.88127,
              0.72459, 0.89711, 0.95381, 0.85576, 0.80591, 0.7805, 0.94729,
              0.77512, 0.90531, 0.92222, 0.90637, 0.98621, 0.81698, 0.92655,
              0.98558, 0.92222, 0.85359, 0.90637, 0.90976, 0.83809, 0.94523,
              0.86275, 0.83509, 0.93157, 0.85308, 0.83392, 0.92346, 0.98621,
              0.83509, 0.92886, 0.91324, 0.92168, 0.95381, 0.90646, 0.92886,
              0.90557, 0.86847, 0.90276, 0.91324, 0.86842, 0.92168, 0.99531,
              0.95381, 0.9224, 0.85408, 0.92699, 0.86847, 1.0051, 0.91513,
              0.80487, 0.93481, 1, 0.88159, 1.05214, 0.90646, 0.97355, 0.81539,
              0.89398, 0.85923, 0.95381, 0.90646, 0.91513, 0.90646, 0.85923, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.9154, 0.94236, 0.9154, 0.94236,
              0.9154, 0.94236, 0.85458, 0.89364, 0.96694, 1, 0.89903, 1, 1, 1,
              0.91782, 0.91782, 0.91782, 1, 0.896, 0.896, 0.896, 0.9332, 0.9332,
              0.95973, 1, 1.26, 1, 1, 0.80479, 0.80178, 1, 1, 0.85633, 1, 1, 1,
              1, 0.97276, 1, 1, 1, 0.698, 1, 1.36145, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1.14542, 1, 0.79199, 0.78694, 1.02058, 1.03493, 1.05486, 1,
              1, 1.23026, 1.08595, 1.08595, 1, 1.08595, 1.08595, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.20006, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1,
            ],
            aX = { lineHeight: 1.2, lineGap: 0.2 },
            aV = [
              1.36898, 1, 1, 0.65507, 0.84943, 0.85639, 0.88465, 0.88465,
              0.86936, 0.88307, 0.86948, 0.85283, 0.85283, 1.06383, 1.02058,
              0.75945, 0.9219, 0.75945, 1.17337, 0.88465, 0.88465, 0.88465,
              0.88465, 0.88465, 0.88465, 0.88465, 0.88465, 0.88465, 0.88465,
              0.75945, 0.75945, 1.02058, 1.02058, 1.02058, 0.69046, 0.70926,
              0.85158, 0.77812, 0.76852, 0.89591, 0.70466, 0.76125, 0.80094,
              0.86822, 0.83864, 0.728, 0.77212, 0.79475, 0.93637, 0.87514,
              0.8588, 0.76013, 0.8588, 0.72421, 0.69866, 0.77598, 0.85991,
              0.80811, 0.87832, 0.78112, 0.77512, 0.8562, 1.0222, 1.18417,
              1.0222, 1.27014, 0.89903, 1.15012, 0.93859, 0.94399, 0.846,
              0.94399, 0.81453, 1.0186, 0.94219, 0.96017, 1.03075, 1.02175,
              0.912, 1.03075, 0.96998, 0.96017, 0.93859, 0.94399, 0.94399,
              0.95493, 0.746, 1.12658, 0.94578, 0.91, 0.979, 0.882, 0.882, 0.83,
              0.85034, 0.83537, 0.85034, 1.02058, 0.70869, 0.88465, 0.88465,
              0.88465, 0.88465, 0.83537, 0.90083, 1.15012, 0.9161, 0.94565,
              0.73541, 1.02058, 0.53609, 0.69353, 0.79519, 1.08595, 1, 1,
              1.15012, 1, 0.91974, 0.75945, 1.15012, 1, 0.9446, 0.73361, 0.9005,
              0.9005, 0.9005, 0.62864, 0.85158, 0.85158, 0.85158, 0.85158,
              0.85158, 0.85158, 0.773, 0.76852, 0.70466, 0.70466, 0.70466,
              0.70466, 0.83864, 0.83864, 0.83864, 0.83864, 0.90561, 0.87514,
              0.8588, 0.8588, 0.8588, 0.8588, 0.8588, 1.02058, 0.85751, 0.85991,
              0.85991, 0.85991, 0.85991, 0.77512, 0.76013, 0.88075, 0.93859,
              0.93859, 0.93859, 0.93859, 0.93859, 0.93859, 0.8075, 0.846,
              0.81453, 0.81453, 0.81453, 0.81453, 0.82424, 0.82424, 0.82424,
              0.82424, 0.9278, 0.96017, 0.93859, 0.93859, 0.93859, 0.93859,
              0.93859, 1.08595, 0.8562, 0.94578, 0.94578, 0.94578, 0.94578,
              0.882, 0.94578, 0.882, 0.85158, 0.93859, 0.85158, 0.93859,
              0.85158, 0.93859, 0.76852, 0.846, 0.76852, 0.846, 0.76852, 0.846,
              0.76852, 0.846, 0.89591, 0.8544, 0.90561, 0.94399, 0.70466,
              0.81453, 0.70466, 0.81453, 0.70466, 0.81453, 0.70466, 0.81453,
              0.70466, 0.81453, 0.80094, 0.94219, 0.80094, 0.94219, 0.80094,
              0.94219, 1, 1, 0.86822, 0.96017, 0.86822, 0.96017, 0.83864,
              0.82424, 0.83864, 0.82424, 0.83864, 0.82424, 0.83864, 1.03075,
              0.83864, 0.82424, 0.81402, 1.02738, 0.728, 1.02175, 1, 1, 0.912,
              0.79475, 1.03075, 1, 1, 0.79475, 0.83911, 0.79475, 0.66266,
              0.80553, 1.06676, 0.87514, 0.96017, 1, 1, 0.87514, 0.96017,
              0.86865, 0.87396, 0.96017, 0.8588, 0.93859, 0.8588, 0.93859,
              0.8588, 0.93859, 0.867, 0.84759, 0.72421, 0.95493, 1, 1, 0.72421,
              0.95493, 0.69866, 0.746, 0.69866, 0.746, 1, 1, 0.69866, 0.746, 1,
              1, 0.77598, 0.88417, 0.77598, 1.12658, 0.85991, 0.94578, 0.85991,
              0.94578, 0.85991, 0.94578, 0.85991, 0.94578, 0.85991, 0.94578,
              0.85991, 0.94578, 0.87832, 0.979, 0.77512, 0.882, 0.77512, 0.8562,
              0.83, 0.8562, 0.83, 0.8562, 0.83, 1, 0.88465, 0.85158, 0.93859,
              0.773, 0.8075, 0.85751, 0.8562, 1, 1, 0.77598, 1.12658, 1.15012,
              1.15012, 1.15012, 1.15012, 1.15012, 1.15313, 1.15012, 1.15012,
              1.15012, 1.08106, 1.03901, 0.85158, 0.77025, 0.62264, 0.7646,
              0.65351, 0.86026, 0.69461, 0.89947, 1.03075, 0.85158, 0.77812,
              0.76449, 0.88836, 0.70466, 0.8562, 0.86822, 0.8588, 0.83864,
              0.77212, 0.85308, 0.93637, 0.87514, 0.82352, 0.8588, 0.85701,
              0.76013, 0.89058, 0.77598, 0.8156, 0.82565, 0.78112, 0.77899,
              0.89386, 0.83864, 0.8156, 0.9486, 0.92388, 0.96186, 1.03075,
              0.91123, 0.9486, 0.93298, 0.878, 0.93942, 0.92388, 0.84596,
              0.96186, 0.95119, 1.03075, 0.922, 0.88787, 0.95829, 0.88, 0.93559,
              0.93859, 0.78815, 0.93758, 1, 0.89217, 1.03737, 0.91123, 0.93969,
              0.77487, 0.85769, 0.86799, 1.03075, 0.91123, 0.93859, 0.91123,
              0.86799, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.87832, 0.979,
              0.87832, 0.979, 0.87832, 0.979, 0.77512, 0.882, 0.9219, 1,
              0.89903, 1, 1, 1, 0.87321, 0.87321, 0.87321, 1, 1.027, 1.027,
              1.027, 0.86847, 0.86847, 0.79121, 1, 1.124, 1, 1, 0.73572,
              0.73572, 1, 1, 0.85034, 1, 1, 1, 1, 0.88465, 1, 1, 1, 0.669, 1,
              1.36145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.04828, 1, 0.74948,
              0.75187, 1.02058, 0.98391, 1.02119, 1, 1, 1.06233, 1.08595,
              1.08595, 1, 1.08595, 1.08595, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1.05233, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1,
            ],
            aj = { lineHeight: 1.2, lineGap: 0.2 },
            az = [
              1.36898, 1, 1, 0.76305, 0.82784, 0.94935, 0.89364, 0.92241,
              0.89073, 0.90706, 0.98472, 0.85283, 0.85283, 1.0664, 1.02058,
              0.74505, 0.9219, 0.74505, 1.23456, 0.92241, 0.92241, 0.92241,
              0.92241, 0.92241, 0.92241, 0.92241, 0.92241, 0.92241, 0.92241,
              0.74505, 0.74505, 1.02058, 1.02058, 1.02058, 0.73002, 0.72601,
              0.91755, 0.8126, 0.80314, 0.92222, 0.73764, 0.79726, 0.83051,
              0.90284, 0.86023, 0.74, 0.8126, 0.84869, 0.96518, 0.91115, 0.8858,
              0.79761, 0.8858, 0.74498, 0.73914, 0.81363, 0.89591, 0.83659,
              0.89633, 0.85608, 0.8111, 0.90531, 1.0222, 1.22736, 1.0222,
              1.27014, 0.89903, 0.90088, 0.86667, 1.0231, 0.896, 1.01411,
              0.90083, 1.05099, 1.00512, 0.99793, 1.05326, 1.09377, 0.938,
              1.06226, 1.00119, 0.99793, 0.98714, 1.0231, 1.01231, 0.98196,
              0.792, 1.19137, 0.99074, 0.962, 1.01915, 0.926, 0.942, 0.856,
              0.85034, 0.92006, 0.85034, 1.02058, 0.69067, 0.92241, 0.92241,
              0.92241, 0.92241, 0.92006, 0.9332, 0.90088, 0.91882, 0.93484,
              0.75339, 1.02058, 0.56866, 0.54324, 0.79519, 1.08595, 1, 1,
              0.90088, 1, 0.95325, 0.74505, 0.90088, 1, 0.97198, 0.75339,
              0.91009, 0.91009, 0.91009, 0.66466, 0.91755, 0.91755, 0.91755,
              0.91755, 0.91755, 0.91755, 0.788, 0.80314, 0.73764, 0.73764,
              0.73764, 0.73764, 0.86023, 0.86023, 0.86023, 0.86023, 0.92915,
              0.91115, 0.8858, 0.8858, 0.8858, 0.8858, 0.8858, 1.02058, 0.8858,
              0.89591, 0.89591, 0.89591, 0.89591, 0.8111, 0.79611, 0.89713,
              0.86667, 0.86667, 0.86667, 0.86667, 0.86667, 0.86667, 0.86936,
              0.896, 0.90083, 0.90083, 0.90083, 0.90083, 0.84224, 0.84224,
              0.84224, 0.84224, 0.97276, 0.99793, 0.98714, 0.98714, 0.98714,
              0.98714, 0.98714, 1.08595, 0.89876, 0.99074, 0.99074, 0.99074,
              0.99074, 0.942, 1.0231, 0.942, 0.91755, 0.86667, 0.91755, 0.86667,
              0.91755, 0.86667, 0.80314, 0.896, 0.80314, 0.896, 0.80314, 0.896,
              0.80314, 0.896, 0.92222, 0.93372, 0.92915, 1.01411, 0.73764,
              0.90083, 0.73764, 0.90083, 0.73764, 0.90083, 0.73764, 0.90083,
              0.73764, 0.90083, 0.83051, 1.00512, 0.83051, 1.00512, 0.83051,
              1.00512, 1, 1, 0.90284, 0.99793, 0.90976, 0.99793, 0.86023,
              0.84224, 0.86023, 0.84224, 0.86023, 0.84224, 0.86023, 1.05326,
              0.86023, 0.84224, 0.82873, 1.07469, 0.74, 1.09377, 1, 1, 0.938,
              0.84869, 1.06226, 1, 1, 0.84869, 0.83704, 0.84869, 0.81441,
              0.85588, 1.08927, 0.91115, 0.99793, 1, 1, 0.91115, 0.99793,
              0.91887, 0.90991, 0.99793, 0.8858, 0.98714, 0.8858, 0.98714,
              0.8858, 0.98714, 0.894, 0.91434, 0.74498, 0.98196, 1, 1, 0.74498,
              0.98196, 0.73914, 0.792, 0.73914, 0.792, 1, 1, 0.73914, 0.792, 1,
              1, 0.81363, 0.904, 0.81363, 1.19137, 0.89591, 0.99074, 0.89591,
              0.99074, 0.89591, 0.99074, 0.89591, 0.99074, 0.89591, 0.99074,
              0.89591, 0.99074, 0.89633, 1.01915, 0.8111, 0.942, 0.8111,
              0.90531, 0.856, 0.90531, 0.856, 0.90531, 0.856, 1, 0.92241,
              0.91755, 0.86667, 0.788, 0.86936, 0.8858, 0.89876, 1, 1, 0.81363,
              1.19137, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088,
              0.90088, 0.90088, 0.90088, 0.90388, 1.03901, 0.92138, 0.78105,
              0.7154, 0.86169, 0.80513, 0.94007, 0.82528, 0.98612, 1.06226,
              0.91755, 0.8126, 0.81884, 0.92819, 0.73764, 0.90531, 0.90284,
              0.8858, 0.86023, 0.8126, 0.91172, 0.96518, 0.91115, 0.83089,
              0.8858, 0.87791, 0.79761, 0.89297, 0.81363, 0.88157, 0.89992,
              0.85608, 0.81992, 0.94307, 0.86023, 0.88157, 0.95308, 0.98699,
              0.99793, 1.06226, 0.95817, 0.95308, 0.97358, 0.928, 0.98088,
              0.98699, 0.92761, 0.99793, 0.96017, 1.06226, 0.986, 0.944,
              0.95978, 0.938, 0.96705, 0.98714, 0.80442, 0.98972, 1, 0.89762,
              1.04552, 0.95817, 0.99007, 0.87064, 0.91879, 0.88888, 1.06226,
              0.95817, 0.98714, 0.95817, 0.88888, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 0.89633, 1.01915, 0.89633, 1.01915, 0.89633, 1.01915,
              0.8111, 0.942, 0.9219, 1, 0.89903, 1, 1, 1, 0.93173, 0.93173,
              0.93173, 1, 1.06304, 1.06304, 1.06904, 0.89903, 0.89903, 0.80549,
              1, 1.156, 1, 1, 0.76575, 0.76575, 1, 1, 0.72458, 1, 1, 1, 1,
              0.92241, 1, 1, 1, 0.619, 1, 1.36145, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1.07257, 1, 0.74705, 0.71119, 1.02058, 1.024, 1.02119, 1, 1,
              1.1536, 1.08595, 1.08595, 1, 1.08595, 1.08595, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.05638, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1,
            ],
            a_ = { lineHeight: 1.2, lineGap: 0.2 },
            a$ = [
              1.76738, 1, 1, 0.99297, 0.9824, 1.04016, 1.06497, 1.03424,
              0.97529, 1.17647, 1.23203, 1.1085, 1.1085, 1.16939, 1.2107,
              0.9754, 1.21408, 0.9754, 1.59578, 1.03424, 1.03424, 1.03424,
              1.03424, 1.03424, 1.03424, 1.03424, 1.03424, 1.03424, 1.03424,
              0.81378, 0.81378, 1.2107, 1.2107, 1.2107, 0.71703, 0.97847,
              0.97363, 0.88776, 0.8641, 1.02096, 0.79795, 0.85132, 0.914,
              1.06085, 1.1406, 0.8007, 0.89858, 0.83693, 1.14889, 1.09398,
              0.97489, 0.92094, 0.97489, 0.90399, 0.84041, 0.95923, 1.00135, 1,
              1.06467, 0.98243, 0.90996, 0.99361, 1.1085, 1.56942, 1.1085,
              1.2107, 0.74627, 0.94282, 0.96752, 1.01519, 0.86304, 1.01359,
              0.97278, 1.15103, 1.01359, 0.98561, 1.02285, 1.02285, 1.00527,
              1.02285, 1.0302, 0.99041, 1.0008, 1.01519, 1.01359, 1.02258,
              0.79104, 1.16862, 0.99041, 0.97454, 1.02511, 0.99298, 0.96752,
              0.95801, 0.94856, 1.16579, 0.94856, 1.2107, 0.9824, 1.03424,
              1.03424, 1, 1.03424, 1.16579, 0.8727, 1.3871, 1.18622, 1.10818,
              1.04478, 1.2107, 1.18622, 0.75155, 0.94994, 1.28826, 1.21408,
              1.21408, 0.91056, 1, 0.91572, 0.9754, 0.64663, 1.18328, 1.24866,
              1.04478, 1.14169, 1.15749, 1.17389, 0.71703, 0.97363, 0.97363,
              0.97363, 0.97363, 0.97363, 0.97363, 0.93506, 0.8641, 0.79795,
              0.79795, 0.79795, 0.79795, 1.1406, 1.1406, 1.1406, 1.1406,
              1.02096, 1.09398, 0.97426, 0.97426, 0.97426, 0.97426, 0.97426,
              1.2107, 0.97489, 1.00135, 1.00135, 1.00135, 1.00135, 0.90996,
              0.92094, 1.02798, 0.96752, 0.96752, 0.96752, 0.96752, 0.96752,
              0.96752, 0.93136, 0.86304, 0.97278, 0.97278, 0.97278, 0.97278,
              1.02285, 1.02285, 1.02285, 1.02285, 0.97122, 0.99041, 1, 1, 1, 1,
              1, 1.28826, 1.0008, 0.99041, 0.99041, 0.99041, 0.99041, 0.96752,
              1.01519, 0.96752, 0.97363, 0.96752, 0.97363, 0.96752, 0.97363,
              0.96752, 0.8641, 0.86304, 0.8641, 0.86304, 0.8641, 0.86304,
              0.8641, 0.86304, 1.02096, 1.03057, 1.02096, 1.03517, 0.79795,
              0.97278, 0.79795, 0.97278, 0.79795, 0.97278, 0.79795, 0.97278,
              0.79795, 0.97278, 0.914, 1.01359, 0.914, 1.01359, 0.914, 1.01359,
              1, 1, 1.06085, 0.98561, 1.06085, 1.00879, 1.1406, 1.02285, 1.1406,
              1.02285, 1.1406, 1.02285, 1.1406, 1.02285, 1.1406, 1.02285,
              0.97138, 1.08692, 0.8007, 1.02285, 1, 1, 1.00527, 0.83693,
              1.02285, 1, 1, 0.83693, 0.9455, 0.83693, 0.90418, 0.83693,
              1.13005, 1.09398, 0.99041, 1, 1, 1.09398, 0.99041, 0.96692,
              1.09251, 0.99041, 0.97489, 1.0008, 0.97489, 1.0008, 0.97489,
              1.0008, 0.93994, 0.97931, 0.90399, 1.02258, 1, 1, 0.90399,
              1.02258, 0.84041, 0.79104, 0.84041, 0.79104, 0.84041, 0.79104,
              0.84041, 0.79104, 1, 1, 0.95923, 1.07034, 0.95923, 1.16862,
              1.00135, 0.99041, 1.00135, 0.99041, 1.00135, 0.99041, 1.00135,
              0.99041, 1.00135, 0.99041, 1.00135, 0.99041, 1.06467, 1.02511,
              0.90996, 0.96752, 0.90996, 0.99361, 0.95801, 0.99361, 0.95801,
              0.99361, 0.95801, 1.07733, 1.03424, 0.97363, 0.96752, 0.93506,
              0.93136, 0.97489, 1.0008, 1, 1, 0.95923, 1.16862, 1.15103,
              1.15103, 1.01173, 1.03959, 0.75953, 0.81378, 0.79912, 1.15103,
              1.21994, 0.95161, 0.87815, 1.01149, 0.81525, 0.7676, 0.98167,
              1.01134, 1.02546, 0.84097, 1.03089, 1.18102, 0.97363, 0.88776,
              0.85134, 0.97826, 0.79795, 0.99361, 1.06085, 0.97489, 1.1406,
              0.89858, 1.0388, 1.14889, 1.09398, 0.86039, 0.97489, 1.0595,
              0.92094, 0.94793, 0.95923, 0.90996, 0.99346, 0.98243, 1.02112,
              0.95493, 1.1406, 0.90996, 1.03574, 1.02597, 1.0008, 1.18102,
              1.06628, 1.03574, 1.0192, 1.01932, 1.00886, 0.97531, 1.0106,
              1.0008, 1.13189, 1.18102, 1.02277, 0.98683, 1.0016, 0.99561,
              1.07237, 1.0008, 0.90434, 0.99921, 0.93803, 0.8965, 1.23085,
              1.06628, 1.04983, 0.96268, 1.0499, 0.98439, 1.18102, 1.06628,
              1.0008, 1.06628, 0.98439, 0.79795, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1.09466, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 0.97278, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1.02065, 1, 1, 1, 1, 1, 1, 1.06467, 1.02511, 1.06467, 1.02511,
              1.06467, 1.02511, 0.90996, 0.96752, 1, 1.21408, 0.89903, 1, 1,
              0.75155, 1.04394, 1.04394, 1.04394, 1.04394, 0.98633, 0.98633,
              0.98633, 0.73047, 0.73047, 1.20642, 0.91211, 1.25635, 1.222,
              1.02956, 1.03372, 1.03372, 0.96039, 1.24633, 1, 1.12454, 0.93503,
              1.03424, 1.19687, 1.03424, 1, 1, 1, 0.771, 1, 1, 1.15749, 1.15749,
              1.15749, 1.10948, 0.86279, 0.94434, 0.86279, 0.94434, 0.86182, 1,
              1, 1.16897, 1, 0.96085, 0.90137, 1.2107, 1.18416, 1.13973,
              0.69825, 0.9716, 2.10339, 1.29004, 1.29004, 1.21172, 1.29004,
              1.29004, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.42603, 1, 0.99862, 0.99862, 1,
              0.87025, 0.87025, 0.87025, 0.87025, 1.18874, 1.42603, 1, 1.42603,
              1.42603, 0.99862, 1, 1, 1, 1, 1, 1.2886, 1.04315, 1.15296,
              1.34163, 1, 1, 1, 1.09193, 1.09193, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1,
            ],
            a0 = { lineHeight: 1.33008, lineGap: 0 },
            a1 = [
              1.76738, 1, 1, 0.98946, 1.03959, 1.04016, 1.02809, 1.036, 0.97639,
              1.10953, 1.23203, 1.11144, 1.11144, 1.16939, 1.21237, 0.9754,
              1.21261, 0.9754, 1.59754, 1.036, 1.036, 1.036, 1.036, 1.036,
              1.036, 1.036, 1.036, 1.036, 1.036, 0.81378, 0.81378, 1.21237,
              1.21237, 1.21237, 0.73541, 0.97847, 0.97363, 0.89723, 0.87897,
              1.0426, 0.79429, 0.85292, 0.91149, 1.05815, 1.1406, 0.79631,
              0.90128, 0.83853, 1.04396, 1.10615, 0.97552, 0.94436, 0.97552,
              0.88641, 0.80527, 0.96083, 1.00135, 1, 1.06777, 0.9817, 0.91142,
              0.99361, 1.11144, 1.57293, 1.11144, 1.21237, 0.74627, 1.31818,
              1.06585, 0.97042, 0.83055, 0.97042, 0.93503, 1.1261, 0.97042,
              0.97922, 1.14236, 0.94552, 1.01054, 1.14236, 1.02471, 0.97922,
              0.94165, 0.97042, 0.97042, 1.0276, 0.78929, 1.1261, 0.97922,
              0.95874, 1.02197, 0.98507, 0.96752, 0.97168, 0.95107, 1.16579,
              0.95107, 1.21237, 1.03959, 1.036, 1.036, 1, 1.036, 1.16579,
              0.87357, 1.31818, 1.18754, 1.26781, 1.05356, 1.21237, 1.18622,
              0.79487, 0.94994, 1.29004, 1.24047, 1.24047, 1.31818, 1, 0.91484,
              0.9754, 1.31818, 1.1349, 1.24866, 1.05356, 1.13934, 1.15574,
              1.17389, 0.73541, 0.97363, 0.97363, 0.97363, 0.97363, 0.97363,
              0.97363, 0.94385, 0.87897, 0.79429, 0.79429, 0.79429, 0.79429,
              1.1406, 1.1406, 1.1406, 1.1406, 1.0426, 1.10615, 0.97552, 0.97552,
              0.97552, 0.97552, 0.97552, 1.21237, 0.97552, 1.00135, 1.00135,
              1.00135, 1.00135, 0.91142, 0.94436, 0.98721, 1.06585, 1.06585,
              1.06585, 1.06585, 1.06585, 1.06585, 0.96705, 0.83055, 0.93503,
              0.93503, 0.93503, 0.93503, 1.14236, 1.14236, 1.14236, 1.14236,
              0.93125, 0.97922, 0.94165, 0.94165, 0.94165, 0.94165, 0.94165,
              1.29004, 0.94165, 0.97922, 0.97922, 0.97922, 0.97922, 0.96752,
              0.97042, 0.96752, 0.97363, 1.06585, 0.97363, 1.06585, 0.97363,
              1.06585, 0.87897, 0.83055, 0.87897, 0.83055, 0.87897, 0.83055,
              0.87897, 0.83055, 1.0426, 1.0033, 1.0426, 0.97042, 0.79429,
              0.93503, 0.79429, 0.93503, 0.79429, 0.93503, 0.79429, 0.93503,
              0.79429, 0.93503, 0.91149, 0.97042, 0.91149, 0.97042, 0.91149,
              0.97042, 1, 1, 1.05815, 0.97922, 1.05815, 0.97922, 1.1406,
              1.14236, 1.1406, 1.14236, 1.1406, 1.14236, 1.1406, 1.14236,
              1.1406, 1.14236, 0.97441, 1.04302, 0.79631, 1.01582, 1, 1,
              1.01054, 0.83853, 1.14236, 1, 1, 0.83853, 1.09125, 0.83853,
              0.90418, 0.83853, 1.19508, 1.10615, 0.97922, 1, 1, 1.10615,
              0.97922, 1.01034, 1.10466, 0.97922, 0.97552, 0.94165, 0.97552,
              0.94165, 0.97552, 0.94165, 0.91602, 0.91981, 0.88641, 1.0276, 1,
              1, 0.88641, 1.0276, 0.80527, 0.78929, 0.80527, 0.78929, 0.80527,
              0.78929, 0.80527, 0.78929, 1, 1, 0.96083, 1.05403, 0.95923,
              1.16862, 1.00135, 0.97922, 1.00135, 0.97922, 1.00135, 0.97922,
              1.00135, 0.97922, 1.00135, 0.97922, 1.00135, 0.97922, 1.06777,
              1.02197, 0.91142, 0.96752, 0.91142, 0.99361, 0.97168, 0.99361,
              0.97168, 0.99361, 0.97168, 1.23199, 1.036, 0.97363, 1.06585,
              0.94385, 0.96705, 0.97552, 0.94165, 1, 1, 0.96083, 1.1261,
              1.31818, 1.31818, 1.31818, 1.31818, 1.31818, 1.31818, 1.31818,
              1.31818, 1.31818, 0.95161, 1.27126, 1.00811, 0.83284, 0.77702,
              0.99137, 0.95253, 1.0347, 0.86142, 1.07205, 1.14236, 0.97363,
              0.89723, 0.86869, 1.09818, 0.79429, 0.99361, 1.05815, 0.97552,
              1.1406, 0.90128, 1.06662, 1.04396, 1.10615, 0.84918, 0.97552,
              1.04694, 0.94436, 0.98015, 0.96083, 0.91142, 1.00356, 0.9817,
              1.01945, 0.98999, 1.1406, 0.91142, 1.04961, 0.9898, 1.00639,
              1.14236, 1.07514, 1.04961, 0.99607, 1.02897, 1.008, 0.9898,
              0.95134, 1.00639, 1.11121, 1.14236, 1.00518, 0.97981, 1.02186, 1,
              1.08578, 0.94165, 0.99314, 0.98387, 0.93028, 0.93377, 1.35125,
              1.07514, 1.10687, 0.93491, 1.04232, 1.00351, 1.14236, 1.07514,
              0.94165, 1.07514, 1.00351, 0.79429, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1.09097, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 0.93503, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              0.96609, 1, 1, 1, 1, 1, 1, 1.06777, 1.02197, 1.06777, 1.02197,
              1.06777, 1.02197, 0.91142, 0.96752, 1, 1.21261, 0.89903, 1, 1,
              0.75155, 1.04745, 1.04745, 1.04745, 1.04394, 0.98633, 0.98633,
              0.98633, 0.72959, 0.72959, 1.20502, 0.91406, 1.26514, 1.222,
              1.02956, 1.03372, 1.03372, 0.96039, 1.24633, 1, 1.09125, 0.93327,
              1.03336, 1.16541, 1.036, 1, 1, 1, 0.771, 1, 1, 1.15574, 1.15574,
              1.15574, 1.15574, 0.86364, 0.94434, 0.86279, 0.94434, 0.86224, 1,
              1, 1.16798, 1, 0.96085, 0.90068, 1.21237, 1.18416, 1.13904,
              0.69825, 0.9716, 2.10339, 1.29004, 1.29004, 1.21339, 1.29004,
              1.29004, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.42603, 1, 0.99862, 0.99862, 1,
              0.87025, 0.87025, 0.87025, 0.87025, 1.18775, 1.42603, 1, 1.42603,
              1.42603, 0.99862, 1, 1, 1, 1, 1, 1.2886, 1.04315, 1.15296,
              1.34163, 1, 1, 1, 1.13269, 1.13269, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1,
            ],
            a2 = { lineHeight: 1.33008, lineGap: 0 },
            a9 = [
              1.76738, 1, 1, 0.98946, 1.14763, 1.05365, 1.06234, 0.96927,
              0.92586, 1.15373, 1.18414, 0.91349, 0.91349, 1.07403, 1.17308,
              0.78383, 1.20088, 0.78383, 1.42531, 0.96927, 0.96927, 0.96927,
              0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927,
              0.78383, 0.78383, 1.17308, 1.17308, 1.17308, 0.77349, 0.94565,
              0.94729, 0.85944, 0.88506, 0.9858, 0.74817, 0.80016, 0.88449,
              0.98039, 0.95782, 0.69238, 0.89898, 0.83231, 0.98183, 1.03989,
              0.96924, 0.86237, 0.96924, 0.80595, 0.74524, 0.86091, 0.95402,
              0.94143, 0.98448, 0.8858, 0.83089, 0.93285, 1.0949, 1.39016,
              1.0949, 1.45994, 0.74627, 1.04839, 0.97454, 0.97454, 0.87207,
              0.97454, 0.87533, 1.06151, 0.97454, 1.00176, 1.16484, 1.08132,
              0.98047, 1.16484, 1.02989, 1.01054, 0.96225, 0.97454, 0.97454,
              1.06598, 0.79004, 1.16344, 1.00351, 0.94629, 0.9973, 0.91016,
              0.96777, 0.9043, 0.91082, 0.92481, 0.91082, 1.17308, 0.95748,
              0.96927, 0.96927, 1, 0.96927, 0.92481, 0.80597, 1.04839, 1.23393,
              1.1781, 0.9245, 1.17308, 1.20808, 0.63218, 0.94261, 1.24822,
              1.09971, 1.09971, 1.04839, 1, 0.85273, 0.78032, 1.04839, 1.09971,
              1.22326, 0.9245, 1.09836, 1.13525, 1.15222, 0.70424, 0.94729,
              0.94729, 0.94729, 0.94729, 0.94729, 0.94729, 0.85498, 0.88506,
              0.74817, 0.74817, 0.74817, 0.74817, 0.95782, 0.95782, 0.95782,
              0.95782, 0.9858, 1.03989, 0.96924, 0.96924, 0.96924, 0.96924,
              0.96924, 1.17308, 0.96924, 0.95402, 0.95402, 0.95402, 0.95402,
              0.83089, 0.86237, 0.88409, 0.97454, 0.97454, 0.97454, 0.97454,
              0.97454, 0.97454, 0.92916, 0.87207, 0.87533, 0.87533, 0.87533,
              0.87533, 0.93146, 0.93146, 0.93146, 0.93146, 0.93854, 1.01054,
              0.96225, 0.96225, 0.96225, 0.96225, 0.96225, 1.24822, 0.8761,
              1.00351, 1.00351, 1.00351, 1.00351, 0.96777, 0.97454, 0.96777,
              0.94729, 0.97454, 0.94729, 0.97454, 0.94729, 0.97454, 0.88506,
              0.87207, 0.88506, 0.87207, 0.88506, 0.87207, 0.88506, 0.87207,
              0.9858, 0.95391, 0.9858, 0.97454, 0.74817, 0.87533, 0.74817,
              0.87533, 0.74817, 0.87533, 0.74817, 0.87533, 0.74817, 0.87533,
              0.88449, 0.97454, 0.88449, 0.97454, 0.88449, 0.97454, 1, 1,
              0.98039, 1.00176, 0.98039, 1.00176, 0.95782, 0.93146, 0.95782,
              0.93146, 0.95782, 0.93146, 0.95782, 1.16484, 0.95782, 0.93146,
              0.84421, 1.12761, 0.69238, 1.08132, 1, 1, 0.98047, 0.83231,
              1.16484, 1, 1, 0.84723, 1.04861, 0.84723, 0.78755, 0.83231,
              1.23736, 1.03989, 1.01054, 1, 1, 1.03989, 1.01054, 0.9857,
              1.03849, 1.01054, 0.96924, 0.96225, 0.96924, 0.96225, 0.96924,
              0.96225, 0.92383, 0.90171, 0.80595, 1.06598, 1, 1, 0.80595,
              1.06598, 0.74524, 0.79004, 0.74524, 0.79004, 0.74524, 0.79004,
              0.74524, 0.79004, 1, 1, 0.86091, 1.02759, 0.85771, 1.16344,
              0.95402, 1.00351, 0.95402, 1.00351, 0.95402, 1.00351, 0.95402,
              1.00351, 0.95402, 1.00351, 0.95402, 1.00351, 0.98448, 0.9973,
              0.83089, 0.96777, 0.83089, 0.93285, 0.9043, 0.93285, 0.9043,
              0.93285, 0.9043, 1.31868, 0.96927, 0.94729, 0.97454, 0.85498,
              0.92916, 0.96924, 0.8761, 1, 1, 0.86091, 1.16344, 1.04839,
              1.04839, 1.04839, 1.04839, 1.04839, 1.04839, 1.04839, 1.04839,
              1.04839, 0.81965, 0.81965, 0.94729, 0.78032, 0.71022, 0.90883,
              0.84171, 0.99877, 0.77596, 1.05734, 1.2, 0.94729, 0.85944,
              0.82791, 0.9607, 0.74817, 0.93285, 0.98039, 0.96924, 0.95782,
              0.89898, 0.98316, 0.98183, 1.03989, 0.78614, 0.96924, 0.97642,
              0.86237, 0.86075, 0.86091, 0.83089, 0.90082, 0.8858, 0.97296,
              1.01284, 0.95782, 0.83089, 1.0976, 1.04, 1.03342, 1.2, 1.0675,
              1.0976, 0.98205, 1.03809, 1.05097, 1.04, 0.95364, 1.03342,
              1.05401, 1.2, 1.02148, 1.0119, 1.04724, 1.0127, 1.02732, 0.96225,
              0.8965, 0.97783, 0.93574, 0.94818, 1.30679, 1.0675, 1.11826,
              0.99821, 1.0557, 1.0326, 1.2, 1.0675, 0.96225, 1.0675, 1.0326,
              0.74817, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.03754, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.87533, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.98705, 1, 1, 1, 1, 1, 1,
              0.98448, 0.9973, 0.98448, 0.9973, 0.98448, 0.9973, 0.83089,
              0.96777, 1, 1.20088, 0.89903, 1, 1, 0.75155, 0.94945, 0.94945,
              0.94945, 0.94945, 1.12317, 1.12317, 1.12317, 0.67603, 0.67603,
              1.15621, 0.73584, 1.21191, 1.22135, 1.06483, 0.94868, 0.94868,
              0.95996, 1.24633, 1, 1.07497, 0.87709, 0.96927, 1.01473, 0.96927,
              1, 1, 1, 0.77295, 1, 1, 1.09836, 1.09836, 1.09836, 1.01522,
              0.86321, 0.94434, 0.8649, 0.94434, 0.86182, 1, 1, 1.083, 1,
              0.91578, 0.86438, 1.17308, 1.18416, 1.14589, 0.69825, 0.97622,
              1.96791, 1.24822, 1.24822, 1.17308, 1.24822, 1.24822, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1.42603, 1, 0.99862, 0.99862, 1, 0.87025, 0.87025,
              0.87025, 0.87025, 1.17984, 1.42603, 1, 1.42603, 1.42603, 0.99862,
              1, 1, 1, 1, 1, 1.2886, 1.04315, 1.15296, 1.34163, 1, 1, 1,
              1.10742, 1.10742, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1,
            ],
            a3 = { lineHeight: 1.33008, lineGap: 0 },
            a5 = [
              1.76738, 1, 1, 0.98594, 1.02285, 1.10454, 1.06234, 0.96927,
              0.92037, 1.19985, 1.2046, 0.90616, 0.90616, 1.07152, 1.1714,
              0.78032, 1.20088, 0.78032, 1.40246, 0.96927, 0.96927, 0.96927,
              0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927,
              0.78032, 0.78032, 1.1714, 1.1714, 1.1714, 0.80597, 0.94084,
              0.96706, 0.85944, 0.85734, 0.97093, 0.75842, 0.79936, 0.88198,
              0.9831, 0.95782, 0.71387, 0.86969, 0.84636, 1.07796, 1.03584,
              0.96924, 0.83968, 0.96924, 0.82826, 0.79649, 0.85771, 0.95132,
              0.93119, 0.98965, 0.88433, 0.8287, 0.93365, 1.08612, 1.3638,
              1.08612, 1.45786, 0.74627, 0.80499, 0.91484, 1.05707, 0.92383,
              1.05882, 0.9403, 1.12654, 1.05882, 1.01756, 1.09011, 1.09011,
              0.99414, 1.09011, 1.034, 1.01756, 1.05356, 1.05707, 1.05882,
              1.04399, 0.84863, 1.21968, 1.01756, 0.95801, 1.00068, 0.91797,
              0.96777, 0.9043, 0.90351, 0.92105, 0.90351, 1.1714, 0.85337,
              0.96927, 0.96927, 0.99912, 0.96927, 0.92105, 0.80597, 1.2434,
              1.20808, 1.05937, 0.90957, 1.1714, 1.20808, 0.75155, 0.94261,
              1.24644, 1.09971, 1.09971, 0.84751, 1, 0.85273, 0.78032, 0.61584,
              1.05425, 1.17914, 0.90957, 1.08665, 1.11593, 1.14169, 0.73381,
              0.96706, 0.96706, 0.96706, 0.96706, 0.96706, 0.96706, 0.86035,
              0.85734, 0.75842, 0.75842, 0.75842, 0.75842, 0.95782, 0.95782,
              0.95782, 0.95782, 0.97093, 1.03584, 0.96924, 0.96924, 0.96924,
              0.96924, 0.96924, 1.1714, 0.96924, 0.95132, 0.95132, 0.95132,
              0.95132, 0.8287, 0.83968, 0.89049, 0.91484, 0.91484, 0.91484,
              0.91484, 0.91484, 0.91484, 0.93575, 0.92383, 0.9403, 0.9403,
              0.9403, 0.9403, 0.8717, 0.8717, 0.8717, 0.8717, 1.00527, 1.01756,
              1.05356, 1.05356, 1.05356, 1.05356, 1.05356, 1.24644, 0.95923,
              1.01756, 1.01756, 1.01756, 1.01756, 0.96777, 1.05707, 0.96777,
              0.96706, 0.91484, 0.96706, 0.91484, 0.96706, 0.91484, 0.85734,
              0.92383, 0.85734, 0.92383, 0.85734, 0.92383, 0.85734, 0.92383,
              0.97093, 1.0969, 0.97093, 1.05882, 0.75842, 0.9403, 0.75842,
              0.9403, 0.75842, 0.9403, 0.75842, 0.9403, 0.75842, 0.9403,
              0.88198, 1.05882, 0.88198, 1.05882, 0.88198, 1.05882, 1, 1,
              0.9831, 1.01756, 0.9831, 1.01756, 0.95782, 0.8717, 0.95782,
              0.8717, 0.95782, 0.8717, 0.95782, 1.09011, 0.95782, 0.8717,
              0.84784, 1.11551, 0.71387, 1.09011, 1, 1, 0.99414, 0.84636,
              1.09011, 1, 1, 0.84636, 1.0536, 0.84636, 0.94298, 0.84636,
              1.23297, 1.03584, 1.01756, 1, 1, 1.03584, 1.01756, 1.00323,
              1.03444, 1.01756, 0.96924, 1.05356, 0.96924, 1.05356, 0.96924,
              1.05356, 0.93066, 0.98293, 0.82826, 1.04399, 1, 1, 0.82826,
              1.04399, 0.79649, 0.84863, 0.79649, 0.84863, 0.79649, 0.84863,
              0.79649, 0.84863, 1, 1, 0.85771, 1.17318, 0.85771, 1.21968,
              0.95132, 1.01756, 0.95132, 1.01756, 0.95132, 1.01756, 0.95132,
              1.01756, 0.95132, 1.01756, 0.95132, 1.01756, 0.98965, 1.00068,
              0.8287, 0.96777, 0.8287, 0.93365, 0.9043, 0.93365, 0.9043,
              0.93365, 0.9043, 1.08571, 0.96927, 0.96706, 0.91484, 0.86035,
              0.93575, 0.96924, 0.95923, 1, 1, 0.85771, 1.21968, 1.11437,
              1.11437, 0.93109, 0.91202, 0.60411, 0.84164, 0.55572, 1.01173,
              0.97361, 0.81818, 0.81818, 0.96635, 0.78032, 0.72727, 0.92366,
              0.98601, 1.03405, 0.77968, 1.09799, 1.2, 0.96706, 0.85944,
              0.85638, 0.96491, 0.75842, 0.93365, 0.9831, 0.96924, 0.95782,
              0.86969, 0.94152, 1.07796, 1.03584, 0.78437, 0.96924, 0.98715,
              0.83968, 0.83491, 0.85771, 0.8287, 0.94492, 0.88433, 0.9287,
              1.0098, 0.95782, 0.8287, 1.0625, 0.98248, 1.03424, 1.2, 1.01071,
              1.0625, 0.95246, 1.03809, 1.04912, 0.98248, 1.00221, 1.03424,
              1.05443, 1.2, 1.04785, 0.99609, 1.00169, 1.05176, 0.99346,
              1.05356, 0.9087, 1.03004, 0.95542, 0.93117, 1.23362, 1.01071,
              1.07831, 1.02512, 1.05205, 1.03502, 1.2, 1.01071, 1.05356,
              1.01071, 1.03502, 0.75842, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1.03719, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 0.9403, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.04021, 1,
              1, 1, 1, 1, 1, 0.98965, 1.00068, 0.98965, 1.00068, 0.98965,
              1.00068, 0.8287, 0.96777, 1, 1.20088, 0.89903, 1, 1, 0.75155,
              1.03077, 1.03077, 1.03077, 1.03077, 1.13196, 1.13196, 1.13196,
              0.67428, 0.67428, 1.16039, 0.73291, 1.20996, 1.22135, 1.06483,
              0.94868, 0.94868, 0.95996, 1.24633, 1, 1.07497, 0.87796, 0.96927,
              1.01518, 0.96927, 1, 1, 1, 0.77295, 1, 1, 1.10539, 1.10539,
              1.11358, 1.06967, 0.86279, 0.94434, 0.86279, 0.94434, 0.86182, 1,
              1, 1.083, 1, 0.91578, 0.86507, 1.1714, 1.18416, 1.14589, 0.69825,
              0.97622, 1.9697, 1.24822, 1.24822, 1.17238, 1.24822, 1.24822, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1.42603, 1, 0.99862, 0.99862, 1, 0.87025,
              0.87025, 0.87025, 0.87025, 1.18083, 1.42603, 1, 1.42603, 1.42603,
              0.99862, 1, 1, 1, 1, 1, 1.2886, 1.04315, 1.15296, 1.34163, 1, 1,
              1, 1.10938, 1.10938, 1, 1, 1, 1.05425, 1.09971, 1.09971, 1.09971,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            ],
            a8 = { lineHeight: 1.33008, lineGap: 0 },
            a6 = Ah(function (A) {
              (A['MyriadPro-Regular'] = A['PdfJS-Fallback-Regular'] =
                {
                  name: 'LiberationSans-Regular',
                  factors: az,
                  baseWidths: aT,
                  baseMapping: aP,
                  metrics: a_,
                }),
                (A['MyriadPro-Bold'] = A['PdfJS-Fallback-Bold'] =
                  {
                    name: 'LiberationSans-Bold',
                    factors: aW,
                    baseWidths: aL,
                    baseMapping: aH,
                    metrics: aZ,
                  }),
                (A['MyriadPro-It'] =
                  A['MyriadPro-Italic'] =
                  A['PdfJS-Fallback-Italic'] =
                    {
                      name: 'LiberationSans-Italic',
                      factors: aV,
                      baseWidths: av,
                      baseMapping: aq,
                      metrics: aj,
                    }),
                (A['MyriadPro-BoldIt'] =
                  A['MyriadPro-BoldItalic'] =
                  A['PdfJS-Fallback-BoldItalic'] =
                    {
                      name: 'LiberationSans-BoldItalic',
                      factors: aO,
                      baseWidths: aY,
                      baseMapping: aK,
                      metrics: aX,
                    }),
                (A.ArialMT =
                  A.Arial =
                  A['Arial-Regular'] =
                    {
                      name: 'LiberationSans-Regular',
                      baseWidths: aT,
                      baseMapping: aP,
                    }),
                (A['Arial-BoldMT'] = A['Arial-Bold'] =
                  {
                    name: 'LiberationSans-Bold',
                    baseWidths: aL,
                    baseMapping: aH,
                  }),
                (A['Arial-ItalicMT'] = A['Arial-Italic'] =
                  {
                    name: 'LiberationSans-Italic',
                    baseWidths: av,
                    baseMapping: aq,
                  }),
                (A['Arial-BoldItalicMT'] = A['Arial-BoldItalic'] =
                  {
                    name: 'LiberationSans-BoldItalic',
                    baseWidths: aY,
                    baseMapping: aK,
                  }),
                (A['Calibri-Regular'] = {
                  name: 'LiberationSans-Regular',
                  factors: ak,
                  baseWidths: aT,
                  baseMapping: aP,
                  metrics: aF,
                }),
                (A['Calibri-Bold'] = {
                  name: 'LiberationSans-Bold',
                  factors: ap,
                  baseWidths: aL,
                  baseMapping: aH,
                  metrics: am,
                }),
                (A['Calibri-Italic'] = {
                  name: 'LiberationSans-Italic',
                  factors: aD,
                  baseWidths: av,
                  baseMapping: aq,
                  metrics: ab,
                }),
                (A['Calibri-BoldItalic'] = {
                  name: 'LiberationSans-BoldItalic',
                  factors: ay,
                  baseWidths: aY,
                  baseMapping: aK,
                  metrics: aw,
                }),
                (A['Segoeui-Regular'] = {
                  name: 'LiberationSans-Regular',
                  factors: a5,
                  baseWidths: aT,
                  baseMapping: aP,
                  metrics: a8,
                }),
                (A['Segoeui-Bold'] = {
                  name: 'LiberationSans-Bold',
                  factors: a$,
                  baseWidths: aL,
                  baseMapping: aH,
                  metrics: a0,
                }),
                (A['Segoeui-Italic'] = {
                  name: 'LiberationSans-Italic',
                  factors: a9,
                  baseWidths: av,
                  baseMapping: aq,
                  metrics: a3,
                }),
                (A['Segoeui-BoldItalic'] = {
                  name: 'LiberationSans-BoldItalic',
                  factors: a1,
                  baseWidths: aY,
                  baseMapping: aK,
                  metrics: a2,
                }),
                (A['Helvetica-Regular'] = A.Helvetica =
                  {
                    name: 'LiberationSans-Regular',
                    factors: aM,
                    baseWidths: aT,
                    baseMapping: aP,
                    metrics: aJ,
                  }),
                (A['Helvetica-Bold'] = {
                  name: 'LiberationSans-Bold',
                  factors: aS,
                  baseWidths: aL,
                  baseMapping: aH,
                  metrics: aR,
                }),
                (A['Helvetica-Italic'] = {
                  name: 'LiberationSans-Italic',
                  factors: ax,
                  baseWidths: av,
                  baseMapping: aq,
                  metrics: aU,
                }),
                (A['Helvetica-BoldItalic'] = {
                  name: 'LiberationSans-BoldItalic',
                  factors: aG,
                  baseWidths: aY,
                  baseMapping: aK,
                  metrics: aN,
                });
            });
          function a7(A) {
            let t = t5(A);
            return a6()[t];
          }
          function a4(A) {
            let t = (function (A) {
                let t = a7(A);
                if (!t) return null;
                let { baseWidths: i, baseMapping: a, factors: s } = t,
                  g = s ? i.map((A, t) => A * s[t]) : i,
                  r,
                  n = -2,
                  o = [];
                for (let [A, t] of a
                  .map((A, t) => [A, t])
                  .sort(([A], [t]) => A - t))
                  -1 !== A &&
                    (A === n + 1
                      ? (r.push(g[t]), (n += 1))
                      : ((n = A), (r = [g[t]]), o.push(A, r)));
                return o;
              })(A),
              i = new Aa(null);
            i.set('BaseFont', Ae.get(A)),
              i.set('Type', Ae.get('Font')),
              i.set('Subtype', Ae.get('CIDFontType2')),
              i.set('Encoding', Ae.get('Identity-H')),
              i.set('CIDToGIDMap', Ae.get('Identity')),
              i.set('W', t),
              i.set('FirstChar', t[0]),
              i.set('LastChar', t.at(-2) + t.at(-1).length - 1);
            let a = new Aa(null);
            i.set('FontDescriptor', a);
            let s = new Aa(null);
            return (
              s.set('Ordering', 'Identity'),
              s.set('Registry', 'Adobe'),
              s.set('Supplement', 0),
              i.set('CIDSystemInfo', s),
              i
            );
          }
          class sA {
            constructor(A) {
              (this.lexer = A),
                (this.operators = []),
                (this.token = null),
                (this.prev = null);
            }
            nextToken() {
              (this.prev = this.token), (this.token = this.lexer.getToken());
            }
            accept(A) {
              return this.token.type === A && (this.nextToken(), !0);
            }
            expect(A) {
              if (this.accept(A)) return !0;
              throw new x(
                `Unexpected symbol: found ${this.token.type} expected ${A}.`
              );
            }
            parse() {
              return (
                this.nextToken(),
                this.expect(se.LBRACE),
                this.parseBlock(),
                this.expect(se.RBRACE),
                this.operators
              );
            }
            parseBlock() {
              for (;;)
                if (this.accept(se.NUMBER))
                  this.operators.push(this.prev.value);
                else if (this.accept(se.OPERATOR))
                  this.operators.push(this.prev.value);
                else {
                  if (!this.accept(se.LBRACE)) return;
                  this.parseCondition();
                }
            }
            parseCondition() {
              let A = this.operators.length;
              if (
                (this.operators.push(null, null),
                this.parseBlock(),
                this.expect(se.RBRACE),
                this.accept(se.IF))
              )
                (this.operators[A] = this.operators.length),
                  (this.operators[A + 1] = 'jz');
              else {
                if (!this.accept(se.LBRACE))
                  throw new x('PS Function: error parsing conditional.');
                {
                  let t = this.operators.length;
                  this.operators.push(null, null);
                  let i = this.operators.length;
                  this.parseBlock(),
                    this.expect(se.RBRACE),
                    this.expect(se.IFELSE),
                    (this.operators[t] = this.operators.length),
                    (this.operators[t + 1] = 'j'),
                    (this.operators[A] = i),
                    (this.operators[A + 1] = 'jz');
                }
              }
            }
          }
          let se = {
            LBRACE: 0,
            RBRACE: 1,
            NUMBER: 2,
            OPERATOR: 3,
            IF: 4,
            IFELSE: 5,
          };
          class st {
            static get opCache() {
              return b(this, 'opCache', Object.create(null));
            }
            constructor(A, t) {
              (this.type = A), (this.value = t);
            }
            static getOperator(A) {
              return (st.opCache[A] ||= new st(se.OPERATOR, A));
            }
            static get LBRACE() {
              return b(this, 'LBRACE', new st(se.LBRACE, '{'));
            }
            static get RBRACE() {
              return b(this, 'RBRACE', new st(se.RBRACE, '}'));
            }
            static get IF() {
              return b(this, 'IF', new st(se.IF, 'IF'));
            }
            static get IFELSE() {
              return b(this, 'IFELSE', new st(se.IFELSE, 'IFELSE'));
            }
          }
          class si {
            constructor(A) {
              (this.stream = A), this.nextChar(), (this.strBuf = []);
            }
            nextChar() {
              return (this.currentChar = this.stream.getByte());
            }
            getToken() {
              let A = !1,
                t = this.currentChar;
              for (;;) {
                if (t < 0) return z;
                if (A) (10 !== t && 13 !== t) || (A = !1);
                else if (37 === t) A = !0;
                else if (!Ab(t)) break;
                t = this.nextChar();
              }
              switch (0 | t) {
                case 48:
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                case 43:
                case 45:
                case 46:
                  return new st(se.NUMBER, this.getNumber());
                case 123:
                  return this.nextChar(), st.LBRACE;
                case 125:
                  return this.nextChar(), st.RBRACE;
              }
              let i = this.strBuf;
              for (
                i.length = 0, i[0] = String.fromCharCode(t);
                (t = this.nextChar()) >= 0 &&
                ((t >= 65 && t <= 90) || (t >= 97 && t <= 122));

              )
                i.push(String.fromCharCode(t));
              let a = i.join('');
              switch (a.toLowerCase()) {
                case 'if':
                  return st.IF;
                case 'ifelse':
                  return st.IFELSE;
                default:
                  return st.getOperator(a);
              }
            }
            getNumber() {
              let A = this.currentChar,
                t = this.strBuf;
              for (
                t.length = 0, t[0] = String.fromCharCode(A);
                (A = this.nextChar()) >= 0 &&
                ((A >= 48 && A <= 57) || 45 === A || 46 === A);

              )
                t.push(String.fromCharCode(A));
              let i = parseFloat(t.join(''));
              if (isNaN(i)) throw new x(`Invalid floating point number: ${i}`);
              return i;
            }
          }
          class sa {
            constructor(A) {
              (this._onlyRefs = !0 === A?.onlyRefs),
                this._onlyRefs ||
                  ((this._nameRefMap = new Map()),
                  (this._imageMap = new Map())),
                (this._imageCache = new Ar());
            }
            getByName(A) {
              this._onlyRefs && y('Should not call `getByName` method.');
              let t = this._nameRefMap.get(A);
              return t ? this.getByRef(t) : this._imageMap.get(A) || null;
            }
            getByRef(A) {
              return this._imageCache.get(A) || null;
            }
            set(A, t, i) {
              y('Abstract method `set` called.');
            }
          }
          class ss extends sa {
            set(A, t = null, i) {
              if ('string' != typeof A)
                throw Error('LocalImageCache.set - expected "name" argument.');
              if (t) {
                if (this._imageCache.has(t)) return;
                this._nameRefMap.set(A, t), this._imageCache.put(t, i);
              } else this._imageMap.has(A) || this._imageMap.set(A, i);
            }
          }
          class sg extends sa {
            set(A = null, t = null, i) {
              if ('string' != typeof A && !t)
                throw Error(
                  'LocalColorSpaceCache.set - expected "name" and/or "ref" argument.'
                );
              if (t) {
                if (this._imageCache.has(t)) return;
                null !== A && this._nameRefMap.set(A, t),
                  this._imageCache.put(t, i);
              } else this._imageMap.has(A) || this._imageMap.set(A, i);
            }
          }
          class sr extends sa {
            constructor(A) {
              super({ onlyRefs: !0 });
            }
            set(A = null, t, i) {
              if (!t)
                throw Error(
                  'LocalFunctionCache.set - expected "ref" argument.'
                );
              this._imageCache.has(t) || this._imageCache.put(t, i);
            }
          }
          class sn extends sa {
            set(A, t = null, i) {
              if ('string' != typeof A)
                throw Error('LocalGStateCache.set - expected "name" argument.');
              if (t) {
                if (this._imageCache.has(t)) return;
                this._nameRefMap.set(A, t), this._imageCache.put(t, i);
              } else this._imageMap.has(A) || this._imageMap.set(A, i);
            }
          }
          class so extends sa {
            constructor(A) {
              super({ onlyRefs: !0 });
            }
            set(A = null, t, i) {
              if (!t)
                throw Error(
                  'LocalTilingPatternCache.set - expected "ref" argument.'
                );
              this._imageCache.has(t) || this._imageCache.put(t, i);
            }
          }
          class sI extends sa {
            constructor(A) {
              super({ onlyRefs: !0 });
            }
            set(A = null, t, i) {
              if (!t)
                throw Error(
                  'RegionalImageCache.set - expected "ref" argument.'
                );
              this._imageCache.has(t) || this._imageCache.put(t, i);
            }
          }
          class sl {
            static NUM_PAGES_THRESHOLD = 2;
            static MIN_IMAGES_TO_CACHE = 10;
            static MAX_BYTE_SIZE = 5e7;
            #D = new Ag();
            constructor() {
              (this._refCache = new Ar()), (this._imageCache = new Ar());
            }
            get #b() {
              let A = 0;
              for (let t of this._imageCache) A += t.byteSize;
              return A;
            }
            get #k() {
              return (
                !(this._imageCache.size < sl.MIN_IMAGES_TO_CACHE) &&
                !(this.#b < sl.MAX_BYTE_SIZE)
              );
            }
            shouldCache(A, t) {
              let i = this._refCache.get(A);
              return (
                i || ((i = new Set()), this._refCache.put(A, i)),
                i.add(t),
                !(i.size < sl.NUM_PAGES_THRESHOLD) &&
                  !(!this._imageCache.has(A) && this.#k)
              );
            }
            addDecodeFailed(A) {
              this.#D.put(A);
            }
            hasDecodeFailed(A) {
              return this.#D.has(A);
            }
            addByteSize(A, t) {
              let i = this._imageCache.get(A);
              i && (i.byteSize || (i.byteSize = t));
            }
            getData(A, t) {
              let i = this._refCache.get(A);
              if (!i || i.size < sl.NUM_PAGES_THRESHOLD) return null;
              let a = this._imageCache.get(A);
              return a ? (i.add(t), a) : null;
            }
            setData(A, t) {
              if (!this._refCache.has(A))
                throw Error(
                  'GlobalImageCache.setData - expected "shouldCache" to have been called.'
                );
              this._imageCache.has(A) ||
                (this.#k
                  ? m('GlobalImageCache.setData - cache limit reached.')
                  : this._imageCache.put(A, t));
            }
            clear(A = !1) {
              A || (this.#D.clear(), this._refCache.clear()),
                this._imageCache.clear();
            }
          }
          class sC {
            constructor({ xref: A, isEvalSupported: t = !0 }) {
              (this.xref = A), (this.isEvalSupported = !1 !== t);
            }
            create(A) {
              let t = this.getCached(A);
              if (t) return t;
              let i = sh.parse({
                xref: this.xref,
                isEvalSupported: this.isEvalSupported,
                fn: A instanceof As ? this.xref.fetch(A) : A,
              });
              return this._cache(A, i), i;
            }
            createFromArray(A) {
              let t = this.getCached(A);
              if (t) return t;
              let i = sh.parseArray({
                xref: this.xref,
                isEvalSupported: this.isEvalSupported,
                fnObj: A instanceof As ? this.xref.fetch(A) : A,
              });
              return this._cache(A, i), i;
            }
            getCached(A) {
              let t;
              if (
                (A instanceof As
                  ? (t = A)
                  : A instanceof Aa
                    ? (t = A.objId)
                    : A instanceof AC && (t = A.dict?.objId),
                t)
              ) {
                let A = this._localFunctionCache.getByRef(t);
                if (A) return A;
              }
              return null;
            }
            _cache(A, t) {
              let i;
              if (!t)
                throw Error(
                  'PDFFunctionFactory._cache - expected "parsedFunction" argument.'
                );
              A instanceof As
                ? (i = A)
                : A instanceof Aa
                  ? (i = A.objId)
                  : A instanceof AC && (i = A.dict?.objId),
                i && this._localFunctionCache.set(null, i, t);
            }
            get _localFunctionCache() {
              return b(this, '_localFunctionCache', new sr());
            }
          }
          function sB(A) {
            return Array.isArray(A)
              ? Ak(A, null)
                ? A
                : A.map((A) => +A)
              : null;
          }
          class sh {
            static getSampleArray(A, t, i, a) {
              let s,
                g,
                r = 1;
              for (s = 0, g = A.length; s < g; s++) r *= A[s];
              r *= t;
              let n = Array(r),
                o = 0,
                I = 0,
                l = 1 / (2 ** i - 1),
                C = a.getBytes((r * i + 7) / 8),
                B = 0;
              for (s = 0; s < r; s++) {
                for (; o < i; ) (I <<= 8), (I |= C[B++]), (o += 8);
                (o -= i), (n[s] = (I >> o) * l), (I &= (1 << o) - 1);
              }
              return n;
            }
            static parse({ xref: A, isEvalSupported: t, fn: i }) {
              let a = i.dict || i;
              switch (a.get('FunctionType')) {
                case 0:
                  return this.constructSampled({
                    xref: A,
                    isEvalSupported: t,
                    fn: i,
                    dict: a,
                  });
                case 1:
                  break;
                case 2:
                  return this.constructInterpolated({
                    xref: A,
                    isEvalSupported: t,
                    dict: a,
                  });
                case 3:
                  return this.constructStiched({
                    xref: A,
                    isEvalSupported: t,
                    dict: a,
                  });
                case 4:
                  return this.constructPostScript({
                    xref: A,
                    isEvalSupported: t,
                    fn: i,
                    dict: a,
                  });
              }
              throw new x('Unknown type of function');
            }
            static parseArray({ xref: A, isEvalSupported: t, fnObj: i }) {
              if (!Array.isArray(i))
                return this.parse({ xref: A, isEvalSupported: t, fn: i });
              let a = [];
              for (let s of i)
                a.push(
                  this.parse({
                    xref: A,
                    isEvalSupported: t,
                    fn: A.fetchIfRef(s),
                  })
                );
              return function (A, t, i, s) {
                for (let g = 0, r = a.length; g < r; g++) a[g](A, t, i, s + g);
              };
            }
            static constructSampled({
              xref: A,
              isEvalSupported: t,
              fn: i,
              dict: a,
            }) {
              function s(A) {
                let t = A.length,
                  i = [],
                  a = 0;
                for (let s = 0; s < t; s += 2) i[a++] = [A[s], A[s + 1]];
                return i;
              }
              let g = sB(a.getArray('Domain')),
                r = sB(a.getArray('Range'));
              if (!g || !r) throw new x('No domain or range');
              let n = g.length / 2,
                o = r.length / 2;
              (g = s(g)), (r = s(r));
              let I = sB(a.getArray('Size')),
                l = a.get('BitsPerSample'),
                C = a.get('Order') || 1;
              1 !== C && p('No support for cubic spline interpolation: ' + C);
              let B = sB(a.getArray('Encode'));
              if (B) B = s(B);
              else {
                B = [];
                for (let A = 0; A < n; ++A) B.push([0, I[A] - 1]);
              }
              let h = sB(a.getArray('Decode'));
              h = h ? s(h) : r;
              let Q = this.getSampleArray(I, o, l, i);
              return function (A, t, i, a) {
                var s, l, C, c;
                let E, u;
                let d = 1 << n,
                  f = new Float64Array(d),
                  p = new Uint32Array(d);
                for (u = 0; u < d; u++) f[u] = 1;
                let m = o,
                  y = 1;
                for (E = 0; E < n; ++E) {
                  let i = g[E][0],
                    a = g[E][1],
                    r =
                      ((s = Math.min(Math.max(A[t + E], i), a)),
                      (l = B[E][0]) + ((B[E][1] - l) / (a - i)) * (s - i)),
                    n = I[E];
                  r = Math.min(Math.max(r, 0), n - 1);
                  let o = r < n - 1 ? Math.floor(r) : r - 1,
                    C = o + 1 - r,
                    h = r - o,
                    Q = o * m,
                    c = Q + m;
                  for (u = 0; u < d; u++)
                    u & y
                      ? ((f[u] *= h), (p[u] += c))
                      : ((f[u] *= C), (p[u] += Q));
                  (m *= n), (y <<= 1);
                }
                for (u = 0; u < o; ++u) {
                  let A = 0;
                  for (E = 0; E < d; E++) A += Q[p[E] + u] * f[E];
                  (C = A),
                    (A = (c = h[u][0]) + ((h[u][1] - c) / 1) * (C - 0)),
                    (i[a + u] = Math.min(Math.max(A, r[u][0]), r[u][1]));
                }
              };
            }
            static constructInterpolated({
              xref: A,
              isEvalSupported: t,
              dict: i,
            }) {
              let a = sB(i.getArray('C0')) || [0],
                s = sB(i.getArray('C1')) || [1],
                g = i.get('N'),
                r = [];
              for (let A = 0, t = a.length; A < t; ++A) r.push(s[A] - a[A]);
              let n = r.length;
              return function (A, t, i, s) {
                let o = 1 === g ? A[t] : A[t] ** g;
                for (let A = 0; A < n; ++A) i[s + A] = a[A] + o * r[A];
              };
            }
            static constructStiched({ xref: A, isEvalSupported: t, dict: i }) {
              let a = sB(i.getArray('Domain'));
              if (!a) throw new x('No domain');
              if (1 != a.length / 2)
                throw new x('Bad domain for stiched function');
              let s = [];
              for (let a of i.get('Functions'))
                s.push(
                  this.parse({
                    xref: A,
                    isEvalSupported: t,
                    fn: A.fetchIfRef(a),
                  })
                );
              let g = sB(i.getArray('Bounds')),
                r = sB(i.getArray('Encode')),
                n = new Float32Array(1);
              return function (A, t, i, o) {
                var I, l, C;
                let B;
                let h =
                    ((I = A[t]),
                    (l = a[0]),
                    I > (C = a[1]) ? (I = C) : I < l && (I = l),
                    I),
                  Q = g.length;
                for (B = 0; B < Q && !(h < g[B]); ++B);
                let c = a[0];
                B > 0 && (c = g[B - 1]);
                let E = a[1];
                B < g.length && (E = g[B]);
                let u = r[2 * B],
                  d = r[2 * B + 1];
                (n[0] = c === E ? u : u + ((h - c) * (d - u)) / (E - c)),
                  s[B](n, 0, i, o);
              };
            }
            static constructPostScript({
              xref: A,
              isEvalSupported: t,
              fn: i,
              dict: a,
            }) {
              let s = sB(a.getArray('Domain')),
                g = sB(a.getArray('Range'));
              if (!s) throw new x('No domain.');
              if (!g) throw new x('No range.');
              let r = new si(i),
                n = new sA(r).parse();
              if (t && Y.isEvalSupported) {
                let A = new sb().compile(n, s, g);
                if (A)
/*
  Pattern: functionConstruction
*/
                  return Function('src', 'srcOffset', 'dest', 'destOffset', A);
              }
              p('Unable to compile PS function');
              let o = g.length >> 1,
                I = s.length >> 1,
                l = new sE(n),
                C = Object.create(null),
                B = 8192,
                h = new Float32Array(I);
              return function (A, t, i, a) {
                let s,
                  r,
                  n = '';
                for (s = 0; s < I; s++)
                  (r = A[t + s]), (h[s] = r), (n += r + '_');
                let Q = C[n];
                if (void 0 !== Q) {
                  i.set(Q, a);
                  return;
                }
                let c = new Float32Array(o),
                  E = l.execute(h),
                  u = E.length - o;
                for (s = 0; s < o; s++) {
                  r = E[u + s];
                  let A = g[2 * s];
                  r < A ? (r = A) : r > (A = g[2 * s + 1]) && (r = A),
                    (c[s] = r);
                }
                B > 0 && (B--, (C[n] = c)), i.set(c, a);
              };
            }
          }
          function sQ(A) {
            let t;
            if (A instanceof Aa) t = A;
            else {
              if (!(A instanceof AC)) return !1;
              t = A.dict;
            }
            return t.has('FunctionType');
          }
          class sc {
            static MAX_STACK_SIZE = 100;
            constructor(A) {
              this.stack = A ? Array.from(A) : [];
            }
            push(A) {
              if (this.stack.length >= sc.MAX_STACK_SIZE)
                throw Error('PostScript function stack overflow.');
              this.stack.push(A);
            }
            pop() {
              if (this.stack.length <= 0)
                throw Error('PostScript function stack underflow.');
              return this.stack.pop();
            }
            copy(A) {
              if (this.stack.length + A >= sc.MAX_STACK_SIZE)
                throw Error('PostScript function stack overflow.');
              let t = this.stack;
              for (let i = t.length - A, a = A - 1; a >= 0; a--, i++)
                t.push(t[i]);
            }
            index(A) {
              this.push(this.stack[this.stack.length - A - 1]);
            }
            roll(A, t) {
              let i = this.stack,
                a = i.length - A,
                s = i.length - 1,
                g = a + (t - Math.floor(t / A) * A);
              for (let A = a, t = s; A < t; A++, t--) {
                let a = i[A];
                (i[A] = i[t]), (i[t] = a);
              }
              for (let A = a, t = g - 1; A < t; A++, t--) {
                let a = i[A];
                (i[A] = i[t]), (i[t] = a);
              }
              for (let A = g, t = s; A < t; A++, t--) {
                let a = i[A];
                (i[A] = i[t]), (i[t] = a);
              }
            }
          }
          class sE {
            constructor(A) {
              this.operators = A;
            }
            execute(A) {
              let t, i, a;
              let s = new sc(A),
                g = 0,
                r = this.operators,
                n = r.length;
              for (; g < n; )
                if ('number' != typeof (t = r[g++]))
                  switch (t) {
                    case 'jz':
                      (a = s.pop()), (i = s.pop()) || (g = a);
                      break;
                    case 'j':
                      g = i = s.pop();
                      break;
                    case 'abs':
                      (i = s.pop()), s.push(Math.abs(i));
                      break;
                    case 'add':
                      (a = s.pop()), (i = s.pop()), s.push(i + a);
                      break;
                    case 'and':
                      (a = s.pop()),
                        'boolean' == typeof (i = s.pop()) &&
                        'boolean' == typeof a
                          ? s.push(i && a)
                          : s.push(i & a);
                      break;
                    case 'atan':
                      (a = s.pop()),
                        (i = (Math.atan2((i = s.pop()), a) / Math.PI) * 180) <
                          0 && (i += 360),
                        s.push(i);
                      break;
                    case 'bitshift':
                      (a = s.pop()),
                        (i = s.pop()) > 0 ? s.push(i << a) : s.push(i >> a);
                      break;
                    case 'ceiling':
                      (i = s.pop()), s.push(Math.ceil(i));
                      break;
                    case 'copy':
                      (i = s.pop()), s.copy(i);
                      break;
                    case 'cos':
                      (i = s.pop()),
                        s.push(Math.cos(((i % 360) / 180) * Math.PI));
                      break;
                    case 'cvi':
                      (i = 0 | s.pop()), s.push(i);
                      break;
                    case 'cvr':
                      break;
                    case 'div':
                      (a = s.pop()), (i = s.pop()), s.push(i / a);
                      break;
                    case 'dup':
                      s.copy(1);
                      break;
                    case 'eq':
                      (a = s.pop()), (i = s.pop()), s.push(i === a);
                      break;
                    case 'exch':
                      s.roll(2, 1);
                      break;
                    case 'exp':
                      (a = s.pop()), (i = s.pop()), s.push(i ** a);
                      break;
                    case 'false':
                      s.push(!1);
                      break;
                    case 'floor':
                      (i = s.pop()), s.push(Math.floor(i));
                      break;
                    case 'ge':
                      (a = s.pop()), (i = s.pop()), s.push(i >= a);
                      break;
                    case 'gt':
                      (a = s.pop()), (i = s.pop()), s.push(i > a);
                      break;
                    case 'idiv':
                      (a = s.pop()), (i = s.pop()), s.push((i / a) | 0);
                      break;
                    case 'index':
                      (i = s.pop()), s.index(i);
                      break;
                    case 'le':
                      (a = s.pop()), (i = s.pop()), s.push(i <= a);
                      break;
                    case 'ln':
                      (i = s.pop()), s.push(Math.log(i));
                      break;
                    case 'log':
                      (i = s.pop()), s.push(Math.log10(i));
                      break;
                    case 'lt':
                      (a = s.pop()), (i = s.pop()), s.push(i < a);
                      break;
                    case 'mod':
                      (a = s.pop()), (i = s.pop()), s.push(i % a);
                      break;
                    case 'mul':
                      (a = s.pop()), (i = s.pop()), s.push(i * a);
                      break;
                    case 'ne':
                      (a = s.pop()), (i = s.pop()), s.push(i !== a);
                      break;
                    case 'neg':
                      (i = s.pop()), s.push(-i);
                      break;
                    case 'not':
                      'boolean' == typeof (i = s.pop())
                        ? s.push(!i)
                        : s.push(~i);
                      break;
                    case 'or':
                      (a = s.pop()),
                        'boolean' == typeof (i = s.pop()) &&
                        'boolean' == typeof a
                          ? s.push(i || a)
                          : s.push(i | a);
                      break;
                    case 'pop':
                      s.pop();
                      break;
                    case 'roll':
                      (a = s.pop()), (i = s.pop()), s.roll(i, a);
                      break;
                    case 'round':
                      (i = s.pop()), s.push(Math.round(i));
                      break;
                    case 'sin':
                      (i = s.pop()),
                        s.push(Math.sin(((i % 360) / 180) * Math.PI));
                      break;
                    case 'sqrt':
                      (i = s.pop()), s.push(Math.sqrt(i));
                      break;
                    case 'sub':
                      (a = s.pop()), (i = s.pop()), s.push(i - a);
                      break;
                    case 'true':
                      s.push(!0);
                      break;
                    case 'truncate':
                      (i = (i = s.pop()) < 0 ? Math.ceil(i) : Math.floor(i)),
                        s.push(i);
                      break;
                    case 'xor':
                      (a = s.pop()),
                        'boolean' == typeof (i = s.pop()) &&
                        'boolean' == typeof a
                          ? s.push(i !== a)
                          : s.push(i ^ a);
                      break;
                    default:
                      throw new x(`Unknown operator ${t}`);
                  }
                else s.push(t);
              return s.stack;
            }
          }
          class su {
            constructor(A) {
              this.type = A;
            }
            visit(A) {
              y('abstract method');
            }
          }
          class sd extends su {
            constructor(A, t, i) {
              super('args'), (this.index = A), (this.min = t), (this.max = i);
            }
            visit(A) {
              A.visitArgument(this);
            }
          }
          class sf extends su {
            constructor(A) {
              super('literal'),
                (this.number = A),
                (this.min = A),
                (this.max = A);
            }
            visit(A) {
              A.visitLiteral(this);
            }
          }
          class sp extends su {
            constructor(A, t, i, a, s) {
              super('binary'),
                (this.op = A),
                (this.arg1 = t),
                (this.arg2 = i),
                (this.min = a),
                (this.max = s);
            }
            visit(A) {
              A.visitBinaryOperation(this);
            }
          }
          class sm extends su {
            constructor(A, t) {
              super('max'), (this.arg = A), (this.min = A.min), (this.max = t);
            }
            visit(A) {
              A.visitMin(this);
            }
          }
          class sy extends su {
            constructor(A, t, i) {
              super('var'), (this.index = A), (this.min = t), (this.max = i);
            }
            visit(A) {
              A.visitVariable(this);
            }
          }
          class sw extends su {
            constructor(A, t) {
              super('definition'), (this.variable = A), (this.arg = t);
            }
            visit(A) {
              A.visitVariableDefinition(this);
            }
          }
          class sD {
            constructor() {
              this.parts = [];
            }
            visitArgument(A) {
              this.parts.push(
                'Math.max(',
                A.min,
                ', Math.min(',
                A.max,
                ', src[srcOffset + ',
                A.index,
                ']))'
              );
            }
            visitVariable(A) {
              this.parts.push('v', A.index);
            }
            visitLiteral(A) {
              this.parts.push(A.number);
            }
            visitBinaryOperation(A) {
              this.parts.push('('),
                A.arg1.visit(this),
                this.parts.push(' ', A.op, ' '),
                A.arg2.visit(this),
                this.parts.push(')');
            }
            visitVariableDefinition(A) {
              this.parts.push('var '),
                A.variable.visit(this),
                this.parts.push(' = '),
                A.arg.visit(this),
                this.parts.push(';');
            }
            visitMin(A) {
              this.parts.push('Math.min('),
                A.arg.visit(this),
                this.parts.push(', ', A.max, ')');
            }
            toString() {
              return this.parts.join('');
            }
          }
          class sb {
            compile(A, t, i) {
              var a, s, g, r;
              let n = [],
                o = [],
                I = t.length >> 1,
                l = i.length >> 1,
                C,
                B,
                h,
                Q,
                c,
                E,
                u,
                d,
                f = 0;
              for (let A = 0; A < I; A++)
                n.push(new sd(A, t[2 * A], t[2 * A + 1]));
              for (let t = 0, i = A.length; t < i; t++)
                if ('number' != typeof (d = A[t]))
                  switch (d) {
                    case 'add':
                      if (n.length < 2) return null;
                      (Q = n.pop()),
                        (h = n.pop()),
                        n.push(
                          ((a = h),
                          'literal' === (s = Q).type && 0 === s.number
                            ? a
                            : 'literal' === a.type && 0 === a.number
                              ? s
                              : 'literal' === s.type && 'literal' === a.type
                                ? new sf(a.number + s.number)
                                : new sp(
                                    '+',
                                    a,
                                    s,
                                    a.min + s.min,
                                    a.max + s.max
                                  ))
                        );
                      break;
                    case 'cvr':
                      if (n.length < 1) return null;
                      break;
                    case 'mul':
                      if (n.length < 2) return null;
                      (Q = n.pop()),
                        (h = n.pop()),
                        n.push(
                          (function (A, t) {
                            if ('literal' === t.type) {
                              if (0 === t.number) return new sf(0);
                              if (1 === t.number) return A;
                              if ('literal' === A.type)
                                return new sf(A.number * t.number);
                            }
                            if ('literal' === A.type) {
                              if (0 === A.number) return new sf(0);
                              if (1 === A.number) return t;
                            }
                            let i = Math.min(
                                A.min * t.min,
                                A.min * t.max,
                                A.max * t.min,
                                A.max * t.max
                              ),
                              a = Math.max(
                                A.min * t.min,
                                A.min * t.max,
                                A.max * t.min,
                                A.max * t.max
                              );
                            return new sp('*', A, t, i, a);
                          })(h, Q)
                        );
                      break;
                    case 'sub':
                      if (n.length < 2) return null;
                      (Q = n.pop()),
                        (h = n.pop()),
                        n.push(
                          (function (A, t) {
                            if ('literal' === t.type) {
                              if (0 === t.number) return A;
                              if ('literal' === A.type)
                                return new sf(A.number - t.number);
                            }
                            return 'binary' === t.type &&
                              '-' === t.op &&
                              'literal' === A.type &&
                              1 === A.number &&
                              'literal' === t.arg1.type &&
                              1 === t.arg1.number
                              ? t.arg2
                              : new sp('-', A, t, A.min - t.max, A.max - t.min);
                          })(h, Q)
                        );
                      break;
                    case 'exch':
                      if (n.length < 2) return null;
                      (c = n.pop()), (E = n.pop()), n.push(c, E);
                      break;
                    case 'pop':
                      if (n.length < 1) return null;
                      n.pop();
                      break;
                    case 'index':
                      if (
                        n.length < 1 ||
                        'literal' !== (h = n.pop()).type ||
                        (C = h.number) < 0 ||
                        !Number.isInteger(C) ||
                        n.length < C
                      )
                        return null;
                      if (
                        'literal' === (c = n[n.length - C - 1]).type ||
                        'var' === c.type
                      ) {
                        n.push(c);
                        break;
                      }
                      (u = new sy(f++, c.min, c.max)),
                        (n[n.length - C - 1] = u),
                        n.push(u),
                        o.push(new sw(u, c));
                      break;
                    case 'dup':
                      if (n.length < 1) return null;
                      if (
                        'number' == typeof A[t + 1] &&
                        'gt' === A[t + 2] &&
                        A[t + 3] === t + 7 &&
                        'jz' === A[t + 4] &&
                        'pop' === A[t + 5] &&
                        A[t + 6] === A[t + 1]
                      ) {
                        (h = n.pop()),
                          n.push(
                            ((g = h),
                            (r = A[t + 1]),
                            g.min >= r
                              ? new sf(r)
                              : g.max <= r
                                ? g
                                : new sm(g, r))
                          ),
                          (t += 6);
                        break;
                      }
                      if (
                        'literal' === (c = n.at(-1)).type ||
                        'var' === c.type
                      ) {
                        n.push(c);
                        break;
                      }
                      (u = new sy(f++, c.min, c.max)),
                        (n[n.length - 1] = u),
                        n.push(u),
                        o.push(new sw(u, c));
                      break;
                    case 'roll':
                      if (
                        n.length < 2 ||
                        ((Q = n.pop()),
                        (h = n.pop()),
                        'literal' !== Q.type || 'literal' !== h.type) ||
                        ((B = Q.number),
                        (C = h.number) <= 0 ||
                          !Number.isInteger(C) ||
                          !Number.isInteger(B) ||
                          n.length < C)
                      )
                        return null;
                      if (0 == (B = ((B % C) + C) % C)) break;
                      n.push(...n.splice(n.length - C, C - B));
                      break;
                    default:
                      return null;
                  }
                else n.push(new sf(d));
              if (n.length !== l) return null;
              let p = [];
              for (let A of o) {
                let t = new sD();
                A.visit(t), p.push(t.toString());
              }
              for (let A = 0, t = n.length; A < t; A++) {
                let t = n[A],
                  a = new sD();
                t.visit(a);
                let s = i[2 * A],
                  g = i[2 * A + 1],
                  r = [a.toString()];
                s > t.min && (r.unshift('Math.max(', s, ', '), r.push(')')),
                  g < t.max && (r.unshift('Math.min(', g, ', '), r.push(')')),
                  r.unshift('dest[destOffset + ', A, '] = '),
                  r.push(';'),
                  p.push(r.join(''));
              }
              return p.join('\n');
            }
          }
          let sk = [
              'BN',
              'BN',
              'BN',
              'BN',
              'BN',
              'BN',
              'BN',
              'BN',
              'BN',
              'S',
              'B',
              'S',
              'WS',
              'B',
              'BN',
              'BN',
              'BN',
              'BN',
              'BN',
              'BN',
              'BN',
              'BN',
              'BN',
              'BN',
              'BN',
              'BN',
              'BN',
              'BN',
              'B',
              'B',
              'B',
              'S',
              'WS',
              'ON',
              'ON',
              'ET',
              'ET',
              'ET',
              'ON',
              'ON',
              'ON',
              'ON',
              'ON',
              'ES',
              'CS',
              'ES',
              'CS',
              'CS',
              'EN',
              'EN',
              'EN',
              'EN',
              'EN',
              'EN',
              'EN',
              'EN',
              'EN',
              'EN',
              'CS',
              'ON',
              'ON',
              'ON',
              'ON',
              'ON',
              'ON',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'ON',
              'ON',
              'ON',
              'ON',
              'ON',
              'ON',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'ON',
              'ON',
              'ON',
              'ON',
              'BN',
              'BN',
              'BN',
              'BN',
              'BN',
              'BN',
              'B',
              'BN',
              'BN',
              'BN',
              'BN',
              'BN',
              'BN',
              'BN',
              'BN',
              'BN',
              'BN',
              'BN',
              'BN',
              'BN',
              'BN',
              'BN',
              'BN',
              'BN',
              'BN',
              'BN',
              'BN',
              'BN',
              'BN',
              'BN',
              'BN',
              'BN',
              'BN',
              'CS',
              'ON',
              'ET',
              'ET',
              'ET',
              'ET',
              'ON',
              'ON',
              'ON',
              'ON',
              'L',
              'ON',
              'ON',
              'BN',
              'ON',
              'ON',
              'ET',
              'ET',
              'EN',
              'EN',
              'ON',
              'L',
              'ON',
              'ON',
              'ON',
              'EN',
              'L',
              'ON',
              'ON',
              'ON',
              'ON',
              'ON',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'ON',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'ON',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
              'L',
            ],
            sF = [
              'AN',
              'AN',
              'AN',
              'AN',
              'AN',
              'AN',
              'ON',
              'ON',
              'AL',
              'ET',
              'ET',
              'AL',
              'CS',
              'AL',
              'ON',
              'ON',
              'NSM',
              'NSM',
              'NSM',
              'NSM',
              'NSM',
              'NSM',
              'NSM',
              'NSM',
              'NSM',
              'NSM',
              'NSM',
              'AL',
              'AL',
              '',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'NSM',
              'NSM',
              'NSM',
              'NSM',
              'NSM',
              'NSM',
              'NSM',
              'NSM',
              'NSM',
              'NSM',
              'NSM',
              'NSM',
              'NSM',
              'NSM',
              'NSM',
              'NSM',
              'NSM',
              'NSM',
              'NSM',
              'NSM',
              'NSM',
              'AN',
              'AN',
              'AN',
              'AN',
              'AN',
              'AN',
              'AN',
              'AN',
              'AN',
              'AN',
              'ET',
              'AN',
              'AN',
              'AL',
              'AL',
              'AL',
              'NSM',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'NSM',
              'NSM',
              'NSM',
              'NSM',
              'NSM',
              'NSM',
              'NSM',
              'AN',
              'ON',
              'NSM',
              'NSM',
              'NSM',
              'NSM',
              'NSM',
              'NSM',
              'AL',
              'AL',
              'NSM',
              'NSM',
              'ON',
              'NSM',
              'NSM',
              'NSM',
              'NSM',
              'AL',
              'AL',
              'EN',
              'EN',
              'EN',
              'EN',
              'EN',
              'EN',
              'EN',
              'EN',
              'EN',
              'EN',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
              'AL',
            ];
          function sS(A, t, i) {
            for (let a = t, s = i - 1; a < s; ++a, --s) {
              let t = A[a];
              (A[a] = A[s]), (A[s] = t);
            }
          }
          function sR(A, t, i = !1) {
            let a = 'ltr';
            return i ? (a = 'ttb') : t || (a = 'rtl'), { str: A, dir: a };
          }
          let sG = [],
            sN = [];
          function sx(A, t = -1, i = !1) {
            let a = !0,
              s = A.length;
            if (0 === s || i) return sR(A, a, i);
            (sG.length = s), (sN.length = s);
            let g,
              r,
              n = 0;
            for (g = 0; g < s; ++g) {
              sG[g] = A.charAt(g);
              let t = A.charCodeAt(g),
                i = 'L';
              t <= 255
                ? (i = sk[t])
                : 1424 <= t && t <= 1524
                  ? (i = 'R')
                  : 1536 <= t && t <= 1791
                    ? (i = sF[255 & t]) ||
                      m('Bidi: invalid Unicode character ' + t.toString(16))
                    : ((1792 <= t && t <= 2220) ||
                        (64336 <= t && t <= 65023) ||
                        (65136 <= t && t <= 65279)) &&
                      (i = 'AL'),
                ('R' !== i && 'AL' !== i && 'AN' !== i) || n++,
                (sN[g] = i);
            }
            if (0 === n) return sR(A, (a = !0));
            -1 === t &&
              (n / s < 0.3 && s > 4
                ? ((a = !0), (t = 0))
                : ((a = !1), (t = 1)));
            let o = [];
            for (g = 0; g < s; ++g) o[g] = t;
            let I = 0 != (1 & t) ? 'R' : 'L',
              l,
              C = I;
            for (g = 0; g < s; ++g) 'NSM' === sN[g] ? (sN[g] = C) : (C = sN[g]);
            for (g = 0, C = I; g < s; ++g)
              'EN' === (l = sN[g])
                ? (sN[g] = 'AL' === C ? 'AN' : 'EN')
                : ('R' !== l && 'L' !== l && 'AL' !== l) || (C = l);
            for (g = 0; g < s; ++g) 'AL' === (l = sN[g]) && (sN[g] = 'R');
            for (g = 1; g < s - 1; ++g)
              'ES' === sN[g] &&
                'EN' === sN[g - 1] &&
                'EN' === sN[g + 1] &&
                (sN[g] = 'EN'),
                'CS' !== sN[g] ||
                  ('EN' !== sN[g - 1] && 'AN' !== sN[g - 1]) ||
                  sN[g + 1] !== sN[g - 1] ||
                  (sN[g] = sN[g - 1]);
            for (g = 0; g < s; ++g)
              if ('EN' === sN[g]) {
                for (let A = g - 1; A >= 0 && 'ET' === sN[A]; --A) sN[A] = 'EN';
                for (let A = g + 1; A < s && 'ET' === sN[A]; ++A) sN[A] = 'EN';
              }
            for (g = 0; g < s; ++g)
              ('WS' !== (l = sN[g]) &&
                'ES' !== l &&
                'ET' !== l &&
                'CS' !== l) ||
                (sN[g] = 'ON');
            for (g = 0, C = I; g < s; ++g)
              'EN' === (l = sN[g])
                ? (sN[g] = 'L' === C ? 'L' : 'EN')
                : ('R' !== l && 'L' !== l) || (C = l);
            for (g = 0; g < s; ++g)
              if ('ON' === sN[g]) {
                let A = (function (A, t, i) {
                    let a, s;
                    for (a = t, s = A.length; a < s && 'ON' === A[a]; ++a);
                    return a;
                  })(sN, g + 1, 0),
                  t = I;
                g > 0 && (t = sN[g - 1]);
                let i = I;
                A + 1 < s && (i = sN[A + 1]),
                  'L' !== t && (t = 'R'),
                  'L' !== i && (i = 'R'),
                  t === i &&
                    (function (A, t, i, a) {
                      for (let s = t; s < i; ++s) A[s] = a;
                    })(sN, g, A, t),
                  (g = A - 1);
              }
            for (g = 0; g < s; ++g) 'ON' === sN[g] && (sN[g] = I);
            for (g = 0; g < s; ++g)
              (l = sN[g]),
                0 == (1 & o[g])
                  ? 'R' === l
                    ? (o[g] += 1)
                    : ('AN' !== l && 'EN' !== l) || (o[g] += 2)
                  : ('L' !== l && 'AN' !== l && 'EN' !== l) || (o[g] += 1);
            let B,
              h = -1,
              Q = 99;
            for (g = 0, r = o.length; g < r; ++g)
              h < (B = o[g]) && (h = B), Q > B && 0 != (1 & B) && (Q = B);
            for (B = h; B >= Q; --B) {
              let A = -1;
              for (g = 0, r = o.length; g < r; ++g)
                o[g] < B
                  ? A >= 0 && (sS(sG, A, g), (A = -1))
                  : A < 0 && (A = g);
              A >= 0 && sS(sG, A, o.length);
            }
            for (g = 0, r = sG.length; g < r; ++g) {
              let A = sG[g];
              ('<' !== A && '>' !== A) || (sG[g] = '');
            }
            return sR(sG.join(''), a);
          }
          let sU = { style: 'normal', weight: 'normal' },
            sM = { style: 'normal', weight: 'bold' },
            sJ = { style: 'italic', weight: 'normal' },
            sL = { style: 'italic', weight: 'bold' },
            sH = new Map([
              [
                'Times-Roman',
                {
                  local: [
                    'Times New Roman',
                    'Times-Roman',
                    'Times',
                    'Liberation Serif',
                    'Nimbus Roman',
                    'Nimbus Roman L',
                    'Tinos',
                    'Thorndale',
                    'TeX Gyre Termes',
                    'FreeSerif',
                    'Linux Libertine O',
                    'Libertinus Serif',
                    'DejaVu Serif',
                    'Bitstream Vera Serif',
                    'Ubuntu',
                  ],
                  style: sU,
                  ultimate: 'serif',
                },
              ],
              [
                'Times-Bold',
                { alias: 'Times-Roman', style: sM, ultimate: 'serif' },
              ],
              [
                'Times-Italic',
                { alias: 'Times-Roman', style: sJ, ultimate: 'serif' },
              ],
              [
                'Times-BoldItalic',
                { alias: 'Times-Roman', style: sL, ultimate: 'serif' },
              ],
              [
                'Helvetica',
                {
                  local: [
                    'Helvetica',
                    'Helvetica Neue',
                    'Arial',
                    'Arial Nova',
                    'Liberation Sans',
                    'Arimo',
                    'Nimbus Sans',
                    'Nimbus Sans L',
                    'A030',
                    'TeX Gyre Heros',
                    'FreeSans',
                    'DejaVu Sans',
                    'Albany',
                    'Bitstream Vera Sans',
                    'Arial Unicode MS',
                    'Microsoft Sans Serif',
                    'Apple Symbols',
                    'Cantarell',
                  ],
                  path: 'LiberationSans-Regular.ttf',
                  style: sU,
                  ultimate: 'sans-serif',
                },
              ],
              [
                'Helvetica-Bold',
                {
                  alias: 'Helvetica',
                  path: 'LiberationSans-Bold.ttf',
                  style: sM,
                  ultimate: 'sans-serif',
                },
              ],
              [
                'Helvetica-Oblique',
                {
                  alias: 'Helvetica',
                  path: 'LiberationSans-Italic.ttf',
                  style: sJ,
                  ultimate: 'sans-serif',
                },
              ],
              [
                'Helvetica-BoldOblique',
                {
                  alias: 'Helvetica',
                  path: 'LiberationSans-BoldItalic.ttf',
                  style: sL,
                  ultimate: 'sans-serif',
                },
              ],
              [
                'Courier',
                {
                  local: [
                    'Courier',
                    'Courier New',
                    'Liberation Mono',
                    'Nimbus Mono',
                    'Nimbus Mono L',
                    'Cousine',
                    'Cumberland',
                    'TeX Gyre Cursor',
                    'FreeMono',
                    'Linux Libertine Mono O',
                    'Libertinus Mono',
                  ],
                  style: sU,
                  ultimate: 'monospace',
                },
              ],
              [
                'Courier-Bold',
                { alias: 'Courier', style: sM, ultimate: 'monospace' },
              ],
              [
                'Courier-Oblique',
                { alias: 'Courier', style: sJ, ultimate: 'monospace' },
              ],
              [
                'Courier-BoldOblique',
                { alias: 'Courier', style: sL, ultimate: 'monospace' },
              ],
              [
                'ArialBlack',
                {
                  local: ['Arial Black'],
                  style: { style: 'normal', weight: '900' },
                  fallback: 'Helvetica-Bold',
                },
              ],
              ['ArialBlack-Bold', { alias: 'ArialBlack' }],
              [
                'ArialBlack-Italic',
                {
                  alias: 'ArialBlack',
                  style: { style: 'italic', weight: '900' },
                  fallback: 'Helvetica-BoldOblique',
                },
              ],
              ['ArialBlack-BoldItalic', { alias: 'ArialBlack-Italic' }],
              [
                'ArialNarrow',
                {
                  local: [
                    'Arial Narrow',
                    'Liberation Sans Narrow',
                    'Helvetica Condensed',
                    'Nimbus Sans Narrow',
                    'TeX Gyre Heros Cn',
                  ],
                  style: sU,
                  fallback: 'Helvetica',
                },
              ],
              [
                'ArialNarrow-Bold',
                { alias: 'ArialNarrow', style: sM, fallback: 'Helvetica-Bold' },
              ],
              [
                'ArialNarrow-Italic',
                {
                  alias: 'ArialNarrow',
                  style: sJ,
                  fallback: 'Helvetica-Oblique',
                },
              ],
              [
                'ArialNarrow-BoldItalic',
                {
                  alias: 'ArialNarrow',
                  style: sL,
                  fallback: 'Helvetica-BoldOblique',
                },
              ],
              [
                'Calibri',
                {
                  local: ['Calibri', 'Carlito'],
                  style: sU,
                  fallback: 'Helvetica',
                },
              ],
              [
                'Calibri-Bold',
                { alias: 'Calibri', style: sM, fallback: 'Helvetica-Bold' },
              ],
              [
                'Calibri-Italic',
                { alias: 'Calibri', style: sJ, fallback: 'Helvetica-Oblique' },
              ],
              [
                'Calibri-BoldItalic',
                {
                  alias: 'Calibri',
                  style: sL,
                  fallback: 'Helvetica-BoldOblique',
                },
              ],
              [
                'Wingdings',
                { local: ['Wingdings', 'URW Dingbats'], style: sU },
              ],
              ['Wingdings-Regular', { alias: 'Wingdings' }],
              ['Wingdings-Bold', { alias: 'Wingdings' }],
            ]),
            sY = new Map([['Arial-Black', 'ArialBlack']]);
          function sK(A) {
            let t = new Set([
              'thin',
              'extralight',
              'ultralight',
              'demilight',
              'semilight',
              'light',
              'book',
              'regular',
              'normal',
              'medium',
              'demibold',
              'semibold',
              'bold',
              'extrabold',
              'ultrabold',
              'black',
              'heavy',
              'extrablack',
              'ultrablack',
              'roman',
              'italic',
              'oblique',
              'ultracondensed',
              'extracondensed',
              'condensed',
              'semicondensed',
              'normal',
              'semiexpanded',
              'expanded',
              'extraexpanded',
              'ultraexpanded',
              'bolditalic',
            ]);
            return A.split(/[- ,+]+/g)
              .filter((A) => !t.has(A.toLowerCase()))
              .join(' ');
          }
          function sv(A, t, i, a, s, g) {
            if (a.startsWith('InvalidPDFjsFont_')) return null;
            ('TrueType' === g || 'Type1' === g) &&
              /^[A-Z]{6}\+/.test(a) &&
              (a = a.slice(7));
            let r = (a = t5(a)),
              n = A.get(r);
            if (n) return n;
            let o = sH.get(a);
            if (!o) {
              for (let [A, t] of sY)
                if (a.startsWith(A)) {
                  (a = `${t}${a.substring(A.length)}`), (o = sH.get(a));
                  break;
                }
            }
            let I = !1;
            o || ((o = sH.get(s)), (I = !0));
            let l = `${t.getDocId()}_s${t.createFontId()}`;
            if (!o) {
              if (!AH(a))
                return (
                  m(`Cannot substitute the font because of its name: ${a}`),
                  A.set(r, null),
                  null
                );
              let t = /bold/gi.test(a),
                i = /oblique|italic/gi.test(a),
                s = (t && i && sL) || (t && sM) || (i && sJ) || sU;
              return (
                (n = {
                  css: `"${sK(a)}",${l}`,
                  guessFallback: !0,
                  loadedName: l,
                  baseFontName: a,
                  src: `local(${a})`,
                  style: s,
                }),
                A.set(r, n),
                n
              );
            }
            let C = [];
            I && AH(a) && C.push(`local(${a})`);
            let { style: B, ultimate: h } = (function A(
                {
                  alias: t,
                  local: i,
                  path: a,
                  fallback: s,
                  style: g,
                  ultimate: r,
                },
                n,
                o,
                I = !0,
                l = !0,
                C = ''
              ) {
                let B = { style: null, ultimate: null };
                if (i) {
                  let A = C ? ` ${C}` : '';
                  for (let t of i) n.push(`local(${t}${A})`);
                }
                if (t) {
                  let i = sH.get(t),
                    r =
                      C ||
                      (function (A) {
                        switch (A) {
                          case sM:
                            return 'Bold';
                          case sJ:
                            return 'Italic';
                          case sL:
                            return 'Bold Italic';
                          default:
                            if ('bold' === A?.weight) return 'Bold';
                            if ('italic' === A?.style) return 'Italic';
                        }
                        return '';
                      })(g);
                  Object.assign(B, A(i, n, o, I && !s, l && !a, r));
                }
                if ((g && (B.style = g), r && (B.ultimate = r), I && s)) {
                  let t = sH.get(s),
                    { ultimate: i } = A(t, n, o, I, l && !a, C);
                  B.ultimate ||= i;
                }
                return l && a && o && n.push(`url(${o}${a})`), B;
              })(o, C, i),
              Q = null === h,
              c = Q ? '' : `,${h}`;
            return (
              (n = {
                css: `"${sK(a)}",${l}${c}`,
                guessFallback: Q,
                loadedName: l,
                baseFontName: a,
                src: C.join(','),
                style: B,
              }),
              A.set(r, n),
              n
            );
          }
          class sq {
            constructor(A, t) {
              (this._imgData = A), (this._isMask = t);
            }
            static needsToBeResized(A, t) {
              if (A <= this._goodSquareLength && t <= this._goodSquareLength)
                return !1;
              let { MAX_DIM: i } = this;
              if (A > i || t > i) return !0;
              let a = A * t;
              return this._hasMaxArea
                ? a > this.MAX_AREA
                : !(a < this._goodSquareLength ** 2) &&
                    (this._areGoodDims(A, t)
                      ? ((this._goodSquareLength = Math.max(
                          this._goodSquareLength,
                          Math.floor(Math.sqrt(A * t))
                        )),
                        !1)
                      : ((this._goodSquareLength = this._guessMax(
                          this._goodSquareLength,
                          i,
                          128,
                          0
                        )),
                        a > (this.MAX_AREA = this._goodSquareLength ** 2)));
            }
            static get MAX_DIM() {
              return b(this, 'MAX_DIM', this._guessMax(2048, 65537, 0, 1));
            }
            static get MAX_AREA() {
              return (
                (this._hasMaxArea = !0),
                b(
                  this,
                  'MAX_AREA',
                  this._guessMax(sq._goodSquareLength, this.MAX_DIM, 128, 0) **
                    2
                )
              );
            }
            static set MAX_AREA(A) {
              A >= 0 && ((this._hasMaxArea = !0), b(this, 'MAX_AREA', A));
            }
            static setMaxArea(A) {
              this._hasMaxArea || (this.MAX_AREA = A >> 2);
            }
            static _areGoodDims(A, t) {
              try {
                let i = new OffscreenCanvas(A, t),
                  a = i.getContext('2d');
                a.fillRect(0, 0, 1, 1);
                let s = a.getImageData(0, 0, 1, 1).data[3];
                return (i.width = i.height = 1), 0 !== s;
              } catch {
                return !1;
              }
            }
            static _guessMax(A, t, i, a) {
              for (; A + i + 1 < t; ) {
                let i = Math.floor((A + t) / 2),
                  s = a || i;
                this._areGoodDims(i, s) ? (A = i) : (t = i);
              }
              return A;
            }
            static async createImage(A, t = !1) {
              return new sq(A, t)._createImage();
            }
            async _createImage() {
              let A = this._encodeBMP(),
                t = new Blob([A.buffer], { type: 'image/bmp' }),
                i = createImageBitmap(t),
                { MAX_AREA: a, MAX_DIM: s } = sq,
                { _imgData: g } = this,
                { width: r, height: n } = g,
                o = Math.max(r / s, n / s, Math.sqrt((r * n) / a)),
                I = Math.max(o, 2),
                l = Math.round(10 * (o + 1.25)) / 10 / I,
                C = Math.floor(Math.log2(l)),
                B = Array(C + 2).fill(2);
              (B[0] = I), B.splice(-1, 1, l / (1 << C));
              let h = r,
                Q = n,
                c = await i;
              for (let A of B) {
                let t = h,
                  i = Q;
                (h = Math.floor(h / A) - 1), (Q = Math.floor(Q / A) - 1);
                let a = new OffscreenCanvas(h, Q);
                a.getContext('2d').drawImage(c, 0, 0, t, i, 0, 0, h, Q),
                  (c = a.transferToImageBitmap());
              }
              return (
                (g.data = null),
                (g.bitmap = c),
                (g.width = h),
                (g.height = Q),
                g
              );
            }
            _encodeBMP() {
              let { width: A, height: t, kind: i } = this._imgData,
                a,
                s = this._imgData.data,
                g = new Uint8Array(0),
                r = g,
                n = 0;
              switch (i) {
                case 1: {
                  (a = 1),
                    (g = new Uint8Array(
                      this._isMask
                        ? [255, 255, 255, 255, 0, 0, 0, 0]
                        : [0, 0, 0, 0, 255, 255, 255, 255]
                    ));
                  let i = (A + 7) >> 3,
                    r = (i + 3) & -4;
                  if (i !== r) {
                    let A = new Uint8Array(r * t),
                      a = 0;
                    for (let g = 0, n = t * i; g < n; g += i, a += r)
                      A.set(s.subarray(g, g + i), a);
                    s = A;
                  }
                  break;
                }
                case 2:
                  if (((a = 24), 3 & A)) {
                    let i = 3 * A,
                      a = (i + 3) & -4,
                      g = a - i,
                      r = new Uint8Array(a * t),
                      n = 0;
                    for (let A = 0, a = t * i; A < a; A += i) {
                      let t = s.subarray(A, A + i);
                      for (let A = 0; A < i; A += 3)
                        (r[n++] = t[A + 2]),
                          (r[n++] = t[A + 1]),
                          (r[n++] = t[A]);
                      n += g;
                    }
                    s = r;
                  } else
                    for (let A = 0, t = s.length; A < t; A += 3) {
                      let t = s[A];
                      (s[A] = s[A + 2]), (s[A + 2] = t);
                    }
                  break;
                case 3:
                  (a = 32), (n = 3), (r = new Uint8Array(68));
                  let o = new DataView(r.buffer);
                  Y.isLittleEndian
                    ? (o.setUint32(0, 255, !0),
                      o.setUint32(4, 65280, !0),
                      o.setUint32(8, 16711680, !0),
                      o.setUint32(12, 4278190080, !0))
                    : (o.setUint32(0, 4278190080, !0),
                      o.setUint32(4, 16711680, !0),
                      o.setUint32(8, 65280, !0),
                      o.setUint32(12, 255, !0));
                  break;
                default:
                  throw Error('invalid format');
              }
              let I = 0,
                l = 40 + r.length,
                C = 14 + l + g.length + s.length,
                B = new Uint8Array(C),
                h = new DataView(B.buffer);
              return (
                h.setUint16(I, 19778, !0),
                (I += 2),
                h.setUint32(I, C, !0),
                (I += 4),
                h.setUint32(I, 0, !0),
                (I += 4),
                h.setUint32(I, 14 + l + g.length, !0),
                (I += 4),
                h.setUint32(I, l, !0),
                (I += 4),
                h.setInt32(I, A, !0),
                (I += 4),
                h.setInt32(I, -t, !0),
                (I += 4),
                h.setUint16(I, 1, !0),
                (I += 2),
                h.setUint16(I, a, !0),
                (I += 2),
                h.setUint32(I, n, !0),
                (I += 4),
                h.setUint32(I, 0, !0),
                (I += 4),
                h.setInt32(I, 0, !0),
                (I += 4),
                h.setInt32(I, 0, !0),
                (I += 4),
                h.setUint32(I, g.length / 4, !0),
                (I += 4),
                h.setUint32(I, 0, !0),
                (I += 4),
                B.set(r, I),
                (I += r.length),
                B.set(g, I),
                (I += g.length),
                B.set(s, I),
                B
              );
            }
          }
          sq._goodSquareLength = 2048;
          class sT {
            constructor(A) {
              (this.h1 = A ? 4294967295 & A : 3285377520),
                (this.h2 = A ? 4294967295 & A : 3285377520);
            }
            update(A) {
              let t, i;
              if ('string' == typeof A) {
                (t = new Uint8Array(2 * A.length)), (i = 0);
                for (let a = 0, s = A.length; a < s; a++) {
                  let s = A.charCodeAt(a);
                  s <= 255
                    ? (t[i++] = s)
                    : ((t[i++] = s >>> 8), (t[i++] = 255 & s));
                }
              } else {
                if (!ArrayBuffer.isView(A))
                  throw Error(
                    'Invalid data format, must be a string or TypedArray.'
                  );
                i = (t = A.slice()).byteLength;
              }
              let a = i >> 2,
                s = i - 4 * a,
                g = new Uint32Array(t.buffer, 0, a),
                r = 0,
                n = 0,
                o = this.h1,
                I = this.h2;
              for (let A = 0; A < a; A++)
                1 & A
                  ? ((o ^= r =
                      ((461845907 *
                        (r =
                          ((r =
                            ((3432918353 * (r = g[A])) & 4294901760) |
                            ((11601 * r) & 65535)) <<
                            15) |
                          (r >>> 17))) &
                        4294901760) |
                      ((13715 * r) & 65535)),
                    (o = 5 * (o = (o << 13) | (o >>> 19)) + 3864292196))
                  : ((I ^= n =
                      ((461845907 *
                        (n =
                          ((n =
                            ((3432918353 * (n = g[A])) & 4294901760) |
                            ((11601 * n) & 65535)) <<
                            15) |
                          (n >>> 17))) &
                        4294901760) |
                      ((13715 * n) & 65535)),
                    (I = 5 * (I = (I << 13) | (I >>> 19)) + 3864292196));
              switch (((r = 0), s)) {
                case 3:
                  r ^= t[4 * a + 2] << 16;
                case 2:
                  r ^= t[4 * a + 1] << 8;
                case 1:
                  (r ^= t[4 * a]),
                    (r =
                      ((461845907 *
                        (r =
                          ((r =
                            ((3432918353 * r) & 4294901760) |
                            ((11601 * r) & 65535)) <<
                            15) |
                          (r >>> 17))) &
                        4294901760) |
                      ((13715 * r) & 65535)),
                    1 & a ? (o ^= r) : (I ^= r);
              }
              (this.h1 = o), (this.h2 = I);
            }
            hexdigest() {
              let A = this.h1,
                t = this.h2;
              return (
                (A ^= t >>> 1),
                (t =
                  ((4283543511 * t) & 4294901760) |
                  (((2950163797 *
                    ((t << 16) |
                      ((A =
                        ((3981806797 * A) & 4294901760) |
                        ((36045 * A) & 65535)) >>>
                        16))) &
                    4294901760) >>>
                    16)),
                (A ^= t >>> 1),
                (t =
                  ((3301882366 * t) & 4294901760) |
                  (((3120437893 *
                    ((t << 16) |
                      ((A =
                        ((444984403 * A) & 4294901760) |
                        ((60499 * A) & 65535)) >>>
                        16))) &
                    4294901760) >>>
                    16)),
                ((A ^= t >>> 1) >>> 0).toString(16).padStart(8, '0') +
                  (t >>> 0).toString(16).padStart(8, '0')
              );
            }
          }
          function sP(A, t, i, a, s) {
            let g = A;
            for (let A = 0, i = t.length - 1; A < i; A++) {
              let i = t[A];
              g = g[i] ||= [];
            }
            g[t.at(-1)] = { checkFn: i, iterateFn: a, processFn: s };
          }
          let sW = [];
          sP(
            sW,
            [10, 12, 86, 11],
            null,
            function (A, t) {
              let i = A.fnArray,
                a = (t - (A.iCurr - 3)) % 4;
              switch (a) {
                case 0:
                  return 10 === i[t];
                case 1:
                  return 12 === i[t];
                case 2:
                  return 86 === i[t];
                case 3:
                  return 11 === i[t];
              }
              throw Error(`iterateInlineImageGroup - invalid pos: ${a}`);
            },
            function (A, t) {
              let i = A.fnArray,
                a = A.argsArray,
                s = A.iCurr,
                g = s - 3,
                r = s - 2,
                n = s - 1,
                o = Math.min(Math.floor((t - g) / 4), 200);
              if (o < 10) return t - ((t - g) % 4);
              let I = 0,
                l = [],
                C = 0,
                B = 1,
                h = 1;
              for (let A = 0; A < o; A++) {
                let t = a[r + (A << 2)],
                  i = a[n + (A << 2)][0];
                B + i.width > 1e3 &&
                  ((I = Math.max(I, B)), (h += C + 2), (B = 0), (C = 0)),
                  l.push({ transform: t, x: B, y: h, w: i.width, h: i.height }),
                  (B += i.width + 2),
                  (C = Math.max(C, i.height));
              }
              let Q = Math.max(I, B) + 1,
                c = h + C + 1,
                E = new Uint8Array(Q * c * 4),
                u = Q << 2;
              for (let A = 0; A < o; A++) {
                let t = a[n + (A << 2)][0].data,
                  i = l[A].w << 2,
                  s = 0,
                  g = (l[A].x + l[A].y * Q) << 2;
                E.set(t.subarray(0, i), g - u);
                for (let a = 0, r = l[A].h; a < r; a++)
                  E.set(t.subarray(s, s + i), g), (s += i), (g += u);
                for (E.set(t.subarray(s - i, s), g); g >= 0; )
                  (t[g - 4] = t[g]),
                    (t[g - 3] = t[g + 1]),
                    (t[g - 2] = t[g + 2]),
                    (t[g - 1] = t[g + 3]),
                    (t[g + i] = t[g + i - 4]),
                    (t[g + i + 1] = t[g + i - 3]),
                    (t[g + i + 2] = t[g + i - 2]),
                    (t[g + i + 3] = t[g + i - 1]),
                    (g -= u);
              }
              let d = { width: Q, height: c };
              if (A.isOffscreenCanvasSupported) {
                let A = new OffscreenCanvas(Q, c);
                A.getContext('2d').putImageData(
                  new ImageData(new Uint8ClampedArray(E.buffer), Q, c),
                  0,
                  0
                ),
                  (d.bitmap = A.transferToImageBitmap()),
                  (d.data = null);
              } else (d.kind = 3), (d.data = E);
              return i.splice(g, 4 * o, 87), a.splice(g, 4 * o, [d, l]), g + 1;
            }
          ),
            sP(
              sW,
              [10, 12, 83, 11],
              null,
              function (A, t) {
                let i = A.fnArray,
                  a = (t - (A.iCurr - 3)) % 4;
                switch (a) {
                  case 0:
                    return 10 === i[t];
                  case 1:
                    return 12 === i[t];
                  case 2:
                    return 83 === i[t];
                  case 3:
                    return 11 === i[t];
                }
                throw Error(`iterateImageMaskGroup - invalid pos: ${a}`);
              },
              function (A, t) {
                let i = A.fnArray,
                  a = A.argsArray,
                  s = A.iCurr,
                  g = s - 3,
                  r = s - 2,
                  n = s - 1,
                  o = Math.floor((t - g) / 4);
                if (o < 10) return t - ((t - g) % 4);
                let I,
                  l,
                  C = !1,
                  B = a[n][0],
                  h = a[r][0],
                  Q = a[r][1],
                  c = a[r][2],
                  E = a[r][3];
                if (Q === c) {
                  (C = !0), (I = r + 4);
                  let A = n + 4;
                  for (let t = 1; t < o; t++, I += 4, A += 4)
                    if (
                      ((l = a[I]),
                      a[A][0] !== B ||
                        l[0] !== h ||
                        l[1] !== Q ||
                        l[2] !== c ||
                        l[3] !== E)
                    ) {
                      t < 10 ? (C = !1) : (o = t);
                      break;
                    }
                }
                if (C) {
                  o = Math.min(o, 1e3);
                  let A = new Float32Array(2 * o);
                  I = r;
                  for (let t = 0; t < o; t++, I += 4)
                    (l = a[I]), (A[t << 1] = l[4]), (A[1 + (t << 1)] = l[5]);
                  i.splice(g, 4 * o, 89),
                    a.splice(g, 4 * o, [B, h, Q, c, E, A]);
                } else {
                  o = Math.min(o, 100);
                  let A = [];
                  for (let t = 0; t < o; t++) {
                    l = a[r + (t << 2)];
                    let i = a[n + (t << 2)][0];
                    A.push({
                      data: i.data,
                      width: i.width,
                      height: i.height,
                      interpolate: i.interpolate,
                      count: i.count,
                      transform: l,
                    });
                  }
                  i.splice(g, 4 * o, 84), a.splice(g, 4 * o, [A]);
                }
                return g + 1;
              }
            ),
            sP(
              sW,
              [10, 12, 85, 11],
              function (A) {
                let t = A.argsArray,
                  i = A.iCurr - 2;
                return 0 === t[i][1] && 0 === t[i][2];
              },
              function (A, t) {
                let i = A.fnArray,
                  a = A.argsArray,
                  s = (t - (A.iCurr - 3)) % 4;
                switch (s) {
                  case 0:
                    return 10 === i[t];
                  case 1:
                    if (12 !== i[t]) return !1;
                    let g = A.iCurr - 2,
                      r = a[g][0],
                      n = a[g][3];
                    return (
                      a[t][0] === r &&
                      0 === a[t][1] &&
                      0 === a[t][2] &&
                      a[t][3] === n
                    );
                  case 2:
                    if (85 !== i[t]) return !1;
                    let o = a[A.iCurr - 1][0];
                    return a[t][0] === o;
                  case 3:
                    return 11 === i[t];
                }
                throw Error(`iterateImageGroup - invalid pos: ${s}`);
              },
              function (A, t) {
                let i = A.fnArray,
                  a = A.argsArray,
                  s = A.iCurr,
                  g = s - 3,
                  r = s - 2,
                  n = a[s - 1][0],
                  o = a[r][0],
                  I = a[r][3],
                  l = Math.min(Math.floor((t - g) / 4), 1e3);
                if (l < 3) return t - ((t - g) % 4);
                let C = new Float32Array(2 * l),
                  B = r;
                for (let A = 0; A < l; A++, B += 4) {
                  let t = a[B];
                  (C[A << 1] = t[4]), (C[1 + (A << 1)] = t[5]);
                }
                let h = [n, o, I, C];
                return i.splice(g, 4 * l, 88), a.splice(g, 4 * l, h), g + 1;
              }
            ),
            sP(
              sW,
              [31, 37, 42, 44, 32],
              null,
              function (A, t) {
                let i = A.fnArray,
                  a = A.argsArray,
                  s = (t - (A.iCurr - 4)) % 5;
                switch (s) {
                  case 0:
                    return 31 === i[t];
                  case 1:
                    return 37 === i[t];
                  case 2:
                    return 42 === i[t];
                  case 3:
                    if (44 !== i[t]) return !1;
                    let g = A.iCurr - 3,
                      r = a[g][0],
                      n = a[g][1];
                    return a[t][0] === r && a[t][1] === n;
                  case 4:
                    return 32 === i[t];
                }
                throw Error(`iterateShowTextGroup - invalid pos: ${s}`);
              },
              function (A, t) {
                let i = A.fnArray,
                  a = A.argsArray,
                  s = A.iCurr,
                  g = s - 4,
                  r = s - 3,
                  n = a[r][0],
                  o = a[r][1],
                  I = Math.min(Math.floor((t - g) / 5), 1e3);
                if (I < 3) return t - ((t - g) % 5);
                let l = g;
                g >= 4 &&
                  i[g - 4] === i[r] &&
                  i[g - 3] === i[s - 2] &&
                  i[g - 2] === i[s - 1] &&
                  i[g - 1] === i[s] &&
                  a[g - 4][0] === n &&
                  a[g - 4][1] === o &&
                  (I++, (l -= 5));
                let C = l + 4;
                for (let A = 1; A < I; A++)
                  i.splice(C, 3), a.splice(C, 3), (C += 2);
                return C + 1;
              }
            );
          class sZ {
            constructor(A) {
              this.queue = A;
            }
            _optimize() {}
            push(A, t) {
              this.queue.fnArray.push(A),
                this.queue.argsArray.push(t),
                this._optimize();
            }
            flush() {}
            reset() {}
          }
          class sO extends sZ {
            constructor(A) {
              super(A),
                (this.state = null),
                (this.context = {
                  iCurr: 0,
                  fnArray: A.fnArray,
                  argsArray: A.argsArray,
                  isOffscreenCanvasSupported: !1,
                }),
                (this.match = null),
                (this.lastProcessed = 0);
            }
            set isOffscreenCanvasSupported(A) {
              this.context.isOffscreenCanvasSupported = A;
            }
            _optimize() {
              let A = this.queue.fnArray,
                t = this.lastProcessed,
                i = A.length,
                a = this.state,
                s = this.match;
              if (!a && !s && t + 1 === i && !sW[A[t]]) {
                this.lastProcessed = i;
                return;
              }
              let g = this.context;
              for (; t < i; ) {
                if (s) {
                  if ((0, s.iterateFn)(g, t)) {
                    t++;
                    continue;
                  }
                  if (
                    ((t = (0, s.processFn)(g, t + 1)),
                    (i = A.length),
                    (s = null),
                    (a = null),
                    t >= i)
                  )
                    break;
                }
                (a = (a || sW)[A[t]]) && !Array.isArray(a)
                  ? ((g.iCurr = t),
                    t++,
                    (!a.checkFn || (0, a.checkFn)(g)) && (s = a),
                    (a = null))
                  : t++;
              }
              (this.state = a), (this.match = s), (this.lastProcessed = t);
            }
            flush() {
              for (; this.match; ) {
                let A = this.queue.fnArray.length;
                (this.lastProcessed = (0, this.match.processFn)(
                  this.context,
                  A
                )),
                  (this.match = null),
                  (this.state = null),
                  this._optimize();
              }
            }
            reset() {
              (this.state = null),
                (this.match = null),
                (this.lastProcessed = 0);
            }
          }
          class sX {
            static CHUNK_SIZE = 1e3;
            static CHUNK_SIZE_ABOUT = this.CHUNK_SIZE - 5;
            constructor(A = 0, t) {
              (this._streamSink = t),
                (this.fnArray = []),
                (this.argsArray = []),
                (this.optimizer = !t || 256 & A ? new sZ(this) : new sO(this)),
                (this.dependencies = new Set()),
                (this._totalLength = 0),
                (this.weight = 0),
                (this._resolved = t ? null : Promise.resolve());
            }
            set isOffscreenCanvasSupported(A) {
              this.optimizer.isOffscreenCanvasSupported = A;
            }
            get length() {
              return this.argsArray.length;
            }
            get ready() {
              return this._resolved || this._streamSink.ready;
            }
            get totalLength() {
              return this._totalLength + this.length;
            }
            addOp(A, t) {
              this.optimizer.push(A, t),
                this.weight++,
                this._streamSink &&
                  (this.weight >= sX.CHUNK_SIZE ||
                    (this.weight >= sX.CHUNK_SIZE_ABOUT &&
                      (11 === A || 32 === A))) &&
                  this.flush();
            }
            addImageOps(A, t, i) {
              void 0 !== i && this.addOp(70, ['OC', i]),
                this.addOp(A, t),
                void 0 !== i && this.addOp(71, []);
            }
            addDependency(A) {
              this.dependencies.has(A) ||
                (this.dependencies.add(A), this.addOp(1, [A]));
            }
            addDependencies(A) {
              for (let t of A) this.addDependency(t);
            }
            addOpList(A) {
              if (A instanceof sX) {
                for (let t of A.dependencies) this.dependencies.add(t);
                for (let t = 0, i = A.length; t < i; t++)
                  this.addOp(A.fnArray[t], A.argsArray[t]);
              } else m('addOpList - ignoring invalid "opList" parameter.');
            }
            getIR() {
              return {
                fnArray: this.fnArray,
                argsArray: this.argsArray,
                length: this.length,
              };
            }
            get _transfers() {
              let A = [],
                { fnArray: t, argsArray: i, length: a } = this;
              for (let s = 0; s < a; s++)
                switch (t[s]) {
                  case 86:
                  case 87:
                  case 83:
                    let a = i[s][0];
                    !a.cached &&
                      a.data?.buffer instanceof ArrayBuffer &&
                      A.push(a.data.buffer);
                }
              return A;
            }
            flush(A = !1, t = null) {
              this.optimizer.flush();
              let i = this.length;
              (this._totalLength += i),
                this._streamSink.enqueue(
                  {
                    fnArray: this.fnArray,
                    argsArray: this.argsArray,
                    lastChunk: A,
                    separateAnnots: t,
                    length: i,
                  },
                  1,
                  this._transfers
                ),
                this.dependencies.clear(),
                (this.fnArray.length = 0),
                (this.argsArray.length = 0),
                (this.weight = 0),
                this.optimizer.reset();
            }
          }
          function sV(A, t, i, a, s, g) {
            let r;
            let n = s * g;
            r =
              t <= 8
                ? new Uint8Array(n)
                : t <= 16
                  ? new Uint16Array(n)
                  : new Uint32Array(n);
            let o = i / s,
              I = a / g,
              l,
              C,
              B,
              h,
              Q = 0,
              c = new Uint16Array(s);
            for (l = 0; l < s; l++) c[l] = Math.floor(l * o);
            for (l = 0; l < g; l++)
              for (C = 0, B = Math.floor(l * I) * i; C < s; C++)
                (h = B + c[C]), (r[Q++] = A[h]);
            return r;
          }
          class sj {
            constructor({
              xref: A,
              res: t,
              image: i,
              isInline: a = !1,
              smask: s = null,
              mask: g = null,
              isMask: r = !1,
              pdfFunctionFactory: n,
              localColorSpaceCache: o,
            }) {
              let I;
              this.image = i;
              let l = i.dict,
                C = l.get('F', 'Filter');
              if (C instanceof Ae) I = C.name;
              else if (Array.isArray(C)) {
                let t = A.fetchIfRef(C[0]);
                t instanceof Ae && (I = t.name);
              }
              switch (I) {
                case 'JPXDecode':
                  ({
                    width: i.width,
                    height: i.height,
                    componentsCount: i.numComps,
                    bitsPerComponent: i.bitsPerComponent,
                  } = e4.parseImageProperties(i.stream)),
                    i.stream.reset(),
                    (this.jpxDecoderOptions = {
                      numComponents: 0,
                      isIndexedColormap: !1,
                      smaskInData: l.has('SMaskInData'),
                    });
                  break;
                case 'JBIG2Decode':
                  (i.bitsPerComponent = 1), (i.numComps = 1);
              }
              let B = l.get('W', 'Width'),
                h = l.get('H', 'Height');
              if (
                (Number.isInteger(i.width) &&
                  i.width > 0 &&
                  Number.isInteger(i.height) &&
                  i.height > 0 &&
                  (i.width !== B || i.height !== h) &&
                  (m(
                    'PDFImage - using the Width/Height of the image data, rather than the image dictionary.'
                  ),
                  (B = i.width),
                  (h = i.height)),
                B < 1 || h < 1)
              )
                throw new x(`Invalid image width: ${B} or height: ${h}`);
              (this.width = B),
                (this.height = h),
                (this.interpolate = l.get('I', 'Interpolate')),
                (this.imageMask = l.get('IM', 'ImageMask') || !1),
                (this.matte = l.get('Matte') || !1);
              let Q = i.bitsPerComponent;
              if (!Q && !(Q = l.get('BPC', 'BitsPerComponent'))) {
                if (!this.imageMask)
                  throw new x(
                    `Bits per component missing in image: ${this.imageMask}`
                  );
                Q = 1;
              }
              if (((this.bpc = Q), !this.imageMask)) {
                let s = l.getRaw('CS') || l.getRaw('ColorSpace'),
                  g = !!s;
                if (g)
                  this.jpxDecoderOptions?.smaskInData &&
                    (s = Ae.get('DeviceRGBA'));
                else if (this.jpxDecoderOptions) s = Ae.get('DeviceRGBA');
                else
                  switch (i.numComps) {
                    case 1:
                      s = Ae.get('DeviceGray');
                      break;
                    case 3:
                      s = Ae.get('DeviceRGB');
                      break;
                    case 4:
                      s = Ae.get('DeviceCMYK');
                      break;
                    default:
                      throw Error(
                        `Images with ${i.numComps} color components not supported.`
                      );
                  }
                (this.colorSpace = Az.parse({
                  cs: s,
                  xref: A,
                  resources: a ? t : null,
                  pdfFunctionFactory: n,
                  localColorSpaceCache: o,
                })),
                  (this.numComps = this.colorSpace.numComps),
                  this.jpxDecoderOptions &&
                    ((this.jpxDecoderOptions.numComponents = g
                      ? this.numComp
                      : 0),
                    (this.jpxDecoderOptions.isIndexedColormap =
                      'Indexed' === this.colorSpace.name));
              }
              if (
                ((this.decode = l.getArray('D', 'Decode')),
                (this.needsDecode = !1),
                this.decode &&
                  ((this.colorSpace &&
                    !this.colorSpace.isDefaultDecode(this.decode, Q)) ||
                    (r && !Az.isDefaultDecode(this.decode, 1))))
              ) {
                this.needsDecode = !0;
                let A = (1 << Q) - 1;
                (this.decodeCoefficients = []), (this.decodeAddends = []);
                let t = 'Indexed' === this.colorSpace?.name;
                for (let i = 0, a = 0; i < this.decode.length; i += 2, ++a) {
                  let s = this.decode[i],
                    g = this.decode[i + 1];
                  (this.decodeCoefficients[a] = t ? (g - s) / A : g - s),
                    (this.decodeAddends[a] = t ? s : A * s);
                }
              }
              s
                ? (this.smask = new sj({
                    xref: A,
                    res: t,
                    image: s,
                    isInline: a,
                    pdfFunctionFactory: n,
                    localColorSpaceCache: o,
                  }))
                : g &&
                  (g instanceof AC
                    ? g.dict.get('IM', 'ImageMask')
                      ? (this.mask = new sj({
                          xref: A,
                          res: t,
                          image: g,
                          isInline: a,
                          isMask: !0,
                          pdfFunctionFactory: n,
                          localColorSpaceCache: o,
                        }))
                      : m('Ignoring /Mask in image without /ImageMask.')
                    : (this.mask = g));
            }
            static async buildImage({
              xref: A,
              res: t,
              image: i,
              isInline: a = !1,
              pdfFunctionFactory: s,
              localColorSpaceCache: g,
            }) {
              let r = null,
                n = null,
                o = i.dict.get('SMask'),
                I = i.dict.get('Mask');
              return (
                o
                  ? o instanceof AC
                    ? (r = o)
                    : m('Unsupported /SMask format.')
                  : I &&
                    (I instanceof AC || Array.isArray(I)
                      ? (n = I)
                      : m('Unsupported /Mask format.')),
                new sj({
                  xref: A,
                  res: t,
                  image: i,
                  isInline: a,
                  smask: r,
                  mask: n,
                  pdfFunctionFactory: s,
                  localColorSpaceCache: g,
                })
              );
            }
            static createRawMask({
              imgArray: A,
              width: t,
              height: i,
              imageIsFromDecodeStream: a,
              inverseDecode: s,
              interpolate: g,
            }) {
              let r, n;
              let o = ((t + 7) >> 3) * i,
                I = A.byteLength;
              if (
                (!a || (s && o !== I)
                  ? s
                    ? ((r = new Uint8Array(o)).set(A), r.fill(255, I))
                    : (r = new Uint8Array(A))
                  : (r = A),
                s)
              )
                for (n = 0; n < I; n++) r[n] ^= 255;
              return { data: r, width: t, height: i, interpolate: g };
            }
            static async createMask({
              imgArray: A,
              width: t,
              height: i,
              imageIsFromDecodeStream: a,
              inverseDecode: s,
              interpolate: g,
              isOffscreenCanvasSupported: r = !1,
            }) {
              let n =
                1 === t && 1 === i && s === (0 === A.length || !!(128 & A[0]));
              if (n) return { isSingleOpaquePixel: n };
              if (r) {
                if (sq.needsToBeResized(t, i)) {
                  let a = new Uint8ClampedArray(t * i * 4);
                  return (
                    ez({
                      src: A,
                      dest: a,
                      width: t,
                      height: i,
                      nonBlackColor: 0,
                      inverseDecode: s,
                    }),
                    sq.createImage({
                      kind: 3,
                      data: a,
                      width: t,
                      height: i,
                      interpolate: g,
                    })
                  );
                }
                let a = new OffscreenCanvas(t, i),
                  r = a.getContext('2d'),
                  n = r.createImageData(t, i);
                return (
                  ez({
                    src: A,
                    dest: n.data,
                    width: t,
                    height: i,
                    nonBlackColor: 0,
                    inverseDecode: s,
                  }),
                  r.putImageData(n, 0, 0),
                  {
                    data: null,
                    width: t,
                    height: i,
                    interpolate: g,
                    bitmap: a.transferToImageBitmap(),
                  }
                );
              }
              return this.createRawMask({
                imgArray: A,
                width: t,
                height: i,
                inverseDecode: s,
                imageIsFromDecodeStream: a,
                interpolate: g,
              });
            }
            get drawWidth() {
              return Math.max(
                this.width,
                this.smask?.width || 0,
                this.mask?.width || 0
              );
            }
            get drawHeight() {
              return Math.max(
                this.height,
                this.smask?.height || 0,
                this.mask?.height || 0
              );
            }
            decodeBuffer(A) {
              let t, i;
              let a = this.bpc,
                s = this.numComps,
                g = this.decodeAddends,
                r = this.decodeCoefficients,
                n = (1 << a) - 1;
              if (1 === a) {
                for (t = 0, i = A.length; t < i; t++) A[t] = +!A[t];
                return;
              }
              let o = 0;
              for (t = 0, i = this.width * this.height; t < i; t++)
                for (let t = 0; t < s; t++) {
                  var I;
                  (A[o] =
                    ((I = A[o]),
                    (I = g[t] + I * r[t]) < 0 ? (I = 0) : I > n && (I = n),
                    I)),
                    o++;
                }
            }
            getComponents(A) {
              let t = this.bpc;
              if (8 === t) return A;
              let i = this.width,
                a = this.height,
                s = this.numComps,
                g = i * a * s,
                r,
                n = 0;
              r =
                t <= 8
                  ? new Uint8Array(g)
                  : t <= 16
                    ? new Uint16Array(g)
                    : new Uint32Array(g);
              let o = i * s,
                I = (1 << t) - 1,
                l,
                C = 0;
              if (1 === t) {
                let t, i, s;
                for (let g = 0; g < a; g++) {
                  for (i = C + (-8 & o), s = C + o; C < i; )
                    (l = A[n++]),
                      (r[C] = (l >> 7) & 1),
                      (r[C + 1] = (l >> 6) & 1),
                      (r[C + 2] = (l >> 5) & 1),
                      (r[C + 3] = (l >> 4) & 1),
                      (r[C + 4] = (l >> 3) & 1),
                      (r[C + 5] = (l >> 2) & 1),
                      (r[C + 6] = (l >> 1) & 1),
                      (r[C + 7] = 1 & l),
                      (C += 8);
                  if (C < s)
                    for (l = A[n++], t = 128; C < s; )
                      (r[C++] = +!!(l & t)), (t >>= 1);
                }
              } else {
                let i = 0;
                for (C = 0, l = 0; C < g; ++C) {
                  for (C % o == 0 && ((l = 0), (i = 0)); i < t; )
                    (l = (l << 8) | A[n++]), (i += 8);
                  let a = i - t,
                    s = l >> a;
                  s < 0 ? (s = 0) : s > I && (s = I),
                    (r[C] = s),
                    (l &= (1 << a) - 1),
                    (i = a);
                }
              }
              return r;
            }
            async fillOpacity(A, t, i, a, s) {
              let g, r, n, o, I, l;
              let C = this.smask,
                B = this.mask;
              if (C)
                (r = C.width),
                  (n = C.height),
                  (g = new Uint8ClampedArray(r * n)),
                  await C.fillGrayBuffer(g),
                  (r === t && n === i) || (g = sV(g, C.bpc, r, n, t, i));
              else if (B) {
                if (B instanceof sj) {
                  for (
                    r = B.width,
                      n = B.height,
                      g = new Uint8ClampedArray(r * n),
                      B.numComps = 1,
                      await B.fillGrayBuffer(g),
                      o = 0,
                      I = r * n;
                    o < I;
                    ++o
                  )
                    g[o] = 255 - g[o];
                  (r === t && n === i) || (g = sV(g, B.bpc, r, n, t, i));
                } else {
                  if (!Array.isArray(B)) throw new x('Unknown mask format.');
                  {
                    g = new Uint8ClampedArray(t * i);
                    let A = this.numComps;
                    for (o = 0, I = t * i; o < I; ++o) {
                      let t = 0,
                        i = o * A;
                      for (l = 0; l < A; ++l) {
                        let A = s[i + l],
                          a = 2 * l;
                        if (A < B[a] || A > B[a + 1]) {
                          t = 255;
                          break;
                        }
                      }
                      g[o] = t;
                    }
                  }
                }
              }
              if (g)
                for (o = 0, l = 3, I = t * a; o < I; ++o, l += 4) A[l] = g[o];
              else for (o = 0, l = 3, I = t * a; o < I; ++o, l += 4) A[l] = 255;
            }
            undoPreblend(A, t, i) {
              let a = this.smask?.matte;
              if (!a) return;
              let s = this.colorSpace.getRgb(a, 0),
                g = s[0],
                r = s[1],
                n = s[2],
                o = t * i * 4;
              for (let t = 0; t < o; t += 4) {
                let i = A[t + 3];
                if (0 === i) {
                  (A[t] = 255), (A[t + 1] = 255), (A[t + 2] = 255);
                  continue;
                }
                let a = 255 / i;
                (A[t] = (A[t] - g) * a + g),
                  (A[t + 1] = (A[t + 1] - r) * a + r),
                  (A[t + 2] = (A[t + 2] - n) * a + n);
              }
            }
            async createImageData(A = !1, t = !1) {
              let i, a, s, g, r, n;
              let o = this.drawWidth,
                I = this.drawHeight,
                l = {
                  width: o,
                  height: I,
                  interpolate: this.interpolate,
                  kind: 0,
                  data: null,
                },
                C = this.numComps,
                B = this.width,
                h = this.height,
                Q = this.bpc,
                c = (B * C * Q + 7) >> 3,
                E = t && sq.needsToBeResized(o, I);
              if ('DeviceRGBA' === this.colorSpace.name) {
                l.kind = 3;
                let A = (l.data = await this.getImageBytes(h * B * 4, {}));
                return t
                  ? E
                    ? sq.createImage(l, !1)
                    : this.createBitmap(3, o, I, A)
                  : l;
              }
              if (!A) {
                let A;
                if (
                  ('DeviceGray' === this.colorSpace.name && 1 === Q
                    ? (A = 1)
                    : 'DeviceRGB' !== this.colorSpace.name ||
                      8 !== Q ||
                      this.needsDecode ||
                      (A = 2),
                  A && !this.smask && !this.mask && o === B && I === h)
                ) {
                  let i = await this.getImageBytes(h * c, {});
                  if (t)
                    return E
                      ? sq.createImage(
                          {
                            data: i,
                            kind: A,
                            width: o,
                            height: I,
                            interpolate: this.interpolate,
                          },
                          this.needsDecode
                        )
                      : this.createBitmap(A, B, h, i);
                  if (((l.kind = A), (l.data = i), this.needsDecode)) {
                    w(
                      1 === A,
                      'PDFImage.createImageData: The image must be grayscale.'
                    );
                    let t = l.data;
                    for (let A = 0, i = t.length; A < i; A++) t[A] ^= 255;
                  }
                  return l;
                }
                if (
                  this.image instanceof e5 &&
                  !this.smask &&
                  !this.mask &&
                  !this.needsDecode
                ) {
                  let A = h * c;
                  if (t && !E) {
                    let t = !1;
                    switch (this.colorSpace.name) {
                      case 'DeviceGray':
                        (A *= 4), (t = !0);
                        break;
                      case 'DeviceRGB':
                        (A = (A / 3) * 4), (t = !0);
                        break;
                      case 'DeviceCMYK':
                        t = !0;
                    }
                    if (t) {
                      let t = await this.getImageBytes(A, {
                        drawWidth: o,
                        drawHeight: I,
                        forceRGBA: !0,
                      });
                      return this.createBitmap(3, o, I, t);
                    }
                  } else
                    switch (this.colorSpace.name) {
                      case 'DeviceGray':
                        A *= 3;
                      case 'DeviceRGB':
                      case 'DeviceCMYK':
                        return (
                          (l.kind = 2),
                          (l.data = await this.getImageBytes(A, {
                            drawWidth: o,
                            drawHeight: I,
                            forceRGB: !0,
                          })),
                          E ? sq.createImage(l) : l
                        );
                    }
                }
              }
              let u = await this.getImageBytes(h * c, { internal: !0 }),
                d = 0 | (((u.length / c) * I) / h),
                f = this.getComponents(u);
              return (t &&
                !E &&
                (n = (r = (g = (s = new OffscreenCanvas(o, I)).getContext(
                  '2d'
                )).createImageData(o, I)).data),
              (l.kind = 3),
              A || this.smask || this.mask
                ? ((t && !E) || (n = new Uint8ClampedArray(o * I * 4)),
                  (i = 1),
                  (a = !0),
                  await this.fillOpacity(n, o, I, d, f))
                : (!t || E
                    ? ((l.kind = 2),
                      (n = new Uint8ClampedArray(o * I * 3)),
                      (i = 0))
                    : (new Uint32Array(n.buffer).fill(
                        Y.isLittleEndian ? 4278190080 : 255
                      ),
                      (i = 1)),
                  (a = !1)),
              this.needsDecode && this.decodeBuffer(f),
              this.colorSpace.fillRgb(n, B, h, o, I, d, Q, f, i),
              a && this.undoPreblend(n, o, d),
              t && !E)
                ? (g.putImageData(r, 0, 0),
                  {
                    data: null,
                    width: o,
                    height: I,
                    bitmap: s.transferToImageBitmap(),
                    interpolate: this.interpolate,
                  })
                : ((l.data = n), E ? sq.createImage(l) : l);
            }
            async fillGrayBuffer(A) {
              let t, i;
              let a = this.numComps;
              if (1 !== a)
                throw new x(`Reading gray scale from a color image: ${a}`);
              let s = this.width,
                g = this.height,
                r = this.bpc,
                n = await this.getImageBytes(g * ((s * a * r + 7) >> 3), {
                  internal: !0,
                }),
                o = this.getComponents(n);
              if (1 === r) {
                if (((i = s * g), this.needsDecode))
                  for (t = 0; t < i; ++t) A[t] = (o[t] - 1) & 255;
                else for (t = 0; t < i; ++t) A[t] = 255 & -o[t];
                return;
              }
              this.needsDecode && this.decodeBuffer(o), (i = s * g);
              let I = 255 / ((1 << r) - 1);
              for (t = 0; t < i; ++t) A[t] = I * o[t];
            }
            createBitmap(A, t, i, a) {
              let s;
              let g = new OffscreenCanvas(t, i),
                r = g.getContext('2d');
              return (
                3 === A
                  ? (s = new ImageData(a, t, i))
                  : ((s = r.createImageData(t, i)),
                    (function (A) {
                      switch (A.kind) {
                        case 1:
                          return ez(A);
                        case 2:
                          return (function ({
                            src: A,
                            srcPos: t = 0,
                            dest: i,
                            destPos: a = 0,
                            width: s,
                            height: g,
                          }) {
                            let r = 0,
                              n = A.length >> 2,
                              o = new Uint32Array(A.buffer, t, n);
                            if (Y.isLittleEndian) {
                              for (; r < n - 2; r += 3, a += 4) {
                                let A = o[r],
                                  t = o[r + 1],
                                  s = o[r + 2];
                                (i[a] = 4278190080 | A),
                                  (i[a + 1] =
                                    (A >>> 24) | (t << 8) | 4278190080),
                                  (i[a + 2] =
                                    (t >>> 16) | (s << 16) | 4278190080),
                                  (i[a + 3] = (s >>> 8) | 4278190080);
                              }
                              for (let t = 4 * r, s = A.length; t < s; t += 3)
                                i[a++] =
                                  A[t] |
                                  (A[t + 1] << 8) |
                                  (A[t + 2] << 16) |
                                  4278190080;
                            } else {
                              for (; r < n - 2; r += 3, a += 4) {
                                let A = o[r],
                                  t = o[r + 1],
                                  s = o[r + 2];
                                (i[a] = 255 | A),
                                  (i[a + 1] = (A << 24) | (t >>> 8) | 255),
                                  (i[a + 2] = (t << 16) | (s >>> 16) | 255),
                                  (i[a + 3] = (s << 8) | 255);
                              }
                              for (let t = 4 * r, s = A.length; t < s; t += 3)
                                i[a++] =
                                  (A[t] << 24) |
                                  (A[t + 1] << 16) |
                                  (A[t + 2] << 8) |
                                  255;
                            }
                            return { srcPos: t, destPos: a };
                          })(A);
                      }
                      return null;
                    })({
                      kind: A,
                      src: a,
                      dest: new Uint32Array(s.data.buffer),
                      width: t,
                      height: i,
                      inverseDecode: this.needsDecode,
                    })),
                r.putImageData(s, 0, 0),
                {
                  data: null,
                  width: t,
                  height: i,
                  bitmap: g.transferToImageBitmap(),
                  interpolate: this.interpolate,
                }
              );
            }
            async getImageBytes(
              A,
              {
                drawWidth: t,
                drawHeight: i,
                forceRGBA: a = !1,
                forceRGB: s = !1,
                internal: g = !1,
              }
            ) {
              this.image.reset(),
                (this.image.drawWidth = t || this.width),
                (this.image.drawHeight = i || this.height),
                (this.image.forceRGBA = !!a),
                (this.image.forceRGB = !!s);
              let r = await this.image.getImageData(A, this.jpxDecoderOptions);
              return g || this.image instanceof es
                ? r
                : (w(
                    r instanceof Uint8Array,
                    'PDFImage.getImageBytes: Unsupported "imageBytes" type.'
                  ),
                  new Uint8Array(r));
            }
          }
          let sz = Object.freeze({
              maxImageSize: -1,
              disableFontFace: !1,
              ignoreErrors: !1,
              isEvalSupported: !0,
              isOffscreenCanvasSupported: !1,
              canvasMaxAreaInBytes: -1,
              fontExtraProperties: !1,
              useSystemFonts: !0,
              cMapUrl: null,
              standardFontDataUrl: null,
            }),
            s_ = Promise.resolve();
          function s$(A, t) {
            t.objId && A.addDependency(t.objId),
              A.addImageOps(t.fn, t.args, t.optionalContent),
              83 === t.fn && t.args[0]?.count > 0 && t.args[0].count++;
          }
          class s0 {
            static TIME_SLOT_DURATION_MS = 20;
            static CHECK_TIME_EVERY = 100;
            constructor() {
              this.reset();
            }
            check() {
              return (
                !(++this.checked < s0.CHECK_TIME_EVERY) &&
                ((this.checked = 0), this.endTime <= Date.now())
              );
            }
            reset() {
              (this.endTime = Date.now() + s0.TIME_SLOT_DURATION_MS),
                (this.checked = 0);
            }
          }
          class s1 {
            constructor({
              xref: A,
              handler: t,
              pageIndex: i,
              idFactory: a,
              fontCache: s,
              builtInCMapCache: g,
              standardFontDataCache: r,
              globalImageCache: n,
              systemFontCache: o,
              options: I = null,
            }) {
              (this.xref = A),
                (this.handler = t),
                (this.pageIndex = i),
                (this.idFactory = a),
                (this.fontCache = s),
                (this.builtInCMapCache = g),
                (this.standardFontDataCache = r),
                (this.globalImageCache = n),
                (this.systemFontCache = o),
                (this.options = I || sz),
                (this.type3FontRefs = null),
                (this._regionalImageCache = new sI()),
                (this._fetchBuiltInCMapBound =
                  this.fetchBuiltInCMap.bind(this)),
                sq.setMaxArea(this.options.canvasMaxAreaInBytes);
            }
            get _pdfFunctionFactory() {
              return b(
                this,
                '_pdfFunctionFactory',
                new sC({
                  xref: this.xref,
                  isEvalSupported: this.options.isEvalSupported,
                })
              );
            }
            get parsingType3Font() {
              return !!this.type3FontRefs;
            }
            clone(A = null) {
              let t = Object.create(this);
              return (
                (t.options = Object.assign(
                  Object.create(null),
                  this.options,
                  A
                )),
                t
              );
            }
            hasBlendModes(A, t) {
              if (!(A instanceof Aa) || (A.objId && t.has(A.objId))) return !1;
              let i = new Ag(t);
              A.objId && i.put(A.objId);
              let a = [A],
                s = this.xref;
              for (; a.length; ) {
                let A = a.shift(),
                  t = A.get('ExtGState');
                if (t instanceof Aa)
                  for (let A of t.getRawValues()) {
                    if (A instanceof As) {
                      if (i.has(A)) continue;
                      try {
                        A = s.fetch(A);
                      } catch (t) {
                        i.put(A),
                          p(`hasBlendModes - ignoring ExtGState: "${t}".`);
                        continue;
                      }
                    }
                    if (!(A instanceof Aa)) continue;
                    A.objId && i.put(A.objId);
                    let t = A.get('BM');
                    if (t instanceof Ae) {
                      if ('Normal' !== t.name) return !0;
                    } else if (void 0 !== t && Array.isArray(t)) {
                      for (let A of t)
                        if (A instanceof Ae && 'Normal' !== A.name) return !0;
                    }
                  }
                let g = A.get('XObject');
                if (g instanceof Aa)
                  for (let A of g.getRawValues()) {
                    if (A instanceof As) {
                      if (i.has(A)) continue;
                      try {
                        A = s.fetch(A);
                      } catch (t) {
                        i.put(A),
                          p(`hasBlendModes - ignoring XObject: "${t}".`);
                        continue;
                      }
                    }
                    if (!(A instanceof AC)) continue;
                    A.dict.objId && i.put(A.dict.objId);
                    let t = A.dict.get('Resources');
                    t instanceof Aa &&
                      (!t.objId || !i.has(t.objId)) &&
                      (a.push(t), t.objId && i.put(t.objId));
                  }
              }
              for (let A of i) t.put(A);
              return !1;
            }
            async fetchBuiltInCMap(A) {
              let t;
              let i = this.builtInCMapCache.get(A);
              if (i) return i;
              if (null !== this.options.cMapUrl) {
                let i = `${this.options.cMapUrl}${A}.bcmap`,
                  a = await fetch(i);
                if (!a.ok)
                  throw Error(
                    `fetchBuiltInCMap: failed to fetch file "${i}" with "${a.statusText}".`
                  );
                t = {
                  cMapData: new Uint8Array(await a.arrayBuffer()),
                  compressionType: d.BINARY,
                };
              } else
                t = await this.handler.sendWithPromise('FetchBuiltInCMap', {
                  name: A,
                });
              return (
                t.compressionType !== d.NONE && this.builtInCMapCache.set(A, t),
                t
              );
            }
            async fetchStandardFontData(A) {
              let t;
              let i = this.standardFontDataCache.get(A);
              if (i) return new AZ(i);
              if (
                this.options.useSystemFonts &&
                'Symbol' !== A &&
                'ZapfDingbats' !== A
              )
                return null;
              let a = t7()[A];
              if (null !== this.options.standardFontDataUrl) {
                let A = `${this.options.standardFontDataUrl}${a}`,
                  i = await fetch(A);
                i.ok
                  ? (t = new Uint8Array(await i.arrayBuffer()))
                  : m(
                      `fetchStandardFontData: failed to fetch file "${A}" with "${i.statusText}".`
                    );
              } else
                try {
                  t = await this.handler.sendWithPromise(
                    'FetchStandardFontData',
                    { filename: a }
                  );
                } catch (A) {
                  m(
                    `fetchStandardFontData: failed to fetch file "${a}" with "${A}".`
                  );
                }
              return t
                ? (this.standardFontDataCache.set(A, t), new AZ(t))
                : null;
            }
            async buildFormXObject(A, t, i, a, s, g, r) {
              let n, o;
              let I = t.dict,
                l = AF(I.getArray('Matrix'), null),
                C = AR(I.getArray('BBox'), null);
              I.has('OC') &&
                (n = await this.parseMarkedContentProps(I.get('OC'), A)),
                void 0 !== n && a.addOp(70, ['OC', n]);
              let B = I.get('Group');
              if (B) {
                o = {
                  matrix: l,
                  bbox: C,
                  smask: i,
                  isolated: !1,
                  knockout: !1,
                };
                let t = null;
                if (
                  An(B.get('S'), 'Transparency') &&
                  ((o.isolated = B.get('I') || !1),
                  (o.knockout = B.get('K') || !1),
                  B.has('CS'))
                ) {
                  let i = B.getRaw('CS'),
                    a = Az.getCached(i, this.xref, r);
                  t =
                    a ||
                    (await this.parseColorSpace({
                      cs: i,
                      resources: A,
                      localColorSpaceCache: r,
                    }));
                }
                i?.backdrop &&
                  ((t ||= Az.singletons.rgb),
                  (i.backdrop = t.getRgb(i.backdrop, 0))),
                  a.addOp(76, [o]);
              }
              let h = B ? [l, null] : [l, C];
              a.addOp(74, h),
                await this.getOperatorList({
                  stream: t,
                  task: s,
                  resources: I.get('Resources') || A,
                  operatorList: a,
                  initialState: g,
                }),
                a.addOp(75, []),
                B && a.addOp(77, [o]),
                void 0 !== n && a.addOp(71, []);
            }
            _sendImgData(A, t, i = !1) {
              let a = t ? [t.bitmap || t.data.buffer] : null;
              return this.parsingType3Font || i
                ? this.handler.send('commonobj', [A, 'Image', t], a)
                : this.handler.send('obj', [A, this.pageIndex, 'Image', t], a);
            }
            async buildPaintImageXObject({
              resources: A,
              image: t,
              isInline: i = !1,
              operatorList: a,
              cacheKey: s,
              localImageCache: g,
              localColorSpaceCache: r,
            }) {
              let n, o, I;
              let l = t.dict,
                C = l.objId,
                B = l.get('W', 'Width'),
                h = l.get('H', 'Height');
              if (!B || 'number' != typeof B || !h || 'number' != typeof h) {
                m('Image dimensions are missing, or not numbers.');
                return;
              }
              let Q = this.options.maxImageSize;
              if (-1 !== Q && B * h > Q) {
                let A = 'Image exceeded maximum allowed size and was removed.';
                if (this.options.ignoreErrors) {
                  m(A);
                  return;
                }
                throw Error(A);
              }
              if (
                (l.has('OC') &&
                  (n = await this.parseMarkedContentProps(l.get('OC'), A)),
                l.get('IM', 'ImageMask'))
              ) {
                let A = l.get('I', 'Interpolate'),
                  i = (B + 7) >> 3,
                  r = t.getBytes(i * h),
                  Q = l.getArray('D', 'Decode');
                if (this.parsingType3Font) {
                  if (
                    (((o = sj.createRawMask({
                      imgArray: r,
                      width: B,
                      height: h,
                      imageIsFromDecodeStream: t instanceof es,
                      inverseDecode: Q?.[0] > 0,
                      interpolate: A,
                    })).cached = !!s),
                    (I = [o]),
                    a.addImageOps(83, I, n),
                    s)
                  ) {
                    let A = { fn: 83, args: I, optionalContent: n };
                    g.set(s, C, A),
                      C && this._regionalImageCache.set(null, C, A);
                  }
                  return;
                }
                if (
                  (o = await sj.createMask({
                    imgArray: r,
                    width: B,
                    height: h,
                    imageIsFromDecodeStream: t instanceof es,
                    inverseDecode: Q?.[0] > 0,
                    interpolate: A,
                    isOffscreenCanvasSupported:
                      this.options.isOffscreenCanvasSupported,
                  })).isSingleOpaquePixel
                ) {
                  if ((a.addImageOps(90, [], n), s)) {
                    let A = { fn: 90, args: [], optionalContent: n };
                    g.set(s, C, A),
                      C && this._regionalImageCache.set(null, C, A);
                  }
                  return;
                }
                let c = `mask_${this.idFactory.createObjId()}`;
                if (
                  (a.addDependency(c),
                  (o.dataLen = o.bitmap
                    ? o.width * o.height * 4
                    : o.data.length),
                  this._sendImgData(c, o),
                  (I = [
                    {
                      data: c,
                      width: o.width,
                      height: o.height,
                      interpolate: o.interpolate,
                      count: 1,
                    },
                  ]),
                  a.addImageOps(83, I, n),
                  s)
                ) {
                  let A = { objId: c, fn: 83, args: I, optionalContent: n };
                  g.set(s, C, A), C && this._regionalImageCache.set(null, C, A);
                }
                return;
              }
              if (i && B + h < 200 && !l.has('SMask') && !l.has('Mask')) {
                try {
                  let s = new sj({
                    xref: this.xref,
                    res: A,
                    image: t,
                    isInline: i,
                    pdfFunctionFactory: this._pdfFunctionFactory,
                    localColorSpaceCache: r,
                  });
                  (o = await s.createImageData(!0, !1)),
                    (a.isOffscreenCanvasSupported =
                      this.options.isOffscreenCanvasSupported),
                    a.addImageOps(86, [o], n);
                } catch (t) {
                  let A = `Unable to decode inline image: "${t}".`;
                  if (!this.options.ignoreErrors) throw Error(A);
                  m(A);
                }
                return;
              }
              let c = `img_${this.idFactory.createObjId()}`,
                E = !1;
              if (
                (this.parsingType3Font
                  ? (c = `${this.idFactory.getDocId()}_type3_${c}`)
                  : s &&
                    C &&
                    (E = this.globalImageCache.shouldCache(
                      C,
                      this.pageIndex
                    )) &&
                    (w(!i, 'Cannot cache an inline image globally.'),
                    (c = `${this.idFactory.getDocId()}_${c}`)),
                a.addDependency(c),
                (I = [c, B, h]),
                a.addImageOps(85, I, n),
                E)
              ) {
                if (this.globalImageCache.hasDecodeFailed(C)) {
                  this.globalImageCache.setData(C, {
                    objId: c,
                    fn: 85,
                    args: I,
                    optionalContent: n,
                    byteSize: 0,
                  }),
                    this._sendImgData(c, null, E);
                  return;
                }
                if (B * h > 25e4 || l.has('SMask') || l.has('Mask')) {
                  let A = await this.handler.sendWithPromise('commonobj', [
                    c,
                    'CopyLocalImage',
                    { imageRef: C },
                  ]);
                  if (A) {
                    this.globalImageCache.setData(C, {
                      objId: c,
                      fn: 85,
                      args: I,
                      optionalContent: n,
                      byteSize: 0,
                    }),
                      this.globalImageCache.addByteSize(C, A);
                    return;
                  }
                }
              }
              if (
                (sj
                  .buildImage({
                    xref: this.xref,
                    res: A,
                    image: t,
                    isInline: i,
                    pdfFunctionFactory: this._pdfFunctionFactory,
                    localColorSpaceCache: r,
                  })
                  .then(
                    async (A) => (
                      ((o = await A.createImageData(
                        !1,
                        this.options.isOffscreenCanvasSupported
                      )).dataLen = o.bitmap
                        ? o.width * o.height * 4
                        : o.data.length),
                      (o.ref = C),
                      E && this.globalImageCache.addByteSize(C, o.dataLen),
                      this._sendImgData(c, o, E)
                    )
                  )
                  .catch(
                    (A) => (
                      m(`Unable to decode image "${c}": "${A}".`),
                      C && this.globalImageCache.addDecodeFailed(C),
                      this._sendImgData(c, null, E)
                    )
                  ),
                s)
              ) {
                let A = { objId: c, fn: 85, args: I, optionalContent: n };
                g.set(s, C, A),
                  C &&
                    (this._regionalImageCache.set(null, C, A),
                    E &&
                      this.globalImageCache.setData(C, {
                        objId: c,
                        fn: 85,
                        args: I,
                        optionalContent: n,
                        byteSize: 0,
                      }));
              }
            }
            handleSMask(A, t, i, a, s, g) {
              let r = A.get('G'),
                n = { subtype: A.get('S').name, backdrop: A.get('BC') },
                o = A.get('TR');
              if (sQ(o)) {
                let A = this._pdfFunctionFactory.create(o),
                  t = new Uint8Array(256),
                  i = new Float32Array(1);
                for (let a = 0; a < 256; a++)
                  (i[0] = a / 255), A(i, 0, i, 0), (t[a] = (255 * i[0]) | 0);
                n.transferMap = t;
              }
              return this.buildFormXObject(t, r, n, i, a, s.state.clone(), g);
            }
            handleTransferFunction(A) {
              let t;
              if (Array.isArray(A)) t = A;
              else {
                if (!sQ(A)) return null;
                t = [A];
              }
              let i = [],
                a = 0,
                s = 0;
              for (let A of t) {
                let t = this.xref.fetchIfRef(A);
                if ((a++, An(t, 'Identity'))) {
                  i.push(null);
                  continue;
                }
                if (!sQ(t)) return null;
                let g = this._pdfFunctionFactory.create(t),
                  r = new Uint8Array(256),
                  n = new Float32Array(1);
                for (let A = 0; A < 256; A++)
                  (n[0] = A / 255), g(n, 0, n, 0), (r[A] = (255 * n[0]) | 0);
                i.push(r), s++;
              }
              return (1 !== a && 4 !== a) || 0 === s ? null : i;
            }
            handleTilingType(A, t, i, a, s, g, r, n) {
              let o = new sX(),
                I = Aa.merge({
                  xref: this.xref,
                  dictArray: [s.get('Resources'), i],
                });
              return this.getOperatorList({
                stream: a,
                task: r,
                resources: I,
                operatorList: o,
              })
                .then(function () {
                  let i = o.getIR(),
                    a = af(i, s, t);
                  g.addDependencies(o.dependencies),
                    g.addOp(A, a),
                    s.objId &&
                      n.set(null, s.objId, { operatorListIR: i, dict: s });
                })
                .catch((A) => {
                  if (!(A instanceof U)) {
                    if (!this.options.ignoreErrors) throw A;
                    m(`handleTilingType - ignoring pattern: "${A}".`);
                  }
                });
            }
            async handleSetFont(A, t, i, a, s, g, r = null, n = null) {
              let o = t?.[0] instanceof Ae ? t[0].name : null,
                I = await this.loadFont(o, i, A, r, n);
              if (I.font.isType3Font)
                try {
                  await I.loadType3Data(this, A, s),
                    a.addDependencies(I.type3Dependencies);
                } catch (A) {
                  I = new s2({
                    loadedName: 'g_font_error',
                    font: new al(`Type3 font load error: ${A}`),
                    dict: I.font,
                    evaluatorOptions: this.options,
                  });
                }
              return (g.font = I.font), I.send(this.handler), I.loadedName;
            }
            handleText(A, t) {
              let i = t.font,
                a = i.charsToGlyphs(A);
              return (
                i.data &&
                  (4 & t.textRenderingMode ||
                    'Pattern' === t.fillColorSpace.name ||
                    i.disableFontFace ||
                    this.options.disableFontFace) &&
                  s1.buildFontPaths(i, a, this.handler, this.options),
                a
              );
            }
            ensureStateFont(A) {
              if (A.font) return;
              let t = new x(
                'Missing setFont (Tf) operator before text rendering operator.'
              );
              if (!this.options.ignoreErrors) throw t;
              m(`ensureStateFont: "${t}".`);
            }
            async setGState({
              resources: A,
              gState: t,
              operatorList: i,
              cacheKey: a,
              task: s,
              stateManager: g,
              localGStateCache: r,
              localColorSpaceCache: n,
            }) {
              let o = t.objId,
                I = !0,
                l = [],
                C = Promise.resolve();
              for (let a of t.getKeys()) {
                let r = t.get(a);
                switch (a) {
                  case 'Type':
                    break;
                  case 'LW':
                  case 'LC':
                  case 'LJ':
                  case 'ML':
                  case 'D':
                  case 'RI':
                  case 'FL':
                  case 'CA':
                  case 'ca':
                    l.push([a, r]);
                    break;
                  case 'Font':
                    (I = !1),
                      (C = C.then(() =>
                        this.handleSetFont(A, null, r[0], i, s, g.state).then(
                          function (A) {
                            i.addDependency(A), l.push([a, [A, r[1]]]);
                          }
                        )
                      ));
                    break;
                  case 'BM':
                    l.push([
                      a,
                      (function A(t, i = !1) {
                        if (Array.isArray(t)) {
                          for (let i of t) {
                            let t = A(i, !0);
                            if (t) return t;
                          }
                          return (
                            m(`Unsupported blend mode Array: ${t}`),
                            'source-over'
                          );
                        }
                        if (!(t instanceof Ae)) return i ? null : 'source-over';
                        switch (t.name) {
                          case 'Normal':
                          case 'Compatible':
                            return 'source-over';
                          case 'Multiply':
                            return 'multiply';
                          case 'Screen':
                            return 'screen';
                          case 'Overlay':
                            return 'overlay';
                          case 'Darken':
                            return 'darken';
                          case 'Lighten':
                            return 'lighten';
                          case 'ColorDodge':
                            return 'color-dodge';
                          case 'ColorBurn':
                            return 'color-burn';
                          case 'HardLight':
                            return 'hard-light';
                          case 'SoftLight':
                            return 'soft-light';
                          case 'Difference':
                            return 'difference';
                          case 'Exclusion':
                            return 'exclusion';
                          case 'Hue':
                            return 'hue';
                          case 'Saturation':
                            return 'saturation';
                          case 'Color':
                            return 'color';
                          case 'Luminosity':
                            return 'luminosity';
                        }
                        return i
                          ? null
                          : (m(`Unsupported blend mode: ${t.name}`),
                            'source-over');
                      })(r),
                    ]);
                    break;
                  case 'SMask':
                    if (An(r, 'None')) {
                      l.push([a, !1]);
                      break;
                    }
                    r instanceof Aa
                      ? ((I = !1),
                        (C = C.then(() => this.handleSMask(r, A, i, s, g, n))),
                        l.push([a, !0]))
                      : m('Unsupported SMask type');
                    break;
                  case 'TR':
                    let o = this.handleTransferFunction(r);
                    l.push([a, o]);
                    break;
                  case 'OP':
                  case 'op':
                  case 'OPM':
                  case 'BG':
                  case 'BG2':
                  case 'UCR':
                  case 'UCR2':
                  case 'TR2':
                  case 'HT':
                  case 'SM':
                  case 'SA':
                  case 'AIS':
                  case 'TK':
                    p('graphic state operator ' + a);
                    break;
                  default:
                    p('Unknown graphic state operator ' + a);
                }
              }
              await C, l.length > 0 && i.addOp(9, [l]), I && r.set(a, o, l);
            }
            loadFont(A, t, i, a = null, s = null) {
              let g, r, n;
              let o = async () =>
                new s2({
                  loadedName: 'g_font_error',
                  font: new al(`Font "${A}" is not available.`),
                  dict: t,
                  evaluatorOptions: this.options,
                });
              if (t) t instanceof As && (g = t);
              else {
                let t = i.get('Font');
                t && (g = t.getRaw(A));
              }
              if (g) {
                if (this.type3FontRefs?.has(g)) return o();
                if (this.fontCache.has(g)) return this.fontCache.get(g);
                try {
                  t = this.xref.fetchIfRef(g);
                } catch (A) {
                  m(`loadFont - lookup failed: "${A}".`);
                }
              }
              if (!(t instanceof Aa)) {
                if (!this.options.ignoreErrors && !this.parsingType3Font)
                  return m(`Font "${A}" is not available.`), o();
                m(
                  `Font "${A}" is not available -- attempting to fallback to a default font.`
                ),
                  (t = a || s1.fallbackFontDict);
              }
              if (t.cacheKey && this.fontCache.has(t.cacheKey))
                return this.fontCache.get(t.cacheKey);
              let { promise: I, resolve: l } = Promise.withResolvers();
              try {
                (r = this.preEvaluateFont(t)).cssFontInfo = s;
              } catch (A) {
                return m(`loadFont - preEvaluateFont failed: "${A}".`), o();
              }
              let { descriptor: C, hash: B } = r,
                h = g instanceof As;
              if (B && C instanceof Aa) {
                let A = (C.fontAliases ||= Object.create(null));
                if (A[B]) {
                  let t = A[B].aliasRef;
                  if (h && t && this.fontCache.has(t))
                    return this.fontCache.putAlias(g, t), this.fontCache.get(g);
                } else A[B] = { fontID: this.idFactory.createFontId() };
                h && (A[B].aliasRef = g), (n = A[B].fontID);
              } else n = this.idFactory.createFontId();
              return (
                w(
                  n?.startsWith('f'),
                  'The "fontID" must be (correctly) defined.'
                ),
                h
                  ? this.fontCache.put(g, I)
                  : ((t.cacheKey = `cacheKey_${n}`),
                    this.fontCache.put(t.cacheKey, I)),
                (t.loadedName = `${this.idFactory.getDocId()}_${n}`),
                this.translateFont(r)
                  .then((A) => {
                    l(
                      new s2({
                        loadedName: t.loadedName,
                        font: A,
                        dict: t,
                        evaluatorOptions: this.options,
                      })
                    );
                  })
                  .catch((A) => {
                    m(`loadFont - translateFont failed: "${A}".`),
                      l(
                        new s2({
                          loadedName: t.loadedName,
                          font: new al(A instanceof Error ? A.message : A),
                          dict: t,
                          evaluatorOptions: this.options,
                        })
                      );
                  }),
                I
              );
            }
            buildPath(A, t, i, a = !1) {
              let s = A.length - 1;
              if ((i || (i = []), s < 0 || 91 !== A.fnArray[s])) {
                let s;
                switch (
                  (a &&
                    (m(
                      `Encountered path operator "${t}" inside of a text object.`
                    ),
                    A.addOp(10, null)),
                  t)
                ) {
                  case 19:
                    let g = i[0] + i[2],
                      r = i[1] + i[3];
                    s = [
                      Math.min(i[0], g),
                      Math.min(i[1], r),
                      Math.max(i[0], g),
                      Math.max(i[1], r),
                    ];
                    break;
                  case 13:
                  case 14:
                    s = [i[0], i[1], i[0], i[1]];
                    break;
                  default:
                    s = [1 / 0, 1 / 0, -1 / 0, -1 / 0];
                }
                A.addOp(91, [[t], i, s]), a && A.addOp(11, null);
              } else {
                let a = A.argsArray[s];
                a[0].push(t), a[1].push(...i);
                let g = a[2];
                switch (t) {
                  case 19:
                    let r = i[0] + i[2],
                      n = i[1] + i[3];
                    (g[0] = Math.min(g[0], i[0], r)),
                      (g[1] = Math.min(g[1], i[1], n)),
                      (g[2] = Math.max(g[2], i[0], r)),
                      (g[3] = Math.max(g[3], i[1], n));
                    break;
                  case 13:
                  case 14:
                    (g[0] = Math.min(g[0], i[0])),
                      (g[1] = Math.min(g[1], i[1])),
                      (g[2] = Math.max(g[2], i[0])),
                      (g[3] = Math.max(g[3], i[1]));
                }
              }
            }
            parseColorSpace({ cs: A, resources: t, localColorSpaceCache: i }) {
              return Az.parseAsync({
                cs: A,
                xref: this.xref,
                resources: t,
                pdfFunctionFactory: this._pdfFunctionFactory,
                localColorSpaceCache: i,
              }).catch((A) => {
                if (A instanceof U) return null;
                if (this.options.ignoreErrors)
                  return (
                    m(`parseColorSpace - ignoring ColorSpace: "${A}".`), null
                  );
                throw A;
              });
            }
            parseShading({
              shading: A,
              resources: t,
              localColorSpaceCache: i,
              localShadingPatternCache: a,
            }) {
              let s,
                g = a.get(A);
              if (g) return g;
              try {
                s = aC
                  .parseShading(A, this.xref, t, this._pdfFunctionFactory, i)
                  .getIR();
              } catch (t) {
                if (t instanceof U) return null;
                if (this.options.ignoreErrors)
                  return (
                    m(`parseShading - ignoring shading: "${t}".`),
                    a.set(A, null),
                    null
                  );
                throw t;
              }
              return (
                (g = `pattern_${this.idFactory.createObjId()}`),
                this.parsingType3Font &&
                  (g = `${this.idFactory.getDocId()}_type3_${g}`),
                a.set(A, g),
                this.parsingType3Font
                  ? this.handler.send('commonobj', [g, 'Pattern', s])
                  : this.handler.send('obj', [g, this.pageIndex, 'Pattern', s]),
                g
              );
            }
            handleColorN(A, t, i, a, s, g, r, n, o, I) {
              let l = i.pop();
              if (l instanceof Ae) {
                let C = s.getRaw(l.name),
                  B = C instanceof As && o.getByRef(C);
                if (B)
                  try {
                    let s = a.base ? a.base.getRgb(i, 0) : null,
                      g = af(B.operatorListIR, B.dict, s);
                    A.addOp(t, g);
                    return;
                  } catch {}
                let h = this.xref.fetchIfRef(C);
                if (h) {
                  let s = h instanceof AC ? h.dict : h,
                    l = s.get('PatternType');
                  if (1 === l) {
                    let n = a.base ? a.base.getRgb(i, 0) : null;
                    return this.handleTilingType(t, n, g, h, s, A, r, o);
                  }
                  if (2 === l) {
                    let i = s.get('Shading'),
                      a = this.parseShading({
                        shading: i,
                        resources: g,
                        localColorSpaceCache: n,
                        localShadingPatternCache: I,
                      });
                    if (a) {
                      let i = AF(s.getArray('Matrix'), null);
                      A.addOp(t, ['Shading', a, i]);
                    }
                    return;
                  }
                  throw new x(`Unknown PatternType: ${l}`);
                }
              }
              throw new x(`Unknown PatternName: ${l}`);
            }
            _parseVisibilityExpression(A, t, i) {
              if (++t > 10) {
                m('Visibility expression is too deeply nested');
                return;
              }
              let a = A.length,
                s = this.xref.fetchIfRef(A[0]);
              if (!(a < 2) && s instanceof Ae) {
                switch (s.name) {
                  case 'And':
                  case 'Or':
                  case 'Not':
                    i.push(s.name);
                    break;
                  default:
                    m(`Invalid operator ${s.name} in visibility expression`);
                    return;
                }
                for (let s = 1; s < a; s++) {
                  let a = A[s],
                    g = this.xref.fetchIfRef(a);
                  if (Array.isArray(g)) {
                    let A = [];
                    i.push(A), this._parseVisibilityExpression(g, t, A);
                  } else a instanceof As && i.push(a.toString());
                }
              } else m('Invalid visibility expression');
            }
            async parseMarkedContentProps(A, t) {
              let i;
              if (A instanceof Ae) i = t.get('Properties').get(A.name);
              else {
                if (!(A instanceof Aa))
                  throw new x('Optional content properties malformed.');
                i = A;
              }
              let a = i.get('Type')?.name;
              if ('OCG' === a) return { type: a, id: i.objId };
              if ('OCMD' === a) {
                let A = i.get('VE');
                if (Array.isArray(A)) {
                  let t = [];
                  if ((this._parseVisibilityExpression(A, 0, t), t.length > 0))
                    return { type: 'OCMD', expression: t };
                }
                let t = i.get('OCGs');
                if (Array.isArray(t) || t instanceof Aa) {
                  let A = [];
                  if (Array.isArray(t)) for (let i of t) A.push(i.toString());
                  else A.push(t.objId);
                  return {
                    type: a,
                    ids: A,
                    policy: i.get('P') instanceof Ae ? i.get('P').name : null,
                    expression: null,
                  };
                }
                if (t instanceof As) return { type: a, id: t.toString() };
              }
              return null;
            }
            getOperatorList({
              stream: A,
              task: t,
              resources: i,
              operatorList: a,
              initialState: s = null,
              fallbackFontDict: g = null,
            }) {
              if (((i ||= Aa.empty), (s ||= new s5()), !a))
                throw Error(
                  'getOperatorList: missing "operatorList" parameter'
                );
              let r = this,
                n = this.xref,
                o = !1,
                I = new ss(),
                l = new sg(),
                C = new sn(),
                B = new so(),
                h = new Map(),
                Q = i.get('XObject') || Aa.empty,
                c = i.get('Pattern') || Aa.empty,
                E = new s9(s),
                u = new s8(A, n, E),
                d = new s0();
              function f(A) {
                for (let A = 0, t = u.savedStatesDepth; A < t; A++)
                  a.addOp(11, []);
              }
              return new Promise(function A(s, y) {
                let w, D, b, k, F, S;
                let R = function (t) {
                  Promise.all([t, a.ready]).then(function () {
                    try {
                      A(s, y);
                    } catch (A) {
                      y(A);
                    }
                  }, y);
                };
                t.ensureNotTerminated(), d.reset();
                let G = {};
                for (; !(w = d.check()) && ((G.args = null), u.read(G)); ) {
                  let A = G.args,
                    s = G.fn;
                  switch (0 | s) {
                    case 66:
                      if (((S = A[0] instanceof Ae), (F = A[0].name), S)) {
                        let t = I.getByName(F);
                        if (t) {
                          s$(a, t), (A = null);
                          continue;
                        }
                      }
                      R(
                        new Promise(function (A, s) {
                          if (!S)
                            throw new x('XObject must be referred to by name.');
                          let g = Q.getRaw(F);
                          if (g instanceof As) {
                            let t =
                              I.getByRef(g) ||
                              r._regionalImageCache.getByRef(g);
                            if (t) {
                              s$(a, t), A();
                              return;
                            }
                            let i = r.globalImageCache.getData(g, r.pageIndex);
                            if (i) {
                              a.addDependency(i.objId),
                                a.addImageOps(i.fn, i.args, i.optionalContent),
                                A();
                              return;
                            }
                            g = n.fetch(g);
                          }
                          if (!(g instanceof AC))
                            throw new x('XObject should be a stream');
                          let o = g.dict.get('Subtype');
                          if (!(o instanceof Ae))
                            throw new x('XObject should have a Name subtype');
                          if ('Form' !== o.name) {
                            if ('Image' !== o.name) {
                              if ('PS' !== o.name)
                                throw new x(
                                  `Unhandled XObject subtype ${o.name}`
                                );
                              p('Ignored XObject subtype PS'), A();
                            } else
                              r.buildPaintImageXObject({
                                resources: i,
                                image: g,
                                operatorList: a,
                                cacheKey: F,
                                localImageCache: I,
                                localColorSpaceCache: l,
                              }).then(A, s);
                          } else
                            E.save(),
                              r
                                .buildFormXObject(
                                  i,
                                  g,
                                  null,
                                  a,
                                  t,
                                  E.state.clone(),
                                  l
                                )
                                .then(function () {
                                  E.restore(), A();
                                }, s);
                        }).catch(function (A) {
                          if (!(A instanceof U)) {
                            if (!r.options.ignoreErrors) throw A;
                            m(`getOperatorList - ignoring XObject: "${A}".`);
                          }
                        })
                      );
                      return;
                    case 37:
                      var N = A[1];
                      R(
                        r
                          .handleSetFont(i, A, null, a, t, E.state, g)
                          .then(function (A) {
                            a.addDependency(A), a.addOp(37, [A, N]);
                          })
                      );
                      return;
                    case 31:
                      o = !0;
                      break;
                    case 32:
                      o = !1;
                      break;
                    case 65:
                      var M = A[0].cacheKey;
                      if (M) {
                        let t = I.getByName(M);
                        if (t) {
                          s$(a, t), (A = null);
                          continue;
                        }
                      }
                      R(
                        r.buildPaintImageXObject({
                          resources: i,
                          image: A[0],
                          isInline: !0,
                          operatorList: a,
                          cacheKey: M,
                          localImageCache: I,
                          localColorSpaceCache: l,
                        })
                      );
                      return;
                    case 44:
                      if (!E.state.font) {
                        r.ensureStateFont(E.state);
                        continue;
                      }
                      A[0] = r.handleText(A[0], E.state);
                      break;
                    case 45:
                      if (!E.state.font) {
                        r.ensureStateFont(E.state);
                        continue;
                      }
                      var J = [],
                        L = E.state;
                      for (let t of A[0])
                        'string' == typeof t
                          ? J.push(...r.handleText(t, L))
                          : 'number' == typeof t && J.push(t);
                      (A[0] = J), (s = 44);
                      break;
                    case 46:
                      if (!E.state.font) {
                        r.ensureStateFont(E.state);
                        continue;
                      }
                      a.addOp(43),
                        (A[0] = r.handleText(A[0], E.state)),
                        (s = 44);
                      break;
                    case 47:
                      if (!E.state.font) {
                        r.ensureStateFont(E.state);
                        continue;
                      }
                      a.addOp(43),
                        a.addOp(34, [A.shift()]),
                        a.addOp(33, [A.shift()]),
                        (A[0] = r.handleText(A[0], E.state)),
                        (s = 44);
                      break;
                    case 38:
                      E.state.textRenderingMode = A[0];
                      break;
                    case 51: {
                      let t = Az.getCached(A[0], n, l);
                      if (t) {
                        E.state.fillColorSpace = t;
                        continue;
                      }
                      R(
                        r
                          .parseColorSpace({
                            cs: A[0],
                            resources: i,
                            localColorSpaceCache: l,
                          })
                          .then(function (A) {
                            E.state.fillColorSpace = A || Az.singletons.gray;
                          })
                      );
                      return;
                    }
                    case 50: {
                      let t = Az.getCached(A[0], n, l);
                      if (t) {
                        E.state.strokeColorSpace = t;
                        continue;
                      }
                      R(
                        r
                          .parseColorSpace({
                            cs: A[0],
                            resources: i,
                            localColorSpaceCache: l,
                          })
                          .then(function (A) {
                            E.state.strokeColorSpace = A || Az.singletons.gray;
                          })
                      );
                      return;
                    }
                    case 54:
                      (A = (k = E.state.fillColorSpace).getRgb(A, 0)), (s = 59);
                      break;
                    case 52:
                      (A = (k = E.state.strokeColorSpace).getRgb(A, 0)),
                        (s = 58);
                      break;
                    case 57:
                      (E.state.fillColorSpace = Az.singletons.gray),
                        (A = Az.singletons.gray.getRgb(A, 0)),
                        (s = 59);
                      break;
                    case 56:
                      (E.state.strokeColorSpace = Az.singletons.gray),
                        (A = Az.singletons.gray.getRgb(A, 0)),
                        (s = 58);
                      break;
                    case 61:
                      (E.state.fillColorSpace = Az.singletons.cmyk),
                        (A = Az.singletons.cmyk.getRgb(A, 0)),
                        (s = 59);
                      break;
                    case 60:
                      (E.state.strokeColorSpace = Az.singletons.cmyk),
                        (A = Az.singletons.cmyk.getRgb(A, 0)),
                        (s = 58);
                      break;
                    case 59:
                      (E.state.fillColorSpace = Az.singletons.rgb),
                        (A = Az.singletons.rgb.getRgb(A, 0));
                      break;
                    case 58:
                      (E.state.strokeColorSpace = Az.singletons.rgb),
                        (A = Az.singletons.rgb.getRgb(A, 0));
                      break;
                    case 55:
                      if (!(k = E.state.patternFillColorSpace)) {
                        (A = []), (s = 93);
                        break;
                      }
                      if ('Pattern' === k.name) {
                        R(r.handleColorN(a, 55, A, k, c, i, t, l, B, h));
                        return;
                      }
                      (A = k.getRgb(A, 0)), (s = 59);
                      break;
                    case 53:
                      if (!(k = E.state.patternStrokeColorSpace)) {
                        (A = []), (s = 92);
                        break;
                      }
                      if ('Pattern' === k.name) {
                        R(r.handleColorN(a, 53, A, k, c, i, t, l, B, h));
                        return;
                      }
                      (A = k.getRgb(A, 0)), (s = 58);
                      break;
                    case 62:
                      let u;
                      try {
                        let t = i.get('Shading');
                        if (!t) throw new x('No shading resource found');
                        if (!(u = t.get(A[0].name)))
                          throw new x('No shading object found');
                      } catch (A) {
                        if (A instanceof U) continue;
                        if (r.options.ignoreErrors) {
                          m(`getOperatorList - ignoring Shading: "${A}".`);
                          continue;
                        }
                        throw A;
                      }
                      let d = r.parseShading({
                        shading: u,
                        resources: i,
                        localColorSpaceCache: l,
                        localShadingPatternCache: h,
                      });
                      if (!d) continue;
                      (A = [d]), (s = 62);
                      break;
                    case 9:
                      if (((S = A[0] instanceof Ae), (F = A[0].name), S)) {
                        let t = C.getByName(F);
                        if (t) {
                          t.length > 0 && a.addOp(9, [t]), (A = null);
                          continue;
                        }
                      }
                      R(
                        new Promise(function (A, s) {
                          if (!S)
                            throw new x('GState must be referred to by name.');
                          let g = i.get('ExtGState');
                          if (!(g instanceof Aa))
                            throw new x('ExtGState should be a dictionary.');
                          let n = g.get(F);
                          if (!(n instanceof Aa))
                            throw new x('GState should be a dictionary.');
                          r.setGState({
                            resources: i,
                            gState: n,
                            operatorList: a,
                            cacheKey: F,
                            task: t,
                            stateManager: E,
                            localGStateCache: C,
                            localColorSpaceCache: l,
                          }).then(A, s);
                        }).catch(function (A) {
                          if (!(A instanceof U)) {
                            if (!r.options.ignoreErrors) throw A;
                            m(`getOperatorList - ignoring ExtGState: "${A}".`);
                          }
                        })
                      );
                      return;
                    case 13:
                    case 14:
                    case 15:
                    case 16:
                    case 17:
                    case 18:
                    case 19:
                      r.buildPath(a, s, A, o);
                      continue;
                    case 67:
                    case 68:
                    case 72:
                    case 73:
                      continue;
                    case 70:
                      if (!(A[0] instanceof Ae)) {
                        m(
                          `Expected name for beginMarkedContentProps arg0=${A[0]}`
                        ),
                          a.addOp(70, ['OC', null]);
                        continue;
                      }
                      if ('OC' === A[0].name) {
                        R(
                          r
                            .parseMarkedContentProps(A[1], i)
                            .then((A) => {
                              a.addOp(70, ['OC', A]);
                            })
                            .catch((A) => {
                              if (!(A instanceof U)) {
                                if (!r.options.ignoreErrors) throw A;
                                m(
                                  `getOperatorList - ignoring beginMarkedContentProps: "${A}".`
                                ),
                                  a.addOp(70, ['OC', null]);
                              }
                            })
                        );
                        return;
                      }
                      A = [
                        A[0].name,
                        A[1] instanceof Aa ? A[1].get('MCID') : null,
                      ];
                      break;
                    default:
                      if (null !== A) {
                        for (
                          D = 0, b = A.length;
                          D < b && !(A[D] instanceof Aa);
                          D++
                        );
                        if (D < b) {
                          m('getOperatorList - ignoring operator: ' + s);
                          continue;
                        }
                      }
                  }
                  a.addOp(s, A);
                }
                w ? R(s_) : (f(), s());
              }).catch((A) => {
                if (!(A instanceof U)) {
                  if (!this.options.ignoreErrors) throw A;
                  m(
                    `getOperatorList - ignoring errors during "${t.name}" task: "${A}".`
                  ),
                    f();
                }
              });
            }
            getTextContent({
              stream: A,
              task: t,
              resources: i,
              stateManager: a = null,
              includeMarkedContent: s = !1,
              sink: g,
              seenStyles: r = new Set(),
              viewBox: n,
              lang: o = null,
              markedContentData: C = null,
              disableNormalization: B = !1,
              keepWhiteSpace: h = !1,
            }) {
              let Q;
              (i ||= Aa.empty),
                (a ||= new s9(new s3())),
                s && (C ||= { level: 0 });
              let c = { items: [], styles: Object.create(null), lang: o },
                E = {
                  initialized: !1,
                  str: [],
                  totalWidth: 0,
                  totalHeight: 0,
                  width: 0,
                  height: 0,
                  vertical: !1,
                  prevTransform: null,
                  textAdvanceScale: 0,
                  spaceInFlowMin: 0,
                  spaceInFlowMax: 0,
                  trackingSpaceMin: 1 / 0,
                  negativeSpaceMax: -1 / 0,
                  notASpace: -1 / 0,
                  transform: null,
                  fontName: null,
                  hasEOL: !1,
                },
                u = [' ', ' '],
                d = 0;
              function f(A) {
                let t = (d + 1) % 2,
                  i = ' ' !== u[d] && ' ' === u[t];
                return (u[d] = A), (d = t), !h && i;
              }
              function p() {
                return !h && ' ' !== u[d] && ' ' === u[(d + 1) % 2];
              }
              function y() {
                (u[0] = u[1] = ' '), (d = 0);
              }
              let w = this,
                D = this.xref,
                b = [],
                k = null,
                F = new ss(),
                S = new sn(),
                R = new s8(A, D, a);
              function G({
                width: A = 0,
                height: t = 0,
                transform: i = E.prevTransform,
                fontName: a = E.fontName,
              }) {
                c.items.push({
                  str: ' ',
                  dir: 'ltr',
                  width: A,
                  height: t,
                  transform: i,
                  fontName: a,
                  hasEOL: !1,
                });
              }
              function N() {
                let A = Q.font,
                  t = [
                    Q.fontSize * Q.textHScale,
                    0,
                    0,
                    Q.fontSize,
                    0,
                    Q.textRise,
                  ];
                if (
                  A.isType3Font &&
                  (Q.fontSize <= 1 || A.isCharBBox) &&
                  !Z(Q.fontMatrix, l)
                ) {
                  let i = A.bbox[3] - A.bbox[1];
                  i > 0 && (t[3] *= i * Q.fontMatrix[3]);
                }
                return v.transform(Q.ctm, v.transform(Q.textMatrix, t));
              }
              async function M(A, a) {
                let s = await w.loadFont(A, a, i);
                if (s.font.isType3Font)
                  try {
                    await s.loadType3Data(w, i, t);
                  } catch {}
                (Q.loadedName = s.loadedName),
                  (Q.font = s.font),
                  (Q.fontMatrix = s.font.fontMatrix || l);
              }
              function J(A, t, i) {
                let a = Math.hypot(i[0], i[1]);
                return [(i[0] * A + i[1] * t) / a, (i[2] * A + i[3] * t) / a];
              }
              function L(A) {
                let t = N(),
                  i = t[4],
                  a = t[5];
                if (Q.font?.vertical) {
                  if (i < n[0] || i > n[2] || a + A < n[1] || a > n[3])
                    return !1;
                } else if (i + A < n[0] || i > n[2] || a < n[1] || a > n[3])
                  return !1;
                if (!Q.font || !E.prevTransform) return !0;
                let s = E.prevTransform[4],
                  g = E.prevTransform[5];
                if (s === i && g === a) return !0;
                let r = -1;
                switch (
                  (t[0] && 0 === t[1] && 0 === t[2]
                    ? (r = t[0] > 0 ? 0 : 180)
                    : t[1] &&
                      0 === t[0] &&
                      0 === t[3] &&
                      (r = t[1] > 0 ? 90 : 270),
                  r)
                ) {
                  case 0:
                    break;
                  case 90:
                    ([i, a] = [a, i]), ([s, g] = [g, s]);
                    break;
                  case 180:
                    [i, a, s, g] = [-i, -a, -s, -g];
                    break;
                  case 270:
                    ([i, a] = [-a, -i]), ([s, g] = [-g, -s]);
                    break;
                  default:
                    ([i, a] = J(i, a, t)), ([s, g] = J(s, g, E.prevTransform));
                }
                if (Q.font.vertical) {
                  let A = (g - a) / E.textAdvanceScale,
                    t = i - s,
                    r = Math.sign(E.height);
                  return (
                    A < r * E.negativeSpaceMax
                      ? Math.abs(t) > 0.5 * E.width
                        ? Y()
                        : (y(), q())
                      : Math.abs(t) > E.width
                        ? Y()
                        : (A <= r * E.notASpace && y(),
                          A <= r * E.trackingSpaceMin
                            ? p()
                              ? (y(), q(), G({ height: Math.abs(A) }))
                              : (E.height += A)
                            : K(A, E.prevTransform, r) ||
                              (0 === E.str.length
                                ? (y(), G({ height: Math.abs(A) }))
                                : (E.height += A)),
                          Math.abs(t) > 0.25 * E.width && q()),
                    !0
                  );
                }
                let o = (i - s) / E.textAdvanceScale,
                  I = a - g,
                  l = Math.sign(E.width);
                return (
                  o < l * E.negativeSpaceMax
                    ? Math.abs(I) > 0.5 * E.height
                      ? Y()
                      : (y(), q())
                    : Math.abs(I) > E.height
                      ? Y()
                      : (o <= l * E.notASpace && y(),
                        o <= l * E.trackingSpaceMin
                          ? p()
                            ? (y(), q(), G({ width: Math.abs(o) }))
                            : (E.width += o)
                          : K(o, E.prevTransform, l) ||
                            (0 === E.str.length
                              ? (y(), G({ width: Math.abs(o) }))
                              : (E.width += o)),
                        Math.abs(I) > 0.25 * E.height && q()),
                  !0
                );
              }
              function H({ chars: A, extraSpacing: t }) {
                let i = Q.font;
                if (!A) {
                  let A = Q.charSpacing + t;
                  A &&
                    (i.vertical
                      ? Q.translateTextMatrix(0, -A)
                      : Q.translateTextMatrix(A * Q.textHScale, 0)),
                    h && L(0);
                  return;
                }
                let a = i.charsToGlyphs(A),
                  s = Q.fontMatrix[0] * Q.fontSize;
                for (let A = 0, g = a.length; A < g; A++) {
                  let n = a[A],
                    { category: o } = n;
                  if (o.isInvisibleFormatMark) continue;
                  let I = Q.charSpacing + (A + 1 === g ? t : 0),
                    l = n.width;
                  i.vertical && (l = n.vmetric ? n.vmetric[0] : -l);
                  let C = l * s;
                  if (!h && o.isWhitespace) {
                    i.vertical
                      ? ((I += -C + Q.wordSpacing),
                        Q.translateTextMatrix(0, -I))
                      : ((I += C + Q.wordSpacing),
                        Q.translateTextMatrix(I * Q.textHScale, 0)),
                      f(' ');
                    continue;
                  }
                  if (!o.isZeroWidthDiacritic && !L(C)) {
                    i.vertical
                      ? Q.translateTextMatrix(0, C)
                      : Q.translateTextMatrix(C * Q.textHScale, 0);
                    continue;
                  }
                  let B = (function () {
                    if (E.initialized) return E;
                    let { font: A, loadedName: t } = Q;
                    if (
                      !r.has(t) &&
                      (r.add(t),
                      (c.styles[t] = {
                        fontFamily: A.fallbackName,
                        ascent: A.ascent,
                        descent: A.descent,
                        vertical: A.vertical,
                      }),
                      w.options.fontExtraProperties && A.systemFontInfo)
                    ) {
                      let i = c.styles[t];
                      (i.fontSubstitution = A.systemFontInfo.css),
                        (i.fontSubstitutionLoadedName =
                          A.systemFontInfo.loadedName);
                    }
                    E.fontName = t;
                    let i = (E.transform = N());
                    A.vertical
                      ? ((E.width = E.totalWidth = Math.hypot(i[0], i[1])),
                        (E.height = E.totalHeight = 0),
                        (E.vertical = !0))
                      : ((E.width = E.totalWidth = 0),
                        (E.height = E.totalHeight = Math.hypot(i[2], i[3])),
                        (E.vertical = !1));
                    let a = Math.hypot(
                        Q.textLineMatrix[0],
                        Q.textLineMatrix[1]
                      ),
                      s = Math.hypot(Q.ctm[0], Q.ctm[1]);
                    E.textAdvanceScale = s * a;
                    let { fontSize: g } = Q;
                    return (
                      (E.trackingSpaceMin = 0.102 * g),
                      (E.notASpace = 0.03 * g),
                      (E.negativeSpaceMax = -0.2 * g),
                      (E.spaceInFlowMin = 0.102 * g),
                      (E.spaceInFlowMax = 0.6 * g),
                      (E.hasEOL = !1),
                      (E.initialized = !0),
                      E
                    );
                  })();
                  o.isZeroWidthDiacritic && (C = 0),
                    i.vertical
                      ? (Q.translateTextMatrix(0, C),
                        (C = Math.abs(C)),
                        (B.height += C))
                      : ((C *= Q.textHScale),
                        Q.translateTextMatrix(C, 0),
                        (B.width += C)),
                    C && (B.prevTransform = N());
                  let u = n.unicode;
                  f(u) && B.str.push(' '),
                    B.str.push(u),
                    I &&
                      (i.vertical
                        ? Q.translateTextMatrix(0, -I)
                        : Q.translateTextMatrix(I * Q.textHScale, 0));
                }
              }
              function Y() {
                y(),
                  E.initialized
                    ? ((E.hasEOL = !0), q())
                    : c.items.push({
                        str: '',
                        dir: 'ltr',
                        width: 0,
                        height: 0,
                        transform: N(),
                        fontName: Q.loadedName,
                        hasEOL: !0,
                      });
              }
              function K(A, t, i) {
                if (i * E.spaceInFlowMin <= A && A <= i * E.spaceInFlowMax)
                  return E.initialized && (y(), E.str.push(' ')), !1;
                let a = E.fontName,
                  s = 0;
                return (
                  E.vertical && ((s = A), (A = 0)),
                  q(),
                  y(),
                  G({
                    width: Math.abs(A),
                    height: Math.abs(s),
                    transform: t || N(),
                    fontName: a,
                  }),
                  !0
                );
              }
              function q() {
                E.initialized &&
                  E.str &&
                  (E.vertical
                    ? (E.totalHeight += E.height * E.textAdvanceScale)
                    : (E.totalWidth += E.width * E.textAdvanceScale),
                  c.items.push(
                    (function (A) {
                      var t;
                      let i = A.str.join('');
                      B ||
                        ((t = i),
                        X ||
                          ((X =
/*
  Pattern: unicodeEscapes
*/
                            /([\u00a0\u00b5\u037e\u0eb3\u2000-\u200a\u202f\u2126\ufb00-\ufb04\ufb06\ufb20-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufba1\ufba4-\ufba9\ufbae-\ufbb1\ufbd3-\ufbdc\ufbde-\ufbe7\ufbea-\ufbf8\ufbfc-\ufbfd\ufc00-\ufc5d\ufc64-\ufcf1\ufcf5-\ufd3d\ufd88\ufdf4\ufdfa-\ufdfb\ufe71\ufe77\ufe79\ufe7b\ufe7d]+)|(\ufb05+)/gu),
                          (V = new Map([['\ufb05', '\u017ft']]))),
                        (i = t.replaceAll(X, (A, t, i) =>
                          t ? t.normalize('NFKC') : V.get(i)
                        )));
                      let a = sx(i, -1, A.vertical);
                      return {
                        str: a.str,
                        dir: a.dir,
                        width: Math.abs(A.totalWidth),
                        height: Math.abs(A.totalHeight),
                        transform: A.transform,
                        fontName: A.fontName,
                        hasEOL: A.hasEOL,
                      };
                    })(E)
                  ),
                  (E.initialized = !1),
                  (E.str.length = 0));
              }
              function T(A = !1) {
                let t = c.items.length;
                0 === t ||
                  (A && t < 10) ||
                  (g.enqueue(c, t),
                  (c.items = []),
                  (c.styles = Object.create(null)));
              }
              let P = new s0();
              return new Promise(function A(l, u) {
                let d = function (t) {
                  T(!0),
                    Promise.all([t, g.ready]).then(function () {
                      try {
                        A(l, u);
                      } catch (A) {
                        u(A);
                      }
                    }, u);
                };
                t.ensureNotTerminated(), P.reset();
                let f = {},
                  p,
                  y = [];
                for (
                  ;
                  !(p = P.check()) && ((y.length = 0), (f.args = y), R.read(f));

                ) {
                  let A = Q;
                  Q = a.state;
                  let l = f.fn;
                  switch (((y = f.args), 0 | l)) {
                    case 37:
                      var G = y[0].name,
                        N = y[1];
                      if (Q.font && G === Q.fontName && N === Q.fontSize) break;
                      q(), (Q.fontName = G), (Q.fontSize = N), d(M(G, null));
                      return;
                    case 39:
                      Q.textRise = y[0];
                      break;
                    case 35:
                      Q.textHScale = y[0] / 100;
                      break;
                    case 36:
                      Q.leading = y[0];
                      break;
                    case 40:
                      Q.translateTextLineMatrix(y[0], y[1]),
                        (Q.textMatrix = Q.textLineMatrix.slice());
                      break;
                    case 41:
                      (Q.leading = -y[1]),
                        Q.translateTextLineMatrix(y[0], y[1]),
                        (Q.textMatrix = Q.textLineMatrix.slice());
                      break;
                    case 43:
                      Q.carriageReturn();
                      break;
                    case 42:
                      Q.setTextMatrix(y[0], y[1], y[2], y[3], y[4], y[5]),
                        Q.setTextLineMatrix(y[0], y[1], y[2], y[3], y[4], y[5]),
                        (function () {
                          if (!E.initialized) return;
                          let A = Math.hypot(
                              Q.textLineMatrix[0],
                              Q.textLineMatrix[1]
                            ),
                            t = Math.hypot(Q.ctm[0], Q.ctm[1]) * A;
                          t !== E.textAdvanceScale &&
                            (E.vertical
                              ? ((E.totalHeight +=
                                  E.height * E.textAdvanceScale),
                                (E.height = 0))
                              : ((E.totalWidth += E.width * E.textAdvanceScale),
                                (E.width = 0)),
                            (E.textAdvanceScale = t));
                        })();
                      break;
                    case 33:
                      Q.charSpacing = y[0];
                      break;
                    case 34:
                      Q.wordSpacing = y[0];
                      break;
                    case 31:
                      (Q.textMatrix = I.slice()),
                        (Q.textLineMatrix = I.slice());
                      break;
                    case 45:
                      if (!a.state.font) {
                        w.ensureStateFont(a.state);
                        continue;
                      }
                      let u = ((Q.font.vertical ? 1 : -1) * Q.fontSize) / 1e3,
                        R = y[0];
                      for (let A = 0, t = R.length; A < t; A++) {
                        let t = R[A];
                        if ('string' == typeof t) b.push(t);
                        else if ('number' == typeof t && 0 !== t) {
                          let A = b.join('');
                          (b.length = 0), H({ chars: A, extraSpacing: t * u });
                        }
                      }
                      if (b.length > 0) {
                        let A = b.join('');
                        (b.length = 0), H({ chars: A, extraSpacing: 0 });
                      }
                      break;
                    case 44:
                      if (!a.state.font) {
                        w.ensureStateFont(a.state);
                        continue;
                      }
                      H({ chars: y[0], extraSpacing: 0 });
                      break;
                    case 46:
                      if (!a.state.font) {
                        w.ensureStateFont(a.state);
                        continue;
                      }
                      Q.carriageReturn(), H({ chars: y[0], extraSpacing: 0 });
                      break;
                    case 47:
                      if (!a.state.font) {
                        w.ensureStateFont(a.state);
                        continue;
                      }
                      (Q.wordSpacing = y[0]),
                        (Q.charSpacing = y[1]),
                        Q.carriageReturn(),
                        H({ chars: y[2], extraSpacing: 0 });
                      break;
                    case 66:
                      q(), k || (k = i.get('XObject') || Aa.empty);
                      var J = y[0] instanceof Ae,
                        L = y[0].name;
                      if (J && F.getByName(L)) break;
                      d(
                        new Promise(function (A, I) {
                          if (!J)
                            throw new x('XObject must be referred to by name.');
                          let l = k.getRaw(L);
                          if (l instanceof As) {
                            if (
                              F.getByRef(l) ||
                              w.globalImageCache.getData(l, w.pageIndex)
                            ) {
                              A();
                              return;
                            }
                            l = D.fetch(l);
                          }
                          if (!(l instanceof AC))
                            throw new x('XObject should be a stream');
                          let Q = l.dict.get('Subtype');
                          if (!(Q instanceof Ae))
                            throw new x('XObject should have a Name subtype');
                          if ('Form' !== Q.name) {
                            F.set(L, l.dict.objId, !0), A();
                            return;
                          }
                          let c = a.state.clone(),
                            E = new s9(c),
                            u = AF(l.dict.getArray('Matrix'), null);
                          u && E.transform(u), T();
                          let d = {
                            enqueueInvoked: !1,
                            enqueue(A, t) {
                              (this.enqueueInvoked = !0), g.enqueue(A, t);
                            },
                            get desiredSize() {
                              return g.desiredSize;
                            },
                            get ready() {
                              return g.ready;
                            },
                          };
                          w.getTextContent({
                            stream: l,
                            task: t,
                            resources: l.dict.get('Resources') || i,
                            stateManager: E,
                            includeMarkedContent: s,
                            sink: d,
                            seenStyles: r,
                            viewBox: n,
                            lang: o,
                            markedContentData: C,
                            disableNormalization: B,
                            keepWhiteSpace: h,
                          }).then(function () {
                            d.enqueueInvoked || F.set(L, l.dict.objId, !0), A();
                          }, I);
                        }).catch(function (A) {
                          if (!(A instanceof U)) {
                            if (!w.options.ignoreErrors) throw A;
                            m(`getTextContent - ignoring XObject: "${A}".`);
                          }
                        })
                      );
                      return;
                    case 9:
                      if (
                        ((J = y[0] instanceof Ae),
                        (L = y[0].name),
                        J && S.getByName(L))
                      )
                        break;
                      d(
                        new Promise(function (A, t) {
                          if (!J)
                            throw new x('GState must be referred to by name.');
                          let a = i.get('ExtGState');
                          if (!(a instanceof Aa))
                            throw new x('ExtGState should be a dictionary.');
                          let s = a.get(L);
                          if (!(s instanceof Aa))
                            throw new x('GState should be a dictionary.');
                          let g = s.get('Font');
                          g
                            ? (q(),
                              (Q.fontName = null),
                              (Q.fontSize = g[1]),
                              M(null, g[0]).then(A, t))
                            : (S.set(L, s.objId, !0), A());
                        }).catch(function (A) {
                          if (!(A instanceof U)) {
                            if (!w.options.ignoreErrors) throw A;
                            m(`getTextContent - ignoring ExtGState: "${A}".`);
                          }
                        })
                      );
                      return;
                    case 69:
                      q(),
                        s &&
                          (C.level++,
                          c.items.push({
                            type: 'beginMarkedContent',
                            tag: y[0] instanceof Ae ? y[0].name : null,
                          }));
                      break;
                    case 70:
                      if ((q(), s)) {
                        C.level++;
                        let A = null;
                        y[1] instanceof Aa && (A = y[1].get('MCID')),
                          c.items.push({
                            type: 'beginMarkedContentProps',
                            id: Number.isInteger(A)
                              ? `${w.idFactory.getPageObjId()}_mc${A}`
                              : null,
                            tag: y[0] instanceof Ae ? y[0].name : null,
                          });
                      }
                      break;
                    case 71:
                      if ((q(), s)) {
                        if (0 === C.level) break;
                        C.level--, c.items.push({ type: 'endMarkedContent' });
                      }
                      break;
                    case 11:
                      A &&
                        (A.font !== Q.font ||
                          A.fontSize !== Q.fontSize ||
                          A.fontName !== Q.fontName) &&
                        q();
                  }
                  if (c.items.length >= g.desiredSize) {
                    p = !0;
                    break;
                  }
                }
                p ? d(s_) : (q(), T(), l());
              }).catch((A) => {
                if (!(A instanceof U)) {
                  if (!this.options.ignoreErrors) throw A;
                  m(
                    `getTextContent - ignoring errors during "${t.name}" task: "${A}".`
                  ),
                    q(),
                    T();
                }
              });
            }
            async extractDataStructures(A, t) {
              let i;
              let a = this.xref,
                s = this.readToUnicode(t.toUnicode);
              if (t.composite) {
                let a = A.get('CIDSystemInfo');
                a instanceof Aa &&
                  (t.cidSystemInfo = {
                    registry: T(a.get('Registry')),
                    ordering: T(a.get('Ordering')),
                    supplement: a.get('Supplement'),
                  });
                try {
                  let t = A.get('CIDToGIDMap');
                  t instanceof AC && (i = t.getBytes());
                } catch (A) {
                  if (!this.options.ignoreErrors) throw A;
                  m(
                    `extractDataStructures - ignoring CIDToGIDMap data: "${A}".`
                  );
                }
              }
              let g = [],
                r,
                n = null;
              if (A.has('Encoding')) {
                if ((r = A.get('Encoding')) instanceof Aa) {
                  if (
                    ((n =
                      (n = r.get('BaseEncoding')) instanceof Ae
                        ? n.name
                        : null),
                    r.has('Differences'))
                  ) {
                    let A = r.get('Differences'),
                      t = 0;
                    for (let i of A) {
                      let A = a.fetchIfRef(i);
                      if ('number' == typeof A) t = A;
                      else {
                        if (!(A instanceof Ae))
                          throw new x(
                            `Invalid entry in 'Differences' array: ${A}`
                          );
                        g[t++] = A.name;
                      }
                    }
                  }
                } else if (r instanceof Ae) n = r.name;
                else {
                  let A = 'Encoding is not a Name nor a Dict';
                  if (!this.options.ignoreErrors) throw new x(A);
                  m(A);
                }
                'MacRomanEncoding' !== n &&
                  'MacExpertEncoding' !== n &&
                  'WinAnsiEncoding' !== n &&
                  (n = null);
              }
              let o = !t.file || t.isInternalFont,
                I = ie()[t.name];
              if ((n && o && I && (n = null), n)) t.defaultEncoding = tS(n);
              else {
                let A = !!(4 & t.flags),
                  i = !!(32 & t.flags);
                (r = tD),
                  'TrueType' !== t.type || i || (r = tb),
                  (A || I) &&
                    ((r = tw),
                    o &&
                      (/Symbol/i.test(t.name)
                        ? (r = tk)
                        : /Dingbats/i.test(t.name)
                          ? (r = tF)
                          : /Wingdings/i.test(t.name) && (r = tb))),
                  (t.defaultEncoding = r);
              }
              (t.differences = g),
                (t.baseEncodingName = n),
                (t.hasEncoding = !!n || g.length > 0),
                (t.dict = A),
                (t.toUnicode = await s);
              let l = await this.buildToUnicode(t);
              return (
                (t.toUnicode = l),
                i && (t.cidToGidMap = this.readCidToGidMap(i, l)),
                t
              );
            }
            _simpleFontToUnicode(A, t = !1) {
              w(!A.composite, 'Must be a simple font.');
              let i = [],
                a = A.defaultEncoding.slice(),
                s = A.baseEncodingName,
                g = A.differences;
              for (let A in g) {
                let t = g[A];
                '.notdef' !== t && (a[A] = t);
              }
              let r = tV();
              for (let g in a) {
                let n = a[g];
                if ('' === n) continue;
                let o = r[n];
                if (void 0 !== o) {
                  i[g] = String.fromCharCode(o);
                  continue;
                }
                let I = 0;
                switch (n[0]) {
                  case 'G':
                    3 === n.length && (I = parseInt(n.substring(1), 16));
                    break;
                  case 'g':
                    5 === n.length && (I = parseInt(n.substring(1), 16));
                    break;
                  case 'C':
                  case 'c':
                    if (n.length >= 3 && n.length <= 4) {
                      let i = n.substring(1);
                      if (t) {
                        I = parseInt(i, 16);
                        break;
                      }
                      if (
                        Number.isNaN((I = +i)) &&
                        Number.isInteger(parseInt(i, 16))
                      )
                        return this._simpleFontToUnicode(A, !0);
                    }
                    break;
                  case 'u':
                    -1 !== (o = t_(n, r)) && (I = o);
                    break;
                  default:
                    switch (n) {
                      case 'f_h':
                      case 'f_t':
                      case 'T_h':
                        i[g] = n.replaceAll('_', '');
                        continue;
                    }
                }
                if (I > 0 && I <= 1114111 && Number.isInteger(I)) {
                  if (s && I === +g) {
                    let A = tS(s);
                    if (A && (n = A[g])) {
                      i[g] = String.fromCharCode(r[n]);
                      continue;
                    }
                  }
                  i[g] = String.fromCodePoint(I);
                }
              }
              return i;
            }
            async buildToUnicode(A) {
              if (
                ((A.hasIncludedToUnicodeMap = A.toUnicode?.length > 0),
                A.hasIncludedToUnicodeMap)
              )
                return (
                  !A.composite &&
                    A.hasEncoding &&
                    (A.fallbackToUnicode = this._simpleFontToUnicode(A)),
                  A.toUnicode
                );
              if (!A.composite) return new ir(this._simpleFontToUnicode(A));
              if (
                A.composite &&
                ((A.cMap.builtInCMap && !(A.cMap instanceof tl)) ||
                  ('Adobe' === A.cidSystemInfo?.registry &&
                    ('GB1' === A.cidSystemInfo.ordering ||
                      'CNS1' === A.cidSystemInfo.ordering ||
                      'Japan1' === A.cidSystemInfo.ordering ||
                      'Korea1' === A.cidSystemInfo.ordering)))
              ) {
                let { registry: t, ordering: i } = A.cidSystemInfo,
                  a = Ae.get(`${t}-${i}-UCS2`),
                  s = await tu.create({
                    encoding: a,
                    fetchBuiltInCMap: this._fetchBuiltInCMapBound,
                    useCMap: null,
                  }),
                  g = [],
                  r = [];
                return (
                  A.cMap.forEach(function (A, t) {
                    if (t > 65535) throw new x('Max size of CID is 65,535');
                    let i = s.lookup(t);
                    if (i) {
                      r.length = 0;
                      for (let A = 0, t = i.length; A < t; A += 2)
                        r.push((i.charCodeAt(A) << 8) + i.charCodeAt(A + 1));
                      g[A] = String.fromCharCode(...r);
                    }
                  }),
                  new ir(g)
                );
              }
              return new io(A.firstChar, A.lastChar);
            }
            async readToUnicode(A) {
              if (!A) return null;
              if (A instanceof Ae) {
                let t = await tu.create({
                  encoding: A,
                  fetchBuiltInCMap: this._fetchBuiltInCMapBound,
                  useCMap: null,
                });
                return t instanceof tl ? new io(0, 65535) : new ir(t.getMap());
              }
              if (A instanceof AC)
                try {
                  let t = await tu.create({
                    encoding: A,
                    fetchBuiltInCMap: this._fetchBuiltInCMapBound,
                    useCMap: null,
                  });
                  if (t instanceof tl) return new io(0, 65535);
                  let i = Array(t.length);
                  return (
                    t.forEach(function (A, t) {
                      if ('number' == typeof t) {
                        i[A] = String.fromCodePoint(t);
                        return;
                      }
                      t.length % 2 != 0 && (t = '\x00' + t);
                      let a = [];
                      for (let A = 0; A < t.length; A += 2) {
                        let i = (t.charCodeAt(A) << 8) | t.charCodeAt(A + 1);
                        if (55296 != (63488 & i)) {
                          a.push(i);
                          continue;
                        }
                        A += 2;
                        let s = (t.charCodeAt(A) << 8) | t.charCodeAt(A + 1);
                        a.push(((1023 & i) << 10) + (1023 & s) + 65536);
                      }
                      i[A] = String.fromCodePoint(...a);
                    }),
                    new ir(i)
                  );
                } catch (A) {
                  if (A instanceof U) return null;
                  if (this.options.ignoreErrors)
                    return (
                      m(`readToUnicode - ignoring ToUnicode data: "${A}".`),
                      null
                    );
                  throw A;
                }
              return null;
            }
            readCidToGidMap(A, t) {
              let i = [];
              for (let a = 0, s = A.length; a < s; a++) {
                let s = (A[a++] << 8) | A[a],
                  g = a >> 1;
                (0 !== s || t.has(g)) && (i[g] = s);
              }
              return i;
            }
            extractWidths(A, t, i) {
              let a;
              let s = this.xref,
                g = [],
                r = 0,
                n = [];
              if (i.composite) {
                let t = A.get('DW');
                r = 'number' == typeof t ? Math.ceil(t) : 1e3;
                let o = A.get('W');
                if (Array.isArray(o))
                  for (let A = 0, t = o.length; A < t; A++) {
                    let t = s.fetchIfRef(o[A++]);
                    if (!Number.isInteger(t)) break;
                    let i = s.fetchIfRef(o[A]);
                    if (Array.isArray(i))
                      for (let A of i) {
                        let i = s.fetchIfRef(A);
                        'number' == typeof i && (g[t] = i), t++;
                      }
                    else {
                      if (!Number.isInteger(i)) break;
                      {
                        let a = s.fetchIfRef(o[++A]);
                        if ('number' != typeof a) continue;
                        for (let A = t; A <= i; A++) g[A] = a;
                      }
                    }
                  }
                if (i.vertical) {
                  let t = A.getArray('DW2'),
                    i = Ak(t, 2) ? t : [880, -1e3];
                  if (
                    ((a = [i[1], 0.5 * r, i[0]]),
                    Array.isArray((i = A.get('W2'))))
                  )
                    for (let A = 0, t = i.length; A < t; A++) {
                      let t = s.fetchIfRef(i[A++]);
                      if (!Number.isInteger(t)) break;
                      let a = s.fetchIfRef(i[A]);
                      if (Array.isArray(a))
                        for (let A = 0, i = a.length; A < i; A++) {
                          let i = [
                            s.fetchIfRef(a[A++]),
                            s.fetchIfRef(a[A++]),
                            s.fetchIfRef(a[A]),
                          ];
                          Ak(i, null) && (n[t] = i), t++;
                        }
                      else {
                        if (!Number.isInteger(a)) break;
                        {
                          let g = [
                            s.fetchIfRef(i[++A]),
                            s.fetchIfRef(i[++A]),
                            s.fetchIfRef(i[++A]),
                          ];
                          if (!Ak(g, null)) continue;
                          for (let A = t; A <= a; A++) n[A] = g;
                        }
                      }
                    }
                }
              } else {
                let a = A.get('Widths');
                if (Array.isArray(a)) {
                  let A = i.firstChar;
                  for (let t of a) {
                    let i = s.fetchIfRef(t);
                    'number' == typeof i && (g[A] = i), A++;
                  }
                  let n = t.get('MissingWidth');
                  r = 'number' == typeof n ? n : 0;
                } else {
                  let t = A.get('BaseFont');
                  if (t instanceof Ae) {
                    let A = this.getBaseFontMetrics(t.name);
                    (g = this.buildCharCodeToWidth(A.widths, i)),
                      (r = A.defaultWidth);
                  }
                }
              }
              let o = !0,
                I = r;
              for (let A in g) {
                let t = g[A];
                if (t) {
                  if (I) {
                    if (I !== t) {
                      o = !1;
                      break;
                    }
                  } else I = t;
                }
              }
              o ? (i.flags |= 1) : (i.flags &= -2),
                (i.defaultWidth = r),
                (i.widths = g),
                (i.defaultVMetrics = a),
                (i.vmetrics = n);
            }
            isSerifFont(A) {
              let t = A.split('-', 1)[0];
              return t in iA() || /serif/gi.test(t);
            }
            getBaseFontMetrics(A) {
              let t = 0,
                i = Object.create(null),
                a = !1,
                s = t6()[A] || A,
                g = iD();
              s in g || (s = this.isSerifFont(A) ? 'Times-Roman' : 'Helvetica');
              let r = g[s];
              return (
                'number' == typeof r ? ((t = r), (a = !0)) : (i = r()),
                { defaultWidth: t, monospace: a, widths: i }
              );
            }
            buildCharCodeToWidth(A, t) {
              let i = Object.create(null),
                a = t.differences,
                s = t.defaultEncoding;
              for (let t = 0; t < 256; t++)
                t in a && A[a[t]]
                  ? (i[t] = A[a[t]])
                  : t in s && A[s[t]] && (i[t] = A[s[t]]);
              return i;
            }
            preEvaluateFont(A) {
              let t = A,
                i = A.get('Subtype');
              if (!(i instanceof Ae)) throw new x('invalid font Subtype');
              let a,
                s = !1;
              if ('Type0' === i.name) {
                let t = A.get('DescendantFonts');
                if (!t) throw new x('Descendant fonts are not specified');
                if (
                  !(
                    (A = Array.isArray(t)
                      ? this.xref.fetchIfRef(t[0])
                      : t) instanceof Aa
                  )
                )
                  throw new x('Descendant font is not a dictionary.');
                if (!((i = A.get('Subtype')) instanceof Ae))
                  throw new x('invalid font Subtype');
                s = !0;
              }
              let g = A.get('FirstChar');
              Number.isInteger(g) || (g = 0);
              let r = A.get('LastChar');
              Number.isInteger(r) || (r = s ? 65535 : 255);
              let n = A.get('FontDescriptor'),
                o = A.get('ToUnicode') || t.get('ToUnicode');
              if (n) {
                a = new sT();
                let i = t.getRaw('Encoding');
                if (i instanceof Ae) a.update(i.name);
                else if (i instanceof As) a.update(i.toString());
                else if (i instanceof Aa) {
                  for (let A of i.getRawValues())
                    if (A instanceof Ae) a.update(A.name);
                    else if (A instanceof As) a.update(A.toString());
                    else if (Array.isArray(A)) {
                      let t = A.length,
                        i = Array(t);
                      for (let a = 0; a < t; a++) {
                        let t = A[a];
                        t instanceof Ae
                          ? (i[a] = t.name)
                          : ('number' == typeof t || t instanceof As) &&
                            (i[a] = t.toString());
                      }
                      a.update(i.join());
                    }
                }
                if ((a.update(`${g}-${r}`), o instanceof AC)) {
                  let A = o.str || o,
                    t = A.buffer
                      ? new Uint8Array(A.buffer.buffer, 0, A.bufferLength)
                      : new Uint8Array(
                          A.bytes.buffer,
                          A.start,
                          A.end - A.start
                        );
                  a.update(t);
                } else o instanceof Ae && a.update(o.name);
                let n = A.get('Widths') || t.get('Widths');
                if (Array.isArray(n)) {
                  let A = [];
                  for (let t of n)
                    ('number' == typeof t || t instanceof As) &&
                      A.push(t.toString());
                  a.update(A.join());
                }
                if (s) {
                  a.update('compositeFont');
                  let i = A.get('W') || t.get('W');
                  if (Array.isArray(i)) {
                    let A = [];
                    for (let t of i)
                      if ('number' == typeof t || t instanceof As)
                        A.push(t.toString());
                      else if (Array.isArray(t)) {
                        let i = [];
                        for (let A of t)
                          ('number' == typeof A || A instanceof As) &&
                            i.push(A.toString());
                        A.push(`[${i.join()}]`);
                      }
                    a.update(A.join());
                  }
                  let s = A.getRaw('CIDToGIDMap') || t.getRaw('CIDToGIDMap');
                  s instanceof Ae
                    ? a.update(s.name)
                    : s instanceof As
                      ? a.update(s.toString())
                      : s instanceof AC && a.update(s.peekBytes());
                }
              }
              return {
                descriptor: n,
                dict: A,
                baseDict: t,
                composite: s,
                type: i.name,
                firstChar: g,
                lastChar: r,
                toUnicode: o,
                hash: a ? a.hexdigest() : '',
              };
            }
            async translateFont({
              descriptor: A,
              dict: t,
              baseDict: i,
              composite: a,
              type: s,
              firstChar: g,
              lastChar: r,
              toUnicode: n,
              cssFontInfo: o,
            }) {
              let I, C, B, h, Q;
              let c = 'Type3' === s;
              if (!A) {
                if (!c) {
                  let A = t.get('BaseFont');
                  if (!(A instanceof Ae))
                    throw new x('Base font is not specified');
                  A = A.name.replaceAll(/[,_]/g, '-');
                  let a = this.getBaseFontMetrics(A),
                    o = A.split('-', 1)[0],
                    I =
                      (this.isSerifFont(o) ? 2 : 0) |
                      (a.monospace ? 1 : 0) |
                      (ie()[o] ? 4 : 32),
                    l = {
                      type: s,
                      name: A,
                      loadedName: i.loadedName,
                      systemFontInfo: null,
                      widths: a.widths,
                      defaultWidth: a.defaultWidth,
                      isSimulatedFlags: !0,
                      flags: I,
                      firstChar: g,
                      lastChar: r,
                      toUnicode: n,
                      xHeight: 0,
                      capHeight: 0,
                      italicAngle: 0,
                      isType3Font: c,
                    },
                    C = t.get('Widths'),
                    B = is(A),
                    h = null;
                  B &&
                    ((h = await this.fetchStandardFontData(B)),
                    (l.isInternalFont = !!h)),
                    !l.isInternalFont &&
                      this.options.useSystemFonts &&
                      (l.systemFontInfo = sv(
                        this.systemFontCache,
                        this.idFactory,
                        this.options.standardFontDataUrl,
                        A,
                        B,
                        s
                      ));
                  let Q = await this.extractDataStructures(t, l);
                  if (Array.isArray(C)) {
                    let A = [],
                      t = g;
                    for (let i of C) {
                      let a = this.xref.fetchIfRef(i);
                      'number' == typeof a && (A[t] = a), t++;
                    }
                    Q.widths = A;
                  } else Q.widths = this.buildCharCodeToWidth(a.widths, Q);
                  return new aI(A, h, Q);
                }
                {
                  let i = AR(t.getArray('FontBBox'), [0, 0, 0, 0]);
                  (A = new Aa(null)).set('FontName', Ae.get(s)),
                    A.set('FontBBox', i);
                }
              }
              let E = A.get('FontName'),
                u = t.get('BaseFont');
              'string' == typeof E && (E = Ae.get(E)),
                'string' == typeof u && (u = Ae.get(u));
              let d = E?.name,
                f = u?.name;
              if (
                (!c &&
                  d !== f &&
                  (p(
                    `The FontDescriptor's FontName is "${d}" but should be the same as the Font's BaseFont "${f}".`
                  ),
                  d &&
                    f &&
                    (f.startsWith(d) || (!ig(d) && ig(f))) &&
                    (E = null)),
                !((E ||= u) instanceof Ae))
              )
                throw new x('invalid font name');
              try {
                I = A.get('FontFile', 'FontFile2', 'FontFile3');
              } catch (A) {
                if (!this.options.ignoreErrors) throw A;
                m(`translateFont - fetching "${E.name}" font file: "${A}".`),
                  (I = new AX());
              }
              let y = !1,
                w = null,
                D = null;
              if (I) {
                if (I.dict) {
                  let A = I.dict.get('Subtype');
                  A instanceof Ae && (C = A.name),
                    (B = I.dict.get('Length1')),
                    (h = I.dict.get('Length2')),
                    (Q = I.dict.get('Length3'));
                }
              } else if (o) {
                let A = a7(E.name);
                A &&
                  ((o.fontFamily = `${o.fontFamily}-PdfJS-XFA`),
                  (o.metrics = A.metrics || null),
                  (w = A.factors || null),
                  (y = !!(I = await this.fetchStandardFontData(A.name))),
                  (i = t = a4(E.name)),
                  (a = !0));
              } else if (!c) {
                let A = is(E.name);
                A && (y = !!(I = await this.fetchStandardFontData(A))),
                  !y &&
                    this.options.useSystemFonts &&
                    (D = sv(
                      this.systemFontCache,
                      this.idFactory,
                      this.options.standardFontDataUrl,
                      E.name,
                      A,
                      s
                    ));
              }
              let b = AF(t.getArray('FontMatrix'), l),
                k = AR(
                  A.getArray('FontBBox') || t.getArray('FontBBox'),
                  void 0
                ),
                F = A.get('Ascent');
              'number' != typeof F && (F = void 0);
              let S = A.get('Descent');
              'number' != typeof S && (S = void 0);
              let R = A.get('XHeight');
              'number' != typeof R && (R = 0);
              let G = A.get('CapHeight');
              'number' != typeof G && (G = 0);
              let N = A.get('Flags');
              Number.isInteger(N) || (N = 0);
              let U = A.get('ItalicAngle');
              'number' != typeof U && (U = 0);
              let M = {
                type: s,
                name: E.name,
                subtype: C,
                file: I,
                length1: B,
                length2: h,
                length3: Q,
                isInternalFont: y,
                loadedName: i.loadedName,
                composite: a,
                fixedPitch: !1,
                fontMatrix: b,
                firstChar: g,
                lastChar: r,
                toUnicode: n,
                bbox: k,
                ascent: F,
                descent: S,
                xHeight: R,
                capHeight: G,
                flags: N,
                italicAngle: U,
                isType3Font: c,
                cssFontInfo: o,
                scaleFactors: w,
                systemFontInfo: D,
              };
              if (a) {
                let A = i.get('Encoding');
                A instanceof Ae && (M.cidEncoding = A.name);
                let t = await tu.create({
                  encoding: A,
                  fetchBuiltInCMap: this._fetchBuiltInCMapBound,
                  useCMap: null,
                });
                (M.cMap = t), (M.vertical = M.cMap.vertical);
              }
              let J = await this.extractDataStructures(t, M);
              return this.extractWidths(t, A, J), new aI(E.name, I, J);
            }
            static buildFontPaths(A, t, i, a) {
              function s(t) {
                let s = `${A.loadedName}_path_${t}`;
                try {
                  if (A.renderer.hasBuiltPath(t)) return;
                  i.send('commonobj', [s, 'FontPath', A.renderer.getPathJs(t)]);
                } catch (A) {
                  if (a.ignoreErrors) {
                    m(`buildFontPaths - ignoring ${s} glyph: "${A}".`);
                    return;
                  }
                  throw A;
                }
              }
              for (let A of t) {
                s(A.fontChar);
                let t = A.accent;
                t?.fontChar && s(t.fontChar);
              }
            }
            static get fallbackFontDict() {
              let A = new Aa();
              return (
                A.set('BaseFont', Ae.get('Helvetica')),
                A.set('Type', Ae.get('FallbackType')),
                A.set('Subtype', Ae.get('FallbackType')),
                A.set('Encoding', Ae.get('WinAnsiEncoding')),
                b(this, 'fallbackFontDict', A)
              );
            }
          }
          class s2 {
            constructor({
              loadedName: A,
              font: t,
              dict: i,
              evaluatorOptions: a,
            }) {
              (this.loadedName = A),
                (this.font = t),
                (this.dict = i),
                (this._evaluatorOptions = a || sz),
                (this.type3Loaded = null),
                (this.type3Dependencies = t.isType3Font ? new Set() : null),
                (this.sent = !1);
            }
            send(A) {
              this.sent ||
                ((this.sent = !0),
                A.send('commonobj', [
                  this.loadedName,
                  'Font',
                  this.font.exportData(
                    this._evaluatorOptions.fontExtraProperties
                  ),
                ]));
            }
            fallback(A) {
              this.font.data &&
                ((this.font.disableFontFace = !0),
                s1.buildFontPaths(
                  this.font,
                  this.font.glyphCacheValues,
                  A,
                  this._evaluatorOptions
                ));
            }
            loadType3Data(A, t, i) {
              if (this.type3Loaded) return this.type3Loaded;
              if (!this.font.isType3Font) throw Error('Must be a Type3 font.');
              let a = A.clone({ ignoreErrors: !1 }),
                s = new Ag(A.type3FontRefs);
              this.dict.objId &&
                !s.has(this.dict.objId) &&
                s.put(this.dict.objId),
                (a.type3FontRefs = s);
              let g = this.font,
                r = this.type3Dependencies,
                n = Promise.resolve(),
                o = this.dict.get('CharProcs'),
                I = this.dict.get('Resources') || t,
                l = Object.create(null),
                C = v.normalizeRect(g.bbox || [0, 0, 0, 0]),
                B = C[2] - C[0],
                h = C[3] - C[1],
                Q = Math.hypot(B, h);
              for (let A of o.getKeys())
                n = n.then(() => {
                  let t = o.get(A),
                    s = new sX();
                  return a
                    .getOperatorList({
                      stream: t,
                      task: i,
                      resources: I,
                      operatorList: s,
                    })
                    .then(() => {
                      for (let t of (49 === s.fnArray[0] &&
                        this._removeType3ColorOperators(s, Q),
                      (l[A] = s.getIR()),
                      s.dependencies))
                        r.add(t);
                    })
                    .catch(function (t) {
                      m(`Type3 font resource "${A}" is not available.`);
                      let i = new sX();
                      l[A] = i.getIR();
                    });
                });
              return (
                (this.type3Loaded = n.then(() => {
                  (g.charProcOperatorList = l),
                    this._bbox && ((g.isCharBBox = !0), (g.bbox = this._bbox));
                })),
                this.type3Loaded
              );
            }
            _removeType3ColorOperators(A, t = NaN) {
              let i = v.normalizeRect(A.argsArray[0].slice(2)),
                a = i[2] - i[0],
                s = i[3] - i[1];
              0 === a || 0 === s
                ? (A.fnArray.splice(0, 1), A.argsArray.splice(0, 1))
                : (0 === t || Math.round(Math.hypot(a, s) / t) >= 10) &&
                  (this._bbox || (this._bbox = [1 / 0, 1 / 0, -1 / 0, -1 / 0]),
                  (this._bbox[0] = Math.min(this._bbox[0], i[0])),
                  (this._bbox[1] = Math.min(this._bbox[1], i[1])),
                  (this._bbox[2] = Math.max(this._bbox[2], i[2])),
                  (this._bbox[3] = Math.max(this._bbox[3], i[3])));
              let g = 0,
                r = A.length;
              for (; g < r; ) {
                switch (A.fnArray[g]) {
                  case 49:
                    break;
                  case 50:
                  case 51:
                  case 52:
                  case 53:
                  case 54:
                  case 55:
                  case 56:
                  case 57:
                  case 58:
                  case 59:
                  case 60:
                  case 61:
                  case 62:
                  case 7:
                    A.fnArray.splice(g, 1), A.argsArray.splice(g, 1), r--;
                    continue;
                  case 9:
                    let [t] = A.argsArray[g],
                      i = 0,
                      a = t.length;
                    for (; i < a; ) {
                      let [A] = t[i];
                      switch (A) {
                        case 'TR':
                        case 'TR2':
                        case 'HT':
                        case 'BG':
                        case 'BG2':
                        case 'UCR':
                        case 'UCR2':
                          t.splice(i, 1), a--;
                          continue;
                      }
                      i++;
                    }
                }
                g++;
              }
            }
          }
          class s9 {
            constructor(A = new s5()) {
              (this.state = A), (this.stateStack = []);
            }
            save() {
              let A = this.state;
              this.stateStack.push(this.state), (this.state = A.clone());
            }
            restore() {
              let A = this.stateStack.pop();
              A && (this.state = A);
            }
            transform(A) {
              this.state.ctm = v.transform(this.state.ctm, A);
            }
          }
          class s3 {
            constructor() {
              (this.ctm = new Float32Array(I)),
                (this.fontName = null),
                (this.fontSize = 0),
                (this.loadedName = null),
                (this.font = null),
                (this.fontMatrix = l),
                (this.textMatrix = I.slice()),
                (this.textLineMatrix = I.slice()),
                (this.charSpacing = 0),
                (this.wordSpacing = 0),
                (this.leading = 0),
                (this.textHScale = 1),
                (this.textRise = 0);
            }
            setTextMatrix(A, t, i, a, s, g) {
              let r = this.textMatrix;
              (r[0] = A),
                (r[1] = t),
                (r[2] = i),
                (r[3] = a),
                (r[4] = s),
                (r[5] = g);
            }
            setTextLineMatrix(A, t, i, a, s, g) {
              let r = this.textLineMatrix;
              (r[0] = A),
                (r[1] = t),
                (r[2] = i),
                (r[3] = a),
                (r[4] = s),
                (r[5] = g);
            }
            translateTextMatrix(A, t) {
              let i = this.textMatrix;
              (i[4] = i[0] * A + i[2] * t + i[4]),
                (i[5] = i[1] * A + i[3] * t + i[5]);
            }
            translateTextLineMatrix(A, t) {
              let i = this.textLineMatrix;
              (i[4] = i[0] * A + i[2] * t + i[4]),
                (i[5] = i[1] * A + i[3] * t + i[5]);
            }
            carriageReturn() {
              this.translateTextLineMatrix(0, -this.leading),
                (this.textMatrix = this.textLineMatrix.slice());
            }
            clone() {
              let A = Object.create(this);
              return (
                (A.textMatrix = this.textMatrix.slice()),
                (A.textLineMatrix = this.textLineMatrix.slice()),
                (A.fontMatrix = this.fontMatrix.slice()),
                A
              );
            }
          }
          class s5 {
            constructor() {
              (this.ctm = new Float32Array(I)),
                (this.font = null),
                (this.textRenderingMode = 0),
                (this._fillColorSpace = Az.singletons.gray),
                (this._strokeColorSpace = Az.singletons.gray),
                (this.patternFillColorSpace = null),
                (this.patternStrokeColorSpace = null);
            }
            get fillColorSpace() {
              return this._fillColorSpace;
            }
            set fillColorSpace(A) {
              this._fillColorSpace = this.patternFillColorSpace = A;
            }
            get strokeColorSpace() {
              return this._strokeColorSpace;
            }
            set strokeColorSpace(A) {
              this._strokeColorSpace = this.patternStrokeColorSpace = A;
            }
            clone() {
              return Object.create(this);
            }
          }
          class s8 {
            static get opMap() {
              return b(
                this,
                'opMap',
                Object.assign(Object.create(null), {
                  w: { id: 2, numArgs: 1, variableArgs: !1 },
                  J: { id: 3, numArgs: 1, variableArgs: !1 },
                  j: { id: 4, numArgs: 1, variableArgs: !1 },
                  M: { id: 5, numArgs: 1, variableArgs: !1 },
                  d: { id: 6, numArgs: 2, variableArgs: !1 },
                  ri: { id: 7, numArgs: 1, variableArgs: !1 },
                  i: { id: 8, numArgs: 1, variableArgs: !1 },
                  gs: { id: 9, numArgs: 1, variableArgs: !1 },
                  q: { id: 10, numArgs: 0, variableArgs: !1 },
                  Q: { id: 11, numArgs: 0, variableArgs: !1 },
                  cm: { id: 12, numArgs: 6, variableArgs: !1 },
                  m: { id: 13, numArgs: 2, variableArgs: !1 },
                  l: { id: 14, numArgs: 2, variableArgs: !1 },
                  c: { id: 15, numArgs: 6, variableArgs: !1 },
                  v: { id: 16, numArgs: 4, variableArgs: !1 },
                  y: { id: 17, numArgs: 4, variableArgs: !1 },
                  h: { id: 18, numArgs: 0, variableArgs: !1 },
                  re: { id: 19, numArgs: 4, variableArgs: !1 },
                  S: { id: 20, numArgs: 0, variableArgs: !1 },
                  s: { id: 21, numArgs: 0, variableArgs: !1 },
                  f: { id: 22, numArgs: 0, variableArgs: !1 },
                  F: { id: 22, numArgs: 0, variableArgs: !1 },
                  'f*': { id: 23, numArgs: 0, variableArgs: !1 },
                  B: { id: 24, numArgs: 0, variableArgs: !1 },
                  'B*': { id: 25, numArgs: 0, variableArgs: !1 },
                  b: { id: 26, numArgs: 0, variableArgs: !1 },
                  'b*': { id: 27, numArgs: 0, variableArgs: !1 },
                  n: { id: 28, numArgs: 0, variableArgs: !1 },
                  W: { id: 29, numArgs: 0, variableArgs: !1 },
                  'W*': { id: 30, numArgs: 0, variableArgs: !1 },
                  BT: { id: 31, numArgs: 0, variableArgs: !1 },
                  ET: { id: 32, numArgs: 0, variableArgs: !1 },
                  Tc: { id: 33, numArgs: 1, variableArgs: !1 },
                  Tw: { id: 34, numArgs: 1, variableArgs: !1 },
                  Tz: { id: 35, numArgs: 1, variableArgs: !1 },
                  TL: { id: 36, numArgs: 1, variableArgs: !1 },
                  Tf: { id: 37, numArgs: 2, variableArgs: !1 },
                  Tr: { id: 38, numArgs: 1, variableArgs: !1 },
                  Ts: { id: 39, numArgs: 1, variableArgs: !1 },
                  Td: { id: 40, numArgs: 2, variableArgs: !1 },
                  TD: { id: 41, numArgs: 2, variableArgs: !1 },
                  Tm: { id: 42, numArgs: 6, variableArgs: !1 },
                  'T*': { id: 43, numArgs: 0, variableArgs: !1 },
                  Tj: { id: 44, numArgs: 1, variableArgs: !1 },
                  TJ: { id: 45, numArgs: 1, variableArgs: !1 },
                  "'": { id: 46, numArgs: 1, variableArgs: !1 },
                  '"': { id: 47, numArgs: 3, variableArgs: !1 },
                  d0: { id: 48, numArgs: 2, variableArgs: !1 },
                  d1: { id: 49, numArgs: 6, variableArgs: !1 },
                  CS: { id: 50, numArgs: 1, variableArgs: !1 },
                  cs: { id: 51, numArgs: 1, variableArgs: !1 },
                  SC: { id: 52, numArgs: 4, variableArgs: !0 },
                  SCN: { id: 53, numArgs: 33, variableArgs: !0 },
                  sc: { id: 54, numArgs: 4, variableArgs: !0 },
                  scn: { id: 55, numArgs: 33, variableArgs: !0 },
                  G: { id: 56, numArgs: 1, variableArgs: !1 },
                  g: { id: 57, numArgs: 1, variableArgs: !1 },
                  RG: { id: 58, numArgs: 3, variableArgs: !1 },
                  rg: { id: 59, numArgs: 3, variableArgs: !1 },
                  K: { id: 60, numArgs: 4, variableArgs: !1 },
                  k: { id: 61, numArgs: 4, variableArgs: !1 },
                  sh: { id: 62, numArgs: 1, variableArgs: !1 },
                  BI: { id: 63, numArgs: 0, variableArgs: !1 },
                  ID: { id: 64, numArgs: 0, variableArgs: !1 },
                  EI: { id: 65, numArgs: 1, variableArgs: !1 },
                  Do: { id: 66, numArgs: 1, variableArgs: !1 },
                  MP: { id: 67, numArgs: 1, variableArgs: !1 },
                  DP: { id: 68, numArgs: 2, variableArgs: !1 },
                  BMC: { id: 69, numArgs: 1, variableArgs: !1 },
                  BDC: { id: 70, numArgs: 2, variableArgs: !1 },
                  EMC: { id: 71, numArgs: 0, variableArgs: !1 },
                  BX: { id: 72, numArgs: 0, variableArgs: !1 },
                  EX: { id: 73, numArgs: 0, variableArgs: !1 },
                  BM: null,
                  BD: null,
                  true: null,
                  fa: null,
                  fal: null,
                  fals: null,
                  false: null,
                  nu: null,
                  nul: null,
                  null: null,
                })
              );
            }
            static MAX_INVALID_PATH_OPS = 10;
            constructor(A, t, i = new s9()) {
              (this.parser = new ta({ lexer: new tr(A, s8.opMap), xref: t })),
                (this.stateManager = i),
                (this.nonProcessedArgs = []),
                (this._isPathOp = !1),
                (this._numInvalidPathOPS = 0);
            }
            get savedStatesDepth() {
              return this.stateManager.stateStack.length;
            }
            read(A) {
              let t = A.args;
              for (;;) {
                let i = this.parser.getObj();
                if (i instanceof At) {
                  let a = i.cmd,
                    s = s8.opMap[a];
                  if (!s) {
                    m(`Unknown command "${a}".`);
                    continue;
                  }
                  let g = s.id,
                    r = s.numArgs,
                    n = null !== t ? t.length : 0;
                  if (
                    (this._isPathOp || (this._numInvalidPathOPS = 0),
                    (this._isPathOp = g >= 13 && g <= 28),
                    s.variableArgs)
                  )
                    n > r &&
                      p(
                        `Command ${a}: expected [0, ${r}] args, but received ${n} args.`
                      );
                  else {
                    if (n !== r) {
                      let A = this.nonProcessedArgs;
                      for (; n > r; ) A.push(t.shift()), n--;
                      for (; n < r && 0 !== A.length; )
                        null === t && (t = []), t.unshift(A.pop()), n++;
                    }
                    if (n < r) {
                      let A = `command ${a}: expected ${r} args, but received ${n} args.`;
                      if (
                        this._isPathOp &&
                        ++this._numInvalidPathOPS > s8.MAX_INVALID_PATH_OPS
                      )
                        throw new x(`Invalid ${A}`);
                      m(`Skipping ${A}`), null !== t && (t.length = 0);
                      continue;
                    }
                  }
                  return (
                    this.preprocessCommand(g, t), (A.fn = g), (A.args = t), !0
                  );
                }
                if (i === z) return !1;
                if (
                  null !== i &&
                  (null === t && (t = []), t.push(i), t.length > 33)
                )
                  throw new x('Too many arguments');
              }
            }
            preprocessCommand(A, t) {
              switch (0 | A) {
                case 10:
                  this.stateManager.save();
                  break;
                case 11:
                  this.stateManager.restore();
                  break;
                case 12:
                  this.stateManager.transform(t);
              }
            }
          }
          class s6 extends s8 {
            constructor(A) {
              super(new AO(A));
            }
            parse() {
              let A = { fn: 0, args: [] },
                t = {
                  fontSize: 0,
                  fontName: '',
                  fontColor: new Uint8ClampedArray(3),
                };
              try {
                for (; (A.args.length = 0), this.read(A); ) {
                  if (0 !== this.savedStatesDepth) continue;
                  let { fn: i, args: a } = A;
                  switch (0 | i) {
                    case 37:
                      let [s, g] = a;
                      s instanceof Ae && (t.fontName = s.name),
                        'number' == typeof g && g > 0 && (t.fontSize = g);
                      break;
                    case 59:
                      Az.singletons.rgb.getRgbItem(a, 0, t.fontColor, 0);
                      break;
                    case 57:
                      Az.singletons.gray.getRgbItem(a, 0, t.fontColor, 0);
                      break;
                    case 61:
                      Az.singletons.cmyk.getRgbItem(a, 0, t.fontColor, 0);
                  }
                }
              } catch (A) {
                m(`parseDefaultAppearance - ignoring errors: "${A}".`);
              }
              return t;
            }
          }
          function s7(A) {
            return new s6(A).parse();
          }
          class s4 extends s8 {
            constructor(A, t, i) {
              super(A),
                (this.stream = A),
                (this.evaluatorOptions = t),
                (this.xref = i),
                (this.resources = A.dict?.get('Resources'));
            }
            parse() {
              let A = { fn: 0, args: [] },
                t = {
                  scaleFactor: 1,
                  fontSize: 0,
                  fontName: '',
                  fontColor: new Uint8ClampedArray(3),
                  fillColorSpace: Az.singletons.gray,
                },
                i = !1,
                a = [];
              try {
                for (; (A.args.length = 0), !i && this.read(A); ) {
                  let { fn: s, args: g } = A;
                  switch (0 | s) {
                    case 10:
                      a.push({
                        scaleFactor: t.scaleFactor,
                        fontSize: t.fontSize,
                        fontName: t.fontName,
                        fontColor: t.fontColor.slice(),
                        fillColorSpace: t.fillColorSpace,
                      });
                      break;
                    case 11:
                      t = a.pop() || t;
                      break;
                    case 42:
                      t.scaleFactor *= Math.hypot(g[0], g[1]);
                      break;
                    case 37:
                      let [r, n] = g;
                      r instanceof Ae && (t.fontName = r.name),
                        'number' == typeof n &&
                          n > 0 &&
                          (t.fontSize = n * t.scaleFactor);
                      break;
                    case 51:
                      t.fillColorSpace = Az.parse({
                        cs: g[0],
                        xref: this.xref,
                        resources: this.resources,
                        pdfFunctionFactory: this._pdfFunctionFactory,
                        localColorSpaceCache: this._localColorSpaceCache,
                      });
                      break;
                    case 54:
                      t.fillColorSpace.getRgbItem(g, 0, t.fontColor, 0);
                      break;
                    case 59:
                      Az.singletons.rgb.getRgbItem(g, 0, t.fontColor, 0);
                      break;
                    case 57:
                      Az.singletons.gray.getRgbItem(g, 0, t.fontColor, 0);
                      break;
                    case 61:
                      Az.singletons.cmyk.getRgbItem(g, 0, t.fontColor, 0);
                      break;
                    case 44:
                    case 45:
                    case 46:
                    case 47:
                      i = !0;
                  }
                }
              } catch (A) {
                m(`parseAppearanceStream - ignoring errors: "${A}".`);
              }
              return (
                this.stream.reset(),
                delete t.scaleFactor,
                delete t.fillColorSpace,
                t
              );
            }
            get _localColorSpaceCache() {
              return b(this, '_localColorSpaceCache', new sg());
            }
            get _pdfFunctionFactory() {
              return b(
                this,
                '_pdfFunctionFactory',
                new sC({
                  xref: this.xref,
                  isEvalSupported: this.evaluatorOptions.isEvalSupported,
                })
              );
            }
          }
          function gA(A, t) {
            return A[0] === A[1] && A[1] === A[2]
              ? `${AK(A[0] / 255)} ${t ? 'g' : 'G'}`
              : Array.from(A, (A) => AK(A / 255)).join(' ') +
                  ' ' +
                  (t ? 'rg' : 'RG');
          }
          class ge {
            constructor(A, t) {
              (this.xref = A),
                (this.widths = null),
                (this.firstChar = 1 / 0),
                (this.lastChar = -1 / 0),
                (this.fontFamily = t);
              let i = new OffscreenCanvas(1, 1);
              (this.ctxMeasure = i.getContext('2d', {
                willReadFrequently: !0,
              })),
                ge._fontNameId || (ge._fontNameId = 1),
                (this.fontName = Ae.get(
                  `InvalidPDFjsFont_${t}_${ge._fontNameId++}`
                ));
            }
            get fontDescriptorRef() {
              if (!ge._fontDescriptorRef) {
                let A = new Aa(this.xref);
                A.set('Type', Ae.get('FontDescriptor')),
                  A.set('FontName', this.fontName),
                  A.set('FontFamily', 'MyriadPro Regular'),
                  A.set('FontBBox', [0, 0, 0, 0]),
                  A.set('FontStretch', Ae.get('Normal')),
                  A.set('FontWeight', 400),
                  A.set('ItalicAngle', 0),
                  (ge._fontDescriptorRef = this.xref.getNewPersistentRef(A));
              }
              return ge._fontDescriptorRef;
            }
            get descendantFontRef() {
              let A = new Aa(this.xref);
              A.set('BaseFont', this.fontName),
                A.set('Type', Ae.get('Font')),
                A.set('Subtype', Ae.get('CIDFontType0')),
                A.set('CIDToGIDMap', Ae.get('Identity')),
                A.set('FirstChar', this.firstChar),
                A.set('LastChar', this.lastChar),
                A.set('FontDescriptor', this.fontDescriptorRef),
                A.set('DW', 1e3);
              let t = [],
                i = [...this.widths.entries()].sort(),
                a = null,
                s = null;
              for (let [A, g] of i)
                a
                  ? A === a + s.length
                    ? s.push(g)
                    : (t.push(a, s), (a = A), (s = [g]))
                  : ((a = A), (s = [g]));
              a && t.push(a, s), A.set('W', t);
              let g = new Aa(this.xref);
              return (
                g.set('Ordering', 'Identity'),
                g.set('Registry', 'Adobe'),
                g.set('Supplement', 0),
                A.set('CIDSystemInfo', g),
                this.xref.getNewPersistentRef(A)
              );
            }
            get baseFontRef() {
              let A = new Aa(this.xref);
              return (
                A.set('BaseFont', this.fontName),
                A.set('Type', Ae.get('Font')),
                A.set('Subtype', Ae.get('Type0')),
                A.set('Encoding', Ae.get('Identity-H')),
                A.set('DescendantFonts', [this.descendantFontRef]),
                A.set('ToUnicode', Ae.get('Identity-H')),
                this.xref.getNewPersistentRef(A)
              );
            }
            get resources() {
              let A = new Aa(this.xref),
                t = new Aa(this.xref);
              return (
                t.set(this.fontName.name, this.baseFontRef), A.set('Font', t), A
              );
            }
            _createContext() {
              return (
                (this.widths = new Map()),
                (this.ctxMeasure.font = `1000px ${this.fontFamily}`),
                this.ctxMeasure
              );
            }
            createFontResources(A) {
              let t = this._createContext();
              for (let i of A.split(/\r\n?|\n/))
                for (let A of i.split('')) {
                  let i = A.charCodeAt(0);
                  if (this.widths.has(i)) continue;
                  let a = t.measureText(A),
                    s = Math.ceil(a.width);
                  this.widths.set(i, s),
                    (this.firstChar = Math.min(i, this.firstChar)),
                    (this.lastChar = Math.max(i, this.lastChar));
                }
              return this.resources;
            }
            static getFirstPositionInfo(A, t, i) {
              let [a, s, g, r] = A,
                n = g - a,
                o = r - s;
              t % 180 != 0 && ([n, o] = [o, n]);
              let I = 1.35 * i;
              return {
                coords: [0, o + 0.35 * i - I],
                bbox: [0, 0, n, o],
                matrix: 0 !== t ? AP(t, o, I) : void 0,
              };
            }
            createAppearance(A, t, i, a, s, g) {
              let r = this._createContext(),
                n = [],
                o = -1 / 0;
              for (let t of A.split(/\r\n?|\n/)) {
                n.push(t);
                let A = r.measureText(t).width;
                for (let i of ((o = Math.max(o, A)),
                (function* (A) {
                  for (let t = 0, i = A.length; t < i; t++) {
                    let i = A.codePointAt(t);
                    i > 55295 && (i < 57344 || i > 65533) && t++, yield i;
                  }
                })(t))) {
                  let A = String.fromCodePoint(i),
                    t = this.widths.get(i);
                  if (void 0 === t) {
                    let a = r.measureText(A);
                    (t = Math.ceil(a.width)),
                      this.widths.set(i, t),
                      (this.firstChar = Math.min(i, this.firstChar)),
                      (this.lastChar = Math.max(i, this.lastChar));
                  }
                }
              }
              o *= a / 1e3;
              let [I, l, C, B] = t,
                h = C - I,
                Q = B - l;
              i % 180 != 0 && ([h, Q] = [Q, h]);
              let c = 1;
              o > h && (c = h / o);
              let E = 1,
                u = 1.35 * a,
                d = u * n.length;
              d > Q && (E = Q / d);
              let f = a * Math.min(c, E),
                p = [
                  'q',
                  `0 0 ${AK(h)} ${AK(Q)} re W n`,
                  'BT',
                  `1 0 0 1 0 ${AK(Q + 0.35 * a)} Tm 0 Tc ${gA(s, !0)}`,
                  `/${this.fontName.name} ${AK(f)} Tf`,
                ],
                { resources: m } = this;
              if (
                1 !== (g = 'number' == typeof g && g >= 0 && g <= 1 ? g : 1)
              ) {
                p.push('/R0 gs');
                let A = new Aa(this.xref),
                  t = new Aa(this.xref);
                t.set('ca', g),
                  t.set('CA', g),
                  t.set('Type', Ae.get('ExtGState')),
                  A.set('R0', t),
                  m.set('ExtGState', A);
              }
              let y = AK(u);
              for (let A of n)
                p.push(
                  `0 -${y} Td <${(function (A) {
                    let t = [];
                    for (let i = 0, a = A.length; i < a; i++) {
                      let a = A.charCodeAt(i);
                      t.push(
                        ((a >> 8) & 255).toString(16).padStart(2, '0'),
                        (255 & a).toString(16).padStart(2, '0')
                      );
                    }
                    return t.join('');
                  })(A)}> Tj`
                );
              p.push('ET', 'Q');
              let w = p.join('\n'),
                D = new Aa(this.xref);
              if (
                (D.set('Subtype', Ae.get('Form')),
                D.set('Type', Ae.get('XObject')),
                D.set('BBox', [0, 0, h, Q]),
                D.set('Length', w.length),
                D.set('Resources', m),
                i)
              ) {
                let A = AP(i, h, Q);
                D.set('Matrix', A);
              }
              let b = new AO(w);
              return (b.dict = D), b;
            }
          }
          class gt {
            constructor(A, t, i) {
              (this.root = A), (this.xref = t), (this._type = i);
            }
            getAll() {
              let A = new Map();
              if (!this.root) return A;
              let t = this.xref,
                i = new Ag();
              i.put(this.root);
              let a = [this.root];
              for (; a.length > 0; ) {
                let s = t.fetchIfRef(a.shift());
                if (!(s instanceof Aa)) continue;
                if (s.has('Kids')) {
                  let A = s.get('Kids');
                  if (!Array.isArray(A)) continue;
                  for (let t of A) {
                    if (i.has(t))
                      throw new x(`Duplicate entry in "${this._type}" tree.`);
                    a.push(t), i.put(t);
                  }
                  continue;
                }
                let g = s.get(this._type);
                if (Array.isArray(g))
                  for (let i = 0, a = g.length; i < a; i += 2)
                    A.set(t.fetchIfRef(g[i]), t.fetchIfRef(g[i + 1]));
              }
              return A;
            }
            getRaw(A) {
              if (!this.root) return null;
              let t = this.xref,
                i = t.fetchIfRef(this.root),
                a = 0;
              for (; i.has('Kids'); ) {
                if (++a > 10)
                  return (
                    m(`Search depth limit reached for "${this._type}" tree.`),
                    null
                  );
                let s = i.get('Kids');
                if (!Array.isArray(s)) return null;
                let g = 0,
                  r = s.length - 1;
                for (; g <= r; ) {
                  let a = (g + r) >> 1,
                    n = t.fetchIfRef(s[a]),
                    o = n.get('Limits');
                  if (A < t.fetchIfRef(o[0])) r = a - 1;
                  else {
                    if (!(A > t.fetchIfRef(o[1]))) {
                      i = n;
                      break;
                    }
                    g = a + 1;
                  }
                }
                if (g > r) return null;
              }
              let s = i.get(this._type);
              if (Array.isArray(s)) {
                let i = 0,
                  a = s.length - 2;
                for (; i <= a; ) {
                  let g = (i + a) >> 1,
                    r = g + (1 & g),
                    n = t.fetchIfRef(s[r]);
                  if (A < n) a = r - 2;
                  else {
                    if (!(A > n)) return s[r + 1];
                    i = r + 2;
                  }
                }
              }
              return null;
            }
            get(A) {
              return this.xref.fetchIfRef(this.getRaw(A));
            }
          }
          class gi extends gt {
            constructor(A, t) {
              super(A, t, 'Names');
            }
          }
          class ga extends gt {
            constructor(A, t) {
              super(A, t, 'Nums');
            }
          }
          function gs() {
            (ac = Object.create(null)),
              (_ = Object.create(null)),
              ($ = Object.create(null)),
              (AA = Object.create(null)),
              t1.clear(),
              e4.cleanup();
          }
          function gg(A) {
            return A instanceof Aa
              ? A.has('UF')
                ? A.get('UF')
                : A.has('F')
                  ? A.get('F')
                  : A.has('Unix')
                    ? A.get('Unix')
                    : A.has('Mac')
                      ? A.get('Mac')
                      : A.has('DOS')
                        ? A.get('DOS')
                        : null
              : null;
          }
          class gr {
            #F = !1;
            constructor(A, t, i = !1) {
              A instanceof Aa &&
                ((this.xref = t),
                (this.root = A),
                A.has('FS') && (this.fs = A.get('FS')),
                A.has('RF') &&
                  m('Related file specifications are not supported'),
                i ||
                  (A.has('EF')
                    ? (this.#F = !0)
                    : m('Non-embedded file specifications are not supported')));
            }
            get filename() {
              let A = '',
                t = gg(this.root);
              return (
                t &&
                  'string' == typeof t &&
                  (A = T(t)
                    .replaceAll('\\\\', '\\')
                    .replaceAll('\\/', '/')
                    .replaceAll('\\', '/')),
                b(this, 'filename', A || 'unnamed')
              );
            }
            get content() {
              if (!this.#F) return null;
              this._contentRef ||= gg(this.root?.get('EF'));
              let A = null;
              if (this._contentRef) {
                let t = this.xref.fetchIfRef(this._contentRef);
                t instanceof AC
                  ? (A = t.getBytes())
                  : m(
                      'Embedded file specification points to non-existing/invalid content'
                    );
              } else m('Embedded file specification does not have any content');
              return A;
            }
            get description() {
              let A = '',
                t = this.root?.get('Desc');
              return (
                t && 'string' == typeof t && (A = T(t)),
                b(this, 'description', A)
              );
            }
            get serializable() {
              var A;
              return {
                rawFilename: this.filename,
                filename: (A = this.filename).substring(A.lastIndexOf('/') + 1),
                content: this.content,
                description: this.description,
              };
            }
          }
          function gn(A, t) {
            let i = A[t];
            return ' ' === i || '\n' === i || '\r' === i || '	' === i;
          }
          class go {
            _resolveEntities(A) {
              return A.replaceAll(/&([^;]+);/g, (A, t) => {
                if ('#x' === t.substring(0, 2))
                  return String.fromCodePoint(parseInt(t.substring(2), 16));
                if ('#' === t.substring(0, 1))
                  return String.fromCodePoint(parseInt(t.substring(1), 10));
                switch (t) {
                  case 'lt':
                    return '<';
                  case 'gt':
                    return '>';
                  case 'amp':
                    return '&';
                  case 'quot':
                    return '"';
                  case 'apos':
                    return "'";
                }
                return this.onResolveEntity(t);
              });
            }
            _parseContent(A, t) {
              let i = [],
                a = t;
              function s() {
                for (; a < A.length && gn(A, a); ) ++a;
              }
              for (
                ;
                a < A.length && !gn(A, a) && '>' !== A[a] && '/' !== A[a];

              )
                ++a;
              let g = A.substring(t, a);
              for (
                s();
                a < A.length && '>' !== A[a] && '/' !== A[a] && '?' !== A[a];

              ) {
                s();
                let t = '',
                  g = '';
                for (; a < A.length && !gn(A, a) && '=' !== A[a]; )
                  (t += A[a]), ++a;
                if ((s(), '=' !== A[a])) return null;
                ++a, s();
                let r = A[a];
                if ('"' !== r && "'" !== r) return null;
                let n = A.indexOf(r, ++a);
                if (n < 0) return null;
                (g = A.substring(a, n)),
                  i.push({ name: t, value: this._resolveEntities(g) }),
                  (a = n + 1),
                  s();
              }
              return { name: g, attributes: i, parsed: a - t };
            }
            _parseProcessingInstruction(A, t) {
              let i = t;
              for (
                ;
                i < A.length &&
                !gn(A, i) &&
                '>' !== A[i] &&
                '?' !== A[i] &&
                '/' !== A[i];

              )
                ++i;
              let a = A.substring(t, i);
              !(function () {
                for (; i < A.length && gn(A, i); ) ++i;
              })();
              let s = i;
              for (; i < A.length && ('?' !== A[i] || '>' !== A[i + 1]); ) ++i;
              return { name: a, value: A.substring(s, i), parsed: i - t };
            }
            parseXml(A) {
              let t = 0;
              for (; t < A.length; ) {
                let i = t;
                if ('<' === A[t]) {
                  let t;
                  switch (A[++i]) {
                    case '/':
                      if ((++i, (t = A.indexOf('>', i)) < 0)) {
                        this.onError(-9);
                        return;
                      }
                      this.onEndElement(A.substring(i, t)), (i = t + 1);
                      break;
                    case '?':
                      ++i;
                      let a = this._parseProcessingInstruction(A, i);
                      if (
                        '?>' !== A.substring(i + a.parsed, i + a.parsed + 2)
                      ) {
                        this.onError(-3);
                        return;
                      }
                      this.onPi(a.name, a.value), (i += a.parsed + 2);
                      break;
                    case '!':
                      if ('--' === A.substring(i + 1, i + 3)) {
                        if ((t = A.indexOf('-->', i + 3)) < 0) {
                          this.onError(-5);
                          return;
                        }
                        this.onComment(A.substring(i + 3, t)), (i = t + 3);
                      } else if ('[CDATA[' === A.substring(i + 1, i + 8)) {
                        if ((t = A.indexOf(']]>', i + 8)) < 0) {
                          this.onError(-2);
                          return;
                        }
                        this.onCdata(A.substring(i + 8, t)), (i = t + 3);
                      } else {
                        if ('DOCTYPE' !== A.substring(i + 1, i + 8)) {
                          this.onError(-6);
                          return;
                        }
                        {
                          let a = A.indexOf('[', i + 8),
                            s = !1;
                          if ((t = A.indexOf('>', i + 8)) < 0) {
                            this.onError(-4);
                            return;
                          }
                          if (a > 0 && t > a) {
                            if ((t = A.indexOf(']>', i + 8)) < 0) {
                              this.onError(-4);
                              return;
                            }
                            s = !0;
                          }
                          let g = A.substring(i + 8, t + (s ? 1 : 0));
                          this.onDoctype(g), (i = t + (s ? 2 : 1));
                        }
                      }
                      break;
                    default:
                      let s = this._parseContent(A, i);
                      if (null === s) {
                        this.onError(-6);
                        return;
                      }
                      let g = !1;
                      if ('/>' === A.substring(i + s.parsed, i + s.parsed + 2))
                        g = !0;
                      else if (
                        '>' !== A.substring(i + s.parsed, i + s.parsed + 1)
                      ) {
                        this.onError(-9);
                        return;
                      }
                      this.onBeginElement(s.name, s.attributes, g),
                        (i += s.parsed + (g ? 2 : 1));
                  }
                } else {
                  for (; i < A.length && '<' !== A[i]; ) i++;
                  let a = A.substring(t, i);
                  this.onText(this._resolveEntities(a));
                }
                t = i;
              }
            }
            onResolveEntity(A) {
              return `&${A};`;
            }
            onPi(A, t) {}
            onComment(A) {}
            onCdata(A) {}
            onDoctype(A) {}
            onText(A) {}
            onBeginElement(A, t, i) {}
            onEndElement(A) {}
            onError(A) {}
          }
          class gI {
            constructor(A, t) {
              (this.nodeName = A),
                (this.nodeValue = t),
                Object.defineProperty(this, 'parentNode', {
                  value: null,
                  writable: !0,
                });
            }
            get firstChild() {
              return this.childNodes?.[0];
            }
            get nextSibling() {
              let A = this.parentNode.childNodes;
              if (!A) return;
              let t = A.indexOf(this);
              return -1 !== t ? A[t + 1] : void 0;
            }
            get textContent() {
              return this.childNodes
                ? this.childNodes
                    .map(function (A) {
                      return A.textContent;
                    })
                    .join('')
                : this.nodeValue || '';
            }
            get children() {
              return this.childNodes || [];
            }
            hasChildNodes() {
              return this.childNodes?.length > 0;
            }
            searchNode(A, t) {
              if (t >= A.length) return this;
              let i = A[t];
              if (i.name.startsWith('#') && t < A.length - 1)
                return this.searchNode(A, t + 1);
              let a = [],
                s = this;
              for (;;) {
                if (i.name === s.nodeName) {
                  if (0 !== i.pos) {
                    if (0 === a.length) return null;
                    {
                      let [g] = a.pop(),
                        r = 0;
                      for (let a of g.childNodes)
                        if (i.name === a.nodeName) {
                          if (r === i.pos) return a.searchNode(A, t + 1);
                          r++;
                        }
                      return s.searchNode(A, t + 1);
                    }
                  }
                  {
                    let i = s.searchNode(A, t + 1);
                    if (null !== i) return i;
                  }
                }
                if (s.childNodes?.length > 0)
                  a.push([s, 0]), (s = s.childNodes[0]);
                else {
                  if (0 === a.length) return null;
                  for (; 0 !== a.length; ) {
                    let [A, t] = a.pop(),
                      i = t + 1;
                    if (i < A.childNodes.length) {
                      a.push([A, i]), (s = A.childNodes[i]);
                      break;
                    }
                  }
                  if (0 === a.length) return null;
                }
              }
            }
            dump(A) {
              if ('#text' !== this.nodeName) {
                if ((A.push(`<${this.nodeName}`), this.attributes))
                  for (let t of this.attributes)
                    A.push(` ${t.name}="${AL(t.value)}"`);
                if (this.hasChildNodes()) {
                  for (let t of (A.push('>'), this.childNodes)) t.dump(A);
                  A.push(`</${this.nodeName}>`);
                } else
                  this.nodeValue
                    ? A.push(`>${AL(this.nodeValue)}</${this.nodeName}>`)
                    : A.push('/>');
              } else A.push(AL(this.nodeValue));
            }
          }
          class gl extends go {
            constructor({ hasAttributes: A = !1, lowerCaseName: t = !1 }) {
              super(),
                (this._currentFragment = null),
                (this._stack = null),
                (this._errorCode = 0),
                (this._hasAttributes = A),
                (this._lowerCaseName = t);
            }
            parseFromString(A) {
              if (
                ((this._currentFragment = []),
                (this._stack = []),
                (this._errorCode = 0),
                this.parseXml(A),
                0 !== this._errorCode)
              )
                return;
              let [t] = this._currentFragment;
              return t ? { documentElement: t } : void 0;
            }
            onText(A) {
              if (
                (function (A) {
                  for (let t = 0, i = A.length; t < i; t++)
                    if (!gn(A, t)) return !1;
                  return !0;
                })(A)
              )
                return;
              let t = new gI('#text', A);
              this._currentFragment.push(t);
            }
            onCdata(A) {
              let t = new gI('#text', A);
              this._currentFragment.push(t);
            }
            onBeginElement(A, t, i) {
              this._lowerCaseName && (A = A.toLowerCase());
              let a = new gI(A);
              (a.childNodes = []),
                this._hasAttributes && (a.attributes = t),
                this._currentFragment.push(a),
                i ||
                  (this._stack.push(this._currentFragment),
                  (this._currentFragment = a.childNodes));
            }
            onEndElement(A) {
              this._currentFragment = this._stack.pop() || [];
              let t = this._currentFragment.at(-1);
              if (!t) return null;
              for (let A of t.childNodes) A.parentNode = t;
              return t;
            }
            onError(A) {
              this._errorCode = A;
            }
          }
          class gC {
            constructor(A) {
              A = this._repair(A);
              let t = new gl({ lowerCaseName: !0 }).parseFromString(A);
              (this._metadataMap = new Map()),
                (this._data = A),
                t && this._parse(t);
            }
            _repair(A) {
              return A.replace(/^[^<]+/, '').replaceAll(
                />\\376\\377([^<]+)/g,
                function (A, t) {
                  let i = t
                      .replaceAll(
                        /\\([0-3])([0-7])([0-7])/g,
                        function (A, t, i, a) {
                          return String.fromCharCode(64 * t + 8 * i + 1 * a);
                        }
                      )
                      .replaceAll(/&(amp|apos|gt|lt|quot);/g, function (A, t) {
                        switch (t) {
                          case 'amp':
                            return '&';
                          case 'apos':
                            return "'";
                          case 'gt':
                            return '>';
                          case 'lt':
                            return '<';
                          case 'quot':
                            return '"';
                        }
                        throw Error(`_repair: ${t} isn't defined.`);
                      }),
                    a = ['>'];
                  for (let A = 0, t = i.length; A < t; A += 2) {
                    let t = 256 * i.charCodeAt(A) + i.charCodeAt(A + 1);
                    t >= 32 && t < 127 && 60 !== t && 62 !== t && 38 !== t
                      ? a.push(String.fromCharCode(t))
                      : a.push(
                          '&#x' + (65536 + t).toString(16).substring(1) + ';'
                        );
                  }
                  return a.join('');
                }
              );
            }
            _getSequence(A) {
              let t = A.nodeName;
              return 'rdf:bag' !== t && 'rdf:seq' !== t && 'rdf:alt' !== t
                ? null
                : A.childNodes.filter((A) => 'rdf:li' === A.nodeName);
            }
            _parseArray(A) {
              if (!A.hasChildNodes()) return;
              let [t] = A.childNodes,
                i = this._getSequence(t) || [];
              this._metadataMap.set(
                A.nodeName,
                i.map((A) => A.textContent.trim())
              );
            }
            _parse(A) {
              let t = A.documentElement;
              if ('rdf:rdf' !== t.nodeName)
                for (t = t.firstChild; t && 'rdf:rdf' !== t.nodeName; )
                  t = t.nextSibling;
              if (t && 'rdf:rdf' === t.nodeName && t.hasChildNodes()) {
                for (let A of t.childNodes)
                  if ('rdf:description' === A.nodeName)
                    for (let t of A.childNodes) {
                      let A = t.nodeName;
                      switch (A) {
                        case '#text':
                          continue;
                        case 'dc:creator':
                        case 'dc:subject':
                          this._parseArray(t);
                          continue;
                      }
                      this._metadataMap.set(A, t.textContent.trim());
                    }
              }
            }
            get serializable() {
              return { parsedData: this._metadataMap, rawData: this._data };
            }
          }
          class gB extends es {
            constructor(A, t, i) {
              super(t),
                (this.str = A),
                (this.dict = A.dict),
                (this.decrypt = i),
                (this.nextChunk = null),
                (this.initialized = !1);
            }
            readBlock() {
              let A;
              if (
                (this.initialized
                  ? (A = this.nextChunk)
                  : ((A = this.str.getBytes(512)), (this.initialized = !0)),
                !A || 0 === A.length)
              ) {
                this.eof = !0;
                return;
              }
              this.nextChunk = this.str.getBytes(512);
              let t = this.nextChunk?.length > 0;
              A = (0, this.decrypt)(A, !t);
              let i = this.bufferLength,
                a = i + A.length;
              this.ensureBuffer(a).set(A, i), (this.bufferLength = a);
            }
          }
          class gh {
            constructor(A) {
              (this.a = 0), (this.b = 0);
              let t = new Uint8Array(256),
                i = A.length;
              for (let A = 0; A < 256; ++A) t[A] = A;
              for (let a = 0, s = 0; a < 256; ++a) {
                let g = t[a];
                (s = (s + g + A[a % i]) & 255), (t[a] = t[s]), (t[s] = g);
              }
              this.s = t;
            }
            encryptBlock(A) {
              let t = this.a,
                i = this.b,
                a = this.s,
                s = A.length,
                g = new Uint8Array(s);
              for (let r = 0; r < s; ++r) {
                t = (t + 1) & 255;
                let s = a[t];
                i = (i + s) & 255;
                let n = a[i];
                (a[t] = n), (a[i] = s), (g[r] = A[r] ^ a[(s + n) & 255]);
              }
              return (this.a = t), (this.b = i), g;
            }
            decryptBlock(A) {
              return this.encryptBlock(A);
            }
            encrypt(A) {
              return this.encryptBlock(A);
            }
          }
          let gQ = (function () {
            let A = new Uint8Array([
                7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 5,
                9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 4, 11, 16,
                23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 6, 10, 15, 21,
                6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21,
              ]),
              t = new Int32Array([
                -680876936, -389564586, 606105819, -1044525330, -176418897,
                1200080426, -1473231341, -45705983, 1770035416, -1958414417,
                -42063, -1990404162, 1804603682, -40341101, -1502002290,
                1236535329, -165796510, -1069501632, 643717713, -373897302,
                -701558691, 38016083, -660478335, -405537848, 568446438,
                -1019803690, -187363961, 1163531501, -1444681467, -51403784,
                1735328473, -1926607734, -378558, -2022574463, 1839030562,
                -35309556, -1530992060, 1272893353, -155497632, -1094730640,
                681279174, -358537222, -722521979, 76029189, -640364487,
                -421815835, 530742520, -995338651, -198630844, 1126891415,
                -1416354905, -57434055, 1700485571, -1894986606, -1051523,
                -2054922799, 1873313359, -30611744, -1560198380, 1309151649,
                -145523070, -1120210379, 718787259, -343485551,
              ]);
            return function (i, a, s) {
              let g,
                r,
                n = 1732584193,
                o = -271733879,
                I = -1732584194,
                l = 271733878,
                C = (s + 72) & -64,
                B = new Uint8Array(C);
              for (g = 0; g < s; ++g) B[g] = i[a++];
              B[g++] = 128;
              let h = C - 8;
              for (; g < h; ) B[g++] = 0;
              (B[g++] = (s << 3) & 255),
                (B[g++] = (s >> 5) & 255),
                (B[g++] = (s >> 13) & 255),
                (B[g++] = (s >> 21) & 255),
                (B[g++] = (s >>> 29) & 255),
                (B[g++] = 0),
                (B[g++] = 0),
                (B[g++] = 0);
              let Q = new Int32Array(16);
              for (g = 0; g < C; ) {
                for (r = 0; r < 16; ++r, g += 4)
                  Q[r] =
                    B[g] |
                    (B[g + 1] << 8) |
                    (B[g + 2] << 16) |
                    (B[g + 3] << 24);
                let i,
                  a,
                  s = n,
                  C = o,
                  h = I,
                  c = l;
                for (r = 0; r < 64; ++r) {
                  r < 16
                    ? ((i = (C & h) | (~C & c)), (a = r))
                    : r < 32
                      ? ((i = (c & C) | (~c & h)), (a = (5 * r + 1) & 15))
                      : r < 48
                        ? ((i = C ^ h ^ c), (a = (3 * r + 5) & 15))
                        : ((i = h ^ (C | ~c)), (a = (7 * r) & 15));
                  let g = c,
                    n = (s + i + t[r] + Q[a]) | 0,
                    o = A[r];
                  (c = h),
                    (h = C),
                    (C = (C + ((n << o) | (n >>> (32 - o)))) | 0),
                    (s = g);
                }
                (n = (n + s) | 0),
                  (o = (o + C) | 0),
                  (I = (I + h) | 0),
                  (l = (l + c) | 0);
              }
              return new Uint8Array([
                255 & n,
                (n >> 8) & 255,
                (n >> 16) & 255,
                (n >>> 24) & 255,
                255 & o,
                (o >> 8) & 255,
                (o >> 16) & 255,
                (o >>> 24) & 255,
                255 & I,
                (I >> 8) & 255,
                (I >> 16) & 255,
                (I >>> 24) & 255,
                255 & l,
                (l >> 8) & 255,
                (l >> 16) & 255,
                (l >>> 24) & 255,
              ]);
            };
          })();
          class gc {
            constructor(A, t) {
              (this.high = 0 | A), (this.low = 0 | t);
            }
            and(A) {
              (this.high &= A.high), (this.low &= A.low);
            }
            xor(A) {
              (this.high ^= A.high), (this.low ^= A.low);
            }
            or(A) {
              (this.high |= A.high), (this.low |= A.low);
            }
            shiftRight(A) {
              A >= 32
                ? ((this.low = (this.high >>> (A - 32)) | 0), (this.high = 0))
                : ((this.low = (this.low >>> A) | (this.high << (32 - A))),
                  (this.high = (this.high >>> A) | 0));
            }
            shiftLeft(A) {
              A >= 32
                ? ((this.high = this.low << (A - 32)), (this.low = 0))
                : ((this.high = (this.high << A) | (this.low >>> (32 - A))),
                  (this.low <<= A));
            }
            rotateRight(A) {
              let t, i;
              32 & A
                ? ((i = this.low), (t = this.high))
                : ((t = this.low), (i = this.high)),
                (A &= 31),
                (this.low = (t >>> A) | (i << (32 - A))),
                (this.high = (i >>> A) | (t << (32 - A)));
            }
            not() {
              (this.high = ~this.high), (this.low = ~this.low);
            }
            add(A) {
              let t = (this.low >>> 0) + (A.low >>> 0),
                i = (this.high >>> 0) + (A.high >>> 0);
              t > 4294967295 && (i += 1),
                (this.low = 0 | t),
                (this.high = 0 | i);
            }
            copyTo(A, t) {
              (A[t] = (this.high >>> 24) & 255),
                (A[t + 1] = (this.high >> 16) & 255),
                (A[t + 2] = (this.high >> 8) & 255),
                (A[t + 3] = 255 & this.high),
                (A[t + 4] = (this.low >>> 24) & 255),
                (A[t + 5] = (this.low >> 16) & 255),
                (A[t + 6] = (this.low >> 8) & 255),
                (A[t + 7] = 255 & this.low);
            }
            assign(A) {
              (this.high = A.high), (this.low = A.low);
            }
          }
          let gE = (function () {
              function A(A, t) {
                return (A >>> t) | (A << (32 - t));
              }
              let t = [
                1116352408, 1899447441, 3049323471, 3921009573, 961987163,
                1508970993, 2453635748, 2870763221, 3624381080, 310598401,
                607225278, 1426881987, 1925078388, 2162078206, 2614888103,
                3248222580, 3835390401, 4022224774, 264347078, 604807628,
                770255983, 1249150122, 1555081692, 1996064986, 2554220882,
                2821834349, 2952996808, 3210313671, 3336571891, 3584528711,
                113926993, 338241895, 666307205, 773529912, 1294757372,
                1396182291, 1695183700, 1986661051, 2177026350, 2456956037,
                2730485921, 2820302411, 3259730800, 3345764771, 3516065817,
                3600352804, 4094571909, 275423344, 430227734, 506948616,
                659060556, 883997877, 958139571, 1322822218, 1537002063,
                1747873779, 1955562222, 2024104815, 2227730452, 2361852424,
                2428436474, 2756734187, 3204031479, 3329325298,
              ];
              return function (i, a, s) {
                var g, r, n, o, I, l, C, B;
                let h,
                  Q,
                  c = 1779033703,
                  E = 3144134277,
                  u = 1013904242,
                  d = 2773480762,
                  f = 1359893119,
                  p = 2600822924,
                  m = 528734635,
                  y = 1541459225,
                  w = 64 * Math.ceil((s + 9) / 64),
                  D = new Uint8Array(w);
                for (h = 0; h < s; ++h) D[h] = i[a++];
                D[h++] = 128;
                let b = w - 8;
                for (; h < b; ) D[h++] = 0;
                (D[h++] = 0),
                  (D[h++] = 0),
                  (D[h++] = 0),
                  (D[h++] = (s >>> 29) & 255),
                  (D[h++] = (s >> 21) & 255),
                  (D[h++] = (s >> 13) & 255),
                  (D[h++] = (s >> 5) & 255),
                  (D[h++] = (s << 3) & 255);
                let k = new Uint32Array(64);
                for (h = 0; h < w; ) {
                  for (Q = 0; Q < 16; ++Q)
                    (k[Q] =
                      (D[h] << 24) |
                      (D[h + 1] << 16) |
                      (D[h + 2] << 8) |
                      D[h + 3]),
                      (h += 4);
                  for (Q = 16; Q < 64; ++Q)
                    k[Q] =
                      ((A((g = k[Q - 2]), 17) ^ A(g, 19) ^ (g >>> 10)) +
                        k[Q - 7] +
                        (A((r = k[Q - 15]), 7) ^ A(r, 18) ^ (r >>> 3)) +
                        k[Q - 16]) |
                      0;
                  let i,
                    a,
                    s = c,
                    w = E,
                    b = u,
                    F = d,
                    S = f,
                    R = p,
                    G = m,
                    N = y;
                  for (Q = 0; Q < 64; ++Q)
                    (i =
                      N +
                      (A((n = S), 6) ^ A(n, 11) ^ A(n, 25)) +
                      (((o = S) & R) ^ (~o & G)) +
                      t[Q] +
                      k[Q]),
                      (a =
                        (A((I = s), 2) ^ A(I, 13) ^ A(I, 22)) +
                        (((l = s) & (C = w)) ^ (l & (B = b)) ^ (C & B))),
                      (N = G),
                      (G = R),
                      (R = S),
                      (S = (F + i) | 0),
                      (F = b),
                      (b = w),
                      (w = s),
                      (s = (i + a) | 0);
                  (c = (c + s) | 0),
                    (E = (E + w) | 0),
                    (u = (u + b) | 0),
                    (d = (d + F) | 0),
                    (f = (f + S) | 0),
                    (p = (p + R) | 0),
                    (m = (m + G) | 0),
                    (y = (y + N) | 0);
                }
                return new Uint8Array([
                  (c >> 24) & 255,
                  (c >> 16) & 255,
                  (c >> 8) & 255,
                  255 & c,
                  (E >> 24) & 255,
                  (E >> 16) & 255,
                  (E >> 8) & 255,
                  255 & E,
                  (u >> 24) & 255,
                  (u >> 16) & 255,
                  (u >> 8) & 255,
                  255 & u,
                  (d >> 24) & 255,
                  (d >> 16) & 255,
                  (d >> 8) & 255,
                  255 & d,
                  (f >> 24) & 255,
                  (f >> 16) & 255,
                  (f >> 8) & 255,
                  255 & f,
                  (p >> 24) & 255,
                  (p >> 16) & 255,
                  (p >> 8) & 255,
                  255 & p,
                  (m >> 24) & 255,
                  (m >> 16) & 255,
                  (m >> 8) & 255,
                  255 & m,
                  (y >> 24) & 255,
                  (y >> 16) & 255,
                  (y >> 8) & 255,
                  255 & y,
                ]);
              };
            })(),
            gu = (function () {
              let A = [
                new gc(1116352408, 3609767458),
                new gc(1899447441, 602891725),
                new gc(3049323471, 3964484399),
                new gc(3921009573, 2173295548),
                new gc(961987163, 4081628472),
                new gc(1508970993, 3053834265),
                new gc(2453635748, 2937671579),
                new gc(2870763221, 3664609560),
                new gc(3624381080, 2734883394),
                new gc(310598401, 1164996542),
                new gc(607225278, 1323610764),
                new gc(1426881987, 3590304994),
                new gc(1925078388, 4068182383),
                new gc(2162078206, 991336113),
                new gc(2614888103, 633803317),
                new gc(3248222580, 3479774868),
                new gc(3835390401, 2666613458),
                new gc(4022224774, 944711139),
                new gc(264347078, 2341262773),
                new gc(604807628, 2007800933),
                new gc(770255983, 1495990901),
                new gc(1249150122, 1856431235),
                new gc(1555081692, 3175218132),
                new gc(1996064986, 2198950837),
                new gc(2554220882, 3999719339),
                new gc(2821834349, 766784016),
                new gc(2952996808, 2566594879),
                new gc(3210313671, 3203337956),
                new gc(3336571891, 1034457026),
                new gc(3584528711, 2466948901),
                new gc(113926993, 3758326383),
                new gc(338241895, 168717936),
                new gc(666307205, 1188179964),
                new gc(773529912, 1546045734),
                new gc(1294757372, 1522805485),
                new gc(1396182291, 2643833823),
                new gc(1695183700, 2343527390),
                new gc(1986661051, 1014477480),
                new gc(2177026350, 1206759142),
                new gc(2456956037, 344077627),
                new gc(2730485921, 1290863460),
                new gc(2820302411, 3158454273),
                new gc(3259730800, 3505952657),
                new gc(3345764771, 106217008),
                new gc(3516065817, 3606008344),
                new gc(3600352804, 1432725776),
                new gc(4094571909, 1467031594),
                new gc(275423344, 851169720),
                new gc(430227734, 3100823752),
                new gc(506948616, 1363258195),
                new gc(659060556, 3750685593),
                new gc(883997877, 3785050280),
                new gc(958139571, 3318307427),
                new gc(1322822218, 3812723403),
                new gc(1537002063, 2003034995),
                new gc(1747873779, 3602036899),
                new gc(1955562222, 1575990012),
                new gc(2024104815, 1125592928),
                new gc(2227730452, 2716904306),
                new gc(2361852424, 442776044),
                new gc(2428436474, 593698344),
                new gc(2756734187, 3733110249),
                new gc(3204031479, 2999351573),
                new gc(3329325298, 3815920427),
                new gc(3391569614, 3928383900),
                new gc(3515267271, 566280711),
                new gc(3940187606, 3454069534),
                new gc(4118630271, 4000239992),
                new gc(116418474, 1914138554),
                new gc(174292421, 2731055270),
                new gc(289380356, 3203993006),
                new gc(460393269, 320620315),
                new gc(685471733, 587496836),
                new gc(852142971, 1086792851),
                new gc(1017036298, 365543100),
                new gc(1126000580, 2618297676),
                new gc(1288033470, 3409855158),
                new gc(1501505948, 4234509866),
                new gc(1607167915, 987167468),
                new gc(1816402316, 1246189591),
              ];
              return function (t, i, a, s = !1) {
                let g, r, n, o, I, l, C, B, h, Q, c, E;
                s
                  ? ((g = new gc(3418070365, 3238371032)),
                    (r = new gc(1654270250, 914150663)),
                    (n = new gc(2438529370, 812702999)),
                    (o = new gc(355462360, 4144912697)),
                    (I = new gc(1731405415, 4290775857)),
                    (l = new gc(2394180231, 1750603025)),
                    (C = new gc(3675008525, 1694076839)),
                    (B = new gc(1203062813, 3204075428)))
                  : ((g = new gc(1779033703, 4089235720)),
                    (r = new gc(3144134277, 2227873595)),
                    (n = new gc(1013904242, 4271175723)),
                    (o = new gc(2773480762, 1595750129)),
                    (I = new gc(1359893119, 2917565137)),
                    (l = new gc(2600822924, 725511199)),
                    (C = new gc(528734635, 4215389547)),
                    (B = new gc(1541459225, 327033209)));
                let u = 128 * Math.ceil((a + 17) / 128),
                  d = new Uint8Array(u);
                for (h = 0; h < a; ++h) d[h] = t[i++];
                d[h++] = 128;
                let f = u - 16;
                for (; h < f; ) d[h++] = 0;
                (d[h++] = 0),
                  (d[h++] = 0),
                  (d[h++] = 0),
                  (d[h++] = 0),
                  (d[h++] = 0),
                  (d[h++] = 0),
                  (d[h++] = 0),
                  (d[h++] = 0),
                  (d[h++] = 0),
                  (d[h++] = 0),
                  (d[h++] = 0),
                  (d[h++] = (a >>> 29) & 255),
                  (d[h++] = (a >> 21) & 255),
                  (d[h++] = (a >> 13) & 255),
                  (d[h++] = (a >> 5) & 255),
                  (d[h++] = (a << 3) & 255);
                let p = Array(80);
                for (h = 0; h < 80; h++) p[h] = new gc(0, 0);
                let m = new gc(0, 0),
                  y = new gc(0, 0),
                  w = new gc(0, 0),
                  D = new gc(0, 0),
                  b = new gc(0, 0),
                  k = new gc(0, 0),
                  F = new gc(0, 0),
                  S = new gc(0, 0),
                  R = new gc(0, 0),
                  G = new gc(0, 0),
                  N = new gc(0, 0),
                  x = new gc(0, 0);
                for (h = 0; h < u; ) {
                  var U, M, J, L, H, Y, K, v, q, T, P;
                  for (Q = 0; Q < 16; ++Q)
                    (p[Q].high =
                      (d[h] << 24) |
                      (d[h + 1] << 16) |
                      (d[h + 2] << 8) |
                      d[h + 3]),
                      (p[Q].low =
                        (d[h + 4] << 24) |
                        (d[h + 5] << 16) |
                        (d[h + 6] << 8) |
                        d[h + 7]),
                      (h += 8);
                  for (Q = 16; Q < 80; ++Q)
                    (U = c = p[Q]),
                      (M = p[Q - 2]),
                      U.assign(M),
                      U.rotateRight(19),
                      x.assign(M),
                      x.rotateRight(61),
                      U.xor(x),
                      x.assign(M),
                      x.shiftRight(6),
                      U.xor(x),
                      c.add(p[Q - 7]),
                      (J = p[Q - 15]),
                      N.assign(J),
                      N.rotateRight(1),
                      x.assign(J),
                      x.rotateRight(8),
                      N.xor(x),
                      x.assign(J),
                      x.shiftRight(7),
                      N.xor(x),
                      c.add(N),
                      c.add(p[Q - 16]);
                  for (
                    m.assign(g),
                      y.assign(r),
                      w.assign(n),
                      D.assign(o),
                      b.assign(I),
                      k.assign(l),
                      F.assign(C),
                      S.assign(B),
                      Q = 0;
                    Q < 80;
                    ++Q
                  )
                    R.assign(S),
                      (L = b),
                      N.assign(L),
                      N.rotateRight(14),
                      x.assign(L),
                      x.rotateRight(18),
                      N.xor(x),
                      x.assign(L),
                      x.rotateRight(41),
                      N.xor(x),
                      R.add(N),
                      (H = b),
                      (Y = k),
                      (K = F),
                      N.assign(H),
                      N.and(Y),
                      x.assign(H),
                      x.not(),
                      x.and(K),
                      N.xor(x),
                      R.add(N),
                      R.add(A[Q]),
                      R.add(p[Q]),
                      (v = m),
                      G.assign(v),
                      G.rotateRight(28),
                      x.assign(v),
                      x.rotateRight(34),
                      G.xor(x),
                      x.assign(v),
                      x.rotateRight(39),
                      G.xor(x),
                      (q = m),
                      (T = y),
                      (P = w),
                      N.assign(q),
                      N.and(T),
                      x.assign(q),
                      x.and(P),
                      N.xor(x),
                      x.assign(T),
                      x.and(P),
                      N.xor(x),
                      G.add(N),
                      (c = S),
                      (S = F),
                      (F = k),
                      (k = b),
                      D.add(R),
                      (b = D),
                      (D = w),
                      (w = y),
                      (y = m),
                      c.assign(R),
                      c.add(G),
                      (m = c);
                  g.add(m),
                    r.add(y),
                    n.add(w),
                    o.add(D),
                    I.add(b),
                    l.add(k),
                    C.add(F),
                    B.add(S);
                }
                return (
                  s
                    ? ((E = new Uint8Array(48)),
                      g.copyTo(E, 0),
                      r.copyTo(E, 8),
                      n.copyTo(E, 16),
                      o.copyTo(E, 24),
                      I.copyTo(E, 32),
                      l.copyTo(E, 40))
                    : ((E = new Uint8Array(64)),
                      g.copyTo(E, 0),
                      r.copyTo(E, 8),
                      n.copyTo(E, 16),
                      o.copyTo(E, 24),
                      I.copyTo(E, 32),
                      l.copyTo(E, 40),
                      C.copyTo(E, 48),
                      B.copyTo(E, 56)),
                  E
                );
              };
            })();
          class gd {
            decryptBlock(A) {
              return A;
            }
            encrypt(A) {
              return A;
            }
          }
          class gf {
            constructor() {
              (this._s = new Uint8Array([
                99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215,
                171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162,
                175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204,
                52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150,
                5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27,
                110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0,
                237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208,
                239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159,
                168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16,
                255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126,
                61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70,
                238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92,
                194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141,
                213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37,
                46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138,
                112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193,
                29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135,
                233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65,
                153, 45, 15, 176, 84, 187, 22,
              ])),
                (this._inv_s = new Uint8Array([
                  82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243,
                  215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67,
                  68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61,
                  238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217,
                  36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246,
                  100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146,
                  108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167,
                  141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228,
                  88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193,
                  175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220,
                  234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116,
                  34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110,
                  71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24,
                  190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192,
                  254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49,
                  177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181,
                  74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59,
                  77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97,
                  23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33,
                  12, 125,
                ])),
                (this._mix = new Uint32Array([
                  0, 235474187, 470948374, 303765277, 941896748, 908933415,
                  607530554, 708780849, 1883793496, 2118214995, 1817866830,
                  1649639237, 1215061108, 1181045119, 1417561698, 1517767529,
                  3767586992, 4003061179, 4236429990, 4069246893, 3635733660,
                  3602770327, 3299278474, 3400528769, 2430122216, 2664543715,
                  2362090238, 2193862645, 2835123396, 2801107407, 3035535058,
                  3135740889, 3678124923, 3576870512, 3341394285, 3374361702,
                  3810496343, 3977675356, 4279080257, 4043610186, 2876494627,
                  2776292904, 3076639029, 3110650942, 2472011535, 2640243204,
                  2403728665, 2169303058, 1001089995, 899835584, 666464733,
                  699432150, 59727847, 226906860, 530400753, 294930682,
                  1273168787, 1172967064, 1475418501, 1509430414, 1942435775,
                  2110667444, 1876241833, 1641816226, 2910219766, 2743034109,
                  2976151520, 3211623147, 2505202138, 2606453969, 2302690252,
                  2269728455, 3711829422, 3543599269, 3240894392, 3475313331,
                  3843699074, 3943906441, 4178062228, 4144047775, 1306967366,
                  1139781709, 1374988112, 1610459739, 1975683434, 2076935265,
                  1775276924, 1742315127, 1034867998, 866637845, 566021896,
                  800440835, 92987698, 193195065, 429456164, 395441711,
                  1984812685, 2017778566, 1784663195, 1683407248, 1315562145,
                  1080094634, 1383856311, 1551037884, 101039829, 135050206,
                  437757123, 337553864, 1042385657, 807962610, 573804783,
                  742039012, 2531067453, 2564033334, 2328828971, 2227573024,
                  2935566865, 2700099354, 3001755655, 3168937228, 3868552805,
                  3902563182, 4203181171, 4102977912, 3736164937, 3501741890,
                  3265478751, 3433712980, 1106041591, 1340463100, 1576976609,
                  1408749034, 2043211483, 2009195472, 1708848333, 1809054150,
                  832877231, 1068351396, 766945465, 599762354, 159417987,
                  126454664, 361929877, 463180190, 2709260871, 2943682380,
                  3178106961, 3009879386, 2572697195, 2538681184, 2236228733,
                  2336434550, 3509871135, 3745345300, 3441850377, 3274667266,
                  3910161971, 3877198648, 4110568485, 4211818798, 2597806476,
                  2497604743, 2261089178, 2295101073, 2733856160, 2902087851,
                  3202437046, 2968011453, 3936291284, 3835036895, 4136440770,
                  4169408201, 3535486456, 3702665459, 3467192302, 3231722213,
                  2051518780, 1951317047, 1716890410, 1750902305, 1113818384,
                  1282050075, 1584504582, 1350078989, 168810852, 67556463,
                  371049330, 404016761, 841739592, 1008918595, 775550814,
                  540080725, 3969562369, 3801332234, 4035489047, 4269907996,
                  3569255213, 3669462566, 3366754619, 3332740144, 2631065433,
                  2463879762, 2160117071, 2395588676, 2767645557, 2868897406,
                  3102011747, 3069049960, 202008497, 33778362, 270040487,
                  504459436, 875451293, 975658646, 675039627, 641025152,
                  2084704233, 1917518562, 1615861247, 1851332852, 1147550661,
                  1248802510, 1484005843, 1451044056, 933301370, 967311729,
                  733156972, 632953703, 260388950, 25965917, 328671808,
                  496906059, 1206477858, 1239443753, 1543208500, 1441952575,
                  2144161806, 1908694277, 1675577880, 1842759443, 3610369226,
                  3644379585, 3408119516, 3307916247, 4011190502, 3776767469,
                  4077384432, 4245618683, 2809771154, 2842737049, 3144396420,
                  3043140495, 2673705150, 2438237621, 2203032232, 2370213795,
                ])),
                (this._mixCol = new Uint8Array(256));
              for (let A = 0; A < 256; A++)
                this._mixCol[A] = A < 128 ? A << 1 : (A << 1) ^ 27;
              (this.buffer = new Uint8Array(16)), (this.bufferPosition = 0);
            }
            _expandKey(A) {
              y('Cannot call `_expandKey` on the base class');
            }
            _decrypt(A, t) {
              let i, a, s;
              let g = new Uint8Array(16);
              g.set(A);
              for (let A = 0, i = this._keySize; A < 16; ++A, ++i) g[A] ^= t[i];
              for (let A = this._cyclesOfRepetition - 1; A >= 1; --A) {
                (i = g[13]),
                  (g[13] = g[9]),
                  (g[9] = g[5]),
                  (g[5] = g[1]),
                  (g[1] = i),
                  (i = g[14]),
                  (a = g[10]),
                  (g[14] = g[6]),
                  (g[10] = g[2]),
                  (g[6] = i),
                  (g[2] = a),
                  (i = g[15]),
                  (a = g[11]),
                  (s = g[7]),
                  (g[15] = g[3]),
                  (g[11] = i),
                  (g[7] = a),
                  (g[3] = s);
                for (let A = 0; A < 16; ++A) g[A] = this._inv_s[g[A]];
                for (let i = 0, a = 16 * A; i < 16; ++i, ++a) g[i] ^= t[a];
                for (let A = 0; A < 16; A += 4) {
                  let t = this._mix[g[A]],
                    a = this._mix[g[A + 1]],
                    s = this._mix[g[A + 2]],
                    r = this._mix[g[A + 3]];
                  (i =
                    t ^
                    (a >>> 8) ^
                    (a << 24) ^
                    (s >>> 16) ^
                    (s << 16) ^
                    (r >>> 24) ^
                    (r << 8)),
                    (g[A] = (i >>> 24) & 255),
                    (g[A + 1] = (i >> 16) & 255),
                    (g[A + 2] = (i >> 8) & 255),
                    (g[A + 3] = 255 & i);
                }
              }
              (i = g[13]),
                (g[13] = g[9]),
                (g[9] = g[5]),
                (g[5] = g[1]),
                (g[1] = i),
                (i = g[14]),
                (a = g[10]),
                (g[14] = g[6]),
                (g[10] = g[2]),
                (g[6] = i),
                (g[2] = a),
                (i = g[15]),
                (a = g[11]),
                (s = g[7]),
                (g[15] = g[3]),
                (g[11] = i),
                (g[7] = a),
                (g[3] = s);
              for (let A = 0; A < 16; ++A)
                (g[A] = this._inv_s[g[A]]), (g[A] ^= t[A]);
              return g;
            }
            _encrypt(A, t) {
              let i, a, s;
              let g = this._s,
                r = new Uint8Array(16);
              r.set(A);
              for (let A = 0; A < 16; ++A) r[A] ^= t[A];
              for (let A = 1; A < this._cyclesOfRepetition; A++) {
                for (let A = 0; A < 16; ++A) r[A] = g[r[A]];
                (s = r[1]),
                  (r[1] = r[5]),
                  (r[5] = r[9]),
                  (r[9] = r[13]),
                  (r[13] = s),
                  (s = r[2]),
                  (a = r[6]),
                  (r[2] = r[10]),
                  (r[6] = r[14]),
                  (r[10] = s),
                  (r[14] = a),
                  (s = r[3]),
                  (a = r[7]),
                  (i = r[11]),
                  (r[3] = r[15]),
                  (r[7] = s),
                  (r[11] = a),
                  (r[15] = i);
                for (let A = 0; A < 16; A += 4) {
                  let t = r[A + 0],
                    a = r[A + 1],
                    s = r[A + 2],
                    g = r[A + 3];
                  (i = t ^ a ^ s ^ g),
                    (r[A + 0] ^= i ^ this._mixCol[t ^ a]),
                    (r[A + 1] ^= i ^ this._mixCol[a ^ s]),
                    (r[A + 2] ^= i ^ this._mixCol[s ^ g]),
                    (r[A + 3] ^= i ^ this._mixCol[g ^ t]);
                }
                for (let i = 0, a = 16 * A; i < 16; ++i, ++a) r[i] ^= t[a];
              }
              for (let A = 0; A < 16; ++A) r[A] = g[r[A]];
              (s = r[1]),
                (r[1] = r[5]),
                (r[5] = r[9]),
                (r[9] = r[13]),
                (r[13] = s),
                (s = r[2]),
                (a = r[6]),
                (r[2] = r[10]),
                (r[6] = r[14]),
                (r[10] = s),
                (r[14] = a),
                (s = r[3]),
                (a = r[7]),
                (i = r[11]),
                (r[3] = r[15]),
                (r[7] = s),
                (r[11] = a),
                (r[15] = i);
              for (let A = 0, i = this._keySize; A < 16; ++A, ++i) r[A] ^= t[i];
              return r;
            }
            _decryptBlock2(A, t) {
              let i = A.length,
                a = this.buffer,
                s = this.bufferPosition,
                g = [],
                r = this.iv;
              for (let t = 0; t < i; ++t) {
                if (((a[s] = A[t]), ++s < 16)) continue;
                let i = this._decrypt(a, this._key);
                for (let A = 0; A < 16; ++A) i[A] ^= r[A];
                (r = a), g.push(i), (a = new Uint8Array(16)), (s = 0);
              }
              if (
                ((this.buffer = a),
                (this.bufferLength = s),
                (this.iv = r),
                0 === g.length)
              )
                return new Uint8Array(0);
              let n = 16 * g.length;
              if (t) {
                let A = g.at(-1),
                  t = A[15];
                if (t <= 16) {
                  for (let i = 15, a = 16 - t; i >= a; --i)
                    if (A[i] !== t) {
                      t = 0;
                      break;
                    }
                  (n -= t), (g[g.length - 1] = A.subarray(0, 16 - t));
                }
              }
              let o = new Uint8Array(n);
              for (let A = 0, t = 0, i = g.length; A < i; ++A, t += 16)
                o.set(g[A], t);
              return o;
            }
            decryptBlock(A, t, i = null) {
              let a = A.length,
                s = this.buffer,
                g = this.bufferPosition;
              if (i) this.iv = i;
              else {
                for (let t = 0; g < 16 && t < a; ++t, ++g) s[g] = A[t];
                if (g < 16) return (this.bufferLength = g), new Uint8Array(0);
                (this.iv = s), (A = A.subarray(16));
              }
              return (
                (this.buffer = new Uint8Array(16)),
                (this.bufferLength = 0),
                (this.decryptBlock = this._decryptBlock2),
                this.decryptBlock(A, t)
              );
            }
            encrypt(A, t) {
              let i = A.length,
                a = this.buffer,
                s = this.bufferPosition,
                g = [];
              t || (t = new Uint8Array(16));
              for (let r = 0; r < i; ++r) {
                if (((a[s] = A[r]), ++s < 16)) continue;
                for (let A = 0; A < 16; ++A) a[A] ^= t[A];
                let i = this._encrypt(a, this._key);
                (t = i), g.push(i), (a = new Uint8Array(16)), (s = 0);
              }
              if (
                ((this.buffer = a),
                (this.bufferLength = s),
                (this.iv = t),
                0 === g.length)
              )
                return new Uint8Array(0);
              let r = 16 * g.length,
                n = new Uint8Array(r);
              for (let A = 0, t = 0, i = g.length; A < i; ++A, t += 16)
                n.set(g[A], t);
              return n;
            }
          }
          class gp extends gf {
            constructor(A) {
              super(),
                (this._cyclesOfRepetition = 10),
                (this._keySize = 160),
                (this._rcon = new Uint8Array([
                  141, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77,
                  154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250,
                  239, 197, 145, 57, 114, 228, 211, 189, 97, 194, 159, 37, 74,
                  148, 51, 102, 204, 131, 29, 58, 116, 232, 203, 141, 1, 2, 4,
                  8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94,
                  188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145,
                  57, 114, 228, 211, 189, 97, 194, 159, 37, 74, 148, 51, 102,
                  204, 131, 29, 58, 116, 232, 203, 141, 1, 2, 4, 8, 16, 32, 64,
                  128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198,
                  151, 53, 106, 212, 179, 125, 250, 239, 197, 145, 57, 114, 228,
                  211, 189, 97, 194, 159, 37, 74, 148, 51, 102, 204, 131, 29,
                  58, 116, 232, 203, 141, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54,
                  108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106,
                  212, 179, 125, 250, 239, 197, 145, 57, 114, 228, 211, 189, 97,
                  194, 159, 37, 74, 148, 51, 102, 204, 131, 29, 58, 116, 232,
                  203, 141, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171,
                  77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125,
                  250, 239, 197, 145, 57, 114, 228, 211, 189, 97, 194, 159, 37,
                  74, 148, 51, 102, 204, 131, 29, 58, 116, 232, 203, 141,
                ])),
                (this._key = this._expandKey(A));
            }
            _expandKey(A) {
              let t = this._s,
                i = this._rcon,
                a = new Uint8Array(176);
              a.set(A);
              for (let A = 16, s = 1; A < 176; ++s) {
                let g = a[A - 3],
                  r = a[A - 2],
                  n = a[A - 1],
                  o = a[A - 4];
                (g = t[g]), (r = t[r]), (n = t[n]), (o = t[o]), (g ^= i[s]);
                for (let t = 0; t < 4; ++t)
                  (a[A] = g ^= a[A - 16]),
                    (a[++A] = r ^= a[A - 16]),
                    (a[++A] = n ^= a[A - 16]),
                    (a[++A] = o ^= a[A - 16]),
                    A++;
              }
              return a;
            }
          }
          class gm extends gf {
            constructor(A) {
              super(),
                (this._cyclesOfRepetition = 14),
                (this._keySize = 224),
                (this._key = this._expandKey(A));
            }
            _expandKey(A) {
              let t = this._s,
                i = new Uint8Array(240);
              i.set(A);
              let a,
                s,
                g,
                r,
                n = 1;
              for (let A = 32, o = 1; A < 240; ++o) {
                A % 32 == 16
                  ? ((a = t[a]), (s = t[s]), (g = t[g]), (r = t[r]))
                  : A % 32 == 0 &&
                    ((a = i[A - 3]),
                    (s = i[A - 2]),
                    (g = i[A - 1]),
                    (r = i[A - 4]),
                    (a = t[a]),
                    (s = t[s]),
                    (g = t[g]),
                    (r = t[r]),
                    (a ^= n),
                    (n <<= 1) >= 256 && (n = 255 & (27 ^ n)));
                for (let t = 0; t < 4; ++t)
                  (i[A] = a ^= i[A - 32]),
                    (i[++A] = s ^= i[A - 32]),
                    (i[++A] = g ^= i[A - 32]),
                    (i[++A] = r ^= i[A - 32]),
                    A++;
              }
              return i;
            }
          }
          class gy {
            checkOwnerPassword(A, t, i, a) {
              let s = new Uint8Array(A.length + 56);
              return (
                s.set(A, 0),
                s.set(t, A.length),
                s.set(i, A.length + t.length),
                Z(gE(s, 0, s.length), a)
              );
            }
            checkUserPassword(A, t, i) {
              let a = new Uint8Array(A.length + 8);
              return a.set(A, 0), a.set(t, A.length), Z(gE(a, 0, a.length), i);
            }
            getOwnerKey(A, t, i, a) {
              let s = new Uint8Array(A.length + 56);
              s.set(A, 0), s.set(t, A.length), s.set(i, A.length + t.length);
              let g = gE(s, 0, s.length);
              return new gm(g).decryptBlock(a, !1, new Uint8Array(16));
            }
            getUserKey(A, t, i) {
              let a = new Uint8Array(A.length + 8);
              a.set(A, 0), a.set(t, A.length);
              let s = gE(a, 0, a.length);
              return new gm(s).decryptBlock(i, !1, new Uint8Array(16));
            }
          }
          class gw {
            _hash(A, t, i) {
              let a = gE(t, 0, t.length).subarray(0, 32),
                s = [0],
                g = 0;
              for (; g < 64 || s.at(-1) > g - 32; ) {
                let t = A.length + a.length + i.length,
                  r = new Uint8Array(t),
                  n = 0;
                r.set(A, n),
                  (n += A.length),
                  r.set(a, n),
                  (n += a.length),
                  r.set(i, n);
                let o = new Uint8Array(64 * t);
                for (let A = 0, i = 0; A < 64; A++, i += t) o.set(r, i);
                s = new gp(a.subarray(0, 16)).encrypt(o, a.subarray(16, 32));
                let I = s.slice(0, 16).reduce((A, t) => A + t, 0) % 3;
                0 === I
                  ? (a = gE(s, 0, s.length))
                  : 1 === I
                    ? (a = gu(s, 0, s.length, !0))
                    : 2 === I && (a = gu(s, 0, s.length)),
                  g++;
              }
              return a.subarray(0, 32);
            }
            checkOwnerPassword(A, t, i, a) {
              let s = new Uint8Array(A.length + 56);
              return (
                s.set(A, 0),
                s.set(t, A.length),
                s.set(i, A.length + t.length),
                Z(this._hash(A, s, i), a)
              );
            }
            checkUserPassword(A, t, i) {
              let a = new Uint8Array(A.length + 8);
              return (
                a.set(A, 0), a.set(t, A.length), Z(this._hash(A, a, []), i)
              );
            }
            getOwnerKey(A, t, i, a) {
              let s = new Uint8Array(A.length + 56);
              s.set(A, 0), s.set(t, A.length), s.set(i, A.length + t.length);
              let g = this._hash(A, s, i);
              return new gm(g).decryptBlock(a, !1, new Uint8Array(16));
            }
            getUserKey(A, t, i) {
              let a = new Uint8Array(A.length + 8);
              a.set(A, 0), a.set(t, A.length);
              let s = this._hash(A, a, []);
              return new gm(s).decryptBlock(i, !1, new Uint8Array(16));
            }
          }
          class gD {
            constructor(A, t) {
              (this.StringCipherConstructor = A),
                (this.StreamCipherConstructor = t);
            }
            createStream(A, t) {
              let i = new this.StreamCipherConstructor();
              return new gB(A, t, function (A, t) {
                return i.decryptBlock(A, t);
              });
            }
            decryptString(A) {
              let t = new this.StringCipherConstructor(),
                i = J(A);
              return M((i = t.decryptBlock(i, !0)));
            }
            encryptString(A) {
              let t = new this.StringCipherConstructor();
              if (t instanceof gf) {
                let i = 16 - (A.length % 16);
                A += String.fromCharCode(i).repeat(i);
                let a = new Uint8Array(16);
                if ('undefined' != typeof crypto) crypto.getRandomValues(a);
                else
                  for (let A = 0; A < 16; A++)
                    a[A] = Math.floor(256 * Math.random());
                let s = J(A);
                s = t.encrypt(s, a);
                let g = new Uint8Array(16 + s.length);
                return g.set(a), g.set(s, 16), M(g);
              }
              let i = J(A);
              return M((i = t.encrypt(i)));
            }
          }
          class gb {
            static #S = new Uint8Array([
              40, 191, 78, 94, 78, 117, 138, 65, 100, 0, 78, 86, 255, 250, 1, 8,
              46, 46, 0, 182, 208, 104, 62, 128, 47, 12, 169, 254, 100, 83, 105,
              122,
            ]);
            #R(A, t, i, a, s, g, r, n, o, I, l, C) {
              if (t) {
                let A = Math.min(127, t.length);
                t = t.subarray(0, A);
              } else t = [];
              let B = 6 === A ? new gw() : new gy();
              return B.checkUserPassword(t, n, r)
                ? B.getUserKey(t, o, l)
                : t.length && B.checkOwnerPassword(t, a, g, i)
                  ? B.getOwnerKey(t, s, g, I)
                  : null;
            }
            #G(A, t, i, a, s, g, r, n) {
              let o;
              let I = 40 + i.length + A.length,
                l = new Uint8Array(I),
                C,
                B,
                h = 0;
              if (t) for (B = Math.min(32, t.length); h < B; ++h) l[h] = t[h];
              for (C = 0; h < 32; ) l[h++] = gb.#S[C++];
              for (C = 0, B = i.length; C < B; ++C) l[h++] = i[C];
              for (
                C = 0,
                  l[h++] = 255 & s,
                  l[h++] = (s >> 8) & 255,
                  l[h++] = (s >> 16) & 255,
                  l[h++] = (s >>> 24) & 255,
                  B = A.length;
                C < B;
                ++C
              )
                l[h++] = A[C];
              g >= 4 &&
                !n &&
                ((l[h++] = 255),
                (l[h++] = 255),
                (l[h++] = 255),
                (l[h++] = 255));
              let Q = gQ(l, 0, h),
                c = r >> 3;
              if (g >= 3) for (C = 0; C < 50; ++C) Q = gQ(Q, 0, c);
              let E = Q.subarray(0, c);
              if (g >= 3) {
                for (h = 0; h < 32; ++h) l[h] = gb.#S[h];
                for (C = 0, B = A.length; C < B; ++C) l[h++] = A[C];
                (o = new gh(E).encryptBlock(gQ(l, 0, h))), (B = E.length);
                let t = new Uint8Array(B);
                for (C = 1; C <= 19; ++C) {
                  for (let A = 0; A < B; ++A) t[A] = E[A] ^ C;
                  o = new gh(t).encryptBlock(o);
                }
                for (C = 0, B = o.length; C < B; ++C)
                  if (a[C] !== o[C]) return null;
              } else
                for (
                  C = 0, B = (o = new gh(E).encryptBlock(gb.#S)).length;
                  C < B;
                  ++C
                )
                  if (a[C] !== o[C]) return null;
              return E;
            }
            #N(A, t, i, a) {
              let s;
              let g = new Uint8Array(32),
                r = 0,
                n = Math.min(32, A.length);
              for (; r < n; ++r) g[r] = A[r];
              let o = 0;
              for (; r < 32; ) g[r++] = gb.#S[o++];
              let I = gQ(g, 0, r),
                l = a >> 3;
              if (i >= 3) for (o = 0; o < 50; ++o) I = gQ(I, 0, I.length);
              if (i >= 3) {
                s = t;
                let A = new Uint8Array(l);
                for (o = 19; o >= 0; o--) {
                  for (let t = 0; t < l; ++t) A[t] = I[t] ^ o;
                  s = new gh(A).encryptBlock(s);
                }
              } else s = new gh(I.subarray(0, l)).encryptBlock(t);
              return s;
            }
            #x(A, t, i, a = !1) {
              let s;
              let g = new Uint8Array(i.length + 9),
                r = i.length;
              for (s = 0; s < r; ++s) g[s] = i[s];
              return (
                (g[s++] = 255 & A),
                (g[s++] = (A >> 8) & 255),
                (g[s++] = (A >> 16) & 255),
                (g[s++] = 255 & t),
                (g[s++] = (t >> 8) & 255),
                a &&
                  ((g[s++] = 115),
                  (g[s++] = 65),
                  (g[s++] = 108),
                  (g[s++] = 84)),
                gQ(g, 0, s).subarray(0, Math.min(i.length + 5, 16))
              );
            }
            #U(A, t, i, a, s) {
              if (!(t instanceof Ae)) throw new x('Invalid crypt filter name.');
              let g = this,
                r = A.get(t.name),
                n = r?.get('CFM');
              if (!n || 'None' === n.name)
                return function () {
                  return new gd();
                };
              if ('V2' === n.name)
                return function () {
                  return new gh(g.#x(i, a, s, !1));
                };
              if ('AESV2' === n.name)
                return function () {
                  return new gp(g.#x(i, a, s, !0));
                };
              if ('AESV3' === n.name)
                return function () {
                  return new gm(s);
                };
              throw new x('Unknown crypto method');
            }
            constructor(A, t, i) {
              let a, s;
              let g = A.get('Filter');
              if (!An(g, 'Standard')) throw new x('unknown encryption method');
              (this.filterName = g.name), (this.dict = A);
              let r = A.get('V');
              if (
                !Number.isInteger(r) ||
                (1 !== r && 2 !== r && 4 !== r && 5 !== r)
              )
                throw new x('unsupported encryption algorithm');
              this.algorithm = r;
              let n = A.get('Length');
              if (!n) {
                if (r <= 3) n = 40;
                else {
                  let t = A.get('CF'),
                    i = A.get('StmF');
                  if (t instanceof Aa && i instanceof Ae) {
                    t.suppressEncryption = !0;
                    let A = t.get(i.name);
                    (n = A?.get('Length') || 128) < 40 && (n <<= 3);
                  }
                }
              }
              if (!Number.isInteger(n) || n < 40 || n % 8 != 0)
                throw new x('invalid key length');
              let o = J(A.get('O')),
                I = J(A.get('U')),
                l = o.subarray(0, 32),
                C = I.subarray(0, 32),
                B = A.get('P'),
                h = A.get('R'),
                Q = (4 === r || 5 === r) && !1 !== A.get('EncryptMetadata');
              this.encryptMetadata = Q;
              let c = J(t);
              if (i) {
                if (6 === h)
                  try {
                    i = W(i);
                  } catch {
                    m(
                      'CipherTransformFactory: Unable to convert UTF8 encoded password.'
                    );
                  }
                a = J(i);
              }
              if (5 !== r) s = this.#G(c, a, l, C, B, h, n, Q);
              else {
                let t = o.subarray(32, 40),
                  i = o.subarray(40, 48),
                  g = I.subarray(0, 48),
                  r = I.subarray(32, 40),
                  n = I.subarray(40, 48),
                  B = J(A.get('OE')),
                  Q = J(A.get('UE')),
                  c = J(A.get('Perms'));
                s = this.#R(h, a, l, t, i, g, C, r, n, B, Q, c);
              }
              if (!s && !i) throw new F('No password given', 1);
              if (!s && i) {
                let A = this.#N(a, l, h, n);
                s = this.#G(c, A, l, C, B, h, n, Q);
              }
              if (!s) throw new F('Incorrect Password', 2);
              if (((this.encryptionKey = s), r >= 4)) {
                let t = A.get('CF');
                t instanceof Aa && (t.suppressEncryption = !0),
                  (this.cf = t),
                  (this.stmf = A.get('StmF') || Ae.get('Identity')),
                  (this.strf = A.get('StrF') || Ae.get('Identity')),
                  (this.eff = A.get('EFF') || this.stmf);
              }
            }
            createCipherTransform(A, t) {
              if (4 === this.algorithm || 5 === this.algorithm)
                return new gD(
                  this.#U(this.cf, this.strf, A, t, this.encryptionKey),
                  this.#U(this.cf, this.stmf, A, t, this.encryptionKey)
                );
              let i = this.#x(A, t, this.encryptionKey, !1),
                a = function () {
                  return new gh(i);
                };
              return new gD(a, a);
            }
          }
          async function gk(A, t, i, { encrypt: a = null }) {
            let s = a?.createCipherTransform(A.num, A.gen);
            i.push(`${A.num} ${A.gen} obj
`),
              t instanceof Aa
                ? await gF(t, i, s)
                : t instanceof AC
                  ? await gS(t, i, s)
                  : (Array.isArray(t) || ArrayBuffer.isView(t)) &&
                    (await gR(t, i, s)),
              i.push('\nendobj\n');
          }
          async function gF(A, t, i) {
            for (let a of (t.push('<<'), A.getKeys()))
              t.push(` /${AN(a)} `), await gG(A.getRaw(a), t, i);
            t.push('>>');
          }
          async function gS(A, t, i) {
            let a = A.getBytes(),
              { dict: s } = A,
              [g, r] = await Promise.all([
                s.getAsync('Filter'),
                s.getAsync('DecodeParms'),
              ]),
              n = An(
                Array.isArray(g) ? await s.xref.fetchIfRefAsync(g[0]) : g,
                'FlateDecode'
              );
            if (a.length >= 256 || n)
              try {
                let A, t;
                let i = new CompressionStream('deflate'),
                  o = i.writable.getWriter();
                o.write(a), o.close();
                let I = await new Response(i.readable).arrayBuffer();
                (a = new Uint8Array(I)),
                  g
                    ? !n &&
                      ((A = Array.isArray(g)
                        ? [Ae.get('FlateDecode'), ...g]
                        : [Ae.get('FlateDecode'), g]),
                      r && (t = Array.isArray(r) ? [null, ...r] : [null, r]))
                    : (A = Ae.get('FlateDecode')),
                  A && s.set('Filter', A),
                  t && s.set('DecodeParms', t);
              } catch (A) {
                p(`writeStream - cannot compress data: "${A}".`);
              }
            let o = M(a);
            i && (o = i.encryptString(o)),
              s.set('Length', o.length),
              await gF(s, t, i),
              t.push(' stream\n', o, '\nendstream');
          }
          async function gR(A, t, i) {
            t.push('[');
            let a = !0;
            for (let s of A) a ? (a = !1) : t.push(' '), await gG(s, t, i);
            t.push(']');
          }
          async function gG(A, t, i) {
            A instanceof Ae
              ? t.push(`/${AN(A.name)}`)
              : A instanceof As
                ? t.push(`${A.num} ${A.gen} R`)
                : Array.isArray(A) || ArrayBuffer.isView(A)
                  ? await gR(A, t, i)
                  : 'string' == typeof A
                    ? (i && (A = i.encryptString(A)), t.push(`(${Ax(A)})`))
                    : 'number' == typeof A
                      ? t.push(AK(A))
                      : 'boolean' == typeof A
                        ? t.push(A.toString())
                        : A instanceof Aa
                          ? await gF(A, t, i)
                          : A instanceof AC
                            ? await gS(A, t, i)
                            : null === A
                              ? t.push('null')
                              : m(
                                  `Unhandled value in writer: ${typeof A}, please file a bug.`
                                );
          }
          function gN(A, t, i, a) {
            for (let s = t + i - 1; s > i - 1; s--) (a[s] = 255 & A), (A >>= 8);
            return i + t;
          }
          function gx(A, t, i) {
            for (let a = 0, s = A.length; a < s; a++)
              i[t + a] = 255 & A.charCodeAt(a);
          }
          function gU(A) {
            let t = [];
            for (let { ref: i } of A)
              i.num === t.at(-2) + t.at(-1)
                ? (t[t.length - 1] += 1)
                : t.push(i.num, 1);
            return t;
          }
          function gM(A, t, i) {
            if (Array.isArray(t.fileIds) && t.fileIds.length > 0) {
              let a = (function (A, t) {
                let i = Math.floor(Date.now() / 1e3),
                  a = t.filename || '',
                  s = [i.toString(), a, A.toString()],
                  g = s.reduce((A, t) => A + t.length, 0);
                for (let A of Object.values(t.info)) s.push(A), (g += A.length);
                let r = new Uint8Array(g),
                  n = 0;
                for (let A of s) gx(A, n, r), (n += A.length);
                return M(gQ(r));
              })(A, t);
              i.set('ID', [t.fileIds[0], a]);
            }
          }
          async function gJ({
            originalData: A,
            xrefInfo: t,
            newRefs: i,
            xref: a = null,
            hasXfa: s = !1,
            xfaDatasetsRef: g = null,
            hasXfaDatasetsEntry: r = !1,
            needAppearances: n,
            acroFormRef: o = null,
            acroForm: I = null,
            xfaData: l = null,
            useXrefStream: C = !1,
          }) {
            await (async function ({
              xref: A,
              acroForm: t,
              acroFormRef: i,
              hasXfa: a,
              hasXfaDatasetsEntry: s,
              xfaDatasetsRef: g,
              needAppearances: r,
              newRefs: n,
            }) {
              if (
                (!a || s || g || m('XFA - Cannot save it'),
                !r && (!a || !g || s))
              )
                return;
              let o = t.clone();
              if (a && !s) {
                let A = t.get('XFA').slice();
                A.splice(2, 0, 'datasets'), A.splice(3, 0, g), o.set('XFA', A);
              }
              r && o.set('NeedAppearances', !0);
              let I = [];
              await gk(i, o, I, A), n.push({ ref: i, data: I.join('') });
            })({
              xref: a,
              acroForm: I,
              acroFormRef: o,
              hasXfa: s,
              hasXfaDatasetsEntry: r,
              xfaDatasetsRef: g,
              needAppearances: n,
              newRefs: i,
            }),
              s &&
                (function ({
                  xfaData: A,
                  xfaDatasetsRef: t,
                  newRefs: i,
                  xref: a,
                }) {
                  null === A &&
                    (A = (function (A, t) {
                      let i = new gl({ hasAttributes: !0 }).parseFromString(A);
                      for (let { xfa: A } of t) {
                        if (!A) continue;
                        let { path: t, value: a } = A;
                        if (!t) continue;
                        let s = AG(t),
                          g = i.documentElement.searchNode(s, 0);
                        !g &&
                          s.length > 1 &&
                          (g = i.documentElement.searchNode([s.at(-1)], 0)),
                          g
                            ? (g.childNodes = Array.isArray(a)
                                ? a.map((A) => new gI('value', A))
                                : [new gI('#text', a)])
                            : m(`Node not found for path: ${t}`);
                      }
                      let a = [];
                      return i.documentElement.dump(a), a.join('');
                    })(a.fetchIfRef(t).getString(), i));
                  let s = a.encrypt;
                  s &&
                    (A = s
                      .createCipherTransform(t.num, t.gen)
                      .encryptString(A));
                  let g =
                    `${t.num} ${t.gen} obj
<< /Type /EmbeddedFile /Length ${A.length}>>
stream
` +
                    A +
                    '\nendstream\nendobj\n';
                  i.push({ ref: t, data: g });
                })({ xfaData: l, xfaDatasetsRef: g, newRefs: i, xref: a });
            let B = [],
              h = A.length,
              Q = A.at(-1);
            10 !== Q && 13 !== Q && (B.push('\n'), (h += 1));
            let c = (function (A, t, i) {
              let a = new Aa(null);
              a.set('Prev', A.startXRef);
              let s = A.newRef;
              return (
                i
                  ? (t.push({ ref: s, data: '' }),
                    a.set('Size', s.num + 1),
                    a.set('Type', Ae.get('XRef')))
                  : a.set('Size', s.num),
                null !== A.rootRef && a.set('Root', A.rootRef),
                null !== A.infoRef && a.set('Info', A.infoRef),
                null !== A.encryptRef && a.set('Encrypt', A.encryptRef),
                a
              );
            })(t, i, C);
            for (let { data: A } of (i = i.sort(
              (A, t) => A.ref.num - t.ref.num
            )))
              null !== A && B.push(A);
            await (C
              ? (async function (A, t, i, a, s) {
                  let g = [],
                    r = 0,
                    n = 0;
                  for (let { ref: A, data: a } of i) {
                    let i;
                    (r = Math.max(r, t)),
                      null !== a
                        ? ((i = Math.min(A.gen, 65535)),
                          g.push([1, t, i]),
                          (t += a.length))
                        : ((i = Math.min(A.gen + 1, 65535)), g.push([0, 0, i])),
                      (n = Math.max(n, i));
                  }
                  a.set('Index', gU(i));
                  let o = [1, AW(r), AW(n)];
                  a.set('W', o), gM(t, A, a);
                  let I = o.reduce((A, t) => A + t, 0),
                    l = new Uint8Array(I * g.length),
                    C = new AZ(l);
                  C.dict = a;
                  let B = 0;
                  for (let [A, t, i] of g)
                    (B = gN(A, o[0], B, l)),
                      (B = gN(t, o[1], B, l)),
                      (B = gN(i, o[2], B, l));
                  await gk(A.newRef, C, s, {}),
                    s.push('startxref\n', t.toString(), '\n%%EOF\n');
                })(t, h, i, c, B)
              : (async function (A, t, i, a, s) {
                  s.push('xref\n');
                  let g = gU(i),
                    r = 0;
                  for (let { ref: A, data: a } of i)
                    A.num === g[r] &&
                      (s.push(`${g[r]} ${g[r + 1]}
`),
                      (r += 2)),
                      null !== a
                        ? (s.push(`${t.toString().padStart(10, '0')} ${Math.min(A.gen, 65535).toString().padStart(5, '0')} n\r
`),
                          (t += a.length))
                        : s.push(`0000000000 ${Math.min(A.gen + 1, 65535)
                            .toString()
                            .padStart(5, '0')} f\r
`);
                  gM(t, A, a),
                    s.push('trailer\n'),
                    await gF(a, s),
                    s.push('\nstartxref\n', t.toString(), '\n%%EOF\n');
                })(t, h, i, c, B));
            let E = B.reduce((A, t) => A + t.length, A.length),
              u = new Uint8Array(E);
            u.set(A);
            let d = A.length;
            for (let A of B) gx(A, d, u), (d += A.length);
            return u;
          }
          class gL {
            constructor(A, t) {
              (this.dict = A),
                (this.ref = t instanceof As ? t : null),
                (this.roleMap = new Map()),
                (this.structParentIds = null);
            }
            init() {
              this.readRoleMap();
            }
            #M(A, t, i) {
              if (!(A instanceof As) || t < 0) return;
              this.structParentIds ||= new Ar();
              let a = this.structParentIds.get(A);
              a || ((a = []), this.structParentIds.put(A, a)), a.push([t, i]);
            }
            addAnnotationIdToPage(A, t) {
              this.#M(A, t, 4);
            }
            readRoleMap() {
              let A = this.dict.get('RoleMap');
              A instanceof Aa &&
                A.forEach((A, t) => {
                  t instanceof Ae && this.roleMap.set(A, t.name);
                });
            }
            static async canCreateStructureTree({
              catalogRef: A,
              pdfManager: t,
              newAnnotationsByPage: i,
            }) {
              if (!(A instanceof As))
                return (
                  m('Cannot save the struct tree: no catalog reference.'), !1
                );
              let a = 0,
                s = !0;
              for (let [A, g] of i) {
                let { ref: i } = await t.getPage(A);
                if (!(i instanceof As)) {
                  m(`Cannot save the struct tree: page ${A} has no ref.`),
                    (s = !0);
                  break;
                }
                for (let A of g)
                  A.accessibilityData?.type &&
                    ((A.parentTreeId = a++), (s = !1));
              }
              if (s) {
                for (let A of i.values())
                  for (let t of A) delete t.parentTreeId;
                return !1;
              }
              return !0;
            }
            static async createStructureTree({
              newAnnotationsByPage: A,
              xref: t,
              catalogRef: i,
              pdfManager: a,
              newRefs: s,
            }) {
              let g = a.catalog.cloneDict(),
                r = new Ar();
              r.put(i, g);
              let n = t.getNewTemporaryRef();
              g.set('StructTreeRoot', n);
              let o = new Aa(t);
              o.set('Type', Ae.get('StructTreeRoot'));
              let I = t.getNewTemporaryRef();
              o.set('ParentTree', I);
              let l = [];
              o.set('K', l), r.put(n, o);
              let C = new Aa(t),
                B = [];
              C.set('Nums', B);
              let h = await this.#J({
                newAnnotationsByPage: A,
                structTreeRootRef: n,
                structTreeRoot: null,
                kids: l,
                nums: B,
                xref: t,
                pdfManager: a,
                newRefs: s,
                cache: r,
              });
              o.set('ParentTreeNextKey', h), r.put(I, C);
              let Q = [];
              for (let [A, i] of r.items())
                (Q.length = 0),
                  await gk(A, i, Q, t),
                  s.push({ ref: A, data: Q.join('') });
            }
            async canUpdateStructTree({
              pdfManager: A,
              xref: t,
              newAnnotationsByPage: i,
            }) {
              if (!this.ref)
                return (
                  m('Cannot update the struct tree: no root reference.'), !1
                );
              let a = this.dict.get('ParentTreeNextKey');
              if (!Number.isInteger(a) || a < 0)
                return (
                  m('Cannot update the struct tree: invalid next key.'), !1
                );
              let s = this.dict.get('ParentTree');
              if (!(s instanceof Aa))
                return (
                  m("Cannot update the struct tree: ParentTree isn't a dict."),
                  !1
                );
              let g = s.get('Nums');
              if (!Array.isArray(g))
                return (
                  m("Cannot update the struct tree: nums isn't an array."), !1
                );
              let r = new ga(s, t);
              for (let t of i.keys()) {
                let { pageDict: i } = await A.getPage(t);
                if (!i.has('StructParents')) continue;
                let a = i.get('StructParents');
                if (!Number.isInteger(a) || !Array.isArray(r.get(a)))
                  return (
                    m(`Cannot save the struct tree: page ${t} has a wrong id.`),
                    !1
                  );
              }
              let n = !0;
              for (let [t, s] of i) {
                let { pageDict: i } = await A.getPage(t);
                for (let A of (gL.#L({
                  elements: s,
                  xref: this.dict.xref,
                  pageDict: i,
                  numberTree: r,
                }),
                s))
                  A.accessibilityData?.type &&
                    (A.accessibilityData.structParent >= 0 ||
                      (A.parentTreeId = a++),
                    (n = !1));
              }
              if (n) {
                for (let A of i.values())
                  for (let t of A)
                    delete t.parentTreeId, delete t.structTreeParent;
                return !1;
              }
              return !0;
            }
            async updateStructureTree({
              newAnnotationsByPage: A,
              pdfManager: t,
              newRefs: i,
            }) {
              let a = this.dict.xref,
                s = this.dict.clone(),
                g = this.ref,
                r = new Ar();
              r.put(g, s);
              let n,
                o = s.getRaw('ParentTree');
              o instanceof As
                ? (n = a.fetch(o))
                : ((n = o),
                  (o = a.getNewTemporaryRef()),
                  s.set('ParentTree', o)),
                (n = n.clone()),
                r.put(o, n);
              let I = n.getRaw('Nums'),
                l = null;
              I instanceof As && ((l = I), (I = a.fetch(l))),
                (I = I.slice()),
                l || n.set('Nums', I);
              let C = await gL.#J({
                newAnnotationsByPage: A,
                structTreeRootRef: g,
                structTreeRoot: this,
                kids: null,
                nums: I,
                xref: a,
                pdfManager: t,
                newRefs: i,
                cache: r,
              });
              if (-1 === C) return;
              s.set('ParentTreeNextKey', C), l && r.put(l, I);
              let B = [];
              for (let [A, t] of r.items())
                (B.length = 0),
                  await gk(A, t, B, a),
                  i.push({ ref: A, data: B.join('') });
            }
            static async #J({
              newAnnotationsByPage: A,
              structTreeRootRef: t,
              structTreeRoot: i,
              kids: a,
              nums: s,
              xref: g,
              pdfManager: r,
              newRefs: n,
              cache: o,
            }) {
              let I = Ae.get('OBJR'),
                l,
                C = -1,
                B = [];
              for (let [h, Q] of A) {
                let A = await r.getPage(h),
                  { ref: c } = A,
                  E = c instanceof As;
                for (let {
                  accessibilityData: r,
                  ref: u,
                  parentTreeId: d,
                  structTreeParent: f,
                } of Q) {
                  if (!r?.type) continue;
                  let { structParent: Q } = r;
                  if (i && Number.isInteger(Q) && Q >= 0) {
                    let t = (l ||= new Map()).get(h);
                    void 0 === t &&
                      ((t = new gK(i, A.pageDict).collectObjects(c)),
                      l.set(h, t));
                    let a = t?.get(Q);
                    if (a) {
                      let A = g.fetch(a).clone();
                      gL.#H(A, r),
                        (B.length = 0),
                        await gk(a, A, B, g),
                        n.push({ ref: a, data: B.join('') });
                      continue;
                    }
                  }
                  C = Math.max(C, d);
                  let p = g.getNewTemporaryRef(),
                    m = new Aa(g);
                  gL.#H(m, r),
                    await this.#Y({
                      structTreeParent: f,
                      tagDict: m,
                      newTagRef: p,
                      structTreeRootRef: t,
                      fallbackKids: a,
                      xref: g,
                      cache: o,
                    });
                  let y = new Aa(g);
                  m.set('K', y),
                    y.set('Type', I),
                    E && y.set('Pg', c),
                    y.set('Obj', u),
                    o.put(p, m),
                    s.push(d, p);
                }
              }
              return C + 1;
            }
            static #H(
              A,
              { type: t, title: i, lang: a, alt: s, expanded: g, actualText: r }
            ) {
              A.set('S', Ae.get(t)),
                i && A.set('T', Aq(i)),
                a && A.set('Lang', Aq(a)),
                s && A.set('Alt', Aq(s)),
                g && A.set('E', Aq(g)),
                r && A.set('ActualText', Aq(r));
            }
            static #L({ elements: A, xref: t, pageDict: i, numberTree: a }) {
              let s = new Map();
              for (let t of A)
                if (t.structTreeParentId) {
                  let A = parseInt(t.structTreeParentId.split('_mc')[1], 10),
                    i = s.get(A);
                  i || ((i = []), s.set(A, i)), i.push(t);
                }
              let g = i.get('StructParents');
              if (!Number.isInteger(g)) return;
              let r = a.get(g),
                n = (A, i, a) => {
                  let g = s.get(A);
                  if (g) {
                    let A = i.getRaw('P'),
                      s = t.fetchIfRef(A);
                    if (A instanceof As && s instanceof Aa) {
                      let A = { ref: a, dict: i };
                      for (let t of g) t.structTreeParent = A;
                    }
                    return !0;
                  }
                  return !1;
                };
              for (let A of r) {
                if (!(A instanceof As)) continue;
                let i = t.fetch(A),
                  a = i.get('K');
                if (Number.isInteger(a)) n(a, i, A);
                else if (Array.isArray(a))
                  for (let s of a) {
                    if (Number.isInteger((s = t.fetchIfRef(s))) && n(s, i, A))
                      break;
                    if (!(s instanceof Aa)) continue;
                    if (!An(s.get('Type'), 'MCR')) break;
                    let a = s.get('MCID');
                    if (Number.isInteger(a) && n(a, i, A)) break;
                  }
              }
            }
            static async #Y({
              structTreeParent: A,
              tagDict: t,
              newTagRef: i,
              structTreeRootRef: a,
              fallbackKids: s,
              xref: g,
              cache: r,
            }) {
              let n,
                o = null;
              A ? (({ ref: o } = A), (n = A.dict.getRaw('P') || a)) : (n = a),
                t.set('P', n);
              let I = g.fetchIfRef(n);
              if (!I) {
                s.push(i);
                return;
              }
              let l = r.get(n);
              l || ((l = I.clone()), r.put(n, l));
              let C = l.getRaw('K'),
                B = C instanceof As ? r.get(C) : null;
              if (!B) {
                B = Array.isArray((B = g.fetchIfRef(C))) ? B.slice() : [C];
                let A = g.getNewTemporaryRef();
                l.set('K', A), r.put(A, B);
              }
              let h = B.indexOf(o);
              B.splice(h >= 0 ? h + 1 : B.length, 0, i);
            }
          }
          class gH {
            constructor(A, t) {
              (this.tree = A),
                (this.dict = t),
                (this.kids = []),
                this.parseKids();
            }
            get role() {
              let A = this.dict.get('S'),
                t = A instanceof Ae ? A.name : '',
                { root: i } = this.tree;
              return i.roleMap.has(t) ? i.roleMap.get(t) : t;
            }
            parseKids() {
              let A = null,
                t = this.dict.getRaw('Pg');
              t instanceof As && (A = t.toString());
              let i = this.dict.get('K');
              if (Array.isArray(i))
                for (let t of i) {
                  let i = this.parseKid(A, t);
                  i && this.kids.push(i);
                }
              else {
                let t = this.parseKid(A, i);
                t && this.kids.push(t);
              }
            }
            parseKid(A, t) {
              if (Number.isInteger(t))
                return this.tree.pageDict.objId !== A
                  ? null
                  : new gY({ type: 1, mcid: t, pageObjId: A });
              let i = null;
              if (
                (t instanceof As
                  ? (i = this.dict.xref.fetch(t))
                  : t instanceof Aa && (i = t),
                !i)
              )
                return null;
              let a = i.getRaw('Pg');
              a instanceof As && (A = a.toString());
              let s = i.get('Type') instanceof Ae ? i.get('Type').name : null;
              if ('MCR' === s) {
                if (this.tree.pageDict.objId !== A) return null;
                let t = i.getRaw('Stm');
                return new gY({
                  type: 2,
                  refObjId: t instanceof As ? t.toString() : null,
                  pageObjId: A,
                  mcid: i.get('MCID'),
                });
              }
              if ('OBJR' === s) {
                if (this.tree.pageDict.objId !== A) return null;
                let t = i.getRaw('Obj');
                return new gY({
                  type: 3,
                  refObjId: t instanceof As ? t.toString() : null,
                  pageObjId: A,
                });
              }
              return new gY({ type: 5, dict: i });
            }
          }
          class gY {
            constructor({
              type: A,
              dict: t = null,
              mcid: i = null,
              pageObjId: a = null,
              refObjId: s = null,
            }) {
              (this.type = A),
                (this.dict = t),
                (this.mcid = i),
                (this.pageObjId = a),
                (this.refObjId = s),
                (this.parentNode = null);
            }
          }
          class gK {
            constructor(A, t) {
              (this.root = A),
                (this.rootDict = A ? A.dict : null),
                (this.pageDict = t),
                (this.nodes = []);
            }
            collectObjects(A) {
              if (!(this.root && this.rootDict && A instanceof As)) return null;
              let t = this.rootDict.get('ParentTree');
              if (!t) return null;
              let i = this.root.structParentIds?.get(A);
              if (!i) return null;
              let a = new Map(),
                s = new ga(t, this.rootDict.xref);
              for (let [A] of i) {
                let t = s.getRaw(A);
                t instanceof As && a.set(A, t);
              }
              return a;
            }
            parse(A) {
              if (!(this.root && this.rootDict && A instanceof As)) return;
              let t = this.rootDict.get('ParentTree');
              if (!t) return;
              let i = this.pageDict.get('StructParents'),
                a = this.root.structParentIds?.get(A);
              if (!Number.isInteger(i) && !a) return;
              let s = new Map(),
                g = new ga(t, this.rootDict.xref);
              if (Number.isInteger(i)) {
                let A = g.get(i);
                if (Array.isArray(A))
                  for (let t of A)
                    t instanceof As &&
                      this.addNode(this.rootDict.xref.fetch(t), s);
              }
              if (a)
                for (let [A, t] of a) {
                  let i = g.get(A);
                  if (i) {
                    let A = this.addNode(this.rootDict.xref.fetchIfRef(i), s);
                    1 === A?.kids?.length &&
                      3 === A.kids[0].type &&
                      (A.kids[0].type = t);
                  }
                }
            }
            addNode(A, t, i = 0) {
              if (i > 40) return m('StructTree MAX_DEPTH reached.'), null;
              if (!(A instanceof Aa)) return null;
              if (t.has(A)) return t.get(A);
              let a = new gH(this, A);
              t.set(A, a);
              let s = A.get('P');
              if (!s || An(s.get('Type'), 'StructTreeRoot'))
                return this.addTopLevelNode(A, a) || t.delete(A), a;
              let g = this.addNode(s, t, i + 1);
              if (!g) return a;
              let r = !1;
              for (let t of g.kids)
                5 === t.type && t.dict === A && ((t.parentNode = a), (r = !0));
              return r || t.delete(A), a;
            }
            addTopLevelNode(A, t) {
              let i = this.rootDict.get('K');
              if (!i) return !1;
              if (i instanceof Aa)
                return i.objId === A.objId && ((this.nodes[0] = t), !0);
              if (!Array.isArray(i)) return !0;
              let a = !1;
              for (let s = 0; s < i.length; s++) {
                let g = i[s];
                g?.toString() === A.objId && ((this.nodes[s] = t), (a = !0));
              }
              return a;
            }
            get serializable() {
              let A = Object.create(null);
              for (let t of ((A.children = []), (A.role = 'Root'), this.nodes))
                t &&
                  (function A(t, i, a = 0) {
                    if (a > 40) {
                      m('StructTree too deep to be fully serialized.');
                      return;
                    }
                    let s = Object.create(null);
                    (s.role = t.role), (s.children = []), i.children.push(s);
                    let g = t.dict.get('Alt');
                    'string' != typeof g && (g = t.dict.get('ActualText')),
                      'string' == typeof g && (s.alt = T(g));
                    let r = t.dict.get('A');
                    if (r instanceof Aa) {
                      let A = AR(r.getArray('BBox'), null);
                      if (A) s.bbox = A;
                      else {
                        let A = r.get('Width'),
                          t = r.get('Height');
                        'number' == typeof A &&
                          A > 0 &&
                          'number' == typeof t &&
                          t > 0 &&
                          (s.bbox = [0, 0, A, t]);
                      }
                    }
                    let n = t.dict.get('Lang');
                    for (let i of ('string' == typeof n && (s.lang = T(n)),
                    t.kids)) {
                      let t = 5 === i.type ? i.parentNode : null;
                      t
                        ? A(t, s, a + 1)
                        : 1 === i.type || 2 === i.type
                          ? s.children.push({
                              type: 'content',
                              id: `p${i.pageObjId}_mc${i.mcid}`,
                            })
                          : 3 === i.type
                            ? s.children.push({
                                type: 'object',
                                id: i.refObjId,
                              })
                            : 4 === i.type &&
                              s.children.push({
                                type: 'annotation',
                                id: `pdfjs_internal_id_${i.refObjId}`,
                              });
                    }
                  })(t, A);
              return A;
            }
          }
          function gv(A) {
            if (!Array.isArray(A) || A.length < 2) return !1;
            let [t, i, ...a] = A;
            if (!(t instanceof As || Number.isInteger(t)) || !(i instanceof Ae))
              return !1;
            let s = a.length,
              g = !0;
            switch (i.name) {
              case 'XYZ':
                if (s < 2 || s > 3) return !1;
                break;
              case 'Fit':
              case 'FitB':
                return 0 === s;
              case 'FitH':
              case 'FitBH':
              case 'FitV':
              case 'FitBV':
                if (s > 1) return !1;
                break;
              case 'FitR':
                if (4 !== s) return !1;
                g = !1;
                break;
              default:
                return !1;
            }
            for (let A of a)
              if (!('number' == typeof A || (g && null === A))) return !1;
            return !0;
          }
          function gq(A) {
            return A instanceof Aa && (A = A.get('D')), gv(A) ? A : null;
          }
          function gT(A) {
            let t = A.get('D');
            if (t) {
              if ((t instanceof Ae && (t = t.name), 'string' == typeof t))
                return T(t);
              if (gv(t)) return JSON.stringify(t);
            }
            return null;
          }
          class gP {
            constructor(A, t) {
              if (
                ((this.pdfManager = A),
                (this.xref = t),
                (this._catDict = t.getCatalogObj()),
                !(this._catDict instanceof Aa))
              )
                throw new x('Catalog object is not a dictionary.');
              this.toplevelPagesDict,
                (this._actualNumPages = null),
                (this.fontCache = new Ar()),
                (this.builtInCMapCache = new Map()),
                (this.standardFontDataCache = new Map()),
                (this.globalImageCache = new sl()),
                (this.pageKidsCountCache = new Ar()),
                (this.pageIndexCache = new Ar()),
                (this.pageDictCache = new Ar()),
                (this.nonBlendModesSet = new Ag()),
                (this.systemFontCache = new Map());
            }
            cloneDict() {
              return this._catDict.clone();
            }
            get version() {
              let A = this._catDict.get('Version');
              if (A instanceof Ae) {
                if (AB.test(A.name)) return b(this, 'version', A.name);
                m(`Invalid PDF catalog version: ${A.name}`);
              }
              return b(this, 'version', null);
            }
            get lang() {
              let A = this._catDict.get('Lang');
              return b(this, 'lang', A && 'string' == typeof A ? T(A) : null);
            }
            get needsRendering() {
              let A = this._catDict.get('NeedsRendering');
              return b(this, 'needsRendering', 'boolean' == typeof A && A);
            }
            get collection() {
              let A = null;
              try {
                let t = this._catDict.get('Collection');
                t instanceof Aa && t.size > 0 && (A = t);
              } catch (A) {
                if (A instanceof AQ) throw A;
                p(
                  'Cannot fetch Collection entry; assuming no collection is present.'
                );
              }
              return b(this, 'collection', A);
            }
            get acroForm() {
              let A = null;
              try {
                let t = this._catDict.get('AcroForm');
                t instanceof Aa && t.size > 0 && (A = t);
              } catch (A) {
                if (A instanceof AQ) throw A;
                p(
                  'Cannot fetch AcroForm entry; assuming no forms are present.'
                );
              }
              return b(this, 'acroForm', A);
            }
            get acroFormRef() {
              let A = this._catDict.getRaw('AcroForm');
              return b(this, 'acroFormRef', A instanceof As ? A : null);
            }
            get metadata() {
              let A = this._catDict.getRaw('Metadata');
              if (!(A instanceof As)) return b(this, 'metadata', null);
              let t = null;
              try {
                let i = this.xref.fetch(A, !this.xref.encrypt?.encryptMetadata);
                if (i instanceof AC && i.dict instanceof Aa) {
                  let A = i.dict.get('Type'),
                    a = i.dict.get('Subtype');
                  if (An(A, 'Metadata') && An(a, 'XML')) {
                    let A = P(i.getString());
                    A && (t = new gC(A).serializable);
                  }
                }
              } catch (A) {
                if (A instanceof AQ) throw A;
                p(`Skipping invalid Metadata: "${A}".`);
              }
              return b(this, 'metadata', t);
            }
            get markInfo() {
              let A = null;
              try {
                A = this._readMarkInfo();
              } catch (A) {
                if (A instanceof AQ) throw A;
                m('Unable to read mark info.');
              }
              return b(this, 'markInfo', A);
            }
            _readMarkInfo() {
              let A = this._catDict.get('MarkInfo');
              if (!(A instanceof Aa)) return null;
              let t = { Marked: !1, UserProperties: !1, Suspects: !1 };
              for (let i in t) {
                let a = A.get(i);
                'boolean' == typeof a && (t[i] = a);
              }
              return t;
            }
            get structTreeRoot() {
              let A = null;
              try {
                A = this._readStructTreeRoot();
              } catch (A) {
                if (A instanceof AQ) throw A;
                m('Unable read to structTreeRoot info.');
              }
              return b(this, 'structTreeRoot', A);
            }
            _readStructTreeRoot() {
              let A = this._catDict.getRaw('StructTreeRoot'),
                t = this.xref.fetchIfRef(A);
              if (!(t instanceof Aa)) return null;
              let i = new gL(t, A);
              return i.init(), i;
            }
            get toplevelPagesDict() {
              let A = this._catDict.get('Pages');
              if (!(A instanceof Aa))
                throw new x('Invalid top-level pages dictionary.');
              return b(this, 'toplevelPagesDict', A);
            }
            get documentOutline() {
              let A = null;
              try {
                A = this._readDocumentOutline();
              } catch (A) {
                if (A instanceof AQ) throw A;
                m('Unable to read document outline.');
              }
              return b(this, 'documentOutline', A);
            }
            _readDocumentOutline() {
              let A = this._catDict.get('Outlines');
              if (
                !(A instanceof Aa) ||
                !((A = A.getRaw('First')) instanceof As)
              )
                return null;
              let t = { items: [] },
                i = [{ obj: A, parent: t }],
                a = new Ag();
              a.put(A);
              let s = this.xref,
                g = new Uint8ClampedArray(3);
              for (; i.length > 0; ) {
                let t = i.shift(),
                  r = s.fetchIfRef(t.obj);
                if (null === r) continue;
                r.has('Title') || m('Invalid outline item encountered.');
                let n = { url: null, dest: null, action: null };
                gP.parseDestDictionary({
                  destDict: r,
                  resultObj: n,
                  docBaseUrl: this.baseUrl,
                  docAttachments: this.attachments,
                });
                let o = r.get('Title'),
                  I = r.get('F') || 0,
                  l = r.getArray('C'),
                  C = r.get('Count'),
                  B = g;
                Ak(l, 3) &&
                  (0 !== l[0] || 0 !== l[1] || 0 !== l[2]) &&
                  (B = Az.singletons.rgb.getRgb(l, 0));
                let h = {
                  action: n.action,
                  attachment: n.attachment,
                  dest: n.dest,
                  url: n.url,
                  unsafeUrl: n.unsafeUrl,
                  newWindow: n.newWindow,
                  setOCGState: n.setOCGState,
                  title: 'string' == typeof o ? T(o) : '',
                  color: B,
                  count: Number.isInteger(C) ? C : void 0,
                  bold: !!(2 & I),
                  italic: !!(1 & I),
                  items: [],
                };
                t.parent.items.push(h),
                  (A = r.getRaw('First')) instanceof As &&
                    !a.has(A) &&
                    (i.push({ obj: A, parent: h }), a.put(A)),
                  (A = r.getRaw('Next')) instanceof As &&
                    !a.has(A) &&
                    (i.push({ obj: A, parent: t.parent }), a.put(A));
              }
              return t.items.length > 0 ? t.items : null;
            }
            get permissions() {
              let A = null;
              try {
                A = this._readPermissions();
              } catch (A) {
                if (A instanceof AQ) throw A;
                m('Unable to read permissions.');
              }
              return b(this, 'permissions', A);
            }
            _readPermissions() {
              let A = this.xref.trailer.get('Encrypt');
              if (!(A instanceof Aa)) return null;
              let t = A.get('P');
              if ('number' != typeof t) return null;
              t += 4294967296;
              let i = [];
              for (let A in B) {
                let a = B[A];
                t & a && i.push(a);
              }
              return i;
            }
            get optionalContentConfig() {
              let A = null;
              try {
                let t = this._catDict.get('OCProperties');
                if (!t) return b(this, 'optionalContentConfig', null);
                let i = t.get('D');
                if (!i) return b(this, 'optionalContentConfig', null);
                let a = t.get('OCGs');
                if (!Array.isArray(a))
                  return b(this, 'optionalContentConfig', null);
                let s = [],
                  g = new Ag();
                for (let A of a)
                  A instanceof As &&
                    !g.has(A) &&
                    (g.put(A), s.push(this.#K(A)));
                (A = this.#v(i, g)).groups = s;
              } catch (A) {
                if (A instanceof AQ) throw A;
                m(`Unable to read optional content config: ${A}`);
              }
              return b(this, 'optionalContentConfig', A);
            }
            #K(A) {
              let t = this.xref.fetch(A),
                i = {
                  id: A.toString(),
                  name: null,
                  intent: null,
                  usage: { print: null, view: null },
                },
                a = t.get('Name');
              'string' == typeof a && (i.name = T(a));
              let s = t.getArray('Intent');
              Array.isArray(s) || (s = [s]),
                s.every((A) => A instanceof Ae) &&
                  (i.intent = s.map((A) => A.name));
              let g = t.get('Usage');
              if (!(g instanceof Aa)) return i;
              let r = i.usage,
                n = g.get('Print');
              if (n instanceof Aa) {
                let A = n.get('PrintState');
                if (A instanceof Ae)
                  switch (A.name) {
                    case 'ON':
                    case 'OFF':
                      r.print = { printState: A.name };
                  }
              }
              let o = g.get('View');
              if (o instanceof Aa) {
                let A = o.get('ViewState');
                if (A instanceof Ae)
                  switch (A.name) {
                    case 'ON':
                    case 'OFF':
                      r.view = { viewState: A.name };
                  }
              }
              return i;
            }
            #v(A, t) {
              function i(A) {
                let i = [];
                if (Array.isArray(A))
                  for (let a of A)
                    a instanceof As && t.has(a) && i.push(a.toString());
                return i;
              }
              let a = this.xref,
                s = new Ag();
              return {
                name:
                  'string' == typeof A.get('Name') ? T(A.get('Name')) : null,
                creator:
                  'string' == typeof A.get('Creator')
                    ? T(A.get('Creator'))
                    : null,
                baseState:
                  A.get('BaseState') instanceof Ae
                    ? A.get('BaseState').name
                    : null,
                on: i(A.get('ON')),
                off: i(A.get('OFF')),
                order: (function A(i, g = 0) {
                  if (!Array.isArray(i)) return null;
                  let r = [];
                  for (let n of i) {
                    if (n instanceof As && t.has(n)) {
                      s.put(n), r.push(n.toString());
                      continue;
                    }
                    let i = (function (t, i) {
                      if (++i > 10)
                        return (
                          m('parseNestedOrder - reached MAX_NESTED_LEVELS.'),
                          null
                        );
                      let s = a.fetchIfRef(t);
                      if (!Array.isArray(s)) return null;
                      let g = a.fetchIfRef(s[0]);
                      if ('string' != typeof g) return null;
                      let r = A(s.slice(1), i);
                      return r && r.length ? { name: T(g), order: r } : null;
                    })(n, g);
                    i && r.push(i);
                  }
                  if (g > 0) return r;
                  let n = [];
                  for (let A of t) s.has(A) || n.push(A.toString());
                  return n.length && r.push({ name: null, order: n }), r;
                })(A.get('Order')),
                groups: null,
              };
            }
            setActualNumPages(A = null) {
              this._actualNumPages = A;
            }
            get hasActualNumPages() {
              return null !== this._actualNumPages;
            }
            get _pagesCount() {
              let A = this.toplevelPagesDict.get('Count');
              if (!Number.isInteger(A))
                throw new x(
                  'Page count in top-level pages dictionary is not an integer.'
                );
              return b(this, '_pagesCount', A);
            }
            get numPages() {
              return this.hasActualNumPages
                ? this._actualNumPages
                : this._pagesCount;
            }
            get destinations() {
              let A = this._readDests(),
                t = Object.create(null);
              if (A instanceof gi)
                for (let [i, a] of A.getAll()) {
                  let A = gq(a);
                  A && (t[T(i)] = A);
                }
              else
                A instanceof Aa &&
                  A.forEach(function (A, i) {
                    let a = gq(i);
                    a && (t[A] = a);
                  });
              return b(this, 'destinations', t);
            }
            getDestination(A) {
              let t = this._readDests();
              if (t instanceof gi) {
                let i = gq(t.get(A));
                if (i) return i;
                let a = this.destinations[A];
                if (a)
                  return (
                    m(`Found "${A}" at an incorrect position in the NameTree.`),
                    a
                  );
              } else if (t instanceof Aa) {
                let i = gq(t.get(A));
                if (i) return i;
              }
              return null;
            }
            _readDests() {
              let A = this._catDict.get('Names');
              return A?.has('Dests')
                ? new gi(A.getRaw('Dests'), this.xref)
                : this._catDict.has('Dests')
                  ? this._catDict.get('Dests')
                  : void 0;
            }
            get pageLabels() {
              let A = null;
              try {
                A = this._readPageLabels();
              } catch (A) {
                if (A instanceof AQ) throw A;
                m('Unable to read page labels.');
              }
              return b(this, 'pageLabels', A);
            }
            _readPageLabels() {
              let A = this._catDict.getRaw('PageLabels');
              if (!A) return null;
              let t = Array(this.numPages),
                i = null,
                a = '',
                s = new ga(A, this.xref).getAll(),
                g = '',
                r = 1;
              for (let A = 0, n = this.numPages; A < n; A++) {
                let n = s.get(A);
                if (void 0 !== n) {
                  if (!(n instanceof Aa))
                    throw new x('PageLabel is not a dictionary.');
                  if (n.has('Type') && !An(n.get('Type'), 'PageLabel'))
                    throw new x('Invalid type in PageLabel dictionary.');
                  if (n.has('S')) {
                    let A = n.get('S');
                    if (!(A instanceof Ae))
                      throw new x('Invalid style in PageLabel dictionary.');
                    i = A.name;
                  } else i = null;
                  if (n.has('P')) {
                    let A = n.get('P');
                    if ('string' != typeof A)
                      throw new x('Invalid prefix in PageLabel dictionary.');
                    a = T(A);
                  } else a = '';
                  if (n.has('St')) {
                    let A = n.get('St');
                    if (!(Number.isInteger(A) && A >= 1))
                      throw new x('Invalid start in PageLabel dictionary.');
                    r = A;
                  } else r = 1;
                }
                switch (i) {
                  case 'D':
                    g = r;
                    break;
                  case 'R':
                  case 'r':
                    g = (function (A, t = !1) {
                      let i;
                      w(
                        Number.isInteger(A) && A > 0,
                        'The number should be a positive integer.'
                      );
                      let a = [];
                      for (; A >= 1e3; ) (A -= 1e3), a.push('M');
                      (i = (A / 100) | 0),
                        (A %= 100),
                        a.push(Ap[i]),
                        (i = (A / 10) | 0),
                        (A %= 10),
                        a.push(Ap[10 + i]),
                        a.push(Ap[20 + A]);
                      let s = a.join('');
                      return t ? s.toLowerCase() : s;
                    })(r, 'r' === i);
                    break;
                  case 'A':
                  case 'a':
                    let o = 'a' === i ? 97 : 65,
                      I = r - 1;
                    g = String.fromCharCode(o + (I % 26)).repeat(
                      Math.floor(I / 26) + 1
                    );
                    break;
                  default:
                    if (i)
                      throw new x(
                        `Invalid style "${i}" in PageLabel dictionary.`
                      );
                    g = '';
                }
                (t[A] = a + g), r++;
              }
              return t;
            }
            get pageLayout() {
              let A = this._catDict.get('PageLayout'),
                t = '';
              if (A instanceof Ae)
                switch (A.name) {
                  case 'SinglePage':
                  case 'OneColumn':
                  case 'TwoColumnLeft':
                  case 'TwoColumnRight':
                  case 'TwoPageLeft':
                  case 'TwoPageRight':
                    t = A.name;
                }
              return b(this, 'pageLayout', t);
            }
            get pageMode() {
              let A = this._catDict.get('PageMode'),
                t = 'UseNone';
              if (A instanceof Ae)
                switch (A.name) {
                  case 'UseNone':
                  case 'UseOutlines':
                  case 'UseThumbs':
                  case 'FullScreen':
                  case 'UseOC':
                  case 'UseAttachments':
                    t = A.name;
                }
              return b(this, 'pageMode', t);
            }
            get viewerPreferences() {
              let A = this._catDict.get('ViewerPreferences');
              if (!(A instanceof Aa)) return b(this, 'viewerPreferences', null);
              let t = null;
              for (let i of A.getKeys()) {
                let a;
                let s = A.get(i);
                switch (i) {
                  case 'HideToolbar':
                  case 'HideMenubar':
                  case 'HideWindowUI':
                  case 'FitWindow':
                  case 'CenterWindow':
                  case 'DisplayDocTitle':
                  case 'PickTrayByPDFSize':
                    'boolean' == typeof s && (a = s);
                    break;
                  case 'NonFullScreenPageMode':
                    if (s instanceof Ae)
                      switch (s.name) {
                        case 'UseNone':
                        case 'UseOutlines':
                        case 'UseThumbs':
                        case 'UseOC':
                          a = s.name;
                          break;
                        default:
                          a = 'UseNone';
                      }
                    break;
                  case 'Direction':
                    if (s instanceof Ae)
                      switch (s.name) {
                        case 'L2R':
                        case 'R2L':
                          a = s.name;
                          break;
                        default:
                          a = 'L2R';
                      }
                    break;
                  case 'ViewArea':
                  case 'ViewClip':
                  case 'PrintArea':
                  case 'PrintClip':
                    if (s instanceof Ae)
                      switch (s.name) {
                        case 'MediaBox':
                        case 'CropBox':
                        case 'BleedBox':
                        case 'TrimBox':
                        case 'ArtBox':
                          a = s.name;
                          break;
                        default:
                          a = 'CropBox';
                      }
                    break;
                  case 'PrintScaling':
                    if (s instanceof Ae)
                      switch (s.name) {
                        case 'None':
                        case 'AppDefault':
                          a = s.name;
                          break;
                        default:
                          a = 'AppDefault';
                      }
                    break;
                  case 'Duplex':
                    if (s instanceof Ae)
                      switch (s.name) {
                        case 'Simplex':
                        case 'DuplexFlipShortEdge':
                        case 'DuplexFlipLongEdge':
                          a = s.name;
                          break;
                        default:
                          a = 'None';
                      }
                    break;
                  case 'PrintPageRange':
                    Array.isArray(s) &&
                      s.length % 2 == 0 &&
                      s.every(
                        (A, t, i) =>
                          Number.isInteger(A) &&
                          A > 0 &&
                          (0 === t || A >= i[t - 1]) &&
                          A <= this.numPages
                      ) &&
                      (a = s);
                    break;
                  case 'NumCopies':
                    Number.isInteger(s) && s > 0 && (a = s);
                    break;
                  default:
                    m(`Ignoring non-standard key in ViewerPreferences: ${i}.`);
                    continue;
                }
                void 0 !== a
                  ? (t || (t = Object.create(null)), (t[i] = a))
                  : m(`Bad value, for key "${i}", in ViewerPreferences: ${s}.`);
              }
              return b(this, 'viewerPreferences', t);
            }
            get openAction() {
              let A = this._catDict.get('OpenAction'),
                t = Object.create(null);
              if (A instanceof Aa) {
                let i = new Aa(this.xref);
                i.set('A', A);
                let a = { url: null, dest: null, action: null };
                gP.parseDestDictionary({ destDict: i, resultObj: a }),
                  Array.isArray(a.dest)
                    ? (t.dest = a.dest)
                    : a.action && (t.action = a.action);
              } else Array.isArray(A) && (t.dest = A);
              return b(this, 'openAction', H(t) > 0 ? t : null);
            }
            get attachments() {
              let A = this._catDict.get('Names'),
                t = null;
              if (A instanceof Aa && A.has('EmbeddedFiles')) {
                let i = new gi(A.getRaw('EmbeddedFiles'), this.xref);
                for (let [A, a] of i.getAll()) {
                  let i = new gr(a, this.xref);
                  t || (t = Object.create(null)), (t[T(A)] = i.serializable);
                }
              }
              return b(this, 'attachments', t);
            }
            get xfaImages() {
              let A = this._catDict.get('Names'),
                t = null;
              if (A instanceof Aa && A.has('XFAImages')) {
                let i = new gi(A.getRaw('XFAImages'), this.xref);
                for (let [A, a] of i.getAll())
                  t || (t = new Aa(this.xref)), t.set(T(A), a);
              }
              return b(this, 'xfaImages', t);
            }
            _collectJavaScript() {
              let A = this._catDict.get('Names'),
                t = null;
              function i(A, i) {
                if (!(i instanceof Aa) || !An(i.get('S'), 'JavaScript')) return;
                let a = i.get('JS');
                if (a instanceof AC) a = a.getString();
                else if ('string' != typeof a) return;
                (a = T(a).replaceAll('\x00', '')) &&
                  (t ||= new Map()).set(A, a);
              }
              if (A instanceof Aa && A.has('JavaScript')) {
                let t = new gi(A.getRaw('JavaScript'), this.xref);
                for (let [A, a] of t.getAll()) i(T(A), a);
              }
              let a = this._catDict.get('OpenAction');
              return a && i('OpenAction', a), t;
            }
            get jsActions() {
              let A = this._collectJavaScript(),
                t = AM(this.xref, this._catDict, c);
              if (A)
                for (let [i, a] of ((t ||= Object.create(null)), A))
                  i in t ? t[i].push(a) : (t[i] = [a]);
              return b(this, 'jsActions', t);
            }
            async fontFallback(A, t) {
              let i = await Promise.all(this.fontCache);
              for (let a of i)
                if (a.loadedName === A) {
                  a.fallback(t);
                  return;
                }
            }
            async cleanup(A = !1) {
              gs(),
                this.globalImageCache.clear(A),
                this.pageKidsCountCache.clear(),
                this.pageIndexCache.clear(),
                this.pageDictCache.clear(),
                this.nonBlendModesSet.clear();
              let t = await Promise.all(this.fontCache);
              for (let { dict: A } of t) delete A.cacheKey;
              this.fontCache.clear(),
                this.builtInCMapCache.clear(),
                this.standardFontDataCache.clear(),
                this.systemFontCache.clear();
            }
            async getPageDict(A) {
              let t = [this.toplevelPagesDict],
                i = new Ag(),
                a = this._catDict.getRaw('Pages');
              a instanceof As && i.put(a);
              let s = this.xref,
                g = this.pageKidsCountCache,
                r = this.pageIndexCache,
                n = this.pageDictCache,
                o = 0;
              for (; t.length; ) {
                let a = t.pop();
                if (a instanceof As) {
                  let I = g.get(a);
                  if (I >= 0 && o + I <= A) {
                    o += I;
                    continue;
                  }
                  if (i.has(a))
                    throw new x('Pages tree contains circular reference.');
                  i.put(a);
                  let l = await (n.get(a) || s.fetchAsync(a));
                  if (l instanceof Aa) {
                    let t = l.getRaw('Type');
                    if (
                      (t instanceof As && (t = await s.fetchAsync(t)),
                      An(t, 'Page') || !l.has('Kids'))
                    ) {
                      if (
                        (g.has(a) || g.put(a, 1),
                        r.has(a) || r.put(a, o),
                        o === A)
                      )
                        return [l, a];
                      o++;
                      continue;
                    }
                  }
                  t.push(l);
                  continue;
                }
                if (!(a instanceof Aa))
                  throw new x(
                    'Page dictionary kid reference points to wrong type of object.'
                  );
                let { objId: I } = a,
                  l = a.getRaw('Count');
                if (
                  (l instanceof As && (l = await s.fetchAsync(l)),
                  Number.isInteger(l) &&
                    l >= 0 &&
                    (I && !g.has(I) && g.put(I, l), o + l <= A))
                ) {
                  o += l;
                  continue;
                }
                let C = a.getRaw('Kids');
                if (
                  (C instanceof As && (C = await s.fetchAsync(C)),
                  !Array.isArray(C))
                ) {
                  let t = a.getRaw('Type');
                  if (
                    (t instanceof As && (t = await s.fetchAsync(t)),
                    An(t, 'Page') || !a.has('Kids'))
                  ) {
                    if (o === A) return [a, null];
                    o++;
                    continue;
                  }
                  throw new x('Page dictionary kids object is not an array.');
                }
                for (let A = C.length - 1; A >= 0; A--) {
                  let i = C[A];
                  t.push(i),
                    a === this.toplevelPagesDict &&
                      i instanceof As &&
                      !n.has(i) &&
                      n.put(i, s.fetchAsync(i));
                }
              }
              throw Error(`Page index ${A} not found.`);
            }
            async getAllPageDicts(A = !1) {
              let { ignoreErrors: t } = this.pdfManager.evaluatorOptions,
                i = [{ currentNode: this.toplevelPagesDict, posInKids: 0 }],
                a = new Ag(),
                s = this._catDict.getRaw('Pages');
              s instanceof As && a.put(s);
              let g = new Map(),
                r = this.xref,
                n = this.pageIndexCache,
                o = 0;
              function I(i) {
                if (i instanceof AE && !A) throw i;
                A &&
                  t &&
                  0 === o &&
                  (m(`getAllPageDicts - Skipping invalid first page: "${i}".`),
                  (i = Aa.empty)),
                  g.set(o++, [i, null]);
              }
              for (; i.length > 0; ) {
                var l, C;
                let A;
                let t = i.at(-1),
                  { currentNode: s, posInKids: B } = t,
                  h = s.getRaw('Kids');
                if (h instanceof As)
                  try {
                    h = await r.fetchAsync(h);
                  } catch (A) {
                    I(A);
                    break;
                  }
                if (!Array.isArray(h)) {
                  I(new x('Page dictionary kids object is not an array.'));
                  break;
                }
                if (B >= h.length) {
                  i.pop();
                  continue;
                }
                let Q = h[B];
                if (Q instanceof As) {
                  if (a.has(Q)) {
                    I(new x('Pages tree contains circular reference.'));
                    break;
                  }
                  a.put(Q);
                  try {
                    A = await r.fetchAsync(Q);
                  } catch (A) {
                    I(A);
                    break;
                  }
                } else A = Q;
                if (!(A instanceof Aa)) {
                  I(
                    new x(
                      'Page dictionary kid reference points to wrong type of object.'
                    )
                  );
                  break;
                }
                let c = A.getRaw('Type');
                if (c instanceof As)
                  try {
                    c = await r.fetchAsync(c);
                  } catch (A) {
                    I(A);
                    break;
                  }
                An(c, 'Page') || !A.has('Kids')
                  ? ((l = A),
                    (C = Q instanceof As ? Q : null) &&
                      !n.has(C) &&
                      n.put(C, o),
                    g.set(o++, [l, C]))
                  : i.push({ currentNode: A, posInKids: 0 }),
                  t.posInKids++;
              }
              return g;
            }
            getPageIndex(A) {
              let t = this.pageIndexCache.get(A);
              if (void 0 !== t) return Promise.resolve(t);
              let i = this.xref,
                a = 0,
                s = (t) => {
                  let g, r;
                  return ((r = 0),
                  i
                    .fetchAsync(t)
                    .then(function (i) {
                      if (
                        Al(t, A) &&
                        !AI(i, 'Page') &&
                        !(
                          i instanceof Aa &&
                          !i.has('Type') &&
                          i.has('Contents')
                        )
                      )
                        throw new x(
                          'The reference does not point to a /Page dictionary.'
                        );
                      if (!i) return null;
                      if (!(i instanceof Aa))
                        throw new x('Node must be a dictionary.');
                      return (g = i.getRaw('Parent')), i.getAsync('Parent');
                    })
                    .then(function (A) {
                      if (!A) return null;
                      if (!(A instanceof Aa))
                        throw new x('Parent must be a dictionary.');
                      return A.getAsync('Kids');
                    })
                    .then(function (A) {
                      if (!A) return null;
                      let a = [],
                        s = !1;
                      for (let g of A) {
                        if (!(g instanceof As))
                          throw new x('Kid must be a reference.');
                        if (Al(g, t)) {
                          s = !0;
                          break;
                        }
                        a.push(
                          i.fetchAsync(g).then(function (A) {
                            if (!(A instanceof Aa))
                              throw new x('Kid node must be a dictionary.');
                            A.has('Count') ? (r += A.get('Count')) : r++;
                          })
                        );
                      }
                      if (!s)
                        throw new x(
                          "Kid reference not found in parent's kids."
                        );
                      return Promise.all(a).then(function () {
                        return [r, g];
                      });
                    })).then((t) => {
                    if (!t) return this.pageIndexCache.put(A, a), a;
                    let [i, g] = t;
                    return (a += i), s(g);
                  });
                };
              return s(A);
            }
            get baseUrl() {
              let A = this._catDict.get('URI');
              if (A instanceof Aa) {
                let t = A.get('Base');
                if ('string' == typeof t) {
                  let A = D(t, null, { tryConvertEncoding: !0 });
                  if (A) return b(this, 'baseUrl', A.href);
                }
              }
              return b(this, 'baseUrl', this.pdfManager.docBaseUrl);
            }
            static parseDestDictionary({
              destDict: A,
              resultObj: t,
              docBaseUrl: i = null,
              docAttachments: a = null,
            }) {
              if (!(A instanceof Aa)) {
                m('parseDestDictionary: `destDict` must be a dictionary.');
                return;
              }
              let s,
                g,
                r = A.get('A');
              if (
                (!(r instanceof Aa) &&
                  (A.has('Dest')
                    ? (r = A.get('Dest'))
                    : (r = A.get('AA')) instanceof Aa &&
                      (r.has('D')
                        ? (r = r.get('D'))
                        : r.has('U') && (r = r.get('U')))),
                r instanceof Aa)
              ) {
                let A = r.get('S');
                if (!(A instanceof Ae)) {
                  m('parseDestDictionary: Invalid type in Action dictionary.');
                  return;
                }
                let i = A.name;
                switch (i) {
                  case 'ResetForm':
                    let n = r.get('Flags'),
                      o = [],
                      I = [];
                    for (let A of r.get('Fields') || [])
                      A instanceof As
                        ? I.push(A.toString())
                        : 'string' == typeof A && o.push(T(A));
                    t.resetForm = {
                      fields: o,
                      refs: I,
                      include: 0 == (1 & ('number' == typeof n ? n : 0)),
                    };
                    break;
                  case 'URI':
                    (s = r.get('URI')) instanceof Ae && (s = '/' + s.name);
                    break;
                  case 'GoTo':
                    g = r.get('D');
                    break;
                  case 'Launch':
                  case 'GoToR':
                    let l = r.get('F');
                    if (l instanceof Aa) {
                      let A = new gr(l, null, !0),
                        { rawFilename: t } = A.serializable;
                      s = t;
                    } else 'string' == typeof l && (s = l);
                    let C = gT(r);
                    C &&
                      'string' == typeof s &&
                      (s = s.split('#', 1)[0] + '#' + C);
                    let B = r.get('NewWindow');
                    'boolean' == typeof B && (t.newWindow = B);
                    break;
                  case 'GoToE':
                    let h;
                    let Q = r.get('T');
                    if (a && Q instanceof Aa) {
                      let A = Q.get('R'),
                        t = Q.get('N');
                      An(A, 'C') && 'string' == typeof t && (h = a[T(t)]);
                    }
                    if (h) {
                      t.attachment = h;
                      let A = gT(r);
                      A && (t.attachmentDest = A);
                    } else
                      m('parseDestDictionary - unimplemented "GoToE" action.');
                    break;
                  case 'Named':
                    let c = r.get('N');
                    c instanceof Ae && (t.action = c.name);
                    break;
                  case 'SetOCGState':
                    let E = r.get('State'),
                      u = r.get('PreserveRB');
                    if (!Array.isArray(E) || 0 === E.length) break;
                    let d = [];
                    for (let A of E)
                      if (A instanceof Ae)
                        switch (A.name) {
                          case 'ON':
                          case 'OFF':
                          case 'Toggle':
                            d.push(A.name);
                        }
                      else A instanceof As && d.push(A.toString());
                    if (d.length !== E.length) break;
                    t.setOCGState = {
                      state: d,
                      preserveRB: 'boolean' != typeof u || u,
                    };
                    break;
                  case 'JavaScript':
                    let f;
                    let p = r.get('JS');
                    p instanceof AC
                      ? (f = p.getString())
                      : 'string' == typeof p && (f = p);
                    let y = f && AY(T(f));
                    if (y) {
                      (s = y.url), (t.newWindow = y.newWindow);
                      break;
                    }
                  default:
                    if ('JavaScript' === i || 'SubmitForm' === i) break;
                    m(`parseDestDictionary - unsupported action: "${i}".`);
                }
              } else A.has('Dest') && (g = A.get('Dest'));
              if ('string' == typeof s) {
                let A = D(s, i, {
                  addDefaultProtocol: !0,
                  tryConvertEncoding: !0,
                });
                A && (t.url = A.href), (t.unsafeUrl = s);
              }
              g &&
                (g instanceof Ae && (g = g.name),
                'string' == typeof g ? (t.dest = T(g)) : gv(g) && (t.dest = g));
            }
          }
          class gW {
            constructor(A, t, i) {
              (this.dict = A),
                (this.keys = t),
                (this.xref = i),
                (this.refSet = null);
            }
            async load() {
              if (this.xref.stream.isDataLoaded) return;
              let { keys: A, dict: t } = this;
              this.refSet = new Ag();
              let i = [];
              for (let a of A) {
                let A = t.getRaw(a);
                void 0 !== A && i.push(A);
              }
              return this._walk(i);
            }
            async _walk(A) {
              let t = [],
                i = [];
              for (; A.length; ) {
                let a = A.pop();
                if (a instanceof As) {
                  if (this.refSet.has(a)) continue;
                  try {
                    this.refSet.put(a), (a = this.xref.fetch(a));
                  } catch (A) {
                    if (!(A instanceof AQ)) {
                      m(`ObjectLoader._walk - requesting all data: "${A}".`),
                        (this.refSet = null);
                      let { manager: t } = this.xref.stream;
                      return t.requestAllChunks();
                    }
                    t.push(a), i.push({ begin: A.begin, end: A.end });
                  }
                }
                if (a instanceof AC) {
                  let A = a.getBaseStreams();
                  if (A) {
                    let s = !1;
                    for (let t of A)
                      t.isDataLoaded ||
                        ((s = !0), i.push({ begin: t.start, end: t.end }));
                    s && t.push(a);
                  }
                }
                !(function (A, t) {
                  if (A instanceof Aa) A = A.getRawValues();
                  else if (A instanceof AC) A = A.dict.getRawValues();
                  else if (!Array.isArray(A)) return;
                  for (let i of A)
                    (i instanceof As ||
                      i instanceof Aa ||
                      i instanceof AC ||
                      Array.isArray(i)) &&
                      t.push(i);
                })(a, A);
              }
              if (i.length) {
                for (let A of (await this.xref.stream.manager.requestRanges(i),
                t))
                  A instanceof As && this.refSet.remove(A);
                return this._walk(t);
              }
              this.refSet = null;
            }
          }
          let gZ = Symbol(),
            gO = Symbol(),
            gX = Symbol(),
            gV = Symbol(),
            gj = Symbol(),
            gz = Symbol(),
            g_ = Symbol(),
            g$ = Symbol(),
            g0 = Symbol(),
            g1 = Symbol('content'),
            g2 = Symbol('data'),
            g9 = Symbol(),
            g3 = Symbol('extra'),
            g5 = Symbol(),
            g8 = Symbol(),
            g6 = Symbol(),
            g7 = Symbol(),
            g4 = Symbol(),
            rA = Symbol(),
            re = Symbol(),
            rt = Symbol(),
            ri = Symbol(),
            ra = Symbol(),
            rs = Symbol(),
            rg = Symbol(),
            rr = Symbol(),
            rn = Symbol(),
            ro = Symbol(),
            rI = Symbol(),
            rl = Symbol(),
            rC = Symbol(),
            rB = Symbol(),
            rh = Symbol(),
            rQ = Symbol(),
            rc = Symbol(),
            rE = Symbol(),
            ru = Symbol(),
            rd = Symbol(),
            rf = Symbol(),
            rp = Symbol(),
            rm = Symbol(),
            ry = Symbol(),
            rw = Symbol(),
            rD = Symbol(),
            rb = Symbol(),
            rk = Symbol('namespaceId'),
            rF = Symbol('nodeName'),
            rS = Symbol(),
            rR = Symbol(),
            rG = Symbol(),
            rN = Symbol(),
            rx = Symbol(),
            rU = Symbol(),
            rM = Symbol(),
            rJ = Symbol(),
            rL = Symbol('root'),
            rH = Symbol(),
            rY = Symbol(),
            rK = Symbol(),
            rv = Symbol(),
            rq = Symbol(),
            rT = Symbol(),
            rP = Symbol(),
            rW = Symbol(),
            rZ = Symbol(),
            rO = Symbol(),
            rX = Symbol(),
            rV = Symbol('uid'),
            rj = Symbol(),
            rz = {
              config: {
                id: 0,
                check: (A) => A.startsWith('http://www.xfa.org/schema/xci/'),
              },
              connectionSet: {
                id: 1,
                check: (A) =>
                  A.startsWith('http://www.xfa.org/schema/xfa-connection-set/'),
              },
              datasets: {
                id: 2,
                check: (A) =>
                  A.startsWith('http://www.xfa.org/schema/xfa-data/'),
              },
              form: {
                id: 3,
                check: (A) =>
                  A.startsWith('http://www.xfa.org/schema/xfa-form/'),
              },
              localeSet: {
                id: 4,
                check: (A) =>
                  A.startsWith('http://www.xfa.org/schema/xfa-locale-set/'),
              },
              pdf: {
                id: 5,
                check: (A) => 'http://ns.adobe.com/xdp/pdf/' === A,
              },
              signature: {
                id: 6,
                check: (A) => 'http://www.w3.org/2000/09/xmldsig#' === A,
              },
              sourceSet: {
                id: 7,
                check: (A) =>
                  A.startsWith('http://www.xfa.org/schema/xfa-source-set/'),
              },
              stylesheet: {
                id: 8,
                check: (A) => 'http://www.w3.org/1999/XSL/Transform' === A,
              },
              template: {
                id: 9,
                check: (A) =>
                  A.startsWith('http://www.xfa.org/schema/xfa-template/'),
              },
              xdc: {
                id: 10,
                check: (A) => A.startsWith('http://www.xfa.org/schema/xdc/'),
              },
              xdp: { id: 11, check: (A) => 'http://ns.adobe.com/xdp/' === A },
              xfdf: { id: 12, check: (A) => 'http://ns.adobe.com/xfdf/' === A },
              xhtml: {
                id: 13,
                check: (A) => 'http://www.w3.org/1999/xhtml' === A,
              },
              xmpmeta: {
                id: 14,
                check: (A) => 'http://ns.adobe.com/xmpmeta/' === A,
              },
            },
            r_ = {
              pt: (A) => A,
              cm: (A) => (A / 2.54) * 72,
              mm: (A) => (A / 25.4) * 72,
              in: (A) => 72 * A,
              px: (A) => A,
            },
            r$ = /([+-]?\d+\.?\d*)(.*)/;
          function r0(A) {
            return A.startsWith("'") || A.startsWith('"') ? A.slice(1, -1) : A;
          }
          function r1({ data: A, defaultValue: t, validate: i }) {
            if (!A) return t;
            A = A.trim();
            let a = parseInt(A, 10);
            return !isNaN(a) && i(a) ? a : t;
          }
          function r2({ data: A, defaultValue: t, validate: i }) {
            if (!A) return t;
            A = A.trim();
            let a = parseFloat(A);
            return !isNaN(a) && i(a) ? a : t;
          }
          function r9({ data: A, defaultValue: t, validate: i }) {
            return A && i((A = A.trim())) ? A : t;
          }
          function r3(A, t) {
            return r9({
              data: A,
              defaultValue: t[0],
              validate: (A) => t.includes(A),
            });
          }
          function r5(A, t = '0') {
            if (((t ||= '0'), !A)) return r5(t);
            let i = A.trim().match(r$);
            if (!i) return r5(t);
            let [, a, s] = i,
              g = parseFloat(a);
            if (isNaN(g)) return r5(t);
            if (0 === g) return 0;
            let r = r_[s];
            return r ? r(g) : g;
          }
          function r8(A) {
            if (!A) return { num: 1, den: 1 };
            let t = A.trim()
              .split(/\s*:\s*/)
              .map((A) => parseFloat(A))
              .filter((A) => !isNaN(A));
            if ((1 === t.length && t.push(1), 0 === t.length))
              return { num: 1, den: 1 };
            let [i, a] = t;
            return { num: i, den: a };
          }
          function r6(A) {
            return A
              ? A.trim()
                  .split(/\s+/)
                  .map((A) => ({
                    excluded: '-' === A[0],
                    viewname: A.substring(1),
                  }))
              : [];
          }
          class r7 {
            static get FAILURE() {
              return b(this, 'FAILURE', new r7(!1, null, null, null));
            }
            static get EMPTY() {
              return b(this, 'EMPTY', new r7(!0, null, null, null));
            }
            constructor(A, t, i, a) {
              (this.success = A),
                (this.html = t),
                (this.bbox = i),
                (this.breakNode = a);
            }
            isBreak() {
              return !!this.breakNode;
            }
            static breakNode(A) {
              return new r7(!1, null, null, A);
            }
            static success(A, t = null) {
              return new r7(!0, A, t, null);
            }
          }
          class r4 {
            constructor(A) {
              (this.fonts = new Map()),
                (this.cache = new Map()),
                (this.warned = new Set()),
                (this.defaultFont = null),
                this.add(A);
            }
            add(A, t = null) {
              for (let t of A) this.addPdfFont(t);
              for (let A of this.fonts.values())
                A.regular || (A.regular = A.italic || A.bold || A.bolditalic);
              if (!t || 0 === t.size) return;
              let i = this.fonts.get('PdfJS-Fallback-PdfJS-XFA');
              for (let A of t) this.fonts.set(A, i);
            }
            addPdfFont(A) {
              let t = A.cssFontInfo,
                i = t.fontFamily,
                a = this.fonts.get(i);
              !a &&
                ((a = Object.create(null)),
                this.fonts.set(i, a),
                this.defaultFont || (this.defaultFont = a));
              let s = '',
                g = parseFloat(t.fontWeight);
              0 !== parseFloat(t.italicAngle)
                ? (s = g >= 700 ? 'bolditalic' : 'italic')
                : g >= 700 && (s = 'bold'),
                !s &&
                  ((A.name.includes('Bold') || A.psName?.includes('Bold')) &&
                    (s = 'bold'),
                  (A.name.includes('Italic') ||
                    A.name.endsWith('It') ||
                    A.psName?.includes('Italic') ||
                    A.psName?.endsWith('It')) &&
                    (s += 'italic')),
                s || (s = 'regular'),
                (a[s] = A);
            }
            getDefault() {
              return this.defaultFont;
            }
            find(A, t = !0) {
              let i = this.fonts.get(A) || this.cache.get(A);
              if (i) return i;
              let a = /,|-|_| |bolditalic|bold|italic|regular|it/gi,
                s = A.replaceAll(a, '');
              if ((i = this.fonts.get(s))) return this.cache.set(A, i), i;
              s = s.toLowerCase();
              let g = [];
              for (let [A, t] of this.fonts.entries())
                A.replaceAll(a, '').toLowerCase().startsWith(s) && g.push(t);
              if (0 === g.length)
                for (let [, A] of this.fonts.entries())
                  A.regular.name
                    ?.replaceAll(a, '')
                    .toLowerCase()
                    .startsWith(s) && g.push(A);
              if (0 === g.length)
                for (let [A, t] of ((s = s.replaceAll(/psmt|mt/gi, '')),
                this.fonts.entries()))
                  A.replaceAll(a, '').toLowerCase().startsWith(s) && g.push(t);
              if (0 === g.length)
                for (let A of this.fonts.values())
                  A.regular.name
                    ?.replaceAll(a, '')
                    .toLowerCase()
                    .startsWith(s) && g.push(A);
              return g.length >= 1
                ? (1 !== g.length &&
                    t &&
                    m(`XFA - Too many choices to guess the correct font: ${A}`),
                  this.cache.set(A, g[0]),
                  g[0])
                : (t &&
                    !this.warned.has(A) &&
                    (this.warned.add(A), m(`XFA - Cannot find the font: ${A}`)),
                  null);
            }
          }
          function nA(A, t) {
            return 'italic' === A.posture
              ? 'bold' === A.weight
                ? t.bolditalic
                : t.italic
              : 'bold' === A.weight
                ? t.bold
                : t.regular;
          }
          class ne {
            constructor(A, t, i, a) {
              if (
                ((this.lineHeight = i),
                (this.paraMargin = t || {
                  top: 0,
                  bottom: 0,
                  left: 0,
                  right: 0,
                }),
                !A)
              ) {
                [this.pdfFont, this.xfaFont] = this.defaultFont(a);
                return;
              }
              this.xfaFont = {
                typeface: A.typeface,
                posture: A.posture,
                weight: A.weight,
                size: A.size,
                letterSpacing: A.letterSpacing,
              };
              let s = a.find(A.typeface);
              s
                ? ((this.pdfFont = nA(A, s)),
                  this.pdfFont ||
                    ([this.pdfFont, this.xfaFont] = this.defaultFont(a)))
                : ([this.pdfFont, this.xfaFont] = this.defaultFont(a));
            }
            defaultFont(A) {
              let t =
                A.find('Helvetica', !1) ||
                A.find('Myriad Pro', !1) ||
                A.find('Arial', !1) ||
                A.getDefault();
              if (t?.regular) {
                let A = t.regular;
                return [
                  A,
                  {
                    typeface: A.cssFontInfo.fontFamily,
                    posture: 'normal',
                    weight: 'normal',
                    size: 10,
                    letterSpacing: 0,
                  },
                ];
              }
              return [
                null,
                {
                  typeface: 'Courier',
                  posture: 'normal',
                  weight: 'normal',
                  size: 10,
                  letterSpacing: 0,
                },
              ];
            }
          }
          class nt {
            constructor(A, t, i, a) {
              (this.fontFinder = a), (this.stack = [new ne(A, t, i, a)]);
            }
            pushData(A, t, i) {
              let a = this.stack.at(-1);
              for (let t of [
                'typeface',
                'posture',
                'weight',
                'size',
                'letterSpacing',
              ])
                A[t] || (A[t] = a.xfaFont[t]);
              for (let A of ['top', 'bottom', 'left', 'right'])
                isNaN(t[A]) && (t[A] = a.paraMargin[A]);
              let s = new ne(A, t, i || a.lineHeight, this.fontFinder);
              s.pdfFont || (s.pdfFont = a.pdfFont), this.stack.push(s);
            }
            popFont() {
              this.stack.pop();
            }
            topFont() {
              return this.stack.at(-1);
            }
          }
          class ni {
            constructor(A, t, i, a) {
              (this.glyphs = []),
                (this.fontSelector = new nt(A, t, i, a)),
                (this.extraHeight = 0);
            }
            pushData(A, t, i) {
              this.fontSelector.pushData(A, t, i);
            }
            popFont(A) {
              return this.fontSelector.popFont();
            }
            addPara() {
              let A = this.fontSelector.topFont();
              this.extraHeight += A.paraMargin.top + A.paraMargin.bottom;
            }
            addString(A) {
              if (!A) return;
              let t = this.fontSelector.topFont(),
                i = t.xfaFont.size;
              if (t.pdfFont) {
                let a = t.xfaFont.letterSpacing,
                  s = t.pdfFont,
                  g = s.lineHeight || 1.2,
                  r = t.lineHeight || Math.max(1.2, g) * i,
                  n = g - (void 0 === s.lineGap ? 0.2 : s.lineGap),
                  o = Math.max(1, n) * i,
                  I = i / 1e3,
                  l = s.defaultWidth || s.charsToGlyphs(' ')[0].width;
                for (let t of A.split(/[\u2029\n]/)) {
                  let A = s.encodeString(t).join(''),
                    i = s.charsToGlyphs(A);
                  for (let A of i) {
                    let t = A.width || l;
                    this.glyphs.push([t * I + a, r, o, A.unicode, !1]);
                  }
                  this.glyphs.push([0, 0, 0, '\n', !0]);
                }
                this.glyphs.pop();
              } else {
                for (let t of A.split(/[\u2029\n]/)) {
                  for (let A of t.split(''))
                    this.glyphs.push([i, 1.2 * i, i, A, !1]);
                  this.glyphs.push([0, 0, 0, '\n', !0]);
                }
                this.glyphs.pop();
              }
            }
            compute(A) {
              let t = -1,
                i = 0,
                a = 0,
                s = 0,
                g = 0,
                r = 0,
                n = !1,
                o = !0;
              for (let I = 0, l = this.glyphs.length; I < l; I++) {
                let [l, C, B, h, Q] = this.glyphs[I],
                  c = ' ' === h,
                  E = o ? B : C;
                Q
                  ? ((a = Math.max(a, g)),
                    (g = 0),
                    (s += r),
                    (r = E),
                    (t = -1),
                    (i = 0),
                    (o = !1))
                  : c
                    ? g + l > A
                      ? ((a = Math.max(a, g)),
                        (g = 0),
                        (s += r),
                        (r = E),
                        (t = -1),
                        (i = 0),
                        (n = !0),
                        (o = !1))
                      : ((r = Math.max(E, r)), (i = g), (g += l), (t = I))
                    : g + l > A
                      ? ((s += r),
                        (r = E),
                        -1 !== t
                          ? ((I = t),
                            (a = Math.max(a, i)),
                            (g = 0),
                            (t = -1),
                            (i = 0))
                          : ((a = Math.max(a, g)), (g = l)),
                        (n = !0),
                        (o = !1))
                      : ((g += l), (r = Math.max(E, r)));
              }
              return {
                width: 1.02 * (a = Math.max(a, g)),
                height: (s += r + this.extraHeight),
                isBroken: n,
              };
            }
          }
          let na = /^[^.[]+/,
            ns = /^[^\]]+/,
            ng = { dot: 0, dotDot: 1, dotHash: 2, dotBracket: 3, dotParen: 4 },
            nr = new Map([
              ['$data', (A, t) => (A.datasets ? A.datasets.data : A)],
              [
                '$record',
                (A, t) => (A.datasets ? A.datasets.data : A)[rg]()[0],
              ],
              ['$template', (A, t) => A.template],
              ['$connectionSet', (A, t) => A.connectionSet],
              ['$form', (A, t) => A.form],
              ['$layout', (A, t) => A.layout],
              ['$host', (A, t) => A.host],
              ['$dataWindow', (A, t) => A.dataWindow],
              ['$event', (A, t) => A.event],
              ['!', (A, t) => A.datasets],
              ['$xfa', (A, t) => A],
              ['xfa', (A, t) => A],
              ['$', (A, t) => t],
            ]),
            nn = new WeakMap();
          function no(A, t, i = !0) {
            var a;
            let s = A.match(na);
            if (!s) return null;
            let [g] = s,
              r = [
                {
                  name: g,
                  cacheName: '.' + g,
                  index: 0,
                  js: null,
                  formCalc: null,
                  operator: ng.dot,
                },
              ],
              n = g.length;
            for (; n < A.length; ) {
              let o;
              let I = n;
              if ('[' === A.charAt(n++)) {
                if (!(s = A.slice(n).match(ns)))
                  return m('XFA - Invalid index in SOM expression'), null;
                (r.at(-1).index =
                  '*' === (a = (a = s[0]).trim())
                    ? 1 / 0
                    : parseInt(a, 10) || 0),
                  (n += s[0].length + 1);
                continue;
              }
              switch (A.charAt(n)) {
                case '.':
                  if (!t) return null;
                  n++, (o = ng.dotDot);
                  break;
                case '#':
                  n++, (o = ng.dotHash);
                  break;
                case '[':
                  if (i)
                    return (
                      m(
                        'XFA - SOM expression contains a FormCalc subexpression which is not supported for now.'
                      ),
                      null
                    );
                  o = ng.dotBracket;
                  break;
                case '(':
                  if (i)
                    return (
                      m(
                        'XFA - SOM expression contains a JavaScript subexpression which is not supported for now.'
                      ),
                      null
                    );
                  o = ng.dotParen;
                  break;
                default:
                  o = ng.dot;
              }
              if (!(s = A.slice(n).match(na))) break;
              ([g] = s),
                (n += g.length),
                r.push({
                  name: g,
                  cacheName: A.slice(I, n),
                  operator: o,
                  index: 0,
                  js: null,
                  formCalc: null,
                });
            }
            return r;
          }
          function nI(A, t, i, a = !0, s = !0) {
            let g = no(i, a);
            if (!g) return null;
            let r = nr.get(g[0].name),
              n,
              o = 0;
            r
              ? ((n = !0), (A = [r(A, t)]), (o = 1))
              : ((n = null === t), (A = [t || A]));
            for (let i = g.length; o < i; o++) {
              let { name: i, cacheName: a, operator: r, index: I } = g[o],
                l = [];
              for (let t of A) {
                let A, g;
                if (t.isXFAObject) {
                  if (
                    (s &&
                      ((g = nn.get(t)) || ((g = new Map()), nn.set(t, g)),
                      (A = g.get(a))),
                    !A)
                  ) {
                    switch (r) {
                      case ng.dot:
                        A = t[re](i, !1);
                        break;
                      case ng.dotDot:
                        A = t[re](i, !0);
                        break;
                      case ng.dotHash:
                        A = (A = t[rA](i)).isXFAObjectArray ? A.children : [A];
                    }
                    s && g.set(a, A);
                  }
                  A.length > 0 && l.push(A);
                }
              }
              if (0 !== l.length || n || 0 !== o)
                A = isFinite(I)
                  ? l.filter((A) => I < A.length).map((A) => A[I])
                  : l.flat();
              else {
                let i = t[rI]();
                if (!(t = i)) return null;
                (o = -1), (A = [t]);
              }
            }
            return 0 === A.length ? null : A;
          }
          let nl = Symbol(),
            nC = Symbol(),
            nB = Symbol(),
            nh = Symbol('_children'),
            nQ = Symbol(),
            nc = Symbol(),
            nE = Symbol(),
            nu = Symbol(),
            nd = Symbol(),
            nf = Symbol(),
            np = Symbol(),
            nm = Symbol(),
            ny = Symbol(),
            nw = Symbol('parent'),
            nD = Symbol(),
            nb = Symbol(),
            nk = Symbol(),
            nF = 0,
            nS = rz.datasets.id;
          class nR {
            constructor(A, t, i = !1) {
              (this[rk] = A),
                (this[rF] = t),
                (this[np] = i),
                (this[nw] = null),
                (this[nh] = []),
                (this[rV] = `${t}${nF++}`),
                (this[rC] = null);
            }
            get isXFAObject() {
              return !0;
            }
            get isXFAObjectArray() {
              return !1;
            }
            createNodes(A) {
              let t = this,
                i = null;
              for (let { name: a, index: s } of A) {
                for (let A = 0, g = isFinite(s) ? s : 0; A <= g; A++) {
                  let A = t[rk] === nS ? -1 : t[rk];
                  (i = new nx(A, a)), t[gX](i);
                }
                t = i;
              }
              return i;
            }
            [rR](A) {
              if (!this[np] || !this[rG](A)) return !1;
              let t = A[rF],
                i = this[t];
              if (!(i instanceof nG))
                return (
                  null !== i && this[rJ](i), (this[t] = A), this[gX](A), !0
                );
              if (i.push(A)) return this[gX](A), !0;
              let a = '';
              return (
                this.id
                  ? (a = ` (id: ${this.id})`)
                  : this.name && (a = ` (name: ${this.name} ${this.h.value})`),
                m(`XFA - node "${this[rF]}"${a} has already enough "${t}"!`),
                !1
              );
            }
            [rG](A) {
              return this.hasOwnProperty(A[rF]) && A[rk] === this[rk];
            }
            [rp]() {
              return !1;
            }
            [gZ]() {
              return !1;
            }
            [rE]() {
              return !1;
            }
            [ru]() {
              return !1;
            }
            [rU]() {
              this.para && this[rl]()[g3].paraStack.pop();
            }
            [rM]() {
              this[rl]()[g3].paraStack.push(this.para);
            }
            [rK](A) {
              this.id && this[rk] === rz.template.id && A.set(this.id, this);
            }
            [rl]() {
              return this[rC].template;
            }
            [rm]() {
              return !1;
            }
            [ry]() {
              return !1;
            }
            [gX](A) {
              (A[nw] = this),
                this[nh].push(A),
                !A[rC] && this[rC] && (A[rC] = this[rC]);
            }
            [rJ](A) {
              let t = this[nh].indexOf(A);
              this[nh].splice(t, 1);
            }
            [rB]() {
              return this.hasOwnProperty('value');
            }
            [rq](A) {}
            [rN](A) {}
            [g5]() {}
            [gj](A) {
              delete this[np], this[g_] && (A.clean(this[g_]), delete this[g_]);
            }
            [rQ](A) {
              return this[nh].indexOf(A);
            }
            [rc](A, t) {
              (t[nw] = this),
                this[nh].splice(A, 0, t),
                !t[rC] && this[rC] && (t[rC] = this[rC]);
            }
            [rw]() {
              return !this.name;
            }
            [rb]() {
              return '';
            }
            [rP]() {
              return 0 === this[nh].length
                ? this[g1]
                : this[nh].map((A) => A[rP]()).join('');
            }
            get [nB]() {
              let A = Object.getPrototypeOf(this);
              if (!A._attributes) {
                let t = (A._attributes = new Set());
                for (let A of Object.getOwnPropertyNames(this)) {
                  if (
                    null === this[A] ||
                    this[A] instanceof nR ||
                    this[A] instanceof nG
                  )
                    break;
                  t.add(A);
                }
              }
              return b(this, nB, A._attributes);
            }
            [rf](A) {
              let t = this;
              for (; t; ) {
                if (t === A) return !0;
                t = t[rI]();
              }
              return !1;
            }
            [rI]() {
              return this[nw];
            }
            [ro]() {
              return this[rI]();
            }
            [rg](A = null) {
              return A ? this[A] : this[nh];
            }
            [g9]() {
              let A = Object.create(null);
              for (let t of (this[g1] && (A.$content = this[g1]),
              Object.getOwnPropertyNames(this))) {
                let i = this[t];
                null !== i &&
                  (i instanceof nR
                    ? (A[t] = i[g9]())
                    : i instanceof nG
                      ? i.isEmpty() || (A[t] = i.dump())
                      : (A[t] = i));
              }
              return A;
            }
            [rX]() {
              return null;
            }
            [rZ]() {
              return r7.EMPTY;
            }
            *[rr]() {
              for (let A of this[rg]()) yield A;
            }
            *[nu](A, t) {
              for (let i of this[rr]())
                if (!A || t === A.has(i[rF])) {
                  let A = this[g4](),
                    t = i[rZ](A);
                  t.success || (this[g3].failingNode = i), yield t;
                }
            }
            [g8]() {
              return null;
            }
            [gO](A, t) {
              this[g3].children.push(A);
            }
            [g4]() {}
            [gV]({ filter: A = null, include: t = !0 }) {
              if (this[g3].generator) {
                let A = this[g4](),
                  t = this[g3].failingNode[rZ](A);
                if (!t.success) return t;
                t.html && this[gO](t.html, t.bbox), delete this[g3].failingNode;
              } else this[g3].generator = this[nu](A, t);
              for (;;) {
                let A = this[g3].generator.next();
                if (A.done) break;
                let t = A.value;
                if (!t.success) return t;
                t.html && this[gO](t.html, t.bbox);
              }
              return (this[g3].generator = null), r7.EMPTY;
            }
            [rv](A) {
              this[nb] = new Set(Object.keys(A));
            }
            [nf](A) {
              let t = this[nB],
                i = this[nb];
              return [...A].filter((A) => t.has(A) && !i.has(A));
            }
            [rH](A, t = new Set()) {
              for (let i of this[nh]) i[nD](A, t);
            }
            [nD](A, t) {
              let i = this[nd](A, t);
              i ? this[nl](i, A, t) : this[rH](A, t);
            }
            [nd](A, t) {
              let { use: i, usehref: a } = this;
              if (!i && !a) return null;
              let s = null,
                g = null,
                r = null,
                n = i;
              if (
                (a
                  ? ((n = a),
                    a.startsWith('#som(') && a.endsWith(')')
                      ? (g = a.slice(5, -1))
                      : a.startsWith('.#som(') && a.endsWith(')')
                        ? (g = a.slice(6, -1))
                        : a.startsWith('#')
                          ? (r = a.slice(1))
                          : a.startsWith('.#') && (r = a.slice(2)))
                  : i.startsWith('#')
                    ? (r = i.slice(1))
                    : (g = i),
                (this.use = this.usehref = ''),
                r
                  ? (s = A.get(r))
                  : (s = nI(A.get(rL), this, g, !0, !1)) && (s = s[0]),
                !s)
              )
                return m(`XFA - Invalid prototype reference: ${n}.`), null;
              if (s[rF] !== this[rF])
                return (
                  m(`XFA - Incompatible prototype: ${s[rF]} !== ${this[rF]}.`),
                  null
                );
              if (t.has(s))
                return m('XFA - Cycle detected in prototypes use.'), null;
              t.add(s);
              let o = s[nd](A, t);
              return o && s[nl](o, A, t), s[rH](A, t), t.delete(s), s;
            }
            [nl](A, t, i) {
              if (i.has(A)) {
                m('XFA - Cycle detected in prototypes use.');
                return;
              }
              for (let t of (!this[g1] && A[g1] && (this[g1] = A[g1]),
              new Set(i).add(A),
              this[nf](A[nb])))
                (this[t] = A[t]), this[nb] && this[nb].add(t);
              for (let a of Object.getOwnPropertyNames(this)) {
                if (this[nB].has(a)) continue;
                let s = this[a],
                  g = A[a];
                if (s instanceof nG) {
                  for (let A of s[nh]) A[nD](t, i);
                  for (let a = s[nh].length, r = g[nh].length; a < r; a++) {
                    let g = A[nh][a][g$]();
                    if (!s.push(g)) break;
                    (g[nw] = this), this[nh].push(g), g[nD](t, i);
                  }
                } else if (null === s) {
                  if (null !== g) {
                    let A = g[g$]();
                    (A[nw] = this),
                      (this[a] = A),
                      this[nh].push(A),
                      A[nD](t, i);
                  }
                } else s[rH](t, i), g && s[nl](g, t, i);
              }
            }
            static [nQ](A) {
              return Array.isArray(A)
                ? A.map((A) => nR[nQ](A))
                : 'object' == typeof A && null !== A
                  ? Object.assign({}, A)
                  : A;
            }
            [g$]() {
              let A = Object.create(Object.getPrototypeOf(this));
              for (let t of Object.getOwnPropertySymbols(this))
                try {
                  A[t] = this[t];
                } catch {
                  b(A, t, this[t]);
                }
              for (let t of ((A[rV] = `${A[rF]}${nF++}`),
              (A[nh] = []),
              Object.getOwnPropertyNames(this))) {
                if (this[nB].has(t)) {
                  A[t] = nR[nQ](this[t]);
                  continue;
                }
                let i = this[t];
                A[t] = i instanceof nG ? new nG(i[nm]) : null;
              }
              for (let t of this[nh]) {
                let i = t[rF],
                  a = t[g$]();
                A[nh].push(a),
                  (a[nw] = A),
                  null === A[i] ? (A[i] = a) : A[i][nh].push(a);
              }
              return A;
            }
            [rg](A = null) {
              return A ? this[nh].filter((t) => t[rF] === A) : this[nh];
            }
            [rA](A) {
              return this[A];
            }
            [re](A, t, i = !0) {
              return Array.from(this[rt](A, t, i));
            }
            *[rt](A, t, i = !0) {
              if ('parent' !== A) {
                for (let i of this[nh])
                  i[rF] === A && (yield i),
                    i.name === A && (yield i),
                    (t || i[rw]()) && (yield* i[rt](A, t, !1));
                i && this[nB].has(A) && (yield new nN(this, A, this[A]));
              } else yield this[nw];
            }
          }
          class nG {
            constructor(A = 1 / 0) {
              (this[nm] = A), (this[nh] = []);
            }
            get isXFAObject() {
              return !1;
            }
            get isXFAObjectArray() {
              return !0;
            }
            push(A) {
              return this[nh].length <= this[nm]
                ? (this[nh].push(A), !0)
                : (m(
                    `XFA - node "${A[rF]}" accepts no more than ${this[nm]} children`
                  ),
                  !1);
            }
            isEmpty() {
              return 0 === this[nh].length;
            }
            dump() {
              return 1 === this[nh].length
                ? this[nh][0][g9]()
                : this[nh].map((A) => A[g9]());
            }
            [g$]() {
              let A = new nG(this[nm]);
              return (A[nh] = this[nh].map((A) => A[g$]())), A;
            }
            get children() {
              return this[nh];
            }
            clear() {
              this[nh].length = 0;
            }
          }
          class nN {
            constructor(A, t, i) {
              (this[nw] = A),
                (this[rF] = t),
                (this[g1] = i),
                (this[g0] = !1),
                (this[rV] = 'attribute' + nF++);
            }
            [rI]() {
              return this[nw];
            }
            [rd]() {
              return !0;
            }
            [ri]() {
              return this[g1].trim();
            }
            [rq](A) {
              (A = A.value || ''), (this[g1] = A.toString());
            }
            [rP]() {
              return this[g1];
            }
            [rf](A) {
              return this[nw] === A || this[nw][rf](A);
            }
          }
          class nx extends nR {
            constructor(A, t, i = {}) {
              if (
                (super(A, t), (this[g1] = ''), (this[nc] = null), '#text' !== t)
              ) {
                let A = new Map();
                for (let [t, a] of ((this[nC] = A), Object.entries(i)))
                  A.set(t, new nN(this, t, a));
                if (i.hasOwnProperty(rS)) {
                  let A = i[rS].xfa.dataNode;
                  void 0 !== A &&
                    ('dataGroup' === A
                      ? (this[nc] = !1)
                      : 'dataValue' === A && (this[nc] = !0));
                }
              }
              this[g0] = !1;
            }
            [rO](A) {
              let t = this[rF];
              if ('#text' === t) {
                A.push(AL(this[g1]));
                return;
              }
              let i = W(t),
                a = this[rk] === nS ? 'xfa:' : '';
              for (let [t, s] of (A.push(`<${a}${i}`), this[nC].entries())) {
                let i = W(t);
                A.push(` ${i}="${AL(s[g1])}"`);
              }
              if (
                (null !== this[nc] &&
                  (this[nc]
                    ? A.push(' xfa:dataNode="dataValue"')
                    : A.push(' xfa:dataNode="dataGroup"')),
                this[g1] || 0 !== this[nh].length)
              ) {
                if ((A.push('>'), this[g1]))
                  'string' == typeof this[g1]
                    ? A.push(AL(this[g1]))
                    : this[g1][rO](A);
                else for (let t of this[nh]) t[rO](A);
                A.push(`</${a}${i}>`);
              } else A.push('/>');
            }
            [rR](A) {
              if (this[g1]) {
                let A = new nx(this[rk], '#text');
                this[gX](A), (A[g1] = this[g1]), (this[g1] = '');
              }
              return this[gX](A), !0;
            }
            [rN](A) {
              this[g1] += A;
            }
            [g5]() {
              if (this[g1] && this[nh].length > 0) {
                let A = new nx(this[rk], '#text');
                this[gX](A), (A[g1] = this[g1]), delete this[g1];
              }
            }
            [rZ]() {
              return '#text' === this[rF]
                ? r7.success({ name: '#text', value: this[g1] })
                : r7.EMPTY;
            }
            [rg](A = null) {
              return A ? this[nh].filter((t) => t[rF] === A) : this[nh];
            }
            [g7]() {
              return this[nC];
            }
            [rA](A) {
              let t = this[nC].get(A);
              return void 0 !== t ? t : this[rg](A);
            }
            *[rt](A, t) {
              let i = this[nC].get(A);
              for (let a of (i && (yield i), this[nh]))
                a[rF] === A && (yield a), t && (yield* a[rt](A, t));
            }
            *[g6](A, t) {
              let i = this[nC].get(A);
              for (let a of (!i || (t && i[g0]) || (yield i), this[nh]))
                yield* a[g6](A, t);
            }
            *[rs](A, t, i) {
              for (let a of this[nh])
                a[rF] !== A || (i && a[g0]) || (yield a),
                  t && (yield* a[rs](A, t, i));
            }
            [rd]() {
              return null === this[nc]
                ? 0 === this[nh].length || this[nh][0][rk] === rz.xhtml.id
                : this[nc];
            }
            [ri]() {
              return null === this[nc]
                ? 0 === this[nh].length
                  ? this[g1].trim()
                  : this[nh][0][rk] === rz.xhtml.id
                    ? this[nh][0][rP]().trim()
                    : null
                : this[g1].trim();
            }
            [rq](A) {
              (A = A.value || ''), (this[g1] = A.toString());
            }
            [g9](A = !1) {
              let t = Object.create(null);
              for (let i of (A && (t.$ns = this[rk]),
              this[g1] && (t.$content = this[g1]),
              (t.$name = this[rF]),
              (t.children = []),
              this[nh]))
                t.children.push(i[g9](A));
              for (let [A, i] of ((t.attributes = Object.create(null)),
              this[nC]))
                t.attributes[A] = i[g1];
              return t;
            }
          }
          class nU extends nR {
            constructor(A, t) {
              super(A, t), (this[g1] = '');
            }
            [rN](A) {
              this[g1] += A;
            }
            [g5]() {}
          }
          class nM extends nU {
            constructor(A, t, i) {
              super(A, t), (this[ny] = i);
            }
            [g5]() {
              this[g1] = r9({
                data: this[g1],
                defaultValue: this[ny][0],
                validate: (A) => this[ny].includes(A),
              });
            }
            [gj](A) {
              super[gj](A), delete this[ny];
            }
          }
          class nJ extends nU {
            [g5]() {
              this[g1] = this[g1].trim();
            }
          }
          class nL extends nU {
            constructor(A, t, i, a) {
              super(A, t), (this[nE] = i), (this[nk] = a);
            }
            [g5]() {
              this[g1] = r1({
                data: this[g1],
                defaultValue: this[nE],
                validate: this[nk],
              });
            }
            [gj](A) {
              super[gj](A), delete this[nE], delete this[nk];
            }
          }
          class nH extends nL {
            constructor(A, t) {
              super(A, t, 0, (A) => 1 === A);
            }
          }
          class nY extends nL {
            constructor(A, t) {
              super(A, t, 1, (A) => 0 === A);
            }
          }
          function nK(A) {
            return 'string' == typeof A
              ? '0px'
              : Number.isInteger(A)
                ? `${A}px`
                : `${A.toFixed(2)}px`;
          }
          let nv = {
            anchorType(A, t) {
              let i = A[ro]();
              if (i && (!i.layout || 'position' === i.layout))
                switch (
                  ('transform' in t || (t.transform = ''), A.anchorType)
                ) {
                  case 'bottomCenter':
                    t.transform += 'translate(-50%, -100%)';
                    break;
                  case 'bottomLeft':
                    t.transform += 'translate(0,-100%)';
                    break;
                  case 'bottomRight':
                    t.transform += 'translate(-100%,-100%)';
                    break;
                  case 'middleCenter':
                    t.transform += 'translate(-50%,-50%)';
                    break;
                  case 'middleLeft':
                    t.transform += 'translate(0,-50%)';
                    break;
                  case 'middleRight':
                    t.transform += 'translate(-100%,-50%)';
                    break;
                  case 'topCenter':
                    t.transform += 'translate(-50%,0)';
                    break;
                  case 'topRight':
                    t.transform += 'translate(-100%,0)';
                }
            },
            dimensions(A, t) {
              let i = A[ro](),
                a = A.w,
                s = A.h;
              if (i.layout?.includes('row')) {
                let t;
                let s = i[g3],
                  g = A.colSpan;
                -1 === g
                  ? ((t = s.columnWidths
                      .slice(s.currentColumn)
                      .reduce((A, t) => A + t, 0)),
                    (s.currentColumn = 0))
                  : ((t = s.columnWidths
                      .slice(s.currentColumn, s.currentColumn + g)
                      .reduce((A, t) => A + t, 0)),
                    (s.currentColumn =
                      (s.currentColumn + A.colSpan) % s.columnWidths.length)),
                  isNaN(t) || (a = A.w = t);
              }
              (t.width = '' !== a ? nK(a) : 'auto'),
                (t.height = '' !== s ? nK(s) : 'auto');
            },
            position(A, t) {
              let i = A[ro]();
              (i?.layout && 'position' !== i.layout) ||
                ((t.position = 'absolute'),
                (t.left = nK(A.x)),
                (t.top = nK(A.y)));
            },
            rotate(A, t) {
              A.rotate &&
                ('transform' in t || (t.transform = ''),
                (t.transform += `rotate(-${A.rotate}deg)`),
                (t.transformOrigin = 'top left'));
            },
            presence(A, t) {
              switch (A.presence) {
                case 'invisible':
                  t.visibility = 'hidden';
                  break;
                case 'hidden':
                case 'inactive':
                  t.display = 'none';
              }
            },
            hAlign(A, t) {
              if ('para' === A[rF])
                switch (A.hAlign) {
                  case 'justifyAll':
                    t.textAlign = 'justify-all';
                    break;
                  case 'radix':
                    t.textAlign = 'left';
                    break;
                  default:
                    t.textAlign = A.hAlign;
                }
              else
                switch (A.hAlign) {
                  case 'left':
                    t.alignSelf = 'start';
                    break;
                  case 'center':
                    t.alignSelf = 'center';
                    break;
                  case 'right':
                    t.alignSelf = 'end';
                }
            },
            margin(A, t) {
              A.margin && (t.margin = A.margin[rX]().margin);
            },
          };
          function nq(A, t) {
            'position' === A[ro]().layout &&
              (A.minW > 0 && (t.minWidth = nK(A.minW)),
              A.maxW > 0 && (t.maxWidth = nK(A.maxW)),
              A.minH > 0 && (t.minHeight = nK(A.minH)),
              A.maxH > 0 && (t.maxHeight = nK(A.maxH)));
          }
          function nT(A, t, i, a, s, g) {
            let r = new ni(t, i, a, s);
            return (
              'string' == typeof A ? r.addString(A) : A[rx](r), r.compute(g)
            );
          }
          function nP(A, t) {
            let i = null,
              a = null,
              s = !1;
            if ((!A.w || !A.h) && A.value) {
              let g = 0,
                r = 0;
              A.margin &&
                ((g = A.margin.leftInset + A.margin.rightInset),
                (r = A.margin.topInset + A.margin.bottomInset));
              let n = null,
                o = null;
              A.para &&
                ((o = Object.create(null)),
                (n = '' === A.para.lineHeight ? null : A.para.lineHeight),
                (o.top = '' === A.para.spaceAbove ? 0 : A.para.spaceAbove),
                (o.bottom = '' === A.para.spaceBelow ? 0 : A.para.spaceBelow),
                (o.left = '' === A.para.marginLeft ? 0 : A.para.marginLeft),
                (o.right = '' === A.para.marginRight ? 0 : A.para.marginRight));
              let I = A.font;
              if (!I) {
                let t = A[rl](),
                  i = A[rI]();
                for (; i && i !== t; ) {
                  if (i.font) {
                    I = i.font;
                    break;
                  }
                  i = i[rI]();
                }
              }
              let l = (A.w || t.width) - g,
                C = A[rC].fontFinder;
              if (
                A.value.exData &&
                A.value.exData[g1] &&
                'text/html' === A.value.exData.contentType
              ) {
                let t = nT(A.value.exData[g1], I, o, n, C, l);
                (a = t.width), (i = t.height), (s = t.isBroken);
              } else {
                let t = A.value[rP]();
                if (t) {
                  let A = nT(t, I, o, n, C, l);
                  (a = A.width), (i = A.height), (s = A.isBroken);
                }
              }
              null === a || A.w || (a += g), null === i || A.h || (i += r);
            }
            return { w: a, h: i, isBroken: s };
          }
          function nW(A, t, i) {
            let a;
            if ('' !== A.w && '' !== A.h) a = [A.x, A.y, A.w, A.h];
            else {
              if (!i) return null;
              let s = A.w;
              if ('' === s) {
                if (0 === A.maxW) {
                  let t = A[ro]();
                  s = 'position' === t.layout && '' !== t.w ? 0 : A.minW;
                } else s = Math.min(A.maxW, i.width);
                t.attributes.style.width = nK(s);
              }
              let g = A.h;
              if ('' === g) {
                if (0 === A.maxH) {
                  let t = A[ro]();
                  g = 'position' === t.layout && '' !== t.h ? 0 : A.minH;
                } else g = Math.min(A.maxH, i.height);
                t.attributes.style.height = nK(g);
              }
              a = [A.x, A.y, s, g];
            }
            return a;
          }
          function nZ(A) {
            let t = A[ro]();
            if (t.layout?.includes('row')) {
              let i;
              let a = t[g3],
                s = A.colSpan;
              isNaN(
                (i =
                  -1 === s
                    ? a.columnWidths
                        .slice(a.currentColumn)
                        .reduce((A, t) => A + t, 0)
                    : a.columnWidths
                        .slice(a.currentColumn, a.currentColumn + s)
                        .reduce((A, t) => A + t, 0))
              ) || (A.w = i);
            }
            t.layout && 'position' !== t.layout && (A.x = A.y = 0),
              'table' === A.layout &&
                '' === A.w &&
                Array.isArray(A.columnWidths) &&
                (A.w = A.columnWidths.reduce((A, t) => A + t, 0));
          }
          function nO(A) {
            switch (A.layout) {
              case 'position':
              default:
                return 'xfaPosition';
              case 'lr-tb':
                return 'xfaLrTb';
              case 'rl-row':
                return 'xfaRlRow';
              case 'rl-tb':
                return 'xfaRlTb';
              case 'row':
                return 'xfaRow';
              case 'table':
                return 'xfaTable';
              case 'tb':
                return 'xfaTb';
            }
          }
          function nX(A, ...t) {
            let i = Object.create(null);
            for (let a of t) {
              let t = A[a];
              if (null !== t) {
                if (nv.hasOwnProperty(a)) nv[a](A, i);
                else if (t instanceof nR) {
                  let A = t[rX]();
                  A
                    ? Object.assign(i, A)
                    : m(`(DEBUG) - XFA - style for ${a} not implemented yet`);
                }
              }
            }
            return i;
          }
          function nV(A, t) {
            let { attributes: i } = t,
              { style: a } = i,
              s = {
                name: 'div',
                attributes: {
                  class: ['xfaWrapper'],
                  style: Object.create(null),
                },
                children: [],
              };
            if ((i.class.push('xfaWrapped'), A.border)) {
              let { widths: i, insets: g } = A.border[g3],
                r,
                n,
                o = g[0],
                I = g[3],
                l = g[0] + g[2],
                C = g[1] + g[3];
              switch (A.border.hand) {
                case 'even':
                  (o -= i[0] / 2),
                    (I -= i[3] / 2),
                    (r = `calc(100% + ${(i[1] + i[3]) / 2 - C}px)`),
                    (n = `calc(100% + ${(i[0] + i[2]) / 2 - l}px)`);
                  break;
                case 'left':
                  (o -= i[0]),
                    (I -= i[3]),
                    (r = `calc(100% + ${i[1] + i[3] - C}px)`),
                    (n = `calc(100% + ${i[0] + i[2] - l}px)`);
                  break;
                case 'right':
                  (r = C ? `calc(100% - ${C}px)` : '100%'),
                    (n = l ? `calc(100% - ${l}px)` : '100%');
              }
              let B = ['xfaBorder'];
              n_(A.border) && B.push('xfaPrintOnly');
              let h = {
                name: 'div',
                attributes: {
                  class: B,
                  style: { top: `${o}px`, left: `${I}px`, width: r, height: n },
                },
                children: [],
              };
              for (let A of [
                'border',
                'borderWidth',
                'borderColor',
                'borderRadius',
                'borderStyle',
              ])
                void 0 !== a[A] &&
                  ((h.attributes.style[A] = a[A]), delete a[A]);
              s.children.push(h, t);
            } else s.children.push(t);
            for (let A of [
              'background',
              'backgroundClip',
              'top',
              'left',
              'width',
              'height',
              'minWidth',
              'minHeight',
              'maxWidth',
              'maxHeight',
              'transform',
              'transformOrigin',
              'visibility',
            ])
              void 0 !== a[A] && ((s.attributes.style[A] = a[A]), delete a[A]);
            return (
              (s.attributes.style.position =
                'absolute' === a.position ? 'absolute' : 'relative'),
              delete a.position,
              a.alignSelf &&
                ((s.attributes.style.alignSelf = a.alignSelf),
                delete a.alignSelf),
              s
            );
          }
          function nj(A) {
            let t = r5(A.textIndent, '0px');
            if (t >= 0) return;
            let i =
                'padding' +
                ('left' == ('right' === A.textAlign ? 'right' : 'left')
                  ? 'Left'
                  : 'Right'),
              a = r5(A[i], '0px');
            A[i] = a - t + 'px';
          }
          function nz(A, t) {
            switch (A.access) {
              case 'nonInteractive':
                t.push('xfaNonInteractive');
                break;
              case 'readOnly':
                t.push('xfaReadOnly');
                break;
              case 'protected':
                t.push('xfaDisabled');
            }
          }
          function n_(A) {
            return (
              A.relevant.length > 0 &&
              !A.relevant[0].excluded &&
              'print' === A.relevant[0].viewname
            );
          }
          function n$(A) {
            let t = A[rl]()[g3].paraStack;
            return t.length ? t.at(-1) : null;
          }
          function n0(A, t, i) {
            if (i.attributes.class?.includes('xfaRich')) {
              t &&
                ('' === A.h && (t.height = 'auto'),
                '' === A.w && (t.width = 'auto'));
              let a = n$(A);
              if (a) {
                let A = i.attributes.style;
                switch (
                  ((A.display = 'flex'), (A.flexDirection = 'column'), a.vAlign)
                ) {
                  case 'top':
                    A.justifyContent = 'start';
                    break;
                  case 'bottom':
                    A.justifyContent = 'end';
                    break;
                  case 'middle':
                    A.justifyContent = 'center';
                }
                let t = a[rX]();
                for (let [i, a] of Object.entries(t)) i in A || (A[i] = a);
              }
            }
          }
          function n1(A, t, i, a) {
            if (!i) {
              delete a.fontFamily;
              return;
            }
            let s = r0(A.typeface);
            a.fontFamily = `"${s}"`;
            let g = i.find(s);
            if (g) {
              let { fontFamily: i } = g.regular.cssFontInfo;
              i !== s && (a.fontFamily = `"${i}"`);
              let r = n$(t);
              if ((r && '' !== r.lineHeight) || a.lineHeight) return;
              let n = nA(A, g);
              n && (a.lineHeight = Math.max(1.2, n.lineHeight));
            }
          }
          function n2(A) {
            let t = D(A, null, {
              addDefaultProtocol: !0,
              tryConvertEncoding: !0,
            });
            return t ? t.href : null;
          }
          function n9(A, t) {
            return {
              name: 'div',
              attributes: { class: ['lr-tb' === A.layout ? 'xfaLr' : 'xfaRl'] },
              children: t,
            };
          }
          function n3(A) {
            if (!A[g3]) return null;
            let t = {
              name: 'div',
              attributes: A[g3].attributes,
              children: A[g3].children,
            };
            if (A[g3].failingNode) {
              let i = A[g3].failingNode[g8]();
              i &&
                (A.layout.endsWith('-tb')
                  ? t.children.push(n9(A, [i]))
                  : t.children.push(i));
            }
            return 0 === t.children.length ? null : t;
          }
          function n5(A, t, i) {
            let a = A[g3],
              s = a.availableSpace,
              [g, r, n, o] = i;
            switch (A.layout) {
              case 'position':
                (a.width = Math.max(a.width, g + n)),
                  (a.height = Math.max(a.height, r + o)),
                  a.children.push(t);
                break;
              case 'lr-tb':
              case 'rl-tb':
                (a.line && 1 !== a.attempt) ||
                  ((a.line = n9(A, [])),
                  a.children.push(a.line),
                  (a.numberInLine = 0)),
                  (a.numberInLine += 1),
                  a.line.children.push(t),
                  0 === a.attempt
                    ? ((a.currentWidth += n),
                      (a.height = Math.max(a.height, a.prevHeight + o)))
                    : ((a.currentWidth = n),
                      (a.prevHeight = a.height),
                      (a.height += o),
                      (a.attempt = 0)),
                  (a.width = Math.max(a.width, a.currentWidth));
                break;
              case 'rl-row':
              case 'row': {
                a.children.push(t),
                  (a.width += n),
                  (a.height = Math.max(a.height, o));
                let A = nK(a.height);
                for (let t of a.children) t.attributes.style.height = A;
                break;
              }
              case 'table':
              case 'tb':
                (a.width = Math.min(s.width, Math.max(a.width, n))),
                  (a.height += o),
                  a.children.push(t);
            }
          }
          function n8(A) {
            let t = A[g3].availableSpace,
              i = A.margin ? A.margin.topInset + A.margin.bottomInset : 0,
              a = A.margin ? A.margin.leftInset + A.margin.rightInset : 0;
            switch (A.layout) {
              case 'lr-tb':
              case 'rl-tb':
                return 0 === A[g3].attempt
                  ? {
                      width: t.width - a - A[g3].currentWidth,
                      height: t.height - i - A[g3].prevHeight,
                    }
                  : { width: t.width - a, height: t.height - i - A[g3].height };
              case 'rl-row':
              case 'row':
                return {
                  width: A[g3].columnWidths
                    .slice(A[g3].currentColumn)
                    .reduce((A, t) => A + t),
                  height: t.height - a,
                };
              case 'table':
              case 'tb':
                return {
                  width: t.width - a,
                  height: t.height - i - A[g3].height,
                };
              default:
                return t;
            }
          }
          function n6(A, t) {
            if (
              null === A[rl]()[g3].firstUnsplittable ||
              0 === A.w ||
              0 === A.h
            )
              return !0;
            let i = A[ro](),
              a = i[g3]?.attempt || 0,
              [, s, g, r] = (function (A) {
                let t,
                  i,
                  a = '' === A.w ? NaN : A.w,
                  s = '' === A.h ? NaN : A.h,
                  [g, r] = [0, 0];
                switch (A.anchorType || '') {
                  case 'bottomCenter':
                    [g, r] = [a / 2, s];
                    break;
                  case 'bottomLeft':
                    [g, r] = [0, s];
                    break;
                  case 'bottomRight':
                    [g, r] = [a, s];
                    break;
                  case 'middleCenter':
                    [g, r] = [a / 2, s / 2];
                    break;
                  case 'middleLeft':
                    [g, r] = [0, s / 2];
                    break;
                  case 'middleRight':
                    [g, r] = [a, s / 2];
                    break;
                  case 'topCenter':
                    [g, r] = [a / 2, 0];
                    break;
                  case 'topRight':
                    [g, r] = [a, 0];
                }
                switch (A.rotate || 0) {
                  case 0:
                    [t, i] = [-g, -r];
                    break;
                  case 90:
                    ([t, i] = [-r, g]), ([a, s] = [s, -a]);
                    break;
                  case 180:
                    ([t, i] = [g, r]), ([a, s] = [-a, -s]);
                    break;
                  case 270:
                    ([t, i] = [r, -g]), ([a, s] = [-s, a]);
                }
                return [
                  A.x + t + Math.min(0, a),
                  A.y + i + Math.min(0, s),
                  Math.abs(a),
                  Math.abs(s),
                ];
              })(A);
            switch (i.layout) {
              case 'lr-tb':
              case 'rl-tb':
                return 0 === a
                  ? A[rl]()[g3].noLayoutFailure
                    ? '' !== A.w
                      ? 2 >= Math.round(g - t.width)
                      : t.width > 2
                    : !('' !== A.h && Math.round(r - t.height) > 2) &&
                      ('' !== A.w
                        ? 2 >= Math.round(g - t.width) ||
                          (0 === i[g3].numberInLine && t.height > 2)
                        : t.width > 2)
                  : !!A[rl]()[g3].noLayoutFailure ||
                      (!('' !== A.h && Math.round(r - t.height) > 2) &&
                        ('' === A.w ||
                          2 >= Math.round(g - t.width) ||
                          !i[ry]()) &&
                        t.height > 2);
              case 'table':
              case 'tb':
                return (
                  !!A[rl]()[g3].noLayoutFailure ||
                  ('' === A.h || A[rm]()
                    ? ('' === A.w ||
                        2 >= Math.round(g - t.width) ||
                        !i[ry]()) &&
                      t.height > 2
                    : 2 >= Math.round(r - t.height))
                );
              case 'position':
                if (
                  A[rl]()[g3].noLayoutFailure ||
                  '' === A.h ||
                  2 >= Math.round(r + s - t.height)
                )
                  return !0;
                return r + s > A[rl]()[g3].currentContentArea.h;
              case 'rl-row':
              case 'row':
                return (
                  !!A[rl]()[g3].noLayoutFailure ||
                  '' === A.h ||
                  2 >= Math.round(r - t.height)
                );
              default:
                return !0;
            }
          }
          let n7 = rz.template.id,
            n4 = 'http://www.w3.org/2000/svg',
            oA = /^H(\d+)$/,
            oe = new Set([
              'image/gif',
              'image/jpeg',
              'image/jpg',
              'image/pjpeg',
              'image/png',
              'image/apng',
              'image/x-png',
              'image/bmp',
              'image/x-ms-bmp',
              'image/tiff',
              'image/tif',
              'application/octet-stream',
            ]),
            ot = [
              [[66, 77], 'image/bmp'],
              [[255, 216, 255], 'image/jpeg'],
              [[73, 73, 42, 0], 'image/tiff'],
              [[77, 77, 0, 42], 'image/tiff'],
              [[71, 73, 70, 56, 57, 97], 'image/gif'],
              [[137, 80, 78, 71, 13, 10, 26, 10], 'image/png'],
            ];
          function oi(A) {
            if (!A || !A.border) return { w: 0, h: 0 };
            let t = A.border[ra]();
            return t
              ? {
                  w: t.widths[0] + t.widths[2] + t.insets[0] + t.insets[2],
                  h: t.widths[1] + t.widths[3] + t.insets[1] + t.insets[3],
                }
              : { w: 0, h: 0 };
          }
          function oa(A) {
            return (
              A.margin &&
              (A.margin.topInset ||
                A.margin.rightInset ||
                A.margin.bottomInset ||
                A.margin.leftInset)
            );
          }
          function os(A, t) {
            if (!A.value) {
              let t = new I8({});
              A[gX](t), (A.value = t);
            }
            A.value[rq](t);
          }
          function* og(A) {
            for (let t of A[rg]()) t instanceof IO ? yield* t[rr]() : yield t;
          }
          function or(A) {
            return 'error' === A.validate?.nullTest;
          }
          function on(A) {
            for (; A; ) {
              if (!A.traversal) {
                A[rT] = A[rI]()[rT];
                return;
              }
              if (A[rT]) return;
              let t = null;
              for (let i of A.traversal[rg]())
                if ('next' === i.operation) {
                  t = i;
                  break;
                }
              if (!t || !t.ref) {
                A[rT] = A[rI]()[rT];
                return;
              }
              let i = A[rl]();
              A[rT] = ++i[rT];
              let a = i[rY](t.ref, A);
              if (!a) return;
              A = a[0];
            }
          }
          function oo(A, t) {
            let i = A.assist;
            if (i) {
              let A = i[rZ]();
              A && (t.title = A);
              let a = i.role.match(oA);
              if (a) {
                let A = a[1];
                (t.role = 'heading'), (t['aria-level'] = A);
              }
            }
            if ('table' === A.layout) t.role = 'table';
            else if ('row' === A.layout) t.role = 'row';
            else {
              let i = A[rI]();
              'row' === i.layout &&
                (t.role = 'TH' === i.assist?.role ? 'columnheader' : 'cell');
            }
          }
          function oI(A) {
            if (!A.assist) return null;
            let t = A.assist;
            return t.speak && '' !== t.speak[g1]
              ? t.speak[g1]
              : t.toolTip
                ? t.toolTip[g1]
                : null;
          }
          function ol(A) {
            return r7.success({
              name: 'div',
              attributes: { class: ['xfaRich'], style: Object.create(null) },
              children: [
                {
                  name: 'span',
                  attributes: { style: Object.create(null) },
                  value: A,
                },
              ],
            });
          }
          function oC(A) {
            let t = A[rl]();
            null === t[g3].firstUnsplittable &&
              ((t[g3].firstUnsplittable = A), (t[g3].noLayoutFailure = !0));
          }
          function oB(A) {
            let t = A[rl]();
            t[g3].firstUnsplittable === A && (t[g3].noLayoutFailure = !1);
          }
          function oh(A) {
            if (
              A[g3] ||
              ((A[g3] = Object.create(null)), 'auto' === A.targetType)
            )
              return !1;
            let t = A[rl](),
              i = null;
            if (A.target) {
              if (!(i = t[rY](A.target, A[rI]()))) return !1;
              i = i[0];
            }
            let { currentPageArea: a, currentContentArea: s } = t[g3];
            if ('pageArea' === A.targetType)
              return (i instanceof Ib || (i = null), A.startNew)
                ? ((A[g3].target = i || a), !0)
                : !!i && i !== a && ((A[g3].target = i), !0);
            i instanceof oY || (i = null);
            let g = i && i[rI](),
              r,
              n = g;
            if (A.startNew) {
              if (i) {
                let A = g.contentArea.children,
                  t = A.indexOf(s),
                  a = A.indexOf(i);
                -1 !== t && t < a && (n = null), (r = a - 1);
              } else r = a.contentArea.children.indexOf(s);
            } else {
              if (!i || i === s) return !1;
              (r = g.contentArea.children.indexOf(i) - 1),
                (n = g === a ? null : g);
            }
            return (A[g3].target = n), (A[g3].index = r), !0;
          }
          function oQ(A, t, i) {
            let a = A[rl](),
              s = a[g3].noLayoutFailure,
              g = t[ro];
            (t[ro] = () => A), (a[g3].noLayoutFailure = !0);
            let r = t[rZ](i);
            A[gO](r.html, r.bbox), (a[g3].noLayoutFailure = s), (t[ro] = g);
          }
          class oc extends nJ {
            constructor(A) {
              super(n7, 'appearanceFilter'),
                (this.id = A.id || ''),
                (this.type = r3(A.type, ['optional', 'required'])),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
          }
          class oE extends nR {
            constructor(A) {
              super(n7, 'arc', !0),
                (this.circular = r1({
                  data: A.circular,
                  defaultValue: 0,
                  validate: (A) => 1 === A,
                })),
                (this.hand = r3(A.hand, ['even', 'left', 'right'])),
                (this.id = A.id || ''),
                (this.startAngle = r2({
                  data: A.startAngle,
                  defaultValue: 0,
                  validate: (A) => !0,
                })),
                (this.sweepAngle = r2({
                  data: A.sweepAngle,
                  defaultValue: 360,
                  validate: (A) => !0,
                })),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.edge = null),
                (this.fill = null);
            }
            [rZ]() {
              let A;
              let t = this.edge || new oj({}),
                i = t[rX](),
                a = Object.create(null);
              'visible' === this.fill?.presence
                ? Object.assign(a, this.fill[rX]())
                : (a.fill = 'transparent'),
                (a.strokeWidth = nK(
                  'visible' === t.presence ? t.thickness : 0
                )),
                (a.stroke = i.color);
              let s = {
                xmlns: n4,
                style: { width: '100%', height: '100%', overflow: 'visible' },
              };
              if (360 === this.sweepAngle)
                A = {
                  name: 'ellipse',
                  attributes: {
                    xmlns: n4,
                    cx: '50%',
                    cy: '50%',
                    rx: '50%',
                    ry: '50%',
                    style: a,
                  },
                };
              else {
                let t = (this.startAngle * Math.PI) / 180,
                  i = (this.sweepAngle * Math.PI) / 180,
                  g = this.sweepAngle > 180 ? 1 : 0,
                  [r, n, o, I] = [
                    50 * (1 + Math.cos(t)),
                    50 * (1 - Math.sin(t)),
                    50 * (1 + Math.cos(t + i)),
                    50 * (1 - Math.sin(t + i)),
                  ];
                (A = {
                  name: 'path',
                  attributes: {
                    xmlns: n4,
                    d: `M ${r} ${n} A 50 50 0 ${g} 0 ${o} ${I}`,
                    vectorEffect: 'non-scaling-stroke',
                    style: a,
                  },
                }),
                  Object.assign(s, {
                    viewBox: '0 0 100 100',
                    preserveAspectRatio: 'none',
                  });
              }
              let g = { name: 'svg', children: [A], attributes: s };
              return oa(this[rI]()[rI]())
                ? r7.success({
                    name: 'div',
                    attributes: {
                      style: {
                        display: 'inline',
                        width: '100%',
                        height: '100%',
                      },
                    },
                    children: [g],
                  })
                : ((g.attributes.style.position = 'absolute'), r7.success(g));
            }
          }
          class ou extends nR {
            constructor(A) {
              super(n7, 'area', !0),
                (this.colSpan = r1({
                  data: A.colSpan,
                  defaultValue: 1,
                  validate: (A) => A >= 1 || -1 === A,
                })),
                (this.id = A.id || ''),
                (this.name = A.name || ''),
                (this.relevant = r6(A.relevant)),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.x = r5(A.x, '0pt')),
                (this.y = r5(A.y, '0pt')),
                (this.desc = null),
                (this.extras = null),
                (this.area = new nG()),
                (this.draw = new nG()),
                (this.exObject = new nG()),
                (this.exclGroup = new nG()),
                (this.field = new nG()),
                (this.subform = new nG()),
                (this.subformSet = new nG());
            }
            *[rr]() {
              yield* og(this);
            }
            [rw]() {
              return !0;
            }
            [ru]() {
              return !0;
            }
            [gO](A, t) {
              let [i, a, s, g] = t;
              (this[g3].width = Math.max(this[g3].width, i + s)),
                (this[g3].height = Math.max(this[g3].height, a + g)),
                this[g3].children.push(A);
            }
            [g4]() {
              return this[g3].availableSpace;
            }
            [rZ](A) {
              let t = nX(this, 'position'),
                i = { style: t, id: this[rV], class: ['xfaArea'] };
              n_(this) && i.class.push('xfaPrintOnly'),
                this.name && (i.xfaName = this.name);
              let a = [];
              this[g3] = {
                children: a,
                width: 0,
                height: 0,
                availableSpace: A,
              };
              let s = this[gV]({
                filter: new Set([
                  'area',
                  'draw',
                  'field',
                  'exclGroup',
                  'subform',
                  'subformSet',
                ]),
                include: !0,
              });
              if (!s.success)
                return s.isBreak() ? s : (delete this[g3], r7.FAILURE);
              (t.width = nK(this[g3].width)), (t.height = nK(this[g3].height));
              let g = [this.x, this.y, this[g3].width, this[g3].height];
              return (
                delete this[g3],
                r7.success({ name: 'div', attributes: i, children: a }, g)
              );
            }
          }
          class od extends nR {
            constructor(A) {
              super(n7, 'assist', !0),
                (this.id = A.id || ''),
                (this.role = A.role || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.speak = null),
                (this.toolTip = null);
            }
            [rZ]() {
              return this.toolTip?.[g1] || null;
            }
          }
          class of extends nR {
            constructor(A) {
              super(n7, 'barcode', !0),
                (this.charEncoding = r9({
                  data: A.charEncoding ? A.charEncoding.toLowerCase() : '',
                  defaultValue: '',
                  validate: (A) =>
                    [
                      'utf-8',
                      'big-five',
                      'fontspecific',
                      'gbk',
                      'gb-18030',
                      'gb-2312',
                      'ksc-5601',
                      'none',
                      'shift-jis',
                      'ucs-2',
                      'utf-16',
                    ].includes(A) || A.match(/iso-8859-\d{2}/),
                })),
                (this.checksum = r3(A.checksum, [
                  'none',
                  '1mod10',
                  '1mod10_1mod11',
                  '2mod10',
                  'auto',
                ])),
                (this.dataColumnCount = r1({
                  data: A.dataColumnCount,
                  defaultValue: -1,
                  validate: (A) => A >= 0,
                })),
                (this.dataLength = r1({
                  data: A.dataLength,
                  defaultValue: -1,
                  validate: (A) => A >= 0,
                })),
                (this.dataPrep = r3(A.dataPrep, ['none', 'flateCompress'])),
                (this.dataRowCount = r1({
                  data: A.dataRowCount,
                  defaultValue: -1,
                  validate: (A) => A >= 0,
                })),
                (this.endChar = A.endChar || ''),
                (this.errorCorrectionLevel = r1({
                  data: A.errorCorrectionLevel,
                  defaultValue: -1,
                  validate: (A) => A >= 0 && A <= 8,
                })),
                (this.id = A.id || ''),
                (this.moduleHeight = r5(A.moduleHeight, '5mm')),
                (this.moduleWidth = r5(A.moduleWidth, '0.25mm')),
                (this.printCheckDigit = r1({
                  data: A.printCheckDigit,
                  defaultValue: 0,
                  validate: (A) => 1 === A,
                })),
                (this.rowColumnRatio = r8(A.rowColumnRatio)),
                (this.startChar = A.startChar || ''),
                (this.textLocation = r3(A.textLocation, [
                  'below',
                  'above',
                  'aboveEmbedded',
                  'belowEmbedded',
                  'none',
                ])),
                (this.truncate = r1({
                  data: A.truncate,
                  defaultValue: 0,
                  validate: (A) => 1 === A,
                })),
                (this.type = r3(A.type ? A.type.toLowerCase() : '', [
                  'aztec',
                  'codabar',
                  'code2of5industrial',
                  'code2of5interleaved',
                  'code2of5matrix',
                  'code2of5standard',
                  'code3of9',
                  'code3of9extended',
                  'code11',
                  'code49',
                  'code93',
                  'code128',
                  'code128a',
                  'code128b',
                  'code128c',
                  'code128sscc',
                  'datamatrix',
                  'ean8',
                  'ean8add2',
                  'ean8add5',
                  'ean13',
                  'ean13add2',
                  'ean13add5',
                  'ean13pwcd',
                  'fim',
                  'logmars',
                  'maxicode',
                  'msi',
                  'pdf417',
                  'pdf417macro',
                  'plessey',
                  'postauscust2',
                  'postauscust3',
                  'postausreplypaid',
                  'postausstandard',
                  'postukrm4scc',
                  'postusdpbc',
                  'postusimb',
                  'postusstandard',
                  'postus5zip',
                  'qrcode',
                  'rfid',
                  'rss14',
                  'rss14expanded',
                  'rss14limited',
                  'rss14stacked',
                  'rss14stackedomni',
                  'rss14truncated',
                  'telepen',
                  'ucc128',
                  'ucc128random',
                  'ucc128sscc',
                  'upca',
                  'upcaadd2',
                  'upcaadd5',
                  'upcapwcd',
                  'upce',
                  'upceadd2',
                  'upceadd5',
                  'upcean2',
                  'upcean5',
                  'upsmaxicode',
                ])),
                (this.upsMode = r3(A.upsMode, [
                  'usCarrier',
                  'internationalCarrier',
                  'secureSymbol',
                  'standardSymbol',
                ])),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.wideNarrowRatio = r8(A.wideNarrowRatio)),
                (this.encrypt = null),
                (this.extras = null);
            }
          }
          class op extends nR {
            constructor(A) {
              super(n7, 'bind', !0),
                (this.match = r3(A.match, [
                  'once',
                  'dataRef',
                  'global',
                  'none',
                ])),
                (this.ref = A.ref || ''),
                (this.picture = null);
            }
          }
          class om extends nR {
            constructor(A) {
              super(n7, 'bindItems'),
                (this.connection = A.connection || ''),
                (this.labelRef = A.labelRef || ''),
                (this.ref = A.ref || ''),
                (this.valueRef = A.valueRef || '');
            }
          }
          class oy extends nR {
            constructor(A) {
              super(n7, 'bookend'),
                (this.id = A.id || ''),
                (this.leader = A.leader || ''),
                (this.trailer = A.trailer || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
          }
          class ow extends nH {
            constructor(A) {
              super(n7, 'boolean'),
                (this.id = A.id || ''),
                (this.name = A.name || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
            [rZ](A) {
              return ol(1 === this[g1] ? '1' : '0');
            }
          }
          class oD extends nR {
            constructor(A) {
              super(n7, 'border', !0),
                (this.break = r3(A.break, ['close', 'open'])),
                (this.hand = r3(A.hand, ['even', 'left', 'right'])),
                (this.id = A.id || ''),
                (this.presence = r3(A.presence, [
                  'visible',
                  'hidden',
                  'inactive',
                  'invisible',
                ])),
                (this.relevant = r6(A.relevant)),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.corner = new nG(4)),
                (this.edge = new nG(4)),
                (this.extras = null),
                (this.fill = null),
                (this.margin = null);
            }
            [ra]() {
              if (!this[g3]) {
                let A = this.edge.children.slice();
                if (A.length < 4) {
                  let t = A.at(-1) || new oj({});
                  for (let i = A.length; i < 4; i++) A.push(t);
                }
                let t = A.map((A) => A.thickness),
                  i = [0, 0, 0, 0];
                this.margin &&
                  ((i[0] = this.margin.topInset),
                  (i[1] = this.margin.rightInset),
                  (i[2] = this.margin.bottomInset),
                  (i[3] = this.margin.leftInset)),
                  (this[g3] = { widths: t, insets: i, edges: A });
              }
              return this[g3];
            }
            [rX]() {
              let { edges: A } = this[ra](),
                t = A.map((A) => {
                  let t = A[rX]();
                  return (t.color ||= '#000000'), t;
                }),
                i = Object.create(null);
              if (
                (this.margin && Object.assign(i, this.margin[rX]()),
                'visible' === this.fill?.presence &&
                  Object.assign(i, this.fill[rX]()),
                this.corner.children.some((A) => 0 !== A.radius))
              ) {
                let A = this.corner.children.map((A) => A[rX]());
                if (2 === A.length || 3 === A.length) {
                  let t = A.at(-1);
                  for (let i = A.length; i < 4; i++) A.push(t);
                }
                i.borderRadius = A.map((A) => A.radius).join(' ');
              }
              switch (this.presence) {
                case 'invisible':
                case 'hidden':
                  i.borderStyle = '';
                  break;
                case 'inactive':
                  i.borderStyle = 'none';
                  break;
                default:
                  i.borderStyle = t.map((A) => A.style).join(' ');
              }
              return (
                (i.borderWidth = t.map((A) => A.width).join(' ')),
                (i.borderColor = t.map((A) => A.color).join(' ')),
                i
              );
            }
          }
          class ob extends nR {
            constructor(A) {
              super(n7, 'break', !0),
                (this.after = r3(A.after, [
                  'auto',
                  'contentArea',
                  'pageArea',
                  'pageEven',
                  'pageOdd',
                ])),
                (this.afterTarget = A.afterTarget || ''),
                (this.before = r3(A.before, [
                  'auto',
                  'contentArea',
                  'pageArea',
                  'pageEven',
                  'pageOdd',
                ])),
                (this.beforeTarget = A.beforeTarget || ''),
                (this.bookendLeader = A.bookendLeader || ''),
                (this.bookendTrailer = A.bookendTrailer || ''),
                (this.id = A.id || ''),
                (this.overflowLeader = A.overflowLeader || ''),
                (this.overflowTarget = A.overflowTarget || ''),
                (this.overflowTrailer = A.overflowTrailer || ''),
                (this.startNew = r1({
                  data: A.startNew,
                  defaultValue: 0,
                  validate: (A) => 1 === A,
                })),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.extras = null);
            }
          }
          class ok extends nR {
            constructor(A) {
              super(n7, 'breakAfter', !0),
                (this.id = A.id || ''),
                (this.leader = A.leader || ''),
                (this.startNew = r1({
                  data: A.startNew,
                  defaultValue: 0,
                  validate: (A) => 1 === A,
                })),
                (this.target = A.target || ''),
                (this.targetType = r3(A.targetType, [
                  'auto',
                  'contentArea',
                  'pageArea',
                ])),
                (this.trailer = A.trailer || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.script = null);
            }
          }
          class oF extends nR {
            constructor(A) {
              super(n7, 'breakBefore', !0),
                (this.id = A.id || ''),
                (this.leader = A.leader || ''),
                (this.startNew = r1({
                  data: A.startNew,
                  defaultValue: 0,
                  validate: (A) => 1 === A,
                })),
                (this.target = A.target || ''),
                (this.targetType = r3(A.targetType, [
                  'auto',
                  'contentArea',
                  'pageArea',
                ])),
                (this.trailer = A.trailer || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.script = null);
            }
            [rZ](A) {
              return (this[g3] = {}), r7.FAILURE;
            }
          }
          class oS extends nR {
            constructor(A) {
              super(n7, 'button', !0),
                (this.highlight = r3(A.highlight, [
                  'inverted',
                  'none',
                  'outline',
                  'push',
                ])),
                (this.id = A.id || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.extras = null);
            }
            [rZ](A) {
              let t = this[rI]()[rI](),
                i = {
                  name: 'button',
                  attributes: { id: this[rV], class: ['xfaButton'], style: {} },
                  children: [],
                };
              for (let A of t.event.children) {
                if ('click' !== A.activity || !A.script) continue;
                let t = AY(A.script[g1]);
                if (!t) continue;
                let a = n2(t.url);
                a &&
                  i.children.push({
                    name: 'a',
                    attributes: {
                      id: 'link' + this[rV],
                      href: a,
                      newWindow: t.newWindow,
                      class: ['xfaLink'],
                      style: {},
                    },
                    children: [],
                  });
              }
              return r7.success(i);
            }
          }
          class oR extends nR {
            constructor(A) {
              super(n7, 'calculate', !0),
                (this.id = A.id || ''),
                (this.override = r3(A.override, [
                  'disabled',
                  'error',
                  'ignore',
                  'warning',
                ])),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.extras = null),
                (this.message = null),
                (this.script = null);
            }
          }
          class oG extends nR {
            constructor(A) {
              super(n7, 'caption', !0),
                (this.id = A.id || ''),
                (this.placement = r3(A.placement, [
                  'left',
                  'bottom',
                  'inline',
                  'right',
                  'top',
                ])),
                (this.presence = r3(A.presence, [
                  'visible',
                  'hidden',
                  'inactive',
                  'invisible',
                ])),
                (this.reserve = Math.ceil(r5(A.reserve))),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.extras = null),
                (this.font = null),
                (this.margin = null),
                (this.para = null),
                (this.value = null);
            }
            [rq](A) {
              os(this, A);
            }
            [ra](A) {
              if (!this[g3]) {
                let { width: t, height: i } = A;
                switch (this.placement) {
                  case 'left':
                  case 'right':
                  case 'inline':
                    t = this.reserve <= 0 ? t : this.reserve;
                    break;
                  case 'top':
                  case 'bottom':
                    i = this.reserve <= 0 ? i : this.reserve;
                }
                this[g3] = nP(this, { width: t, height: i });
              }
              return this[g3];
            }
            [rZ](A) {
              if (!this.value) return r7.EMPTY;
              this[rM]();
              let t = this.value[rZ](A).html;
              if (!t) return this[rU](), r7.EMPTY;
              let i = this.reserve;
              if (this.reserve <= 0) {
                let { w: t, h: i } = this[ra](A);
                switch (this.placement) {
                  case 'left':
                  case 'right':
                  case 'inline':
                    this.reserve = t;
                    break;
                  case 'top':
                  case 'bottom':
                    this.reserve = i;
                }
              }
              let a = [];
              'string' == typeof t
                ? a.push({ name: '#text', value: t })
                : a.push(t);
              let s = nX(this, 'font', 'margin', 'visibility');
              switch (this.placement) {
                case 'left':
                case 'right':
                  this.reserve > 0 && (s.width = nK(this.reserve));
                  break;
                case 'top':
                case 'bottom':
                  this.reserve > 0 && (s.height = nK(this.reserve));
              }
              return (
                n0(this, null, t),
                this[rU](),
                (this.reserve = i),
                r7.success({
                  name: 'div',
                  attributes: { style: s, class: ['xfaCaption'] },
                  children: a,
                })
              );
            }
          }
          class oN extends nJ {
            constructor(A) {
              super(n7, 'certificate'),
                (this.id = A.id || ''),
                (this.name = A.name || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
          }
          class ox extends nR {
            constructor(A) {
              super(n7, 'certificates', !0),
                (this.credentialServerPolicy = r3(A.credentialServerPolicy, [
                  'optional',
                  'required',
                ])),
                (this.id = A.id || ''),
                (this.url = A.url || ''),
                (this.urlPolicy = A.urlPolicy || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.encryption = null),
                (this.issuers = null),
                (this.keyUsage = null),
                (this.oids = null),
                (this.signing = null),
                (this.subjectDNs = null);
            }
          }
          class oU extends nR {
            constructor(A) {
              super(n7, 'checkButton', !0),
                (this.id = A.id || ''),
                (this.mark = r3(A.mark, [
                  'default',
                  'check',
                  'circle',
                  'cross',
                  'diamond',
                  'square',
                  'star',
                ])),
                (this.shape = r3(A.shape, ['square', 'round'])),
                (this.size = r5(A.size, '10pt')),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.border = null),
                (this.extras = null),
                (this.margin = null);
            }
            [rZ](A) {
              let t, i, a, s;
              let g = nX('margin'),
                r = nK(this.size);
              g.width = g.height = r;
              let n = this[rI]()[rI](),
                o =
                  (n.items.children.length && n.items.children[0][rZ]().html) ||
                  [],
                I = {
                  on: (void 0 !== o[0] ? o[0] : 'on').toString(),
                  off: (void 0 !== o[1] ? o[1] : 'off').toString(),
                },
                l = (n.value?.[rP]() || 'off') === I.on || void 0,
                C = n[ro](),
                B = n[rV];
              C instanceof o8
                ? ((a = C[rV]),
                  (t = 'radio'),
                  (i = 'xfaRadio'),
                  (s = C[g2]?.[rV] || C[rV]))
                : ((t = 'checkbox'),
                  (i = 'xfaCheckbox'),
                  (s = n[g2]?.[rV] || n[rV]));
              let h = {
                name: 'input',
                attributes: {
                  class: [i],
                  style: g,
                  fieldId: B,
                  dataId: s,
                  type: t,
                  checked: l,
                  xfaOn: I.on,
                  xfaOff: I.off,
                  'aria-label': oI(n),
                  'aria-required': !1,
                },
              };
              return (
                a && (h.attributes.name = a),
                or(n) &&
                  ((h.attributes['aria-required'] = !0),
                  (h.attributes.required = !0)),
                r7.success({
                  name: 'label',
                  attributes: { class: ['xfaLabel'] },
                  children: [h],
                })
              );
            }
          }
          class oM extends nR {
            constructor(A) {
              super(n7, 'choiceList', !0),
                (this.commitOn = r3(A.commitOn, ['select', 'exit'])),
                (this.id = A.id || ''),
                (this.open = r3(A.open, [
                  'userControl',
                  'always',
                  'multiSelect',
                  'onEntry',
                ])),
                (this.textEntry = r1({
                  data: A.textEntry,
                  defaultValue: 0,
                  validate: (A) => 1 === A,
                })),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.border = null),
                (this.extras = null),
                (this.margin = null);
            }
            [rZ](A) {
              let t = nX(this, 'border', 'margin'),
                i = this[rI]()[rI](),
                a = {
                  fontSize: `calc(${i.font?.size || 10}px * var(--scale-factor))`,
                },
                s = [];
              if (i.items.children.length > 0) {
                let A = i.items,
                  t = 0,
                  g = 0;
                2 === A.children.length && (g = 1 - (t = A.children[0].save));
                let r = A.children[t][rZ]().html,
                  n = A.children[g][rZ]().html,
                  o = !1,
                  I = i.value?.[rP]() || '';
                for (let A = 0, t = r.length; A < t; A++) {
                  let t = {
                    name: 'option',
                    attributes: { value: n[A] || r[A], style: a },
                    value: r[A],
                  };
                  n[A] === I && (t.attributes.selected = o = !0), s.push(t);
                }
                o ||
                  s.splice(0, 0, {
                    name: 'option',
                    attributes: { hidden: !0, selected: !0 },
                    value: ' ',
                  });
              }
              let g = {
                class: ['xfaSelect'],
                fieldId: i[rV],
                dataId: i[g2]?.[rV] || i[rV],
                style: t,
                'aria-label': oI(i),
                'aria-required': !1,
              };
              return (
                or(i) && ((g['aria-required'] = !0), (g.required = !0)),
                'multiSelect' === this.open && (g.multiple = !0),
                r7.success({
                  name: 'label',
                  attributes: { class: ['xfaLabel'] },
                  children: [{ name: 'select', children: s, attributes: g }],
                })
              );
            }
          }
          class oJ extends nR {
            constructor(A) {
              super(n7, 'color', !0),
                (this.cSpace = r3(A.cSpace, ['SRGB'])),
                (this.id = A.id || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.value = A.value
                  ? (function (A, t = [0, 0, 0]) {
                      let [i, a, s] = t;
                      if (!A) return { r: i, g: a, b: s };
                      let g = A.trim()
                        .split(/\s*,\s*/)
                        .map((A) =>
                          Math.min(Math.max(0, parseInt(A.trim(), 10)), 255)
                        )
                        .map((A) => (isNaN(A) ? 0 : A));
                      return (
                        g.length < 3 || ([i, a, s] = g), { r: i, g: a, b: s }
                      );
                    })(A.value)
                  : ''),
                (this.extras = null);
            }
            [rB]() {
              return !1;
            }
            [rX]() {
              return this.value
                ? v.makeHexColor(this.value.r, this.value.g, this.value.b)
                : null;
            }
          }
          class oL extends nR {
            constructor(A) {
              super(n7, 'comb'),
                (this.id = A.id || ''),
                (this.numberOfCells = r1({
                  data: A.numberOfCells,
                  defaultValue: 0,
                  validate: (A) => A >= 0,
                })),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
          }
          class oH extends nR {
            constructor(A) {
              super(n7, 'connect', !0),
                (this.connection = A.connection || ''),
                (this.id = A.id || ''),
                (this.ref = A.ref || ''),
                (this.usage = r3(A.usage, [
                  'exportAndImport',
                  'exportOnly',
                  'importOnly',
                ])),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.picture = null);
            }
          }
          class oY extends nR {
            constructor(A) {
              super(n7, 'contentArea', !0),
                (this.h = r5(A.h)),
                (this.id = A.id || ''),
                (this.name = A.name || ''),
                (this.relevant = r6(A.relevant)),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.w = r5(A.w)),
                (this.x = r5(A.x, '0pt')),
                (this.y = r5(A.y, '0pt')),
                (this.desc = null),
                (this.extras = null);
            }
            [rZ](A) {
              let t = {
                  left: nK(this.x),
                  top: nK(this.y),
                  width: nK(this.w),
                  height: nK(this.h),
                },
                i = ['xfaContentarea'];
              return (
                n_(this) && i.push('xfaPrintOnly'),
                r7.success({
                  name: 'div',
                  children: [],
                  attributes: { style: t, class: i, id: this[rV] },
                })
              );
            }
          }
          class oK extends nR {
            constructor(A) {
              super(n7, 'corner', !0),
                (this.id = A.id || ''),
                (this.inverted = r1({
                  data: A.inverted,
                  defaultValue: 0,
                  validate: (A) => 1 === A,
                })),
                (this.join = r3(A.join, ['square', 'round'])),
                (this.presence = r3(A.presence, [
                  'visible',
                  'hidden',
                  'inactive',
                  'invisible',
                ])),
                (this.radius = r5(A.radius)),
                (this.stroke = r3(A.stroke, [
                  'solid',
                  'dashDot',
                  'dashDotDot',
                  'dashed',
                  'dotted',
                  'embossed',
                  'etched',
                  'lowered',
                  'raised',
                ])),
                (this.thickness = r5(A.thickness, '0.5pt')),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.color = null),
                (this.extras = null);
            }
            [rX]() {
              let A = nX(this, 'visibility');
              return (
                (A.radius = nK('square' === this.join ? 0 : this.radius)), A
              );
            }
          }
          class ov extends nU {
            constructor(A) {
              super(n7, 'date'),
                (this.id = A.id || ''),
                (this.name = A.name || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
            [g5]() {
              let A = this[g1].trim();
              this[g1] = A ? new Date(A) : null;
            }
            [rZ](A) {
              return ol(this[g1] ? this[g1].toString() : '');
            }
          }
          class oq extends nU {
            constructor(A) {
              super(n7, 'dateTime'),
                (this.id = A.id || ''),
                (this.name = A.name || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
            [g5]() {
              let A = this[g1].trim();
              this[g1] = A ? new Date(A) : null;
            }
            [rZ](A) {
              return ol(this[g1] ? this[g1].toString() : '');
            }
          }
          class oT extends nR {
            constructor(A) {
              super(n7, 'dateTimeEdit', !0),
                (this.hScrollPolicy = r3(A.hScrollPolicy, [
                  'auto',
                  'off',
                  'on',
                ])),
                (this.id = A.id || ''),
                (this.picker = r3(A.picker, ['host', 'none'])),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.border = null),
                (this.comb = null),
                (this.extras = null),
                (this.margin = null);
            }
            [rZ](A) {
              let t = nX(this, 'border', 'font', 'margin'),
                i = this[rI]()[rI](),
                a = {
                  name: 'input',
                  attributes: {
                    type: 'text',
                    fieldId: i[rV],
                    dataId: i[g2]?.[rV] || i[rV],
                    class: ['xfaTextfield'],
                    style: t,
                    'aria-label': oI(i),
                    'aria-required': !1,
                  },
                };
              return (
                or(i) &&
                  ((a.attributes['aria-required'] = !0),
                  (a.attributes.required = !0)),
                r7.success({
                  name: 'label',
                  attributes: { class: ['xfaLabel'] },
                  children: [a],
                })
              );
            }
          }
          class oP extends nU {
            constructor(A) {
              super(n7, 'decimal'),
                (this.fracDigits = r1({
                  data: A.fracDigits,
                  defaultValue: 2,
                  validate: (A) => !0,
                })),
                (this.id = A.id || ''),
                (this.leadDigits = r1({
                  data: A.leadDigits,
                  defaultValue: -1,
                  validate: (A) => !0,
                })),
                (this.name = A.name || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
            [g5]() {
              let A = parseFloat(this[g1].trim());
              this[g1] = isNaN(A) ? null : A;
            }
            [rZ](A) {
              return ol(null !== this[g1] ? this[g1].toString() : '');
            }
          }
          class oW extends nR {
            constructor(A) {
              super(n7, 'defaultUi', !0),
                (this.id = A.id || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.extras = null);
            }
          }
          class oZ extends nR {
            constructor(A) {
              super(n7, 'desc', !0),
                (this.id = A.id || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.boolean = new nG()),
                (this.date = new nG()),
                (this.dateTime = new nG()),
                (this.decimal = new nG()),
                (this.exData = new nG()),
                (this.float = new nG()),
                (this.image = new nG()),
                (this.integer = new nG()),
                (this.text = new nG()),
                (this.time = new nG());
            }
          }
          class oO extends nM {
            constructor(A) {
              super(n7, 'digestMethod', [
                '',
                'SHA1',
                'SHA256',
                'SHA512',
                'RIPEMD160',
              ]),
                (this.id = A.id || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
          }
          class oX extends nR {
            constructor(A) {
              super(n7, 'digestMethods', !0),
                (this.id = A.id || ''),
                (this.type = r3(A.type, ['optional', 'required'])),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.digestMethod = new nG());
            }
          }
          class oV extends nR {
            constructor(A) {
              super(n7, 'draw', !0),
                (this.anchorType = r3(A.anchorType, [
                  'topLeft',
                  'bottomCenter',
                  'bottomLeft',
                  'bottomRight',
                  'middleCenter',
                  'middleLeft',
                  'middleRight',
                  'topCenter',
                  'topRight',
                ])),
                (this.colSpan = r1({
                  data: A.colSpan,
                  defaultValue: 1,
                  validate: (A) => A >= 1 || -1 === A,
                })),
                (this.h = A.h ? r5(A.h) : ''),
                (this.hAlign = r3(A.hAlign, [
                  'left',
                  'center',
                  'justify',
                  'justifyAll',
                  'radix',
                  'right',
                ])),
                (this.id = A.id || ''),
                (this.locale = A.locale || ''),
                (this.maxH = r5(A.maxH, '0pt')),
                (this.maxW = r5(A.maxW, '0pt')),
                (this.minH = r5(A.minH, '0pt')),
                (this.minW = r5(A.minW, '0pt')),
                (this.name = A.name || ''),
                (this.presence = r3(A.presence, [
                  'visible',
                  'hidden',
                  'inactive',
                  'invisible',
                ])),
                (this.relevant = r6(A.relevant)),
                (this.rotate = r1({
                  data: A.rotate,
                  defaultValue: 0,
                  validate: (A) => A % 90 == 0,
                })),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.w = A.w ? r5(A.w) : ''),
                (this.x = r5(A.x, '0pt')),
                (this.y = r5(A.y, '0pt')),
                (this.assist = null),
                (this.border = null),
                (this.caption = null),
                (this.desc = null),
                (this.extras = null),
                (this.font = null),
                (this.keep = null),
                (this.margin = null),
                (this.para = null),
                (this.traversal = null),
                (this.ui = null),
                (this.value = null),
                (this.setProperty = new nG());
            }
            [rq](A) {
              os(this, A);
            }
            [rZ](A) {
              if (
                (on(this),
                'hidden' === this.presence || 'inactive' === this.presence)
              )
                return r7.EMPTY;
              nZ(this), this[rM]();
              let t = this.w,
                i = this.h,
                { w: a, h: s, isBroken: g } = nP(this, A);
              if (a && '' === this.w) {
                if (g && this[ro]()[ry]()) return this[rU](), r7.FAILURE;
                this.w = a;
              }
              if ((s && '' === this.h && (this.h = s), oC(this), !n6(this, A)))
                return (this.w = t), (this.h = i), this[rU](), r7.FAILURE;
              oB(this);
              let r = nX(
                this,
                'font',
                'hAlign',
                'dimensions',
                'position',
                'presence',
                'rotate',
                'anchorType',
                'border',
                'margin'
              );
              nq(this, r),
                r.margin && ((r.padding = r.margin), delete r.margin);
              let n = ['xfaDraw'];
              this.font && n.push('xfaFont'),
                n_(this) && n.push('xfaPrintOnly');
              let o = { style: r, id: this[rV], class: n };
              this.name && (o.xfaName = this.name);
              let I = { name: 'div', attributes: o, children: [] };
              oo(this, o);
              let l = nW(this, I, A),
                C = this.value ? this.value[rZ](A).html : null;
              return (
                null === C || (I.children.push(C), n0(this, r, C)),
                (this.w = t),
                (this.h = i),
                this[rU](),
                r7.success(nV(this, I), l)
              );
            }
          }
          class oj extends nR {
            constructor(A) {
              super(n7, 'edge', !0),
                (this.cap = r3(A.cap, ['square', 'butt', 'round'])),
                (this.id = A.id || ''),
                (this.presence = r3(A.presence, [
                  'visible',
                  'hidden',
                  'inactive',
                  'invisible',
                ])),
                (this.stroke = r3(A.stroke, [
                  'solid',
                  'dashDot',
                  'dashDotDot',
                  'dashed',
                  'dotted',
                  'embossed',
                  'etched',
                  'lowered',
                  'raised',
                ])),
                (this.thickness = r5(A.thickness, '0.5pt')),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.color = null),
                (this.extras = null);
            }
            [rX]() {
              let A = nX(this, 'visibility');
              if (
                (Object.assign(A, {
                  linecap: this.cap,
                  width: nK(this.thickness),
                  color: this.color ? this.color[rX]() : '#000000',
                  style: '',
                }),
                'visible' !== this.presence)
              )
                A.style = 'none';
              else
                switch (this.stroke) {
                  case 'solid':
                    A.style = 'solid';
                    break;
                  case 'dashDot':
                  case 'dashDotDot':
                  case 'dashed':
                    A.style = 'dashed';
                    break;
                  case 'dotted':
                    A.style = 'dotted';
                    break;
                  case 'embossed':
                    A.style = 'ridge';
                    break;
                  case 'etched':
                    A.style = 'groove';
                    break;
                  case 'lowered':
                    A.style = 'inset';
                    break;
                  case 'raised':
                    A.style = 'outset';
                }
              return A;
            }
          }
          class oz extends nM {
            constructor(A) {
              super(n7, 'encoding', [
                'adbe.x509.rsa_sha1',
                'adbe.pkcs7.detached',
                'adbe.pkcs7.sha1',
              ]),
                (this.id = A.id || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
          }
          class o_ extends nR {
            constructor(A) {
              super(n7, 'encodings', !0),
                (this.id = A.id || ''),
                (this.type = r3(A.type, ['optional', 'required'])),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.encoding = new nG());
            }
          }
          class o$ extends nR {
            constructor(A) {
              super(n7, 'encrypt', !0),
                (this.id = A.id || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.certificate = null);
            }
          }
          class o0 extends nR {
            constructor(A) {
              super(n7, 'encryptData', !0),
                (this.id = A.id || ''),
                (this.operation = r3(A.operation, ['encrypt', 'decrypt'])),
                (this.target = A.target || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.filter = null),
                (this.manifest = null);
            }
          }
          class o1 extends nR {
            constructor(A) {
              super(n7, 'encryption', !0),
                (this.id = A.id || ''),
                (this.type = r3(A.type, ['optional', 'required'])),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.certificate = new nG());
            }
          }
          class o2 extends nM {
            constructor(A) {
              super(n7, 'encryptionMethod', [
                '',
                'AES256-CBC',
                'TRIPLEDES-CBC',
                'AES128-CBC',
                'AES192-CBC',
              ]),
                (this.id = A.id || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
          }
          class o9 extends nR {
            constructor(A) {
              super(n7, 'encryptionMethods', !0),
                (this.id = A.id || ''),
                (this.type = r3(A.type, ['optional', 'required'])),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.encryptionMethod = new nG());
            }
          }
          class Event extends nR {
            constructor(A) {
              super(n7, 'event', !0),
                (this.activity = r3(A.activity, [
                  'click',
                  'change',
                  'docClose',
                  'docReady',
                  'enter',
                  'exit',
                  'full',
                  'indexChange',
                  'initialize',
                  'mouseDown',
                  'mouseEnter',
                  'mouseExit',
                  'mouseUp',
                  'postExecute',
                  'postOpen',
                  'postPrint',
                  'postSave',
                  'postSign',
                  'postSubmit',
                  'preExecute',
                  'preOpen',
                  'prePrint',
                  'preSave',
                  'preSign',
                  'preSubmit',
                  'ready',
                  'validationState',
                ])),
                (this.id = A.id || ''),
                (this.listen = r3(A.listen, ['refOnly', 'refAndDescendents'])),
                (this.name = A.name || ''),
                (this.ref = A.ref || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.extras = null),
                (this.encryptData = null),
                (this.execute = null),
                (this.script = null),
                (this.signData = null),
                (this.submit = null);
            }
          }
          class o3 extends nU {
            constructor(A) {
              super(n7, 'exData'),
                (this.contentType = A.contentType || ''),
                (this.href = A.href || ''),
                (this.id = A.id || ''),
                (this.maxLength = r1({
                  data: A.maxLength,
                  defaultValue: -1,
                  validate: (A) => A >= -1,
                })),
                (this.name = A.name || ''),
                (this.rid = A.rid || ''),
                (this.transferEncoding = r3(A.transferEncoding, [
                  'none',
                  'base64',
                  'package',
                ])),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
            [rE]() {
              return 'text/html' === this.contentType;
            }
            [rR](A) {
              return (
                (('text/html' === this.contentType && A[rk] === rz.xhtml.id) ||
                  'text/xml' === this.contentType) &&
                ((this[g1] = A), !0)
              );
            }
            [rZ](A) {
              return 'text/html' === this.contentType && this[g1]
                ? this[g1][rZ](A)
                : r7.EMPTY;
            }
          }
          class o5 extends nR {
            constructor(A) {
              super(n7, 'exObject', !0),
                (this.archive = A.archive || ''),
                (this.classId = A.classId || ''),
                (this.codeBase = A.codeBase || ''),
                (this.codeType = A.codeType || ''),
                (this.id = A.id || ''),
                (this.name = A.name || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.extras = null),
                (this.boolean = new nG()),
                (this.date = new nG()),
                (this.dateTime = new nG()),
                (this.decimal = new nG()),
                (this.exData = new nG()),
                (this.exObject = new nG()),
                (this.float = new nG()),
                (this.image = new nG()),
                (this.integer = new nG()),
                (this.text = new nG()),
                (this.time = new nG());
            }
          }
          class o8 extends nR {
            constructor(A) {
              super(n7, 'exclGroup', !0),
                (this.access = r3(A.access, [
                  'open',
                  'nonInteractive',
                  'protected',
                  'readOnly',
                ])),
                (this.accessKey = A.accessKey || ''),
                (this.anchorType = r3(A.anchorType, [
                  'topLeft',
                  'bottomCenter',
                  'bottomLeft',
                  'bottomRight',
                  'middleCenter',
                  'middleLeft',
                  'middleRight',
                  'topCenter',
                  'topRight',
                ])),
                (this.colSpan = r1({
                  data: A.colSpan,
                  defaultValue: 1,
                  validate: (A) => A >= 1 || -1 === A,
                })),
                (this.h = A.h ? r5(A.h) : ''),
                (this.hAlign = r3(A.hAlign, [
                  'left',
                  'center',
                  'justify',
                  'justifyAll',
                  'radix',
                  'right',
                ])),
                (this.id = A.id || ''),
                (this.layout = r3(A.layout, [
                  'position',
                  'lr-tb',
                  'rl-row',
                  'rl-tb',
                  'row',
                  'table',
                  'tb',
                ])),
                (this.maxH = r5(A.maxH, '0pt')),
                (this.maxW = r5(A.maxW, '0pt')),
                (this.minH = r5(A.minH, '0pt')),
                (this.minW = r5(A.minW, '0pt')),
                (this.name = A.name || ''),
                (this.presence = r3(A.presence, [
                  'visible',
                  'hidden',
                  'inactive',
                  'invisible',
                ])),
                (this.relevant = r6(A.relevant)),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.w = A.w ? r5(A.w) : ''),
                (this.x = r5(A.x, '0pt')),
                (this.y = r5(A.y, '0pt')),
                (this.assist = null),
                (this.bind = null),
                (this.border = null),
                (this.calculate = null),
                (this.caption = null),
                (this.desc = null),
                (this.extras = null),
                (this.margin = null),
                (this.para = null),
                (this.traversal = null),
                (this.validate = null),
                (this.connect = new nG()),
                (this.event = new nG()),
                (this.field = new nG()),
                (this.setProperty = new nG());
            }
            [ru]() {
              return !0;
            }
            [rB]() {
              return !0;
            }
            [rq](A) {
              for (let t of this.field.children) {
                if (!t.value) {
                  let A = new I8({});
                  t[gX](A), (t.value = A);
                }
                t.value[rq](A);
              }
            }
            [ry]() {
              return (
                (this.layout.endsWith('-tb') &&
                  0 === this[g3].attempt &&
                  this[g3].numberInLine > 0) ||
                this[rI]()[ry]()
              );
            }
            [rm]() {
              let A = this[ro]();
              return (
                !!A[rm]() &&
                (void 0 !== this[g3]._isSplittable
                  ? this[g3]._isSplittable
                  : 'position' === this.layout || this.layout.includes('row')
                    ? ((this[g3]._isSplittable = !1), !1)
                    : (!A.layout?.endsWith('-tb') ||
                        0 === A[g3].numberInLine) &&
                      ((this[g3]._isSplittable = !0), !0))
              );
            }
            [g8]() {
              return n3(this);
            }
            [gO](A, t) {
              n5(this, A, t);
            }
            [g4]() {
              return n8(this);
            }
            [rZ](A) {
              if (
                (on(this),
                'hidden' === this.presence ||
                  'inactive' === this.presence ||
                  0 === this.h ||
                  0 === this.w)
              )
                return r7.EMPTY;
              nZ(this);
              let t = [],
                i = { id: this[rV], class: [] };
              nz(this, i.class),
                this[g3] || (this[g3] = Object.create(null)),
                Object.assign(this[g3], {
                  children: t,
                  attributes: i,
                  attempt: 0,
                  line: null,
                  numberInLine: 0,
                  availableSpace: {
                    width: Math.min(this.w || 1 / 0, A.width),
                    height: Math.min(this.h || 1 / 0, A.height),
                  },
                  width: 0,
                  height: 0,
                  prevHeight: 0,
                  currentWidth: 0,
                });
              let a = this[rm]();
              if ((a || oC(this), !n6(this, A))) return r7.FAILURE;
              let s = new Set(['field']);
              if (this.layout.includes('row')) {
                let A = this[ro]().columnWidths;
                Array.isArray(A) &&
                  A.length > 0 &&
                  ((this[g3].columnWidths = A), (this[g3].currentColumn = 0));
              }
              let g = nX(
                  this,
                  'anchorType',
                  'dimensions',
                  'position',
                  'presence',
                  'border',
                  'margin',
                  'hAlign'
                ),
                r = ['xfaExclgroup'],
                n = nO(this);
              n && r.push(n),
                n_(this) && r.push('xfaPrintOnly'),
                (i.style = g),
                (i.class = r),
                this.name && (i.xfaName = this.name),
                this[rM]();
              let o = 'lr-tb' === this.layout || 'rl-tb' === this.layout,
                I = o ? 2 : 1;
              for (; this[g3].attempt < I; this[g3].attempt++) {
                o && 1 === this[g3].attempt && (this[g3].numberInLine = 0);
                let A = this[gV]({ filter: s, include: !0 });
                if (A.success) break;
                if (A.isBreak()) return this[rU](), A;
                if (
                  o &&
                  0 === this[g3].attempt &&
                  0 === this[g3].numberInLine &&
                  !this[rl]()[g3].noLayoutFailure
                ) {
                  this[g3].attempt = I;
                  break;
                }
              }
              if ((this[rU](), a || oB(this), this[g3].attempt === I))
                return a || delete this[g3], r7.FAILURE;
              let l = 0,
                C = 0;
              this.margin &&
                ((l = this.margin.leftInset + this.margin.rightInset),
                (C = this.margin.topInset + this.margin.bottomInset));
              let B = Math.max(this[g3].width + l, this.w || 0),
                h = Math.max(this[g3].height + C, this.h || 0),
                Q = [this.x, this.y, B, h];
              return (
                '' === this.w && (g.width = nK(B)),
                '' === this.h && (g.height = nK(h)),
                oo(this, i),
                delete this[g3],
                r7.success(
                  nV(this, { name: 'div', attributes: i, children: t }),
                  Q
                )
              );
            }
          }
          class o6 extends nR {
            constructor(A) {
              super(n7, 'execute'),
                (this.connection = A.connection || ''),
                (this.executeType = r3(A.executeType, ['import', 'remerge'])),
                (this.id = A.id || ''),
                (this.runAt = r3(A.runAt, ['client', 'both', 'server'])),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
          }
          class o7 extends nR {
            constructor(A) {
              super(n7, 'extras', !0),
                (this.id = A.id || ''),
                (this.name = A.name || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.boolean = new nG()),
                (this.date = new nG()),
                (this.dateTime = new nG()),
                (this.decimal = new nG()),
                (this.exData = new nG()),
                (this.extras = new nG()),
                (this.float = new nG()),
                (this.image = new nG()),
                (this.integer = new nG()),
                (this.text = new nG()),
                (this.time = new nG());
            }
          }
          class o4 extends nR {
            constructor(A) {
              super(n7, 'field', !0),
                (this.access = r3(A.access, [
                  'open',
                  'nonInteractive',
                  'protected',
                  'readOnly',
                ])),
                (this.accessKey = A.accessKey || ''),
                (this.anchorType = r3(A.anchorType, [
                  'topLeft',
                  'bottomCenter',
                  'bottomLeft',
                  'bottomRight',
                  'middleCenter',
                  'middleLeft',
                  'middleRight',
                  'topCenter',
                  'topRight',
                ])),
                (this.colSpan = r1({
                  data: A.colSpan,
                  defaultValue: 1,
                  validate: (A) => A >= 1 || -1 === A,
                })),
                (this.h = A.h ? r5(A.h) : ''),
                (this.hAlign = r3(A.hAlign, [
                  'left',
                  'center',
                  'justify',
                  'justifyAll',
                  'radix',
                  'right',
                ])),
                (this.id = A.id || ''),
                (this.locale = A.locale || ''),
                (this.maxH = r5(A.maxH, '0pt')),
                (this.maxW = r5(A.maxW, '0pt')),
                (this.minH = r5(A.minH, '0pt')),
                (this.minW = r5(A.minW, '0pt')),
                (this.name = A.name || ''),
                (this.presence = r3(A.presence, [
                  'visible',
                  'hidden',
                  'inactive',
                  'invisible',
                ])),
                (this.relevant = r6(A.relevant)),
                (this.rotate = r1({
                  data: A.rotate,
                  defaultValue: 0,
                  validate: (A) => A % 90 == 0,
                })),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.w = A.w ? r5(A.w) : ''),
                (this.x = r5(A.x, '0pt')),
                (this.y = r5(A.y, '0pt')),
                (this.assist = null),
                (this.bind = null),
                (this.border = null),
                (this.calculate = null),
                (this.caption = null),
                (this.desc = null),
                (this.extras = null),
                (this.font = null),
                (this.format = null),
                (this.items = new nG(2)),
                (this.keep = null),
                (this.margin = null),
                (this.para = null),
                (this.traversal = null),
                (this.ui = null),
                (this.validate = null),
                (this.value = null),
                (this.bindItems = new nG()),
                (this.connect = new nG()),
                (this.event = new nG()),
                (this.setProperty = new nG());
            }
            [ru]() {
              return !0;
            }
            [rq](A) {
              os(this, A);
            }
            [rZ](A) {
              if ((on(this), !this.ui)) {
                let A;
                switch (
                  ((this.ui = new I3({})),
                  (this.ui[rC] = this[rC]),
                  this[gX](this.ui),
                  this.items.children.length)
                ) {
                  case 0:
                    (A = new I_({})), (this.ui.textEdit = A);
                    break;
                  case 1:
                    (A = new oU({})), (this.ui.checkButton = A);
                    break;
                  case 2:
                    (A = new oM({})), (this.ui.choiceList = A);
                }
                this.ui[gX](A);
              }
              if (
                !this.ui ||
                'hidden' === this.presence ||
                'inactive' === this.presence ||
                0 === this.h ||
                0 === this.w
              )
                return r7.EMPTY;
              this.caption && delete this.caption[g3], this[rM]();
              let t = this.caption ? this.caption[rZ](A).html : null,
                i = this.w,
                a = this.h,
                s = 0,
                g = 0;
              this.margin &&
                ((s = this.margin.leftInset + this.margin.rightInset),
                (g = this.margin.topInset + this.margin.bottomInset));
              let r = null;
              if ('' === this.w || '' === this.h) {
                let t = null,
                  i = null,
                  a = 0,
                  n = 0;
                if (this.ui.checkButton) a = n = this.ui.checkButton.size;
                else {
                  let { w: t, h: i } = nP(this, A);
                  null !== t
                    ? ((a = t), (n = i))
                    : (n = (function A(A, t = !1) {
                        let i = null;
                        if (A) {
                          let t = r0(A.typeface),
                            a = A[rC].fontFinder.find(t);
                          i = nA(A, a);
                        }
                        if (!i)
                          return { lineHeight: 12, lineGap: 2, lineNoGap: 10 };
                        let a = A.size || 10,
                          s = i.lineHeight
                            ? Math.max(t ? 0 : 1.2, i.lineHeight)
                            : 1.2,
                          g = void 0 === i.lineGap ? 0.2 : i.lineGap;
                        return {
                          lineHeight: s * a,
                          lineGap: g * a,
                          lineNoGap: Math.max(1, s - g) * a,
                        };
                      })(this.font, !0).lineNoGap);
                }
                if (
                  ((a += (r = oi(this.ui[ra]())).w), (n += r.h), this.caption)
                ) {
                  let { w: s, h: g, isBroken: r } = this.caption[ra](A);
                  if (r && this[ro]()[ry]()) return this[rU](), r7.FAILURE;
                  switch (((t = s), (i = g), this.caption.placement)) {
                    case 'left':
                    case 'right':
                    case 'inline':
                      t += a;
                      break;
                    case 'top':
                    case 'bottom':
                      i += n;
                  }
                } else (t = a), (i = n);
                t &&
                  '' === this.w &&
                  ((t += s),
                  (this.w = Math.min(
                    this.maxW <= 0 ? 1 / 0 : this.maxW,
                    this.minW + 1 < t ? t : this.minW
                  ))),
                  i &&
                    '' === this.h &&
                    ((i += g),
                    (this.h = Math.min(
                      this.maxH <= 0 ? 1 / 0 : this.maxH,
                      this.minH + 1 < i ? i : this.minH
                    )));
              }
              if ((this[rU](), nZ(this), oC(this), !n6(this, A)))
                return (this.w = i), (this.h = a), this[rU](), r7.FAILURE;
              oB(this);
              let n = nX(
                this,
                'font',
                'dimensions',
                'position',
                'rotate',
                'anchorType',
                'presence',
                'margin',
                'hAlign'
              );
              nq(this, n);
              let o = ['xfaField'];
              this.font && o.push('xfaFont'),
                n_(this) && o.push('xfaPrintOnly');
              let I = { style: n, id: this[rV], class: o };
              n.margin && ((n.padding = n.margin), delete n.margin),
                nz(this, o),
                this.name && (I.xfaName = this.name);
              let l = [],
                C = { name: 'div', attributes: I, children: l };
              oo(this, I);
              let B = this.border ? this.border[rX]() : null,
                h = nW(this, C, A),
                Q = this.ui[rZ]().html;
              if (!Q) return Object.assign(n, B), r7.success(nV(this, C), h);
              this[rT] &&
                (Q.children?.[0]
                  ? (Q.children[0].attributes.tabindex = this[rT])
                  : (Q.attributes.tabindex = this[rT])),
                Q.attributes.style ||
                  (Q.attributes.style = Object.create(null));
              let c = null;
              if (
                (this.ui.button
                  ? (1 === Q.children.length && ([c] = Q.children.splice(0, 1)),
                    Object.assign(Q.attributes.style, B))
                  : Object.assign(n, B),
                l.push(Q),
                this.value)
              ) {
                if (this.ui.imageEdit) Q.children.push(this.value[rZ]().html);
                else if (!this.ui.button) {
                  let A = '';
                  if (this.value.exData) A = this.value.exData[rP]();
                  else if (this.value.text) A = this.value.text[ra]();
                  else {
                    let t = this.value[rZ]().html;
                    null !== t && (A = t.children[0].value);
                  }
                  this.ui.textEdit &&
                    this.value.text?.maxChars &&
                    (Q.children[0].attributes.maxLength =
                      this.value.text.maxChars),
                    A &&
                      (this.ui.numericEdit &&
                        (A = isNaN((A = parseFloat(A))) ? '' : A.toString()),
                      'textarea' === Q.children[0].name
                        ? (Q.children[0].attributes.textContent = A)
                        : (Q.children[0].attributes.value = A));
                }
              }
              if (!this.ui.imageEdit && Q.children?.[0] && this.h) {
                r = r || oi(this.ui[ra]());
                let t = 0;
                if (
                  this.caption &&
                  ['top', 'bottom'].includes(this.caption.placement)
                ) {
                  (t = this.caption.reserve) <= 0 &&
                    (t = this.caption[ra](A).h);
                  let i = this.h - t - g - r.h;
                  Q.children[0].attributes.style.height = nK(i);
                } else Q.children[0].attributes.style.height = '100%';
              }
              if ((c && Q.children.push(c), !t))
                return (
                  Q.attributes.class && Q.attributes.class.push('xfaLeft'),
                  (this.w = i),
                  (this.h = a),
                  r7.success(nV(this, C), h)
                );
              if (this.ui.button)
                return (
                  n.padding && delete n.padding,
                  'div' === t.name && (t.name = 'span'),
                  Q.children.push(t),
                  r7.success(C, h)
                );
              switch (
                (this.ui.checkButton &&
                  (t.attributes.class[0] = 'xfaCaptionForCheckButton'),
                Q.attributes.class || (Q.attributes.class = []),
                Q.children.splice(0, 0, t),
                this.caption.placement)
              ) {
                case 'left':
                case 'inline':
                  Q.attributes.class.push('xfaLeft');
                  break;
                case 'right':
                  Q.attributes.class.push('xfaRight');
                  break;
                case 'top':
                  Q.attributes.class.push('xfaTop');
                  break;
                case 'bottom':
                  Q.attributes.class.push('xfaBottom');
              }
              return (this.w = i), (this.h = a), r7.success(nV(this, C), h);
            }
          }
          class IA extends nR {
            constructor(A) {
              super(n7, 'fill', !0),
                (this.id = A.id || ''),
                (this.presence = r3(A.presence, [
                  'visible',
                  'hidden',
                  'inactive',
                  'invisible',
                ])),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.color = null),
                (this.extras = null),
                (this.linear = null),
                (this.pattern = null),
                (this.radial = null),
                (this.solid = null),
                (this.stipple = null);
            }
            [rX]() {
              let A = this[rI](),
                t = A[rI]()[rI](),
                i = Object.create(null),
                a = 'color',
                s = a;
              for (let g of (A instanceof oD &&
                ((a = 'background-color'),
                (s = 'background'),
                t instanceof I3 && (i.backgroundColor = 'white')),
              (A instanceof IJ || A instanceof oE) &&
                ((a = s = 'fill'), (i.fill = 'white')),
              Object.getOwnPropertyNames(this))) {
                if ('extras' === g || 'color' === g) continue;
                let A = this[g];
                if (!(A instanceof nR)) continue;
                let t = A[rX](this.color);
                return t && (i[t.startsWith('#') ? a : s] = t), i;
              }
              if (this.color?.value) {
                let A = this.color[rX]();
                i[A.startsWith('#') ? a : s] = A;
              }
              return i;
            }
          }
          class Ie extends nR {
            constructor(A) {
              super(n7, 'filter', !0),
                (this.addRevocationInfo = r3(A.addRevocationInfo, [
                  '',
                  'required',
                  'optional',
                  'none',
                ])),
                (this.id = A.id || ''),
                (this.name = A.name || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.version = r1({
                  data: this.version,
                  defaultValue: 5,
                  validate: (A) => A >= 1 && A <= 5,
                })),
                (this.appearanceFilter = null),
                (this.certificates = null),
                (this.digestMethods = null),
                (this.encodings = null),
                (this.encryptionMethods = null),
                (this.handler = null),
                (this.lockDocument = null),
                (this.mdp = null),
                (this.reasons = null),
                (this.timeStamp = null);
            }
          }
          class It extends nU {
            constructor(A) {
              super(n7, 'float'),
                (this.id = A.id || ''),
                (this.name = A.name || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
            [g5]() {
              let A = parseFloat(this[g1].trim());
              this[g1] = isNaN(A) ? null : A;
            }
            [rZ](A) {
              return ol(null !== this[g1] ? this[g1].toString() : '');
            }
          }
          class Ii extends nR {
            constructor(A) {
              super(n7, 'font', !0),
                (this.baselineShift = r5(A.baselineShift)),
                (this.fontHorizontalScale = r2({
                  data: A.fontHorizontalScale,
                  defaultValue: 100,
                  validate: (A) => A >= 0,
                })),
                (this.fontVerticalScale = r2({
                  data: A.fontVerticalScale,
                  defaultValue: 100,
                  validate: (A) => A >= 0,
                })),
                (this.id = A.id || ''),
                (this.kerningMode = r3(A.kerningMode, ['none', 'pair'])),
                (this.letterSpacing = r5(A.letterSpacing, '0')),
                (this.lineThrough = r1({
                  data: A.lineThrough,
                  defaultValue: 0,
                  validate: (A) => 1 === A || 2 === A,
                })),
                (this.lineThroughPeriod = r3(A.lineThroughPeriod, [
                  'all',
                  'word',
                ])),
                (this.overline = r1({
                  data: A.overline,
                  defaultValue: 0,
                  validate: (A) => 1 === A || 2 === A,
                })),
                (this.overlinePeriod = r3(A.overlinePeriod, ['all', 'word'])),
                (this.posture = r3(A.posture, ['normal', 'italic'])),
                (this.size = r5(A.size, '10pt')),
                (this.typeface = A.typeface || 'Courier'),
                (this.underline = r1({
                  data: A.underline,
                  defaultValue: 0,
                  validate: (A) => 1 === A || 2 === A,
                })),
                (this.underlinePeriod = r3(A.underlinePeriod, ['all', 'word'])),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.weight = r3(A.weight, ['normal', 'bold'])),
                (this.extras = null),
                (this.fill = null);
            }
            [gj](A) {
              super[gj](A), this[rC].usedTypefaces.add(this.typeface);
            }
            [rX]() {
              let A = nX(this, 'fill'),
                t = A.color;
              return (
                t &&
                  ('#000000' === t
                    ? delete A.color
                    : t.startsWith('#') ||
                      ((A.background = t),
                      (A.backgroundClip = 'text'),
                      (A.color = 'transparent'))),
                this.baselineShift &&
                  (A.verticalAlign = nK(this.baselineShift)),
                (A.fontKerning =
                  'none' === this.kerningMode ? 'none' : 'normal'),
                (A.letterSpacing = nK(this.letterSpacing)),
                0 !== this.lineThrough &&
                  ((A.textDecoration = 'line-through'),
                  2 === this.lineThrough && (A.textDecorationStyle = 'double')),
                0 !== this.overline &&
                  ((A.textDecoration = 'overline'),
                  2 === this.overline && (A.textDecorationStyle = 'double')),
                (A.fontStyle = this.posture),
                (A.fontSize = nK(0.99 * this.size)),
                n1(this, this, this[rC].fontFinder, A),
                0 !== this.underline &&
                  ((A.textDecoration = 'underline'),
                  2 === this.underline && (A.textDecorationStyle = 'double')),
                (A.fontWeight = this.weight),
                A
              );
            }
          }
          class Ia extends nR {
            constructor(A) {
              super(n7, 'format', !0),
                (this.id = A.id || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.extras = null),
                (this.picture = null);
            }
          }
          class Is extends nJ {
            constructor(A) {
              super(n7, 'handler'),
                (this.id = A.id || ''),
                (this.type = r3(A.type, ['optional', 'required'])),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
          }
          class Ig extends nR {
            constructor(A) {
              super(n7, 'hyphenation'),
                (this.excludeAllCaps = r1({
                  data: A.excludeAllCaps,
                  defaultValue: 0,
                  validate: (A) => 1 === A,
                })),
                (this.excludeInitialCap = r1({
                  data: A.excludeInitialCap,
                  defaultValue: 0,
                  validate: (A) => 1 === A,
                })),
                (this.hyphenate = r1({
                  data: A.hyphenate,
                  defaultValue: 0,
                  validate: (A) => 1 === A,
                })),
                (this.id = A.id || ''),
                (this.pushCharacterCount = r1({
                  data: A.pushCharacterCount,
                  defaultValue: 3,
                  validate: (A) => A >= 0,
                })),
                (this.remainCharacterCount = r1({
                  data: A.remainCharacterCount,
                  defaultValue: 3,
                  validate: (A) => A >= 0,
                })),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.wordCharacterCount = r1({
                  data: A.wordCharacterCount,
                  defaultValue: 7,
                  validate: (A) => A >= 0,
                }));
            }
          }
          class Image extends nJ {
            constructor(A) {
              super(n7, 'image'),
                (this.aspect = r3(A.aspect, [
                  'fit',
                  'actual',
                  'height',
                  'none',
                  'width',
                ])),
                (this.contentType = A.contentType || ''),
                (this.href = A.href || ''),
                (this.id = A.id || ''),
                (this.name = A.name || ''),
                (this.transferEncoding = r3(A.transferEncoding, [
                  'base64',
                  'none',
                  'package',
                ])),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
            [rZ]() {
              let A;
              if (this.contentType && !oe.has(this.contentType.toLowerCase()))
                return r7.EMPTY;
              let t = this[rC].images && this[rC].images.get(this.href);
              if (
                (!t && (this.href || !this[g1])) ||
                (t ||
                  'base64' !== this.transferEncoding ||
                  (t = J(atob(this[g1]))),
                !t)
              )
                return r7.EMPTY;
              if (!this.contentType) {
                for (let [A, i] of ot)
                  if (t.length > A.length && A.every((A, i) => A === t[i])) {
                    this.contentType = i;
                    break;
                  }
                if (!this.contentType) return r7.EMPTY;
              }
              let i = new Blob([t], { type: this.contentType });
              switch (this.aspect) {
                case 'fit':
                case 'actual':
                  break;
                case 'height':
                  A = { height: '100%', objectFit: 'fill' };
                  break;
                case 'none':
                  A = { width: '100%', height: '100%', objectFit: 'fill' };
                  break;
                case 'width':
                  A = { width: '100%', objectFit: 'fill' };
              }
              let a = this[rI]();
              return r7.success({
                name: 'img',
                attributes: {
                  class: ['xfaImage'],
                  style: A,
                  src: URL.createObjectURL(i),
                  alt: a ? oI(a[rI]()) : null,
                },
              });
            }
          }
          class Ir extends nR {
            constructor(A) {
              super(n7, 'imageEdit', !0),
                (this.data = r3(A.data, ['link', 'embed'])),
                (this.id = A.id || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.border = null),
                (this.extras = null),
                (this.margin = null);
            }
            [rZ](A) {
              return 'embed' === this.data
                ? r7.success({ name: 'div', children: [], attributes: {} })
                : r7.EMPTY;
            }
          }
          class In extends nU {
            constructor(A) {
              super(n7, 'integer'),
                (this.id = A.id || ''),
                (this.name = A.name || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
            [g5]() {
              let A = parseInt(this[g1].trim(), 10);
              this[g1] = isNaN(A) ? null : A;
            }
            [rZ](A) {
              return ol(null !== this[g1] ? this[g1].toString() : '');
            }
          }
          class Io extends nR {
            constructor(A) {
              super(n7, 'issuers', !0),
                (this.id = A.id || ''),
                (this.type = r3(A.type, ['optional', 'required'])),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.certificate = new nG());
            }
          }
          class II extends nR {
            constructor(A) {
              super(n7, 'items', !0),
                (this.id = A.id || ''),
                (this.name = A.name || ''),
                (this.presence = r3(A.presence, [
                  'visible',
                  'hidden',
                  'inactive',
                  'invisible',
                ])),
                (this.ref = A.ref || ''),
                (this.save = r1({
                  data: A.save,
                  defaultValue: 0,
                  validate: (A) => 1 === A,
                })),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.boolean = new nG()),
                (this.date = new nG()),
                (this.dateTime = new nG()),
                (this.decimal = new nG()),
                (this.exData = new nG()),
                (this.float = new nG()),
                (this.image = new nG()),
                (this.integer = new nG()),
                (this.text = new nG()),
                (this.time = new nG());
            }
            [rZ]() {
              let A = [];
              for (let t of this[rg]()) A.push(t[rP]());
              return r7.success(A);
            }
          }
          class Il extends nR {
            constructor(A) {
              super(n7, 'keep', !0), (this.id = A.id || '');
              let t = ['none', 'contentArea', 'pageArea'];
              (this.intact = r3(A.intact, t)),
                (this.next = r3(A.next, t)),
                (this.previous = r3(A.previous, t)),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.extras = null);
            }
          }
          class IC extends nR {
            constructor(A) {
              super(n7, 'keyUsage');
              let t = ['', 'yes', 'no'];
              (this.crlSign = r3(A.crlSign, t)),
                (this.dataEncipherment = r3(A.dataEncipherment, t)),
                (this.decipherOnly = r3(A.decipherOnly, t)),
                (this.digitalSignature = r3(A.digitalSignature, t)),
                (this.encipherOnly = r3(A.encipherOnly, t)),
                (this.id = A.id || ''),
                (this.keyAgreement = r3(A.keyAgreement, t)),
                (this.keyCertSign = r3(A.keyCertSign, t)),
                (this.keyEncipherment = r3(A.keyEncipherment, t)),
                (this.nonRepudiation = r3(A.nonRepudiation, t)),
                (this.type = r3(A.type, ['optional', 'required'])),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
          }
          class IB extends nR {
            constructor(A) {
              super(n7, 'line', !0),
                (this.hand = r3(A.hand, ['even', 'left', 'right'])),
                (this.id = A.id || ''),
                (this.slope = r3(A.slope, ['\\', '/'])),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.edge = null);
            }
            [rZ]() {
              let A = this[rI]()[rI](),
                t = this.edge || new oj({}),
                i = t[rX](),
                a = Object.create(null),
                s = 'visible' === t.presence ? t.thickness : 0;
              (a.strokeWidth = nK(s)), (a.stroke = i.color);
              let g,
                r,
                n,
                o,
                I = '100%',
                l = '100%';
              A.w <= s
                ? (([g, r, n, o] = ['50%', 0, '50%', '100%']),
                  (I = a.strokeWidth))
                : A.h <= s
                  ? (([g, r, n, o] = [0, '50%', '100%', '50%']),
                    (l = a.strokeWidth))
                  : '\\' === this.slope
                    ? ([g, r, n, o] = [0, 0, '100%', '100%'])
                    : ([g, r, n, o] = [0, '100%', '100%', 0]);
              let C = {
                name: 'svg',
                children: [
                  {
                    name: 'line',
                    attributes: {
                      xmlns: n4,
                      x1: g,
                      y1: r,
                      x2: n,
                      y2: o,
                      style: a,
                    },
                  },
                ],
                attributes: {
                  xmlns: n4,
                  width: I,
                  height: l,
                  style: { overflow: 'visible' },
                },
              };
              return oa(A)
                ? r7.success({
                    name: 'div',
                    attributes: {
                      style: {
                        display: 'inline',
                        width: '100%',
                        height: '100%',
                      },
                    },
                    children: [C],
                  })
                : ((C.attributes.style.position = 'absolute'), r7.success(C));
            }
          }
          class Ih extends nR {
            constructor(A) {
              super(n7, 'linear', !0),
                (this.id = A.id || ''),
                (this.type = r3(A.type, [
                  'toRight',
                  'toBottom',
                  'toLeft',
                  'toTop',
                ])),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.color = null),
                (this.extras = null);
            }
            [rX](A) {
              return (
                (A = A ? A[rX]() : '#FFFFFF'),
                `linear-gradient(${this.type.replace(/([RBLT])/, ' $1').toLowerCase()}, ${A}, ${this.color ? this.color[rX]() : '#000000'})`
              );
            }
          }
          class IQ extends nU {
            constructor(A) {
              super(n7, 'lockDocument'),
                (this.id = A.id || ''),
                (this.type = r3(A.type, ['optional', 'required'])),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
            [g5]() {
              this[g1] = r3(this[g1], ['auto', '0', '1']);
            }
          }
          class Ic extends nR {
            constructor(A) {
              super(n7, 'manifest', !0),
                (this.action = r3(A.action, ['include', 'all', 'exclude'])),
                (this.id = A.id || ''),
                (this.name = A.name || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.extras = null),
                (this.ref = new nG());
            }
          }
          class IE extends nR {
            constructor(A) {
              super(n7, 'margin', !0),
                (this.bottomInset = r5(A.bottomInset, '0')),
                (this.id = A.id || ''),
                (this.leftInset = r5(A.leftInset, '0')),
                (this.rightInset = r5(A.rightInset, '0')),
                (this.topInset = r5(A.topInset, '0')),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.extras = null);
            }
            [rX]() {
              return {
                margin:
                  nK(this.topInset) +
                  ' ' +
                  nK(this.rightInset) +
                  ' ' +
                  nK(this.bottomInset) +
                  ' ' +
                  nK(this.leftInset),
              };
            }
          }
          class Iu extends nR {
            constructor(A) {
              super(n7, 'mdp'),
                (this.id = A.id || ''),
                (this.permissions = r1({
                  data: A.permissions,
                  defaultValue: 2,
                  validate: (A) => 1 === A || 3 === A,
                })),
                (this.signatureType = r3(A.signatureType, [
                  'filler',
                  'author',
                ])),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
          }
          class Id extends nR {
            constructor(A) {
              super(n7, 'medium'),
                (this.id = A.id || ''),
                (this.imagingBBox = (function (A) {
                  if (!A) return { x: -1, y: -1, width: -1, height: -1 };
                  let t = A.trim()
                    .split(/\s*,\s*/)
                    .map((A) => r5(A, '-1'));
                  if (t.length < 4 || t[2] < 0 || t[3] < 0)
                    return { x: -1, y: -1, width: -1, height: -1 };
                  let [i, a, s, g] = t;
                  return { x: i, y: a, width: s, height: g };
                })(A.imagingBBox)),
                (this.long = r5(A.long)),
                (this.orientation = r3(A.orientation, [
                  'portrait',
                  'landscape',
                ])),
                (this.short = r5(A.short)),
                (this.stock = A.stock || ''),
                (this.trayIn = r3(A.trayIn, ['auto', 'delegate', 'pageFront'])),
                (this.trayOut = r3(A.trayOut, ['auto', 'delegate'])),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
          }
          class If extends nR {
            constructor(A) {
              super(n7, 'message', !0),
                (this.id = A.id || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.text = new nG());
            }
          }
          class Ip extends nR {
            constructor(A) {
              super(n7, 'numericEdit', !0),
                (this.hScrollPolicy = r3(A.hScrollPolicy, [
                  'auto',
                  'off',
                  'on',
                ])),
                (this.id = A.id || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.border = null),
                (this.comb = null),
                (this.extras = null),
                (this.margin = null);
            }
            [rZ](A) {
              let t = nX(this, 'border', 'font', 'margin'),
                i = this[rI]()[rI](),
                a = {
                  name: 'input',
                  attributes: {
                    type: 'text',
                    fieldId: i[rV],
                    dataId: i[g2]?.[rV] || i[rV],
                    class: ['xfaTextfield'],
                    style: t,
                    'aria-label': oI(i),
                    'aria-required': !1,
                  },
                };
              return (
                or(i) &&
                  ((a.attributes['aria-required'] = !0),
                  (a.attributes.required = !0)),
                r7.success({
                  name: 'label',
                  attributes: { class: ['xfaLabel'] },
                  children: [a],
                })
              );
            }
          }
          class Im extends nR {
            constructor(A) {
              super(n7, 'occur', !0),
                (this.id = A.id || ''),
                (this.initial =
                  '' !== A.initial
                    ? r1({
                        data: A.initial,
                        defaultValue: '',
                        validate: (A) => !0,
                      })
                    : ''),
                (this.max =
                  '' !== A.max
                    ? r1({ data: A.max, defaultValue: 1, validate: (A) => !0 })
                    : ''),
                (this.min =
                  '' !== A.min
                    ? r1({ data: A.min, defaultValue: 1, validate: (A) => !0 })
                    : ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.extras = null);
            }
            [gj]() {
              let A = this[rI](),
                t = this.min;
              '' === this.min &&
                (this.min = A instanceof Ib || A instanceof Ik ? 0 : 1),
                '' === this.max &&
                  (this.max =
                    '' === t
                      ? A instanceof Ib || A instanceof Ik
                        ? -1
                        : 1
                      : this.min),
                -1 !== this.max && this.max < this.min && (this.max = this.min),
                '' === this.initial &&
                  (this.initial = A instanceof Iz ? 1 : this.min);
            }
          }
          class Iy extends nJ {
            constructor(A) {
              super(n7, 'oid'),
                (this.id = A.id || ''),
                (this.name = A.name || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
          }
          class Iw extends nR {
            constructor(A) {
              super(n7, 'oids', !0),
                (this.id = A.id || ''),
                (this.type = r3(A.type, ['optional', 'required'])),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.oid = new nG());
            }
          }
          class ID extends nR {
            constructor(A) {
              super(n7, 'overflow'),
                (this.id = A.id || ''),
                (this.leader = A.leader || ''),
                (this.target = A.target || ''),
                (this.trailer = A.trailer || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
            [ra]() {
              if (!this[g3]) {
                let A = this[rI](),
                  t = this[rl](),
                  i = t[rY](this.target, A),
                  a = t[rY](this.leader, A),
                  s = t[rY](this.trailer, A);
                this[g3] = {
                  target: i?.[0] || null,
                  leader: a?.[0] || null,
                  trailer: s?.[0] || null,
                  addLeader: !1,
                  addTrailer: !1,
                };
              }
              return this[g3];
            }
          }
          class Ib extends nR {
            constructor(A) {
              super(n7, 'pageArea', !0),
                (this.blankOrNotBlank = r3(A.blankOrNotBlank, [
                  'any',
                  'blank',
                  'notBlank',
                ])),
                (this.id = A.id || ''),
                (this.initialNumber = r1({
                  data: A.initialNumber,
                  defaultValue: 1,
                  validate: (A) => !0,
                })),
                (this.name = A.name || ''),
                (this.numbered = r1({
                  data: A.numbered,
                  defaultValue: 1,
                  validate: (A) => !0,
                })),
                (this.oddOrEven = r3(A.oddOrEven, ['any', 'even', 'odd'])),
                (this.pagePosition = r3(A.pagePosition, [
                  'any',
                  'first',
                  'last',
                  'only',
                  'rest',
                ])),
                (this.relevant = r6(A.relevant)),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.desc = null),
                (this.extras = null),
                (this.medium = null),
                (this.occur = null),
                (this.area = new nG()),
                (this.contentArea = new nG()),
                (this.draw = new nG()),
                (this.exclGroup = new nG()),
                (this.field = new nG()),
                (this.subform = new nG());
            }
            [rD]() {
              return this[g3]
                ? !this.occur ||
                    -1 === this.occur.max ||
                    this[g3].numberOfUse < this.occur.max
                : ((this[g3] = { numberOfUse: 0 }), !0);
            }
            [gz]() {
              delete this[g3];
            }
            [rn]() {
              this[g3] || (this[g3] = { numberOfUse: 0 });
              let A = this[rI]();
              return 'orderedOccurrence' === A.relation && this[rD]()
                ? ((this[g3].numberOfUse += 1), this)
                : A[rn]();
            }
            [g4]() {
              return this[g3].space || { width: 0, height: 0 };
            }
            [rZ]() {
              this[g3] || (this[g3] = { numberOfUse: 1 });
              let A = [];
              this[g3].children = A;
              let t = Object.create(null);
              if (this.medium && this.medium.short && this.medium.long) {
                if (
                  ((t.width = nK(this.medium.short)),
                  (t.height = nK(this.medium.long)),
                  (this[g3].space = {
                    width: this.medium.short,
                    height: this.medium.long,
                  }),
                  'landscape' === this.medium.orientation)
                ) {
                  let A = t.width;
                  (t.width = t.height),
                    (t.height = A),
                    (this[g3].space = {
                      width: this.medium.long,
                      height: this.medium.short,
                    });
                }
              } else
                m('XFA - No medium specified in pageArea: please file a bug.');
              return (
                this[gV]({
                  filter: new Set(['area', 'draw', 'field', 'subform']),
                  include: !0,
                }),
                this[gV]({ filter: new Set(['contentArea']), include: !0 }),
                r7.success({
                  name: 'div',
                  children: A,
                  attributes: {
                    class: ['xfaPage'],
                    id: this[rV],
                    style: t,
                    xfaName: this.name,
                  },
                })
              );
            }
          }
          class Ik extends nR {
            constructor(A) {
              super(n7, 'pageSet', !0),
                (this.duplexImposition = r3(A.duplexImposition, [
                  'longEdge',
                  'shortEdge',
                ])),
                (this.id = A.id || ''),
                (this.name = A.name || ''),
                (this.relation = r3(A.relation, [
                  'orderedOccurrence',
                  'duplexPaginated',
                  'simplexPaginated',
                ])),
                (this.relevant = r6(A.relevant)),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.extras = null),
                (this.occur = null),
                (this.pageArea = new nG()),
                (this.pageSet = new nG());
            }
            [gz]() {
              for (let A of this.pageArea.children) A[gz]();
              for (let A of this.pageSet.children) A[gz]();
            }
            [rD]() {
              return (
                !this.occur ||
                -1 === this.occur.max ||
                this[g3].numberOfUse < this.occur.max
              );
            }
            [rn]() {
              if (
                (this[g3] ||
                  (this[g3] = {
                    numberOfUse: 1,
                    pageIndex: -1,
                    pageSetIndex: -1,
                  }),
                'orderedOccurrence' === this.relation)
              ) {
                if (this[g3].pageIndex + 1 < this.pageArea.children.length)
                  return (
                    (this[g3].pageIndex += 1),
                    this.pageArea.children[this[g3].pageIndex][rn]()
                  );
                if (this[g3].pageSetIndex + 1 < this.pageSet.children.length)
                  return (
                    (this[g3].pageSetIndex += 1),
                    this.pageSet.children[this[g3].pageSetIndex][rn]()
                  );
                if (this[rD]())
                  return (
                    (this[g3].numberOfUse += 1),
                    (this[g3].pageIndex = -1),
                    (this[g3].pageSetIndex = -1),
                    this[rn]()
                  );
                let A = this[rI]();
                return A instanceof Ik ? A[rn]() : (this[gz](), this[rn]());
              }
              let A = this[rl]()[g3].pageNumber,
                t = A % 2 == 0 ? 'even' : 'odd',
                i = 0 === A ? 'first' : 'rest',
                a = this.pageArea.children.find(
                  (A) => A.oddOrEven === t && A.pagePosition === i
                );
              return a ||
                (a = this.pageArea.children.find(
                  (A) => 'any' === A.oddOrEven && A.pagePosition === i
                ))
                ? a
                : (a = this.pageArea.children.find(
                    (A) => 'any' === A.oddOrEven && 'any' === A.pagePosition
                  )) || this.pageArea.children[0];
            }
          }
          class IF extends nR {
            constructor(A) {
              super(n7, 'para', !0),
                (this.hAlign = r3(A.hAlign, [
                  'left',
                  'center',
                  'justify',
                  'justifyAll',
                  'radix',
                  'right',
                ])),
                (this.id = A.id || ''),
                (this.lineHeight = A.lineHeight ? r5(A.lineHeight, '0pt') : ''),
                (this.marginLeft = A.marginLeft ? r5(A.marginLeft, '0pt') : ''),
                (this.marginRight = A.marginRight
                  ? r5(A.marginRight, '0pt')
                  : ''),
                (this.orphans = r1({
                  data: A.orphans,
                  defaultValue: 0,
                  validate: (A) => A >= 0,
                })),
                (this.preserve = A.preserve || ''),
                (this.radixOffset = A.radixOffset
                  ? r5(A.radixOffset, '0pt')
                  : ''),
                (this.spaceAbove = A.spaceAbove ? r5(A.spaceAbove, '0pt') : ''),
                (this.spaceBelow = A.spaceBelow ? r5(A.spaceBelow, '0pt') : ''),
                (this.tabDefault = A.tabDefault ? r5(this.tabDefault) : ''),
                (this.tabStops = (A.tabStops || '')
                  .trim()
                  .split(/\s+/)
                  .map((A, t) => (t % 2 == 1 ? r5(A) : A))),
                (this.textIndent = A.textIndent ? r5(A.textIndent, '0pt') : ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.vAlign = r3(A.vAlign, ['top', 'bottom', 'middle'])),
                (this.widows = r1({
                  data: A.widows,
                  defaultValue: 0,
                  validate: (A) => A >= 0,
                })),
                (this.hyphenation = null);
            }
            [rX]() {
              let A = nX(this, 'hAlign');
              return (
                '' !== this.marginLeft && (A.paddingLeft = nK(this.marginLeft)),
                '' !== this.marginRight &&
                  (A.paddingight = nK(this.marginRight)),
                '' !== this.spaceAbove && (A.paddingTop = nK(this.spaceAbove)),
                '' !== this.spaceBelow &&
                  (A.paddingBottom = nK(this.spaceBelow)),
                '' !== this.textIndent &&
                  ((A.textIndent = nK(this.textIndent)), nj(A)),
                this.lineHeight > 0 && (A.lineHeight = nK(this.lineHeight)),
                '' !== this.tabDefault && (A.tabSize = nK(this.tabDefault)),
                this.tabStops.length,
                this.hyphenatation &&
                  Object.assign(A, this.hyphenatation[rX]()),
                A
              );
            }
          }
          class IS extends nR {
            constructor(A) {
              super(n7, 'passwordEdit', !0),
                (this.hScrollPolicy = r3(A.hScrollPolicy, [
                  'auto',
                  'off',
                  'on',
                ])),
                (this.id = A.id || ''),
                (this.passwordChar = A.passwordChar || '*'),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.border = null),
                (this.extras = null),
                (this.margin = null);
            }
          }
          class IR extends nR {
            constructor(A) {
              super(n7, 'pattern', !0),
                (this.id = A.id || ''),
                (this.type = r3(A.type, [
                  'crossHatch',
                  'crossDiagonal',
                  'diagonalLeft',
                  'diagonalRight',
                  'horizontal',
                  'vertical',
                ])),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.color = null),
                (this.extras = null);
            }
            [rX](A) {
              A = A ? A[rX]() : '#FFFFFF';
              let t = this.color ? this.color[rX]() : '#000000',
                i = 'repeating-linear-gradient',
                a = `${A},${A} 5px,${t} 5px,${t} 10px`;
              switch (this.type) {
                case 'crossHatch':
                  return `${i}(to top,${a}) ${i}(to right,${a})`;
                case 'crossDiagonal':
                  return `${i}(45deg,${a}) ${i}(-45deg,${a})`;
                case 'diagonalLeft':
                  return `${i}(45deg,${a})`;
                case 'diagonalRight':
                  return `${i}(-45deg,${a})`;
                case 'horizontal':
                  return `${i}(to top,${a})`;
                case 'vertical':
                  return `${i}(to right,${a})`;
              }
              return '';
            }
          }
          class IG extends nJ {
            constructor(A) {
              super(n7, 'picture'),
                (this.id = A.id || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
          }
          class IN extends nR {
            constructor(A) {
              super(n7, 'proto', !0),
                (this.appearanceFilter = new nG()),
                (this.arc = new nG()),
                (this.area = new nG()),
                (this.assist = new nG()),
                (this.barcode = new nG()),
                (this.bindItems = new nG()),
                (this.bookend = new nG()),
                (this.boolean = new nG()),
                (this.border = new nG()),
                (this.break = new nG()),
                (this.breakAfter = new nG()),
                (this.breakBefore = new nG()),
                (this.button = new nG()),
                (this.calculate = new nG()),
                (this.caption = new nG()),
                (this.certificate = new nG()),
                (this.certificates = new nG()),
                (this.checkButton = new nG()),
                (this.choiceList = new nG()),
                (this.color = new nG()),
                (this.comb = new nG()),
                (this.connect = new nG()),
                (this.contentArea = new nG()),
                (this.corner = new nG()),
                (this.date = new nG()),
                (this.dateTime = new nG()),
                (this.dateTimeEdit = new nG()),
                (this.decimal = new nG()),
                (this.defaultUi = new nG()),
                (this.desc = new nG()),
                (this.digestMethod = new nG()),
                (this.digestMethods = new nG()),
                (this.draw = new nG()),
                (this.edge = new nG()),
                (this.encoding = new nG()),
                (this.encodings = new nG()),
                (this.encrypt = new nG()),
                (this.encryptData = new nG()),
                (this.encryption = new nG()),
                (this.encryptionMethod = new nG()),
                (this.encryptionMethods = new nG()),
                (this.event = new nG()),
                (this.exData = new nG()),
                (this.exObject = new nG()),
                (this.exclGroup = new nG()),
                (this.execute = new nG()),
                (this.extras = new nG()),
                (this.field = new nG()),
                (this.fill = new nG()),
                (this.filter = new nG()),
                (this.float = new nG()),
                (this.font = new nG()),
                (this.format = new nG()),
                (this.handler = new nG()),
                (this.hyphenation = new nG()),
                (this.image = new nG()),
                (this.imageEdit = new nG()),
                (this.integer = new nG()),
                (this.issuers = new nG()),
                (this.items = new nG()),
                (this.keep = new nG()),
                (this.keyUsage = new nG()),
                (this.line = new nG()),
                (this.linear = new nG()),
                (this.lockDocument = new nG()),
                (this.manifest = new nG()),
                (this.margin = new nG()),
                (this.mdp = new nG()),
                (this.medium = new nG()),
                (this.message = new nG()),
                (this.numericEdit = new nG()),
                (this.occur = new nG()),
                (this.oid = new nG()),
                (this.oids = new nG()),
                (this.overflow = new nG()),
                (this.pageArea = new nG()),
                (this.pageSet = new nG()),
                (this.para = new nG()),
                (this.passwordEdit = new nG()),
                (this.pattern = new nG()),
                (this.picture = new nG()),
                (this.radial = new nG()),
                (this.reason = new nG()),
                (this.reasons = new nG()),
                (this.rectangle = new nG()),
                (this.ref = new nG()),
                (this.script = new nG()),
                (this.setProperty = new nG()),
                (this.signData = new nG()),
                (this.signature = new nG()),
                (this.signing = new nG()),
                (this.solid = new nG()),
                (this.speak = new nG()),
                (this.stipple = new nG()),
                (this.subform = new nG()),
                (this.subformSet = new nG()),
                (this.subjectDN = new nG()),
                (this.subjectDNs = new nG()),
                (this.submit = new nG()),
                (this.text = new nG()),
                (this.textEdit = new nG()),
                (this.time = new nG()),
                (this.timeStamp = new nG()),
                (this.toolTip = new nG()),
                (this.traversal = new nG()),
                (this.traverse = new nG()),
                (this.ui = new nG()),
                (this.validate = new nG()),
                (this.value = new nG()),
                (this.variables = new nG());
            }
          }
          class Ix extends nR {
            constructor(A) {
              super(n7, 'radial', !0),
                (this.id = A.id || ''),
                (this.type = r3(A.type, ['toEdge', 'toCenter'])),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.color = null),
                (this.extras = null);
            }
            [rX](A) {
              A = A ? A[rX]() : '#FFFFFF';
              let t = this.color ? this.color[rX]() : '#000000';
              return `radial-gradient(circle at center, ${'toEdge' === this.type ? `${A},${t}` : `${t},${A}`})`;
            }
          }
          class IU extends nJ {
            constructor(A) {
              super(n7, 'reason'),
                (this.id = A.id || ''),
                (this.name = A.name || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
          }
          class IM extends nR {
            constructor(A) {
              super(n7, 'reasons', !0),
                (this.id = A.id || ''),
                (this.type = r3(A.type, ['optional', 'required'])),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.reason = new nG());
            }
          }
          class IJ extends nR {
            constructor(A) {
              super(n7, 'rectangle', !0),
                (this.hand = r3(A.hand, ['even', 'left', 'right'])),
                (this.id = A.id || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.corner = new nG(4)),
                (this.edge = new nG(4)),
                (this.fill = null);
            }
            [rZ]() {
              let A = this.edge.children.length
                  ? this.edge.children[0]
                  : new oj({}),
                t = A[rX](),
                i = Object.create(null);
              'visible' === this.fill?.presence
                ? Object.assign(i, this.fill[rX]())
                : (i.fill = 'transparent'),
                (i.strokeWidth = nK(
                  'visible' === A.presence ? A.thickness : 0
                )),
                (i.stroke = t.color);
              let a = (
                  this.corner.children.length
                    ? this.corner.children[0]
                    : new oK({})
                )[rX](),
                s = {
                  name: 'svg',
                  children: [
                    {
                      name: 'rect',
                      attributes: {
                        xmlns: n4,
                        width: '100%',
                        height: '100%',
                        x: 0,
                        y: 0,
                        rx: a.radius,
                        ry: a.radius,
                        style: i,
                      },
                    },
                  ],
                  attributes: {
                    xmlns: n4,
                    style: { overflow: 'visible' },
                    width: '100%',
                    height: '100%',
                  },
                };
              return oa(this[rI]()[rI]())
                ? r7.success({
                    name: 'div',
                    attributes: {
                      style: {
                        display: 'inline',
                        width: '100%',
                        height: '100%',
                      },
                    },
                    children: [s],
                  })
                : ((s.attributes.style.position = 'absolute'), r7.success(s));
            }
          }
          class IL extends nJ {
            constructor(A) {
              super(n7, 'ref'),
                (this.id = A.id || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
          }
          class IH extends nJ {
            constructor(A) {
              super(n7, 'script'),
                (this.binding = A.binding || ''),
                (this.contentType = A.contentType || ''),
                (this.id = A.id || ''),
                (this.name = A.name || ''),
                (this.runAt = r3(A.runAt, ['client', 'both', 'server'])),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
          }
          class IY extends nR {
            constructor(A) {
              super(n7, 'setProperty'),
                (this.connection = A.connection || ''),
                (this.ref = A.ref || ''),
                (this.target = A.target || '');
            }
          }
          class IK extends nR {
            constructor(A) {
              super(n7, 'signData', !0),
                (this.id = A.id || ''),
                (this.operation = r3(A.operation, ['sign', 'clear', 'verify'])),
                (this.ref = A.ref || ''),
                (this.target = A.target || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.filter = null),
                (this.manifest = null);
            }
          }
          class Iv extends nR {
            constructor(A) {
              super(n7, 'signature', !0),
                (this.id = A.id || ''),
                (this.type = r3(A.type, ['PDF1.3', 'PDF1.6'])),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.border = null),
                (this.extras = null),
                (this.filter = null),
                (this.manifest = null),
                (this.margin = null);
            }
          }
          class Iq extends nR {
            constructor(A) {
              super(n7, 'signing', !0),
                (this.id = A.id || ''),
                (this.type = r3(A.type, ['optional', 'required'])),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.certificate = new nG());
            }
          }
          class IT extends nR {
            constructor(A) {
              super(n7, 'solid', !0),
                (this.id = A.id || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.extras = null);
            }
            [rX](A) {
              return A ? A[rX]() : '#FFFFFF';
            }
          }
          class IP extends nJ {
            constructor(A) {
              super(n7, 'speak'),
                (this.disable = r1({
                  data: A.disable,
                  defaultValue: 0,
                  validate: (A) => 1 === A,
                })),
                (this.id = A.id || ''),
                (this.priority = r3(A.priority, [
                  'custom',
                  'caption',
                  'name',
                  'toolTip',
                ])),
                (this.rid = A.rid || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
          }
          class IW extends nR {
            constructor(A) {
              super(n7, 'stipple', !0),
                (this.id = A.id || ''),
                (this.rate = r1({
                  data: A.rate,
                  defaultValue: 50,
                  validate: (A) => A >= 0 && A <= 100,
                })),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.color = null),
                (this.extras = null);
            }
            [rX](A) {
              let t = this.rate / 100;
              return v.makeHexColor(
                Math.round(A.value.r * (1 - t) + this.value.r * t),
                Math.round(A.value.g * (1 - t) + this.value.g * t),
                Math.round(A.value.b * (1 - t) + this.value.b * t)
              );
            }
          }
          class IZ extends nR {
            constructor(A) {
              super(n7, 'subform', !0),
                (this.access = r3(A.access, [
                  'open',
                  'nonInteractive',
                  'protected',
                  'readOnly',
                ])),
                (this.allowMacro = r1({
                  data: A.allowMacro,
                  defaultValue: 0,
                  validate: (A) => 1 === A,
                })),
                (this.anchorType = r3(A.anchorType, [
                  'topLeft',
                  'bottomCenter',
                  'bottomLeft',
                  'bottomRight',
                  'middleCenter',
                  'middleLeft',
                  'middleRight',
                  'topCenter',
                  'topRight',
                ])),
                (this.colSpan = r1({
                  data: A.colSpan,
                  defaultValue: 1,
                  validate: (A) => A >= 1 || -1 === A,
                })),
                (this.columnWidths = (A.columnWidths || '')
                  .trim()
                  .split(/\s+/)
                  .map((A) => ('-1' === A ? -1 : r5(A)))),
                (this.h = A.h ? r5(A.h) : ''),
                (this.hAlign = r3(A.hAlign, [
                  'left',
                  'center',
                  'justify',
                  'justifyAll',
                  'radix',
                  'right',
                ])),
                (this.id = A.id || ''),
                (this.layout = r3(A.layout, [
                  'position',
                  'lr-tb',
                  'rl-row',
                  'rl-tb',
                  'row',
                  'table',
                  'tb',
                ])),
                (this.locale = A.locale || ''),
                (this.maxH = r5(A.maxH, '0pt')),
                (this.maxW = r5(A.maxW, '0pt')),
                (this.mergeMode = r3(A.mergeMode, [
                  'consumeData',
                  'matchTemplate',
                ])),
                (this.minH = r5(A.minH, '0pt')),
                (this.minW = r5(A.minW, '0pt')),
                (this.name = A.name || ''),
                (this.presence = r3(A.presence, [
                  'visible',
                  'hidden',
                  'inactive',
                  'invisible',
                ])),
                (this.relevant = r6(A.relevant)),
                (this.restoreState = r3(A.restoreState, ['manual', 'auto'])),
                (this.scope = r3(A.scope, ['name', 'none'])),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.w = A.w ? r5(A.w) : ''),
                (this.x = r5(A.x, '0pt')),
                (this.y = r5(A.y, '0pt')),
                (this.assist = null),
                (this.bind = null),
                (this.bookend = null),
                (this.border = null),
                (this.break = null),
                (this.calculate = null),
                (this.desc = null),
                (this.extras = null),
                (this.keep = null),
                (this.margin = null),
                (this.occur = null),
                (this.overflow = null),
                (this.pageSet = null),
                (this.para = null),
                (this.traversal = null),
                (this.validate = null),
                (this.variables = null),
                (this.area = new nG()),
                (this.breakAfter = new nG()),
                (this.breakBefore = new nG()),
                (this.connect = new nG()),
                (this.draw = new nG()),
                (this.event = new nG()),
                (this.exObject = new nG()),
                (this.exclGroup = new nG()),
                (this.field = new nG()),
                (this.proto = new nG()),
                (this.setProperty = new nG()),
                (this.subform = new nG()),
                (this.subformSet = new nG());
            }
            [ro]() {
              let A = this[rI]();
              return A instanceof IO ? A[ro]() : A;
            }
            [ru]() {
              return !0;
            }
            [ry]() {
              return (
                (this.layout.endsWith('-tb') &&
                  0 === this[g3].attempt &&
                  this[g3].numberInLine > 0) ||
                this[rI]()[ry]()
              );
            }
            *[rr]() {
              yield* og(this);
            }
            [g8]() {
              return n3(this);
            }
            [gO](A, t) {
              n5(this, A, t);
            }
            [g4]() {
              return n8(this);
            }
            [rm]() {
              let A = this[ro]();
              return (
                !!A[rm]() &&
                (void 0 !== this[g3]._isSplittable
                  ? this[g3]._isSplittable
                  : 'position' === this.layout ||
                      this.layout.includes('row') ||
                      (this.keep && 'none' !== this.keep.intact)
                    ? ((this[g3]._isSplittable = !1), !1)
                    : (!A.layout?.endsWith('-tb') ||
                        0 === A[g3].numberInLine) &&
                      ((this[g3]._isSplittable = !0), !0))
              );
            }
            [rZ](A) {
              if ((on(this), this.break)) {
                if (
                  'auto' !== this.break.after ||
                  '' !== this.break.afterTarget
                ) {
                  let A = new ok({
                    targetType: this.break.after,
                    target: this.break.afterTarget,
                    startNew: this.break.startNew.toString(),
                  });
                  (A[rC] = this[rC]), this[gX](A), this.breakAfter.push(A);
                }
                if (
                  'auto' !== this.break.before ||
                  '' !== this.break.beforeTarget
                ) {
                  let A = new oF({
                    targetType: this.break.before,
                    target: this.break.beforeTarget,
                    startNew: this.break.startNew.toString(),
                  });
                  (A[rC] = this[rC]), this[gX](A), this.breakBefore.push(A);
                }
                if ('' !== this.break.overflowTarget) {
                  let A = new ID({
                    target: this.break.overflowTarget,
                    leader: this.break.overflowLeader,
                    trailer: this.break.overflowTrailer,
                  });
                  (A[rC] = this[rC]), this[gX](A), this.overflow.push(A);
                }
                this[rJ](this.break), (this.break = null);
              }
              if ('hidden' === this.presence || 'inactive' === this.presence)
                return r7.EMPTY;
              if (
                ((this.breakBefore.children.length > 1 ||
                  this.breakAfter.children.length > 1) &&
                  m(
                    'XFA - Several breakBefore or breakAfter in subforms: please file a bug.'
                  ),
                this.breakBefore.children.length >= 1)
              ) {
                let A = this.breakBefore.children[0];
                if (oh(A)) return r7.breakNode(A);
              }
              if (this[g3]?.afterBreakAfter) return r7.EMPTY;
              nZ(this);
              let t = [],
                i = { id: this[rV], class: [] };
              nz(this, i.class),
                this[g3] || (this[g3] = Object.create(null)),
                Object.assign(this[g3], {
                  children: t,
                  line: null,
                  attributes: i,
                  attempt: 0,
                  numberInLine: 0,
                  availableSpace: {
                    width: Math.min(this.w || 1 / 0, A.width),
                    height: Math.min(this.h || 1 / 0, A.height),
                  },
                  width: 0,
                  height: 0,
                  prevHeight: 0,
                  currentWidth: 0,
                });
              let a = this[rl](),
                s = a[g3].noLayoutFailure,
                g = this[rm]();
              if ((g || oC(this), !n6(this, A))) return r7.FAILURE;
              let r = new Set([
                'area',
                'draw',
                'exclGroup',
                'field',
                'subform',
                'subformSet',
              ]);
              if (this.layout.includes('row')) {
                let A = this[ro]().columnWidths;
                Array.isArray(A) &&
                  A.length > 0 &&
                  ((this[g3].columnWidths = A), (this[g3].currentColumn = 0));
              }
              let n = nX(
                  this,
                  'anchorType',
                  'dimensions',
                  'position',
                  'presence',
                  'border',
                  'margin',
                  'hAlign'
                ),
                o = ['xfaSubform'],
                I = nO(this);
              if (
                (I && o.push(I),
                (i.style = n),
                (i.class = o),
                this.name && (i.xfaName = this.name),
                this.overflow)
              ) {
                let t = this.overflow[ra]();
                t.addLeader && ((t.addLeader = !1), oQ(this, t.leader, A));
              }
              this[rM]();
              let l = 'lr-tb' === this.layout || 'rl-tb' === this.layout,
                C = l ? 2 : 1;
              for (; this[g3].attempt < C; this[g3].attempt++) {
                l && 1 === this[g3].attempt && (this[g3].numberInLine = 0);
                let A = this[gV]({ filter: r, include: !0 });
                if (A.success) break;
                if (A.isBreak()) return this[rU](), A;
                if (
                  l &&
                  0 === this[g3].attempt &&
                  0 === this[g3].numberInLine &&
                  !a[g3].noLayoutFailure
                ) {
                  this[g3].attempt = C;
                  break;
                }
              }
              if (
                (this[rU](),
                g || oB(this),
                (a[g3].noLayoutFailure = s),
                this[g3].attempt === C)
              )
                return (
                  this.overflow &&
                    (this[rl]()[g3].overflowNode = this.overflow),
                  g || delete this[g3],
                  r7.FAILURE
                );
              if (this.overflow) {
                let t = this.overflow[ra]();
                t.addTrailer && ((t.addTrailer = !1), oQ(this, t.trailer, A));
              }
              let B = 0,
                h = 0;
              this.margin &&
                ((B = this.margin.leftInset + this.margin.rightInset),
                (h = this.margin.topInset + this.margin.bottomInset));
              let Q = Math.max(this[g3].width + B, this.w || 0),
                c = Math.max(this[g3].height + h, this.h || 0),
                E = [this.x, this.y, Q, c];
              if (
                ('' === this.w && (n.width = nK(Q)),
                '' === this.h && (n.height = nK(c)),
                ('0px' === n.width || '0px' === n.height) && 0 === t.length)
              )
                return r7.EMPTY;
              oo(this, i);
              let u = r7.success(
                nV(this, { name: 'div', attributes: i, children: t }),
                E
              );
              if (this.breakAfter.children.length >= 1) {
                let A = this.breakAfter.children[0];
                if (oh(A))
                  return (this[g3].afterBreakAfter = u), r7.breakNode(A);
              }
              return delete this[g3], u;
            }
          }
          class IO extends nR {
            constructor(A) {
              super(n7, 'subformSet', !0),
                (this.id = A.id || ''),
                (this.name = A.name || ''),
                (this.relation = r3(A.relation, [
                  'ordered',
                  'choice',
                  'unordered',
                ])),
                (this.relevant = r6(A.relevant)),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.bookend = null),
                (this.break = null),
                (this.desc = null),
                (this.extras = null),
                (this.occur = null),
                (this.overflow = null),
                (this.breakAfter = new nG()),
                (this.breakBefore = new nG()),
                (this.subform = new nG()),
                (this.subformSet = new nG());
            }
            *[rr]() {
              yield* og(this);
            }
            [ro]() {
              let A = this[rI]();
              for (; !(A instanceof IZ); ) A = A[rI]();
              return A;
            }
            [ru]() {
              return !0;
            }
          }
          class IX extends nU {
            constructor(A) {
              super(n7, 'subjectDN'),
                (this.delimiter = A.delimiter || ','),
                (this.id = A.id || ''),
                (this.name = A.name || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
            [g5]() {
              this[g1] = new Map(
                this[g1]
                  .split(this.delimiter)
                  .map((A) => (((A = A.split('=', 2))[0] = A[0].trim()), A))
              );
            }
          }
          class IV extends nR {
            constructor(A) {
              super(n7, 'subjectDNs', !0),
                (this.id = A.id || ''),
                (this.type = r3(A.type, ['optional', 'required'])),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.subjectDN = new nG());
            }
          }
          class Ij extends nR {
            constructor(A) {
              super(n7, 'submit', !0),
                (this.embedPDF = r1({
                  data: A.embedPDF,
                  defaultValue: 0,
                  validate: (A) => 1 === A,
                })),
                (this.format = r3(A.format, [
                  'xdp',
                  'formdata',
                  'pdf',
                  'urlencoded',
                  'xfd',
                  'xml',
                ])),
                (this.id = A.id || ''),
                (this.target = A.target || ''),
                (this.textEncoding = r9({
                  data: A.textEncoding ? A.textEncoding.toLowerCase() : '',
                  defaultValue: '',
                  validate: (A) =>
                    [
                      'utf-8',
                      'big-five',
                      'fontspecific',
                      'gbk',
                      'gb-18030',
                      'gb-2312',
                      'ksc-5601',
                      'none',
                      'shift-jis',
                      'ucs-2',
                      'utf-16',
                    ].includes(A) || A.match(/iso-8859-\d{2}/),
                })),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.xdpContent = A.xdpContent || ''),
                (this.encrypt = null),
                (this.encryptData = new nG()),
                (this.signData = new nG());
            }
          }
          class Iz extends nR {
            constructor(A) {
              super(n7, 'template', !0),
                (this.baseProfile = r3(A.baseProfile, [
                  'full',
                  'interactiveForms',
                ])),
                (this.extras = null),
                (this.subform = new nG());
            }
            [g5]() {
              0 === this.subform.children.length &&
                m('XFA - No subforms in template node.'),
                this.subform.children.length >= 2 &&
                  m(
                    'XFA - Several subforms in template node: please file a bug.'
                  ),
                (this[rT] = 5e3);
            }
            [rm]() {
              return !0;
            }
            [rY](A, t) {
              return A.startsWith('#')
                ? [this[rh].get(A.slice(1))]
                : nI(this, t, A, !0, !0);
            }
            *[rW]() {
              if (!this.subform.children.length)
                return r7.success({ name: 'div', children: [] });
              this[g3] = {
                overflowNode: null,
                firstUnsplittable: null,
                currentContentArea: null,
                currentPageArea: null,
                noLayoutFailure: !1,
                pageNumber: 1,
                pagePosition: 'first',
                oddOrEven: 'odd',
                blankOrNotBlank: 'nonBlank',
                paraStack: [],
              };
              let A = this.subform.children[0];
              A.pageSet[gz]();
              let t = A.pageSet.pageArea.children,
                i = { name: 'div', children: [] },
                a = null,
                s = null,
                g = null;
              if (
                (A.breakBefore.children.length >= 1
                  ? (g = (s = A.breakBefore.children[0]).target)
                  : A.subform.children.length >= 1 &&
                      A.subform.children[0].breakBefore.children.length >= 1
                    ? (g = (s = A.subform.children[0].breakBefore.children[0])
                        .target)
                    : A.break?.beforeTarget
                      ? (g = (s = A.break).beforeTarget)
                      : A.subform.children.length >= 1 &&
                        A.subform.children[0].break?.beforeTarget &&
                        (g = (s = A.subform.children[0].break).beforeTarget),
                s)
              ) {
                let A = this[rY](g, s[rI]());
                A instanceof Ib && ((a = A), (s[g3] = {}));
              }
              a || (a = t[0]), (a[g3] = { numberOfUse: 1 });
              let r = a[rI]();
              r[g3] = {
                numberOfUse: 1,
                pageIndex: r.pageArea.children.indexOf(a),
                pageSetIndex: 0,
              };
              let n,
                o = null,
                I = null,
                l = !0,
                C = 0,
                B = 0;
              for (;;) {
                if (l) C = 0;
                else if ((i.children.pop(), 3 == ++C))
                  return m('XFA - Something goes wrong: please file a bug.'), i;
                (n = null), (this[g3].currentPageArea = a);
                let t = a[rZ]().html;
                i.children.push(t),
                  o &&
                    ((this[g3].noLayoutFailure = !0),
                    t.children.push(o[rZ](a[g3].space).html),
                    (o = null)),
                  I &&
                    ((this[g3].noLayoutFailure = !0),
                    t.children.push(I[rZ](a[g3].space).html),
                    (I = null));
                let s = a.contentArea.children,
                  g = t.children.filter((A) =>
                    A.attributes.class.includes('xfaContentarea')
                  );
                (l = !1),
                  (this[g3].firstUnsplittable = null),
                  (this[g3].noLayoutFailure = !1);
                let r = (t) => {
                  let i = A[g8]();
                  i && ((l ||= i.children?.length > 0), g[t].children.push(i));
                };
                for (let t = B, a = s.length; t < a; t++) {
                  let a = (this[g3].currentContentArea = s[t]),
                    C = { width: a.w, height: a.h };
                  (B = 0),
                    o && (g[t].children.push(o[rZ](C).html), (o = null)),
                    I && (g[t].children.push(I[rZ](C).html), (I = null));
                  let h = A[rZ](C);
                  if (h.success)
                    return (
                      h.html
                        ? ((l ||= h.html.children?.length > 0),
                          g[t].children.push(h.html))
                        : !l && i.children.length > 1 && i.children.pop(),
                      i
                    );
                  if (h.isBreak()) {
                    let A = h.breakNode;
                    if ((r(t), 'auto' === A.targetType)) continue;
                    A.leader &&
                      (o = (o = this[rY](A.leader, A[rI]())) ? o[0] : null),
                      A.trailer &&
                        (I = (I = this[rY](A.trailer, A[rI]())) ? I[0] : null),
                      'pageArea' === A.targetType
                        ? ((n = A[g3].target), (t = 1 / 0))
                        : A[g3].target
                          ? ((n = A[g3].target),
                            (B = A[g3].index + 1),
                            (t = 1 / 0))
                          : (t = A[g3].index);
                  } else if (this[g3].overflowNode) {
                    let A = this[g3].overflowNode;
                    this[g3].overflowNode = null;
                    let i = A[ra](),
                      a = i.target;
                    (i.addLeader = null !== i.leader),
                      (i.addTrailer = null !== i.trailer),
                      r(t);
                    let g = t;
                    if (((t = 1 / 0), a instanceof Ib)) n = a;
                    else if (a instanceof oY) {
                      let A = s.indexOf(a);
                      -1 !== A
                        ? A > g
                          ? (t = A - 1)
                          : (B = A)
                        : (B = (n = a[rI]()).contentArea.children.indexOf(a));
                    }
                  } else r(t);
                }
                (this[g3].pageNumber += 1),
                  n && (n[rD]() ? (n[g3].numberOfUse += 1) : (n = null)),
                  (a = n || a[rn]()),
                  yield null;
              }
            }
          }
          class Text extends nU {
            constructor(A) {
              super(n7, 'text'),
                (this.id = A.id || ''),
                (this.maxChars = r1({
                  data: A.maxChars,
                  defaultValue: 0,
                  validate: (A) => A >= 0,
                })),
                (this.name = A.name || ''),
                (this.rid = A.rid || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
            [gZ]() {
              return !0;
            }
            [rR](A) {
              return A[rk] === rz.xhtml.id
                ? ((this[g1] = A), !0)
                : (m(`XFA - Invalid content in Text: ${A[rF]}.`), !1);
            }
            [rN](A) {
              this[g1] instanceof nR || super[rN](A);
            }
            [g5]() {
              'string' == typeof this[g1] &&
                (this[g1] = this[g1].replaceAll('\r\n', '\n'));
            }
            [ra]() {
              return 'string' == typeof this[g1]
                ? this[g1]
                    .split(/[\u2029\u2028\n]/)
                    .reduce((A, t) => (t && A.push(t), A), [])
                    .join('\n')
                : this[g1][rP]();
            }
            [rZ](A) {
              if ('string' == typeof this[g1]) {
                let A = ol(this[g1]).html;
                return (
                  this[g1].includes('\u2029')
                    ? ((A.name = 'div'),
                      (A.children = []),
                      this[g1]
                        .split('\u2029')
                        .map((A) =>
                          A.split(/[\u2028\n]/).reduce(
                            (A, t) => (
                              A.push(
                                { name: 'span', value: t },
                                { name: 'br' }
                              ),
                              A
                            ),
                            []
                          )
                        )
                        .forEach((t) => {
                          A.children.push({ name: 'p', children: t });
                        }))
                    : /[\u2028\n]/.test(this[g1]) &&
                      ((A.name = 'div'),
                      (A.children = []),
                      this[g1].split(/[\u2028\n]/).forEach((t) => {
                        A.children.push(
                          { name: 'span', value: t },
                          { name: 'br' }
                        );
                      })),
                  r7.success(A)
                );
              }
              return this[g1][rZ](A);
            }
          }
          class I_ extends nR {
            constructor(A) {
              super(n7, 'textEdit', !0),
                (this.allowRichText = r1({
                  data: A.allowRichText,
                  defaultValue: 0,
                  validate: (A) => 1 === A,
                })),
                (this.hScrollPolicy = r3(A.hScrollPolicy, [
                  'auto',
                  'off',
                  'on',
                ])),
                (this.id = A.id || ''),
                (this.multiLine = r1({
                  data: A.multiLine,
                  defaultValue: '',
                  validate: (A) => 0 === A || 1 === A,
                })),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.vScrollPolicy = r3(A.vScrollPolicy, [
                  'auto',
                  'off',
                  'on',
                ])),
                (this.border = null),
                (this.comb = null),
                (this.extras = null),
                (this.margin = null);
            }
            [rZ](A) {
              let t;
              let i = nX(this, 'border', 'font', 'margin'),
                a = this[rI]()[rI]();
              return (
                '' === this.multiLine &&
                  (this.multiLine = a instanceof oV ? 1 : 0),
                (t =
                  1 === this.multiLine
                    ? {
                        name: 'textarea',
                        attributes: {
                          dataId: a[g2]?.[rV] || a[rV],
                          fieldId: a[rV],
                          class: ['xfaTextfield'],
                          style: i,
                          'aria-label': oI(a),
                          'aria-required': !1,
                        },
                      }
                    : {
                        name: 'input',
                        attributes: {
                          type: 'text',
                          dataId: a[g2]?.[rV] || a[rV],
                          fieldId: a[rV],
                          class: ['xfaTextfield'],
                          style: i,
                          'aria-label': oI(a),
                          'aria-required': !1,
                        },
                      }),
                or(a) &&
                  ((t.attributes['aria-required'] = !0),
                  (t.attributes.required = !0)),
                r7.success({
                  name: 'label',
                  attributes: { class: ['xfaLabel'] },
                  children: [t],
                })
              );
            }
          }
          class I$ extends nJ {
            constructor(A) {
              super(n7, 'time'),
                (this.id = A.id || ''),
                (this.name = A.name || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
            [g5]() {
              let A = this[g1].trim();
              this[g1] = A ? new Date(A) : null;
            }
            [rZ](A) {
              return ol(this[g1] ? this[g1].toString() : '');
            }
          }
          class I0 extends nR {
            constructor(A) {
              super(n7, 'timeStamp'),
                (this.id = A.id || ''),
                (this.server = A.server || ''),
                (this.type = r3(A.type, ['optional', 'required'])),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
          }
          class I1 extends nJ {
            constructor(A) {
              super(n7, 'toolTip'),
                (this.id = A.id || ''),
                (this.rid = A.rid || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
          }
          class I2 extends nR {
            constructor(A) {
              super(n7, 'traversal', !0),
                (this.id = A.id || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.extras = null),
                (this.traverse = new nG());
            }
          }
          class I9 extends nR {
            constructor(A) {
              super(n7, 'traverse', !0),
                (this.id = A.id || ''),
                (this.operation = r3(A.operation, [
                  'next',
                  'back',
                  'down',
                  'first',
                  'left',
                  'right',
                  'up',
                ])),
                (this.ref = A.ref || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.extras = null),
                (this.script = null);
            }
            get name() {
              return this.operation;
            }
            [rw]() {
              return !1;
            }
          }
          class I3 extends nR {
            constructor(A) {
              super(n7, 'ui', !0),
                (this.id = A.id || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.extras = null),
                (this.picture = null),
                (this.barcode = null),
                (this.button = null),
                (this.checkButton = null),
                (this.choiceList = null),
                (this.dateTimeEdit = null),
                (this.defaultUi = null),
                (this.imageEdit = null),
                (this.numericEdit = null),
                (this.passwordEdit = null),
                (this.signature = null),
                (this.textEdit = null);
            }
            [ra]() {
              if (void 0 === this[g3]) {
                for (let A of Object.getOwnPropertyNames(this)) {
                  if ('extras' === A || 'picture' === A) continue;
                  let t = this[A];
                  if (t instanceof nR) return (this[g3] = t), t;
                }
                this[g3] = null;
              }
              return this[g3];
            }
            [rZ](A) {
              let t = this[ra]();
              return t ? t[rZ](A) : r7.EMPTY;
            }
          }
          class I5 extends nR {
            constructor(A) {
              super(n7, 'validate', !0),
                (this.formatTest = r3(A.formatTest, [
                  'warning',
                  'disabled',
                  'error',
                ])),
                (this.id = A.id || ''),
                (this.nullTest = r3(A.nullTest, [
                  'disabled',
                  'error',
                  'warning',
                ])),
                (this.scriptTest = r3(A.scriptTest, [
                  'error',
                  'disabled',
                  'warning',
                ])),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.extras = null),
                (this.message = null),
                (this.picture = null),
                (this.script = null);
            }
          }
          class I8 extends nR {
            constructor(A) {
              super(n7, 'value', !0),
                (this.id = A.id || ''),
                (this.override = r1({
                  data: A.override,
                  defaultValue: 0,
                  validate: (A) => 1 === A,
                })),
                (this.relevant = r6(A.relevant)),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.arc = null),
                (this.boolean = null),
                (this.date = null),
                (this.dateTime = null),
                (this.decimal = null),
                (this.exData = null),
                (this.float = null),
                (this.image = null),
                (this.integer = null),
                (this.line = null),
                (this.rectangle = null),
                (this.text = null),
                (this.time = null);
            }
            [rq](A) {
              let t = this[rI]();
              if (t instanceof o4 && t.ui?.imageEdit) {
                this.image ||
                  ((this.image = new Image({})), this[gX](this.image)),
                  (this.image[g1] = A[g1]);
                return;
              }
              let i = A[rF];
              if (null === this[i]) {
                for (let A of Object.getOwnPropertyNames(this)) {
                  let t = this[A];
                  t instanceof nR && ((this[A] = null), this[rJ](t));
                }
                (this[A[rF]] = A), this[gX](A);
              } else this[i][g1] = A[g1];
            }
            [rP]() {
              if (this.exData)
                return 'string' == typeof this.exData[g1]
                  ? this.exData[g1].trim()
                  : this.exData[g1][rP]().trim();
              for (let A of Object.getOwnPropertyNames(this)) {
                if ('image' === A) continue;
                let t = this[A];
                if (t instanceof nR) return (t[g1] || '').toString().trim();
              }
              return null;
            }
            [rZ](A) {
              for (let t of Object.getOwnPropertyNames(this)) {
                let i = this[t];
                if (i instanceof nR) return i[rZ](A);
              }
              return r7.EMPTY;
            }
          }
          class I6 extends nR {
            constructor(A) {
              super(n7, 'variables', !0),
                (this.id = A.id || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || ''),
                (this.boolean = new nG()),
                (this.date = new nG()),
                (this.dateTime = new nG()),
                (this.decimal = new nG()),
                (this.exData = new nG()),
                (this.float = new nG()),
                (this.image = new nG()),
                (this.integer = new nG()),
                (this.manifest = new nG()),
                (this.script = new nG()),
                (this.text = new nG()),
                (this.time = new nG());
            }
            [rw]() {
              return !0;
            }
          }
          class I7 {
            static [rj](A, t) {
              if (I7.hasOwnProperty(A)) {
                let i = I7[A](t);
                return i[rv](t), i;
              }
            }
            static appearanceFilter(A) {
              return new oc(A);
            }
            static arc(A) {
              return new oE(A);
            }
            static area(A) {
              return new ou(A);
            }
            static assist(A) {
              return new od(A);
            }
            static barcode(A) {
              return new of(A);
            }
            static bind(A) {
              return new op(A);
            }
            static bindItems(A) {
              return new om(A);
            }
            static bookend(A) {
              return new oy(A);
            }
            static boolean(A) {
              return new ow(A);
            }
            static border(A) {
              return new oD(A);
            }
            static break(A) {
              return new ob(A);
            }
            static breakAfter(A) {
              return new ok(A);
            }
            static breakBefore(A) {
              return new oF(A);
            }
            static button(A) {
              return new oS(A);
            }
            static calculate(A) {
              return new oR(A);
            }
            static caption(A) {
              return new oG(A);
            }
            static certificate(A) {
              return new oN(A);
            }
            static certificates(A) {
              return new ox(A);
            }
            static checkButton(A) {
              return new oU(A);
            }
            static choiceList(A) {
              return new oM(A);
            }
            static color(A) {
              return new oJ(A);
            }
            static comb(A) {
              return new oL(A);
            }
            static connect(A) {
              return new oH(A);
            }
            static contentArea(A) {
              return new oY(A);
            }
            static corner(A) {
              return new oK(A);
            }
            static date(A) {
              return new ov(A);
            }
            static dateTime(A) {
              return new oq(A);
            }
            static dateTimeEdit(A) {
              return new oT(A);
            }
            static decimal(A) {
              return new oP(A);
            }
            static defaultUi(A) {
              return new oW(A);
            }
            static desc(A) {
              return new oZ(A);
            }
            static digestMethod(A) {
              return new oO(A);
            }
            static digestMethods(A) {
              return new oX(A);
            }
            static draw(A) {
              return new oV(A);
            }
            static edge(A) {
              return new oj(A);
            }
            static encoding(A) {
              return new oz(A);
            }
            static encodings(A) {
              return new o_(A);
            }
            static encrypt(A) {
              return new o$(A);
            }
            static encryptData(A) {
              return new o0(A);
            }
            static encryption(A) {
              return new o1(A);
            }
            static encryptionMethod(A) {
              return new o2(A);
            }
            static encryptionMethods(A) {
              return new o9(A);
            }
            static event(A) {
              return new Event(A);
            }
            static exData(A) {
              return new o3(A);
            }
            static exObject(A) {
              return new o5(A);
            }
            static exclGroup(A) {
              return new o8(A);
            }
            static execute(A) {
              return new o6(A);
            }
            static extras(A) {
              return new o7(A);
            }
            static field(A) {
              return new o4(A);
            }
            static fill(A) {
              return new IA(A);
            }
            static filter(A) {
              return new Ie(A);
            }
            static float(A) {
              return new It(A);
            }
            static font(A) {
              return new Ii(A);
            }
            static format(A) {
              return new Ia(A);
            }
            static handler(A) {
              return new Is(A);
            }
            static hyphenation(A) {
              return new Ig(A);
            }
            static image(A) {
              return new Image(A);
            }
            static imageEdit(A) {
              return new Ir(A);
            }
            static integer(A) {
              return new In(A);
            }
            static issuers(A) {
              return new Io(A);
            }
            static items(A) {
              return new II(A);
            }
            static keep(A) {
              return new Il(A);
            }
            static keyUsage(A) {
              return new IC(A);
            }
            static line(A) {
              return new IB(A);
            }
            static linear(A) {
              return new Ih(A);
            }
            static lockDocument(A) {
              return new IQ(A);
            }
            static manifest(A) {
              return new Ic(A);
            }
            static margin(A) {
              return new IE(A);
            }
            static mdp(A) {
              return new Iu(A);
            }
            static medium(A) {
              return new Id(A);
            }
            static message(A) {
              return new If(A);
            }
            static numericEdit(A) {
              return new Ip(A);
            }
            static occur(A) {
              return new Im(A);
            }
            static oid(A) {
              return new Iy(A);
            }
            static oids(A) {
              return new Iw(A);
            }
            static overflow(A) {
              return new ID(A);
            }
            static pageArea(A) {
              return new Ib(A);
            }
            static pageSet(A) {
              return new Ik(A);
            }
            static para(A) {
              return new IF(A);
            }
            static passwordEdit(A) {
              return new IS(A);
            }
            static pattern(A) {
              return new IR(A);
            }
            static picture(A) {
              return new IG(A);
            }
            static proto(A) {
              return new IN(A);
            }
            static radial(A) {
              return new Ix(A);
            }
            static reason(A) {
              return new IU(A);
            }
            static reasons(A) {
              return new IM(A);
            }
            static rectangle(A) {
              return new IJ(A);
            }
            static ref(A) {
              return new IL(A);
            }
            static script(A) {
              return new IH(A);
            }
            static setProperty(A) {
              return new IY(A);
            }
            static signData(A) {
              return new IK(A);
            }
            static signature(A) {
              return new Iv(A);
            }
            static signing(A) {
              return new Iq(A);
            }
            static solid(A) {
              return new IT(A);
            }
            static speak(A) {
              return new IP(A);
            }
            static stipple(A) {
              return new IW(A);
            }
            static subform(A) {
              return new IZ(A);
            }
            static subformSet(A) {
              return new IO(A);
            }
            static subjectDN(A) {
              return new IX(A);
            }
            static subjectDNs(A) {
              return new IV(A);
            }
            static submit(A) {
              return new Ij(A);
            }
            static template(A) {
              return new Iz(A);
            }
            static text(A) {
              return new Text(A);
            }
            static textEdit(A) {
              return new I_(A);
            }
            static time(A) {
              return new I$(A);
            }
            static timeStamp(A) {
              return new I0(A);
            }
            static toolTip(A) {
              return new I1(A);
            }
            static traversal(A) {
              return new I2(A);
            }
            static traverse(A) {
              return new I9(A);
            }
            static ui(A) {
              return new I3(A);
            }
            static validate(A) {
              return new I5(A);
            }
            static value(A) {
              return new I8(A);
            }
            static variables(A) {
              return new I6(A);
            }
          }
          let I4 = rz.datasets.id;
          function lA(A) {
            let t = new Text({});
            return (t[g1] = A), t;
          }
          class le {
            constructor(A) {
              (this.root = A),
                (this.datasets = A.datasets),
                (this.data =
                  A.datasets?.data || new nx(rz.datasets.id, 'data')),
                (this.emptyMerge = 0 === this.data[rg]().length),
                (this.root.form = this.form = A.template[g$]());
            }
            _isConsumeData() {
              return !this.emptyMerge && this._mergeMode;
            }
            _isMatchTemplate() {
              return !this._isConsumeData();
            }
            bind() {
              return this._bindElement(this.form, this.data), this.form;
            }
            getData() {
              return this.data;
            }
            _bindValue(A, t, i) {
              if (((A[g2] = t), A[rB]())) {
                if (t[rd]()) {
                  let i = t[ri]();
                  A[rq](lA(i));
                } else if (
                  A instanceof o4 &&
                  'multiSelect' === A.ui?.choiceList?.open
                ) {
                  let i = t[rg]()
                    .map((A) => A[g1].trim())
                    .join('\n');
                  A[rq](lA(i));
                } else
                  this._isConsumeData() &&
                    m("XFA - Nodes haven't the same type.");
              } else
                !t[rd]() || this._isMatchTemplate()
                  ? this._bindElement(A, t)
                  : m("XFA - Nodes haven't the same type.");
            }
            _findDataByNameToConsume(A, t, i, a) {
              let s, g;
              if (!A) return null;
              for (let a = 0; a < 3; a++) {
                for (s = i[rs](A, !1, !0); (g = s.next().value); )
                  if (t === g[rd]()) return g;
                if (i[rk] === rz.datasets.id && 'data' === i[rF]) break;
                i = i[rI]();
              }
              return a
                ? (g = (s = this.data[rs](A, !0, !1)).next().value)
                  ? g
                  : ((g = (s = this.data[g6](A, !0)).next().value),
                    g?.[rd]() ? g : null)
                : null;
            }
            _setProperties(A, t) {
              if (A.hasOwnProperty('setProperty'))
                for (let { ref: i, target: a, connection: s } of A.setProperty
                  .children) {
                  if (s || !i) continue;
                  let g = nI(this.root, t, i, !1, !1);
                  if (!g) {
                    m(`XFA - Invalid reference: ${i}.`);
                    continue;
                  }
                  let [r] = g;
                  if (!r[rf](this.data)) {
                    m('XFA - Invalid node: must be a data node.');
                    continue;
                  }
                  let n = nI(this.root, A, a, !1, !1);
                  if (!n) {
                    m(`XFA - Invalid target: ${a}.`);
                    continue;
                  }
                  let [o] = n;
                  if (!o[rf](A)) {
                    m(
                      'XFA - Invalid target: must be a property or subproperty.'
                    );
                    continue;
                  }
                  let I = o[rI]();
                  if (o instanceof IY || I instanceof IY) {
                    m(
                      'XFA - Invalid target: cannot be a setProperty or one of its properties.'
                    );
                    continue;
                  }
                  if (o instanceof om || I instanceof om) {
                    m(
                      'XFA - Invalid target: cannot be a bindItems or one of its properties.'
                    );
                    continue;
                  }
                  let l = r[rP](),
                    C = o[rF];
                  if (o instanceof nN) {
                    let A = Object.create(null);
                    A[C] = l;
                    let t = Reflect.construct(
                      Object.getPrototypeOf(I).constructor,
                      [A]
                    );
                    I[C] = t[C];
                  } else
                    o.hasOwnProperty(g1)
                      ? ((o[g2] = r), (o[g1] = l), o[g5]())
                      : m('XFA - Invalid node to use in setProperty');
                }
            }
            _bindItems(A, t) {
              if (
                !A.hasOwnProperty('items') ||
                !A.hasOwnProperty('bindItems') ||
                A.bindItems.isEmpty()
              )
                return;
              for (let t of A.items.children) A[rJ](t);
              A.items.clear();
              let i = new II({}),
                a = new II({});
              for (let {
                ref: s,
                labelRef: g,
                valueRef: r,
                connection: n,
              } of (A[gX](i),
              A.items.push(i),
              A[gX](a),
              A.items.push(a),
              A.bindItems.children)) {
                if (n || !s) continue;
                let A = nI(this.root, t, s, !1, !1);
                if (A)
                  for (let t of A) {
                    if (!t[rf](this.datasets)) {
                      m(`XFA - Invalid ref (${s}): must be a datasets child.`);
                      continue;
                    }
                    let A = nI(this.root, t, g, !0, !1);
                    if (!A) {
                      m(`XFA - Invalid label: ${g}.`);
                      continue;
                    }
                    let [n] = A;
                    if (!n[rf](this.datasets)) {
                      m('XFA - Invalid label: must be a datasets child.');
                      continue;
                    }
                    let o = nI(this.root, t, r, !0, !1);
                    if (!o) {
                      m(`XFA - Invalid value: ${r}.`);
                      continue;
                    }
                    let [I] = o;
                    if (!I[rf](this.datasets)) {
                      m('XFA - Invalid value: must be a datasets child.');
                      continue;
                    }
                    let l = lA(n[rP]()),
                      C = lA(I[rP]());
                    i[gX](l), i.text.push(l), a[gX](C), a.text.push(C);
                  }
                else m(`XFA - Invalid reference: ${s}.`);
              }
            }
            _bindOccurrences(A, t, i) {
              let a;
              if (
                (t.length > 1 && ((a = A[g$]())[rJ](a.occur), (a.occur = null)),
                this._bindValue(A, t[0], i),
                this._setProperties(A, t[0]),
                this._bindItems(A, t[0]),
                1 === t.length)
              )
                return;
              let s = A[rI](),
                g = A[rF],
                r = s[rQ](A);
              for (let A = 1, n = t.length; A < n; A++) {
                let n = t[A],
                  o = a[g$]();
                s[g].push(o),
                  s[rc](r + A, o),
                  this._bindValue(o, n, i),
                  this._setProperties(o, n),
                  this._bindItems(o, n);
              }
            }
            _createOccurrences(A) {
              let t;
              if (!this.emptyMerge) return;
              let { occur: i } = A;
              if (!i || i.initial <= 1) return;
              let a = A[rI](),
                s = A[rF];
              if (!(a[s] instanceof nG)) return;
              t = A.name
                ? a[s].children.filter((t) => t.name === A.name).length
                : a[s].children.length;
              let g = a[rQ](A) + 1,
                r = i.initial - t;
              if (r) {
                let t = A[g$]();
                t[rJ](t.occur), (t.occur = null), a[s].push(t), a[rc](g, t);
                for (let A = 1; A < r; A++) {
                  let i = t[g$]();
                  a[s].push(i), a[rc](g + A, i);
                }
              }
            }
            _getOccurInfo(A) {
              let { name: t, occur: i } = A;
              if (!i || !t) return [1, 1];
              let a = -1 === i.max ? 1 / 0 : i.max;
              return [i.min, a];
            }
            _setAndBind(A, t) {
              this._setProperties(A, t),
                this._bindItems(A, t),
                this._bindElement(A, t);
            }
            _bindElement(A, t) {
              let i = [];
              for (let a of (this._createOccurrences(A), A[rg]())) {
                if (a[g2]) continue;
                if (void 0 === this._mergeMode && 'subform' === a[rF]) {
                  this._mergeMode = 'consumeData' === a.mergeMode;
                  let A = t[rg]();
                  if (A.length > 0) this._bindOccurrences(a, [A[0]], null);
                  else if (this.emptyMerge) {
                    let A = t[rk] === I4 ? -1 : t[rk],
                      i = (a[g2] = new nx(A, a.name || 'root'));
                    t[gX](i), this._bindElement(a, i);
                  }
                  continue;
                }
                if (!a[ru]()) continue;
                let A = !1,
                  s = null,
                  g = null,
                  r = null;
                if (a.bind) {
                  switch (a.bind.match) {
                    case 'none':
                      this._setAndBind(a, t);
                      continue;
                    case 'global':
                      A = !0;
                      break;
                    case 'dataRef':
                      if (!a.bind.ref) {
                        m(`XFA - ref is empty in node ${a[rF]}.`),
                          this._setAndBind(a, t);
                        continue;
                      }
                      g = a.bind.ref;
                  }
                  a.bind.picture && (s = a.bind.picture[g1]);
                }
                let [n, o] = this._getOccurInfo(a);
                if (g) {
                  if (null === (r = nI(this.root, t, g, !0, !1))) {
                    if (
                      !(r = (function (A, t, i) {
                        let a = no(i);
                        if (!a || a.some((A) => A.operator === ng.dotDot))
                          return null;
                        let s = nr.get(a[0].name),
                          g = 0;
                        s ? ((A = s(A, t)), (g = 1)) : (A = t || A);
                        for (let t = a.length; g < t; g++) {
                          let t;
                          let { name: i, operator: s, index: r } = a[g];
                          if (!isFinite(r))
                            return (a[g].index = 0), A.createNodes(a.slice(g));
                          switch (s) {
                            case ng.dot:
                              t = A[re](i, !1);
                              break;
                            case ng.dotDot:
                              t = A[re](i, !0);
                              break;
                            case ng.dotHash:
                              t = (t = A[rA](i)).isXFAObjectArray
                                ? t.children
                                : [t];
                          }
                          if (0 === t.length) return A.createNodes(a.slice(g));
                          if (!(r < t.length))
                            return (
                              (a[g].index = r - t.length),
                              A.createNodes(a.slice(g))
                            );
                          {
                            let i = t[r];
                            if (!i.isXFAObject)
                              return m('XFA - Cannot create a node.'), null;
                            A = i;
                          }
                        }
                        return null;
                      })(this.data, t, g))
                    )
                      continue;
                    this._isConsumeData() && (r[g0] = !0),
                      this._setAndBind(a, r);
                    continue;
                  }
                  this._isConsumeData() && (r = r.filter((A) => !A[g0])),
                    r.length > o
                      ? (r = r.slice(0, o))
                      : 0 === r.length && (r = null),
                    r &&
                      this._isConsumeData() &&
                      r.forEach((A) => {
                        A[g0] = !0;
                      });
                } else {
                  if (!a.name) {
                    this._setAndBind(a, t);
                    continue;
                  }
                  if (this._isConsumeData()) {
                    let i = [];
                    for (; i.length < o; ) {
                      let s = this._findDataByNameToConsume(
                        a.name,
                        a[rB](),
                        t,
                        A
                      );
                      if (!s) break;
                      (s[g0] = !0), i.push(s);
                    }
                    r = i.length > 0 ? i : null;
                  } else {
                    if (
                      !(r = t[rs](a.name, !1, this.emptyMerge).next().value)
                    ) {
                      if (0 === n) {
                        i.push(a);
                        continue;
                      }
                      let A = t[rk] === I4 ? -1 : t[rk];
                      (r = a[g2] = new nx(A, a.name)),
                        this.emptyMerge && (r[g0] = !0),
                        t[gX](r),
                        this._setAndBind(a, r);
                      continue;
                    }
                    this.emptyMerge && (r[g0] = !0), (r = [r]);
                  }
                }
                r
                  ? this._bindOccurrences(a, r, s)
                  : n > 0
                    ? this._setAndBind(a, t)
                    : i.push(a);
              }
              i.forEach((A) => A[rI]()[rJ](A));
            }
          }
          class lt {
            constructor(A, t) {
              (this.data = t), (this.dataset = A.datasets || null);
            }
            serialize(A) {
              let t = [[-1, this.data[rg]()]];
              for (; t.length > 0; ) {
                let i = t.at(-1),
                  [a, s] = i;
                if (a + 1 === s.length) {
                  t.pop();
                  continue;
                }
                let g = s[++i[0]],
                  r = A.get(g[rV]);
                if (r) g[rq](r);
                else {
                  let t = g[g7]();
                  for (let i of t.values()) {
                    let t = A.get(i[rV]);
                    if (t) {
                      i[rq](t);
                      break;
                    }
                  }
                }
                let n = g[rg]();
                n.length > 0 && t.push([-1, n]);
              }
              let i = [
                '<xfa:datasets xmlns:xfa="http://www.xfa.org/schema/xfa-data/1.0/">',
              ];
              if (this.dataset)
                for (let A of this.dataset[rg]()) 'data' !== A[rF] && A[rO](i);
              return this.data[rO](i), i.push('</xfa:datasets>'), i.join('');
            }
          }
          let li = rz.config.id;
          class la extends nR {
            constructor(A) {
              super(li, 'acrobat', !0),
                (this.acrobat7 = null),
                (this.autoSave = null),
                (this.common = null),
                (this.validate = null),
                (this.validateApprovalSignatures = null),
                (this.submitUrl = new nG());
            }
          }
          class ls extends nR {
            constructor(A) {
              super(li, 'acrobat7', !0), (this.dynamicRender = null);
            }
          }
          class lg extends nM {
            constructor(A) {
              super(li, 'ADBE_JSConsole', ['delegate', 'Enable', 'Disable']);
            }
          }
          class lr extends nM {
            constructor(A) {
              super(li, 'ADBE_JSDebugger', ['delegate', 'Enable', 'Disable']);
            }
          }
          class ln extends nH {
            constructor(A) {
              super(li, 'addSilentPrint');
            }
          }
          class lo extends nH {
            constructor(A) {
              super(li, 'addViewerPreferences');
            }
          }
          class lI extends nY {
            constructor(A) {
              super(li, 'adjustData');
            }
          }
          class ll extends nL {
            constructor(A) {
              super(li, 'adobeExtensionLevel', 0, (A) => A >= 1 && A <= 8);
            }
          }
          class lC extends nR {
            constructor(A) {
              super(li, 'agent', !0),
                (this.name = A.name ? A.name.trim() : ''),
                (this.common = new nG());
            }
          }
          class lB extends nU {
            constructor(A) {
              super(li, 'alwaysEmbed');
            }
          }
          class lh extends nJ {
            constructor(A) {
              super(li, 'amd');
            }
          }
          class lQ extends nR {
            constructor(A) {
              super(li, 'area'),
                (this.level = r1({
                  data: A.level,
                  defaultValue: 0,
                  validate: (A) => A >= 1 && A <= 3,
                })),
                (this.name = r3(A.name, [
                  '',
                  'barcode',
                  'coreinit',
                  'deviceDriver',
                  'font',
                  'general',
                  'layout',
                  'merge',
                  'script',
                  'signature',
                  'sourceSet',
                  'templateCache',
                ]));
            }
          }
          class lc extends nM {
            constructor(A) {
              super(li, 'attributes', ['preserve', 'delegate', 'ignore']);
            }
          }
          class lE extends nM {
            constructor(A) {
              super(li, 'autoSave', ['disabled', 'enabled']);
            }
          }
          class lu extends nJ {
            constructor(A) {
              super(li, 'base');
            }
          }
          class ld extends nR {
            constructor(A) {
              super(li, 'batchOutput'),
                (this.format = r3(A.format, [
                  'none',
                  'concat',
                  'zip',
                  'zipCompress',
                ]));
            }
          }
          class lf extends nU {
            constructor(A) {
              super(li, 'behaviorOverride');
            }
            [g5]() {
              this[g1] = new Map(
                this[g1]
                  .trim()
                  .split(/\s+/)
                  .filter((A) => A.includes(':'))
                  .map((A) => A.split(':', 2))
              );
            }
          }
          class Cache extends nR {
            constructor(A) {
              super(li, 'cache', !0), (this.templateCache = null);
            }
          }
          class lp extends nH {
            constructor(A) {
              super(li, 'change');
            }
          }
          class lm extends nR {
            constructor(A) {
              super(li, 'common', !0),
                (this.data = null),
                (this.locale = null),
                (this.localeSet = null),
                (this.messaging = null),
                (this.suppressBanner = null),
                (this.template = null),
                (this.validationMessaging = null),
                (this.versionControl = null),
                (this.log = new nG());
            }
          }
          class ly extends nR {
            constructor(A) {
              super(li, 'compress'),
                (this.scope = r3(A.scope, ['imageOnly', 'document']));
            }
          }
          class lw extends nH {
            constructor(A) {
              super(li, 'compressLogicalStructure');
            }
          }
          class lD extends nY {
            constructor(A) {
              super(li, 'compressObjectStream');
            }
          }
          class lb extends nR {
            constructor(A) {
              super(li, 'compression', !0),
                (this.compressLogicalStructure = null),
                (this.compressObjectStream = null),
                (this.level = null),
                (this.type = null);
            }
          }
          class lk extends nR {
            constructor(A) {
              super(li, 'config', !0),
                (this.acrobat = null),
                (this.present = null),
                (this.trace = null),
                (this.agent = new nG());
            }
          }
          class lF extends nM {
            constructor(A) {
              super(li, 'conformance', ['A', 'B']);
            }
          }
          class lS extends nH {
            constructor(A) {
              super(li, 'contentCopy');
            }
          }
          class lR extends nL {
            constructor(A) {
              super(li, 'copies', 1, (A) => A >= 1);
            }
          }
          class lG extends nJ {
            constructor(A) {
              super(li, 'creator');
            }
          }
          class lN extends nL {
            constructor(A) {
              super(li, 'currentPage', 0, (A) => A >= 0);
            }
          }
          class lx extends nR {
            constructor(A) {
              super(li, 'data', !0),
                (this.adjustData = null),
                (this.attributes = null),
                (this.incrementalLoad = null),
                (this.outputXSL = null),
                (this.range = null),
                (this.record = null),
                (this.startNode = null),
                (this.uri = null),
                (this.window = null),
                (this.xsl = null),
                (this.excludeNS = new nG()),
                (this.transform = new nG());
            }
          }
          class lU extends nR {
            constructor(A) {
              super(li, 'debug', !0), (this.uri = null);
            }
          }
          class lM extends nU {
            constructor(A) {
              super(li, 'defaultTypeface'),
                (this.writingScript = r3(A.writingScript, [
                  '*',
                  'Arabic',
                  'Cyrillic',
                  'EastEuropeanRoman',
                  'Greek',
                  'Hebrew',
                  'Japanese',
                  'Korean',
                  'Roman',
                  'SimplifiedChinese',
                  'Thai',
                  'TraditionalChinese',
                  'Vietnamese',
                ]));
            }
          }
          class lJ extends nM {
            constructor(A) {
              super(li, 'destination', [
                'pdf',
                'pcl',
                'ps',
                'webClient',
                'zpl',
              ]);
            }
          }
          class lL extends nH {
            constructor(A) {
              super(li, 'documentAssembly');
            }
          }
          class lH extends nR {
            constructor(A) {
              super(li, 'driver', !0),
                (this.name = A.name ? A.name.trim() : ''),
                (this.fontInfo = null),
                (this.xdc = null);
            }
          }
          class lY extends nM {
            constructor(A) {
              super(li, 'duplexOption', [
                'simplex',
                'duplexFlipLongEdge',
                'duplexFlipShortEdge',
              ]);
            }
          }
          class lK extends nM {
            constructor(A) {
              super(li, 'dynamicRender', ['forbidden', 'required']);
            }
          }
          class lv extends nH {
            constructor(A) {
              super(li, 'embed');
            }
          }
          class lq extends nH {
            constructor(A) {
              super(li, 'encrypt');
            }
          }
          class lT extends nR {
            constructor(A) {
              super(li, 'encryption', !0),
                (this.encrypt = null),
                (this.encryptionLevel = null),
                (this.permissions = null);
            }
          }
          class lP extends nM {
            constructor(A) {
              super(li, 'encryptionLevel', ['40bit', '128bit']);
            }
          }
          class lW extends nJ {
            constructor(A) {
              super(li, 'enforce');
            }
          }
          class lZ extends nR {
            constructor(A) {
              super(li, 'equate'),
                (this.force = r1({
                  data: A.force,
                  defaultValue: 1,
                  validate: (A) => 0 === A,
                })),
                (this.from = A.from || ''),
                (this.to = A.to || '');
            }
          }
          class lO extends nR {
            constructor(A) {
              super(li, 'equateRange'),
                (this.from = A.from || ''),
                (this.to = A.to || ''),
                (this._unicodeRange = A.unicodeRange || '');
            }
            get unicodeRange() {
              let A = [],
                t = /U\+([0-9a-fA-F]+)/,
                i = this._unicodeRange;
              for (let a of i
                .split(',')
                .map((A) => A.trim())
                .filter((A) => !!A))
                1 ===
                  (a = a.split('-', 2).map((A) => {
                    let i = A.match(t);
                    return i ? parseInt(i[1], 16) : 0;
                  })).length && a.push(a[0]),
                  A.push(a);
              return b(this, 'unicodeRange', A);
            }
          }
          class lX extends nU {
            constructor(A) {
              super(li, 'exclude');
            }
            [g5]() {
              this[g1] = this[g1]
                .trim()
                .split(/\s+/)
                .filter(
                  (A) =>
                    A &&
                    [
                      'calculate',
                      'close',
                      'enter',
                      'exit',
                      'initialize',
                      'ready',
                      'validate',
                    ].includes(A)
                );
            }
          }
          class lV extends nJ {
            constructor(A) {
              super(li, 'excludeNS');
            }
          }
          class lj extends nM {
            constructor(A) {
              super(li, 'flipLabel', ['usePrinterSetting', 'on', 'off']);
            }
          }
          class lz extends nR {
            constructor(A) {
              super(li, 'fontInfo', !0),
                (this.embed = null),
                (this.map = null),
                (this.subsetBelow = null),
                (this.alwaysEmbed = new nG()),
                (this.defaultTypeface = new nG()),
                (this.neverEmbed = new nG());
            }
          }
          class l_ extends nH {
            constructor(A) {
              super(li, 'formFieldFilling');
            }
          }
          class l$ extends nJ {
            constructor(A) {
              super(li, 'groupParent');
            }
          }
          class l0 extends nM {
            constructor(A) {
              super(li, 'ifEmpty', [
                'dataValue',
                'dataGroup',
                'ignore',
                'remove',
              ]);
            }
          }
          class l1 extends nJ {
            constructor(A) {
              super(li, 'includeXDPContent');
            }
          }
          class l2 extends nM {
            constructor(A) {
              super(li, 'incrementalLoad', ['none', 'forwardOnly']);
            }
          }
          class l9 extends nH {
            constructor(A) {
              super(li, 'incrementalMerge');
            }
          }
          class l3 extends nH {
            constructor(A) {
              super(li, 'interactive');
            }
          }
          class l5 extends nM {
            constructor(A) {
              super(li, 'jog', ['usePrinterSetting', 'none', 'pageSet']);
            }
          }
          class l8 extends nR {
            constructor(A) {
              super(li, 'labelPrinter', !0),
                (this.name = r3(A.name, ['zpl', 'dpl', 'ipl', 'tcpl'])),
                (this.batchOutput = null),
                (this.flipLabel = null),
                (this.fontInfo = null),
                (this.xdc = null);
            }
          }
          class l6 extends nM {
            constructor(A) {
              super(li, 'layout', ['paginate', 'panel']);
            }
          }
          class l7 extends nL {
            constructor(A) {
              super(li, 'level', 0, (A) => A > 0);
            }
          }
          class l4 extends nH {
            constructor(A) {
              super(li, 'linearized');
            }
          }
          class CA extends nJ {
            constructor(A) {
              super(li, 'locale');
            }
          }
          class Ce extends nJ {
            constructor(A) {
              super(li, 'localeSet');
            }
          }
          class Ct extends nR {
            constructor(A) {
              super(li, 'log', !0),
                (this.mode = null),
                (this.threshold = null),
                (this.to = null),
                (this.uri = null);
            }
          }
          class Ci extends nR {
            constructor(A) {
              super(li, 'map', !0),
                (this.equate = new nG()),
                (this.equateRange = new nG());
            }
          }
          class Ca extends nR {
            constructor(A) {
              super(li, 'mediumInfo', !0), (this.map = null);
            }
          }
          class Cs extends nR {
            constructor(A) {
              super(li, 'message', !0),
                (this.msgId = null),
                (this.severity = null);
            }
          }
          class Cg extends nR {
            constructor(A) {
              super(li, 'messaging', !0), (this.message = new nG());
            }
          }
          class Cr extends nM {
            constructor(A) {
              super(li, 'mode', ['append', 'overwrite']);
            }
          }
          class Cn extends nH {
            constructor(A) {
              super(li, 'modifyAnnots');
            }
          }
          class Co extends nL {
            constructor(A) {
              super(li, 'msgId', 1, (A) => A >= 1);
            }
          }
          class CI extends nJ {
            constructor(A) {
              super(li, 'nameAttr');
            }
          }
          class Cl extends nU {
            constructor(A) {
              super(li, 'neverEmbed');
            }
          }
          class CC extends nL {
            constructor(A) {
              super(li, 'numberOfCopies', null, (A) => A >= 2 && A <= 5);
            }
          }
          class CB extends nR {
            constructor(A) {
              super(li, 'openAction', !0), (this.destination = null);
            }
          }
          class Ch extends nR {
            constructor(A) {
              super(li, 'output', !0),
                (this.to = null),
                (this.type = null),
                (this.uri = null);
            }
          }
          class CQ extends nJ {
            constructor(A) {
              super(li, 'outputBin');
            }
          }
          class Cc extends nR {
            constructor(A) {
              super(li, 'outputXSL', !0), (this.uri = null);
            }
          }
          class CE extends nM {
            constructor(A) {
              super(li, 'overprint', ['none', 'both', 'draw', 'field']);
            }
          }
          class Cu extends nJ {
            constructor(A) {
              super(li, 'packets');
            }
            [g5]() {
              '*' !== this[g1] &&
                (this[g1] = this[g1]
                  .trim()
                  .split(/\s+/)
                  .filter((A) =>
                    ['config', 'datasets', 'template', 'xfdf', 'xslt'].includes(
                      A
                    )
                  ));
            }
          }
          class Cd extends nR {
            constructor(A) {
              super(li, 'pageOffset'),
                (this.x = r1({
                  data: A.x,
                  defaultValue: 'useXDCSetting',
                  validate: (A) => !0,
                })),
                (this.y = r1({
                  data: A.y,
                  defaultValue: 'useXDCSetting',
                  validate: (A) => !0,
                }));
            }
          }
          class Cf extends nJ {
            constructor(A) {
              super(li, 'pageRange');
            }
            [g5]() {
              let A = this[g1]
                  .trim()
                  .split(/\s+/)
                  .map((A) => parseInt(A, 10)),
                t = [];
              for (let i = 0, a = A.length; i < a; i += 2)
                t.push(A.slice(i, i + 2));
              this[g1] = t;
            }
          }
          class Cp extends nM {
            constructor(A) {
              super(li, 'pagination', [
                'simplex',
                'duplexShortEdge',
                'duplexLongEdge',
              ]);
            }
          }
          class Cm extends nM {
            constructor(A) {
              super(li, 'paginationOverride', [
                'none',
                'forceDuplex',
                'forceDuplexLongEdge',
                'forceDuplexShortEdge',
                'forceSimplex',
              ]);
            }
          }
          class Cy extends nL {
            constructor(A) {
              super(li, 'part', 1, (A) => !1);
            }
          }
          class Cw extends nR {
            constructor(A) {
              super(li, 'pcl', !0),
                (this.name = A.name || ''),
                (this.batchOutput = null),
                (this.fontInfo = null),
                (this.jog = null),
                (this.mediumInfo = null),
                (this.outputBin = null),
                (this.pageOffset = null),
                (this.staple = null),
                (this.xdc = null);
            }
          }
          class CD extends nR {
            constructor(A) {
              super(li, 'pdf', !0),
                (this.name = A.name || ''),
                (this.adobeExtensionLevel = null),
                (this.batchOutput = null),
                (this.compression = null),
                (this.creator = null),
                (this.encryption = null),
                (this.fontInfo = null),
                (this.interactive = null),
                (this.linearized = null),
                (this.openAction = null),
                (this.pdfa = null),
                (this.producer = null),
                (this.renderPolicy = null),
                (this.scriptModel = null),
                (this.silentPrint = null),
                (this.submitFormat = null),
                (this.tagged = null),
                (this.version = null),
                (this.viewerPreferences = null),
                (this.xdc = null);
            }
          }
          class Cb extends nR {
            constructor(A) {
              super(li, 'pdfa', !0),
                (this.amd = null),
                (this.conformance = null),
                (this.includeXDPContent = null),
                (this.part = null);
            }
          }
          class Permissions extends nR {
            constructor(A) {
              super(li, 'permissions', !0),
                (this.accessibleContent = null),
                (this.change = null),
                (this.contentCopy = null),
                (this.documentAssembly = null),
                (this.formFieldFilling = null),
                (this.modifyAnnots = null),
                (this.plaintextMetadata = null),
                (this.print = null),
                (this.printHighQuality = null);
            }
          }
          class Ck extends nH {
            constructor(A) {
              super(li, 'pickTrayByPDFSize');
            }
          }
          class CF extends nJ {
            constructor(A) {
              super(li, 'picture');
            }
          }
          class CS extends nH {
            constructor(A) {
              super(li, 'plaintextMetadata');
            }
          }
          class CR extends nM {
            constructor(A) {
              super(li, 'presence', [
                'preserve',
                'dissolve',
                'dissolveStructure',
                'ignore',
                'remove',
              ]);
            }
          }
          class CG extends nR {
            constructor(A) {
              super(li, 'present', !0),
                (this.behaviorOverride = null),
                (this.cache = null),
                (this.common = null),
                (this.copies = null),
                (this.destination = null),
                (this.incrementalMerge = null),
                (this.layout = null),
                (this.output = null),
                (this.overprint = null),
                (this.pagination = null),
                (this.paginationOverride = null),
                (this.script = null),
                (this.validate = null),
                (this.xdp = null),
                (this.driver = new nG()),
                (this.labelPrinter = new nG()),
                (this.pcl = new nG()),
                (this.pdf = new nG()),
                (this.ps = new nG()),
                (this.submitUrl = new nG()),
                (this.webClient = new nG()),
                (this.zpl = new nG());
            }
          }
          class CN extends nH {
            constructor(A) {
              super(li, 'print');
            }
          }
          class Cx extends nH {
            constructor(A) {
              super(li, 'printHighQuality');
            }
          }
          class CU extends nM {
            constructor(A) {
              super(li, 'printScaling', ['appdefault', 'noScaling']);
            }
          }
          class CM extends nJ {
            constructor(A) {
              super(li, 'printerName');
            }
          }
          class CJ extends nJ {
            constructor(A) {
              super(li, 'producer');
            }
          }
          class CL extends nR {
            constructor(A) {
              super(li, 'ps', !0),
                (this.name = A.name || ''),
                (this.batchOutput = null),
                (this.fontInfo = null),
                (this.jog = null),
                (this.mediumInfo = null),
                (this.outputBin = null),
                (this.staple = null),
                (this.xdc = null);
            }
          }
          class Range extends nU {
            constructor(A) {
              super(li, 'range');
            }
            [g5]() {
              this[g1] = this[g1]
                .trim()
                .split(/\s*,\s*/, 2)
                .map((A) => A.split('-').map((A) => parseInt(A.trim(), 10)))
                .filter((A) => A.every((A) => !isNaN(A)))
                .map((A) => (1 === A.length && A.push(A[0]), A));
            }
          }
          class CH extends nU {
            constructor(A) {
              super(li, 'record');
            }
            [g5]() {
              this[g1] = this[g1].trim();
              let A = parseInt(this[g1], 10);
              !isNaN(A) && A >= 0 && (this[g1] = A);
            }
          }
          class CY extends nU {
            constructor(A) {
              super(li, 'relevant');
            }
            [g5]() {
              this[g1] = this[g1].trim().split(/\s+/);
            }
          }
          class CK extends nU {
            constructor(A) {
              super(li, 'rename');
            }
            [g5]() {
              (this[g1] = this[g1].trim()),
                (this[g1].toLowerCase().startsWith('xml') ||
                  RegExp('[\\p{L}_][\\p{L}\\d._\\p{M}-]*', 'u').test(
                    this[g1]
                  )) &&
                  m('XFA - Rename: invalid XFA name');
            }
          }
          class Cv extends nM {
            constructor(A) {
              super(li, 'renderPolicy', ['server', 'client']);
            }
          }
          class Cq extends nM {
            constructor(A) {
              super(li, 'runScripts', ['both', 'client', 'none', 'server']);
            }
          }
          class CT extends nR {
            constructor(A) {
              super(li, 'script', !0),
                (this.currentPage = null),
                (this.exclude = null),
                (this.runScripts = null);
            }
          }
          class CP extends nM {
            constructor(A) {
              super(li, 'scriptModel', ['XFA', 'none']);
            }
          }
          class CW extends nM {
            constructor(A) {
              super(li, 'severity', [
                'ignore',
                'error',
                'information',
                'trace',
                'warning',
              ]);
            }
          }
          class CZ extends nR {
            constructor(A) {
              super(li, 'silentPrint', !0),
                (this.addSilentPrint = null),
                (this.printerName = null);
            }
          }
          class CO extends nR {
            constructor(A) {
              super(li, 'staple'),
                (this.mode = r3(A.mode, ['usePrinterSetting', 'on', 'off']));
            }
          }
          class CX extends nJ {
            constructor(A) {
              super(li, 'startNode');
            }
          }
          class CV extends nL {
            constructor(A) {
              super(li, 'startPage', 0, (A) => !0);
            }
          }
          class Cj extends nM {
            constructor(A) {
              super(li, 'submitFormat', [
                'html',
                'delegate',
                'fdf',
                'xml',
                'pdf',
              ]);
            }
          }
          class Cz extends nJ {
            constructor(A) {
              super(li, 'submitUrl');
            }
          }
          class C_ extends nL {
            constructor(A) {
              super(li, 'subsetBelow', 100, (A) => A >= 0 && A <= 100);
            }
          }
          class C$ extends nH {
            constructor(A) {
              super(li, 'suppressBanner');
            }
          }
          class C0 extends nH {
            constructor(A) {
              super(li, 'tagged');
            }
          }
          class C1 extends nR {
            constructor(A) {
              super(li, 'template', !0),
                (this.base = null),
                (this.relevant = null),
                (this.startPage = null),
                (this.uri = null),
                (this.xsl = null);
            }
          }
          class C2 extends nM {
            constructor(A) {
              super(li, 'threshold', [
                'trace',
                'error',
                'information',
                'warning',
              ]);
            }
          }
          class C9 extends nM {
            constructor(A) {
              super(li, 'to', [
                'null',
                'memory',
                'stderr',
                'stdout',
                'system',
                'uri',
              ]);
            }
          }
          class C3 extends nR {
            constructor(A) {
              super(li, 'templateCache'),
                (this.maxEntries = r1({
                  data: A.maxEntries,
                  defaultValue: 5,
                  validate: (A) => A >= 0,
                }));
            }
          }
          class C5 extends nR {
            constructor(A) {
              super(li, 'trace', !0), (this.area = new nG());
            }
          }
          class C8 extends nR {
            constructor(A) {
              super(li, 'transform', !0),
                (this.groupParent = null),
                (this.ifEmpty = null),
                (this.nameAttr = null),
                (this.picture = null),
                (this.presence = null),
                (this.rename = null),
                (this.whitespace = null);
            }
          }
          class C6 extends nM {
            constructor(A) {
              super(li, 'type', [
                'none',
                'ascii85',
                'asciiHex',
                'ccittfax',
                'flate',
                'lzw',
                'runLength',
                'native',
                'xdp',
                'mergedXDP',
              ]);
            }
          }
          class C7 extends nJ {
            constructor(A) {
              super(li, 'uri');
            }
          }
          class C4 extends nM {
            constructor(A) {
              super(li, 'validate', [
                'preSubmit',
                'prePrint',
                'preExecute',
                'preSave',
              ]);
            }
          }
          class BA extends nU {
            constructor(A) {
              super(li, 'validateApprovalSignatures');
            }
            [g5]() {
              this[g1] = this[g1]
                .trim()
                .split(/\s+/)
                .filter((A) => ['docReady', 'postSign'].includes(A));
            }
          }
          class Be extends nM {
            constructor(A) {
              super(li, 'validationMessaging', [
                'allMessagesIndividually',
                'allMessagesTogether',
                'firstMessageOnly',
                'noMessages',
              ]);
            }
          }
          class Bt extends nM {
            constructor(A) {
              super(li, 'version', ['1.7', '1.6', '1.5', '1.4', '1.3', '1.2']);
            }
          }
          class Bi extends nR {
            constructor(A) {
              super(li, 'VersionControl'),
                (this.outputBelow = r3(A.outputBelow, [
                  'warn',
                  'error',
                  'update',
                ])),
                (this.sourceAbove = r3(A.sourceAbove, ['warn', 'error'])),
                (this.sourceBelow = r3(A.sourceBelow, ['update', 'maintain']));
            }
          }
          class Ba extends nR {
            constructor(A) {
              super(li, 'viewerPreferences', !0),
                (this.ADBE_JSConsole = null),
                (this.ADBE_JSDebugger = null),
                (this.addViewerPreferences = null),
                (this.duplexOption = null),
                (this.enforce = null),
                (this.numberOfCopies = null),
                (this.pageRange = null),
                (this.pickTrayByPDFSize = null),
                (this.printScaling = null);
            }
          }
          class Bs extends nR {
            constructor(A) {
              super(li, 'webClient', !0),
                (this.name = A.name ? A.name.trim() : ''),
                (this.fontInfo = null),
                (this.xdc = null);
            }
          }
          class Bg extends nM {
            constructor(A) {
              super(li, 'whitespace', [
                'preserve',
                'ltrim',
                'normalize',
                'rtrim',
                'trim',
              ]);
            }
          }
          class Window extends nU {
            constructor(A) {
              super(li, 'window');
            }
            [g5]() {
              let A = this[g1]
                .trim()
                .split(/\s*,\s*/, 2)
                .map((A) => parseInt(A, 10));
              A.some((A) => isNaN(A))
                ? (this[g1] = [0, 0])
                : (1 === A.length && A.push(A[0]), (this[g1] = A));
            }
          }
          class Br extends nR {
            constructor(A) {
              super(li, 'xdc', !0),
                (this.uri = new nG()),
                (this.xsl = new nG());
            }
          }
          class Bn extends nR {
            constructor(A) {
              super(li, 'xdp', !0), (this.packets = null);
            }
          }
          class Bo extends nR {
            constructor(A) {
              super(li, 'xsl', !0), (this.debug = null), (this.uri = null);
            }
          }
          class BI extends nR {
            constructor(A) {
              super(li, 'zpl', !0),
                (this.name = A.name ? A.name.trim() : ''),
                (this.batchOutput = null),
                (this.flipLabel = null),
                (this.fontInfo = null),
                (this.xdc = null);
            }
          }
          class Bl {
            static [rj](A, t) {
              if (Bl.hasOwnProperty(A)) return Bl[A](t);
            }
            static acrobat(A) {
              return new la(A);
            }
            static acrobat7(A) {
              return new ls(A);
            }
            static ADBE_JSConsole(A) {
              return new lg(A);
            }
            static ADBE_JSDebugger(A) {
              return new lr(A);
            }
            static addSilentPrint(A) {
              return new ln(A);
            }
            static addViewerPreferences(A) {
              return new lo(A);
            }
            static adjustData(A) {
              return new lI(A);
            }
            static adobeExtensionLevel(A) {
              return new ll(A);
            }
            static agent(A) {
              return new lC(A);
            }
            static alwaysEmbed(A) {
              return new lB(A);
            }
            static amd(A) {
              return new lh(A);
            }
            static area(A) {
              return new lQ(A);
            }
            static attributes(A) {
              return new lc(A);
            }
            static autoSave(A) {
              return new lE(A);
            }
            static base(A) {
              return new lu(A);
            }
            static batchOutput(A) {
              return new ld(A);
            }
            static behaviorOverride(A) {
              return new lf(A);
            }
            static cache(A) {
              return new Cache(A);
            }
            static change(A) {
              return new lp(A);
            }
            static common(A) {
              return new lm(A);
            }
            static compress(A) {
              return new ly(A);
            }
            static compressLogicalStructure(A) {
              return new lw(A);
            }
            static compressObjectStream(A) {
              return new lD(A);
            }
            static compression(A) {
              return new lb(A);
            }
            static config(A) {
              return new lk(A);
            }
            static conformance(A) {
              return new lF(A);
            }
            static contentCopy(A) {
              return new lS(A);
            }
            static copies(A) {
              return new lR(A);
            }
            static creator(A) {
              return new lG(A);
            }
            static currentPage(A) {
              return new lN(A);
            }
            static data(A) {
              return new lx(A);
            }
            static debug(A) {
              return new lU(A);
            }
            static defaultTypeface(A) {
              return new lM(A);
            }
            static destination(A) {
              return new lJ(A);
            }
            static documentAssembly(A) {
              return new lL(A);
            }
            static driver(A) {
              return new lH(A);
            }
            static duplexOption(A) {
              return new lY(A);
            }
            static dynamicRender(A) {
              return new lK(A);
            }
            static embed(A) {
              return new lv(A);
            }
            static encrypt(A) {
              return new lq(A);
            }
            static encryption(A) {
              return new lT(A);
            }
            static encryptionLevel(A) {
              return new lP(A);
            }
            static enforce(A) {
              return new lW(A);
            }
            static equate(A) {
              return new lZ(A);
            }
            static equateRange(A) {
              return new lO(A);
            }
            static exclude(A) {
              return new lX(A);
            }
            static excludeNS(A) {
              return new lV(A);
            }
            static flipLabel(A) {
              return new lj(A);
            }
            static fontInfo(A) {
              return new lz(A);
            }
            static formFieldFilling(A) {
              return new l_(A);
            }
            static groupParent(A) {
              return new l$(A);
            }
            static ifEmpty(A) {
              return new l0(A);
            }
            static includeXDPContent(A) {
              return new l1(A);
            }
            static incrementalLoad(A) {
              return new l2(A);
            }
            static incrementalMerge(A) {
              return new l9(A);
            }
            static interactive(A) {
              return new l3(A);
            }
            static jog(A) {
              return new l5(A);
            }
            static labelPrinter(A) {
              return new l8(A);
            }
            static layout(A) {
              return new l6(A);
            }
            static level(A) {
              return new l7(A);
            }
            static linearized(A) {
              return new l4(A);
            }
            static locale(A) {
              return new CA(A);
            }
            static localeSet(A) {
              return new Ce(A);
            }
            static log(A) {
              return new Ct(A);
            }
            static map(A) {
              return new Ci(A);
            }
            static mediumInfo(A) {
              return new Ca(A);
            }
            static message(A) {
              return new Cs(A);
            }
            static messaging(A) {
              return new Cg(A);
            }
            static mode(A) {
              return new Cr(A);
            }
            static modifyAnnots(A) {
              return new Cn(A);
            }
            static msgId(A) {
              return new Co(A);
            }
            static nameAttr(A) {
              return new CI(A);
            }
            static neverEmbed(A) {
              return new Cl(A);
            }
            static numberOfCopies(A) {
              return new CC(A);
            }
            static openAction(A) {
              return new CB(A);
            }
            static output(A) {
              return new Ch(A);
            }
            static outputBin(A) {
              return new CQ(A);
            }
            static outputXSL(A) {
              return new Cc(A);
            }
            static overprint(A) {
              return new CE(A);
            }
            static packets(A) {
              return new Cu(A);
            }
            static pageOffset(A) {
              return new Cd(A);
            }
            static pageRange(A) {
              return new Cf(A);
            }
            static pagination(A) {
              return new Cp(A);
            }
            static paginationOverride(A) {
              return new Cm(A);
            }
            static part(A) {
              return new Cy(A);
            }
            static pcl(A) {
              return new Cw(A);
            }
            static pdf(A) {
              return new CD(A);
            }
            static pdfa(A) {
              return new Cb(A);
            }
            static permissions(A) {
              return new Permissions(A);
            }
            static pickTrayByPDFSize(A) {
              return new Ck(A);
            }
            static picture(A) {
              return new CF(A);
            }
            static plaintextMetadata(A) {
              return new CS(A);
            }
            static presence(A) {
              return new CR(A);
            }
            static present(A) {
              return new CG(A);
            }
            static print(A) {
              return new CN(A);
            }
            static printHighQuality(A) {
              return new Cx(A);
            }
            static printScaling(A) {
              return new CU(A);
            }
            static printerName(A) {
              return new CM(A);
            }
            static producer(A) {
              return new CJ(A);
            }
            static ps(A) {
              return new CL(A);
            }
            static range(A) {
              return new Range(A);
            }
            static record(A) {
              return new CH(A);
            }
            static relevant(A) {
              return new CY(A);
            }
            static rename(A) {
              return new CK(A);
            }
            static renderPolicy(A) {
              return new Cv(A);
            }
            static runScripts(A) {
              return new Cq(A);
            }
            static script(A) {
              return new CT(A);
            }
            static scriptModel(A) {
              return new CP(A);
            }
            static severity(A) {
              return new CW(A);
            }
            static silentPrint(A) {
              return new CZ(A);
            }
            static staple(A) {
              return new CO(A);
            }
            static startNode(A) {
              return new CX(A);
            }
            static startPage(A) {
              return new CV(A);
            }
            static submitFormat(A) {
              return new Cj(A);
            }
            static submitUrl(A) {
              return new Cz(A);
            }
            static subsetBelow(A) {
              return new C_(A);
            }
            static suppressBanner(A) {
              return new C$(A);
            }
            static tagged(A) {
              return new C0(A);
            }
            static template(A) {
              return new C1(A);
            }
            static templateCache(A) {
              return new C3(A);
            }
            static threshold(A) {
              return new C2(A);
            }
            static to(A) {
              return new C9(A);
            }
            static trace(A) {
              return new C5(A);
            }
            static transform(A) {
              return new C8(A);
            }
            static type(A) {
              return new C6(A);
            }
            static uri(A) {
              return new C7(A);
            }
            static validate(A) {
              return new C4(A);
            }
            static validateApprovalSignatures(A) {
              return new BA(A);
            }
            static validationMessaging(A) {
              return new Be(A);
            }
            static version(A) {
              return new Bt(A);
            }
            static versionControl(A) {
              return new Bi(A);
            }
            static viewerPreferences(A) {
              return new Ba(A);
            }
            static webClient(A) {
              return new Bs(A);
            }
            static whitespace(A) {
              return new Bg(A);
            }
            static window(A) {
              return new Window(A);
            }
            static xdc(A) {
              return new Br(A);
            }
            static xdp(A) {
              return new Bn(A);
            }
            static xsl(A) {
              return new Bo(A);
            }
            static zpl(A) {
              return new BI(A);
            }
          }
          let BC = rz.connectionSet.id;
          class BB extends nR {
            constructor(A) {
              super(BC, 'connectionSet', !0),
                (this.wsdlConnection = new nG()),
                (this.xmlConnection = new nG()),
                (this.xsdConnection = new nG());
            }
          }
          class Bh extends nR {
            constructor(A) {
              super(BC, 'effectiveInputPolicy'),
                (this.id = A.id || ''),
                (this.name = A.name || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
          }
          class BQ extends nR {
            constructor(A) {
              super(BC, 'effectiveOutputPolicy'),
                (this.id = A.id || ''),
                (this.name = A.name || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
          }
          class Bc extends nJ {
            constructor(A) {
              super(BC, 'operation'),
                (this.id = A.id || ''),
                (this.input = A.input || ''),
                (this.name = A.name || ''),
                (this.output = A.output || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
          }
          class BE extends nJ {
            constructor(A) {
              super(BC, 'rootElement'),
                (this.id = A.id || ''),
                (this.name = A.name || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
          }
          class Bu extends nJ {
            constructor(A) {
              super(BC, 'soapAction'),
                (this.id = A.id || ''),
                (this.name = A.name || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
          }
          class Bd extends nJ {
            constructor(A) {
              super(BC, 'soapAddress'),
                (this.id = A.id || ''),
                (this.name = A.name || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
          }
          class Bf extends nJ {
            constructor(A) {
              super(BC, 'uri'),
                (this.id = A.id || ''),
                (this.name = A.name || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
          }
          class Bp extends nJ {
            constructor(A) {
              super(BC, 'wsdlAddress'),
                (this.id = A.id || ''),
                (this.name = A.name || ''),
                (this.use = A.use || ''),
                (this.usehref = A.usehref || '');
            }
          }
          class Bm extends nR {
            constructor(A) {
              super(BC, 'wsdlConnection', !0),
                (this.dataDescription = A.dataDescription || ''),
                (this.name = A.name || ''),
                (this.effectiveInputPolicy = null),
                (this.effectiveOutputPolicy = null),
                (this.operation = null),
                (this.soapAction = null),
                (this.soapAddress = null),
                (this.wsdlAddress = null);
            }
          }
          class By extends nR {
            constructor(A) {
              super(BC, 'xmlConnection', !0),
                (this.dataDescription = A.dataDescription || ''),
                (this.name = A.name || ''),
                (this.uri = null);
            }
          }
          class Bw extends nR {
            constructor(A) {
              super(BC, 'xsdConnection', !0),
                (this.dataDescription = A.dataDescription || ''),
                (this.name = A.name || ''),
                (this.rootElement = null),
                (this.uri = null);
            }
          }
          class BD {
            static [rj](A, t) {
              if (BD.hasOwnProperty(A)) return BD[A](t);
            }
            static connectionSet(A) {
              return new BB(A);
            }
            static effectiveInputPolicy(A) {
              return new Bh(A);
            }
            static effectiveOutputPolicy(A) {
              return new BQ(A);
            }
            static operation(A) {
              return new Bc(A);
            }
            static rootElement(A) {
              return new BE(A);
            }
            static soapAction(A) {
              return new Bu(A);
            }
            static soapAddress(A) {
              return new Bd(A);
            }
            static uri(A) {
              return new Bf(A);
            }
            static wsdlAddress(A) {
              return new Bp(A);
            }
            static wsdlConnection(A) {
              return new Bm(A);
            }
            static xmlConnection(A) {
              return new By(A);
            }
            static xsdConnection(A) {
              return new Bw(A);
            }
          }
          let Bb = rz.datasets.id;
          class Bk extends nx {
            constructor(A) {
              super(Bb, 'data', A);
            }
            [rp]() {
              return !0;
            }
          }
          class BF extends nR {
            constructor(A) {
              super(Bb, 'datasets', !0),
                (this.data = null),
                (this.Signature = null);
            }
            [rR](A) {
              let t = A[rF];
              (('data' === t && A[rk] === Bb) ||
                ('Signature' === t && A[rk] === rz.signature.id)) &&
                (this[t] = A),
                this[gX](A);
            }
          }
          class BS {
            static [rj](A, t) {
              if (BS.hasOwnProperty(A)) return BS[A](t);
            }
            static datasets(A) {
              return new BF(A);
            }
            static data(A) {
              return new Bk(A);
            }
          }
          let BR = rz.localeSet.id;
          class BG extends nR {
            constructor(A) {
              super(BR, 'calendarSymbols', !0),
                (this.name = 'gregorian'),
                (this.dayNames = new nG(2)),
                (this.eraNames = null),
                (this.meridiemNames = null),
                (this.monthNames = new nG(2));
            }
          }
          class BN extends nJ {
            constructor(A) {
              super(BR, 'currencySymbol'),
                (this.name = r3(A.name, ['symbol', 'isoname', 'decimal']));
            }
          }
          class Bx extends nR {
            constructor(A) {
              super(BR, 'currencySymbols', !0),
                (this.currencySymbol = new nG(3));
            }
          }
          class BU extends nJ {
            constructor(A) {
              super(BR, 'datePattern'),
                (this.name = r3(A.name, ['full', 'long', 'med', 'short']));
            }
          }
          class BM extends nR {
            constructor(A) {
              super(BR, 'datePatterns', !0), (this.datePattern = new nG(4));
            }
          }
          class BJ extends nU {
            constructor(A) {
              super(BR, 'dateTimeSymbols');
            }
          }
          class BL extends nJ {
            constructor(A) {
              super(BR, 'day');
            }
          }
          class BH extends nR {
            constructor(A) {
              super(BR, 'dayNames', !0),
                (this.abbr = r1({
                  data: A.abbr,
                  defaultValue: 0,
                  validate: (A) => 1 === A,
                })),
                (this.day = new nG(7));
            }
          }
          class BY extends nJ {
            constructor(A) {
              super(BR, 'era');
            }
          }
          class BK extends nR {
            constructor(A) {
              super(BR, 'eraNames', !0), (this.era = new nG(2));
            }
          }
          class Bv extends nR {
            constructor(A) {
              super(BR, 'locale', !0),
                (this.desc = A.desc || ''),
                (this.name = 'isoname'),
                (this.calendarSymbols = null),
                (this.currencySymbols = null),
                (this.datePatterns = null),
                (this.dateTimeSymbols = null),
                (this.numberPatterns = null),
                (this.numberSymbols = null),
                (this.timePatterns = null),
                (this.typeFaces = null);
            }
          }
          class Bq extends nR {
            constructor(A) {
              super(BR, 'localeSet', !0), (this.locale = new nG());
            }
          }
          class BT extends nJ {
            constructor(A) {
              super(BR, 'meridiem');
            }
          }
          class BP extends nR {
            constructor(A) {
              super(BR, 'meridiemNames', !0), (this.meridiem = new nG(2));
            }
          }
          class BW extends nJ {
            constructor(A) {
              super(BR, 'month');
            }
          }
          class BZ extends nR {
            constructor(A) {
              super(BR, 'monthNames', !0),
                (this.abbr = r1({
                  data: A.abbr,
                  defaultValue: 0,
                  validate: (A) => 1 === A,
                })),
                (this.month = new nG(12));
            }
          }
          class BO extends nJ {
            constructor(A) {
              super(BR, 'numberPattern'),
                (this.name = r3(A.name, ['full', 'long', 'med', 'short']));
            }
          }
          class BX extends nR {
            constructor(A) {
              super(BR, 'numberPatterns', !0), (this.numberPattern = new nG(4));
            }
          }
          class BV extends nJ {
            constructor(A) {
              super(BR, 'numberSymbol'),
                (this.name = r3(A.name, [
                  'decimal',
                  'grouping',
                  'percent',
                  'minus',
                  'zero',
                ]));
            }
          }
          class Bj extends nR {
            constructor(A) {
              super(BR, 'numberSymbols', !0), (this.numberSymbol = new nG(5));
            }
          }
          class Bz extends nJ {
            constructor(A) {
              super(BR, 'timePattern'),
                (this.name = r3(A.name, ['full', 'long', 'med', 'short']));
            }
          }
          class B_ extends nR {
            constructor(A) {
              super(BR, 'timePatterns', !0), (this.timePattern = new nG(4));
            }
          }
          class B$ extends nR {
            constructor(A) {
              super(BR, 'typeFace', !0), (this.name = '' | A.name);
            }
          }
          class B0 extends nR {
            constructor(A) {
              super(BR, 'typeFaces', !0), (this.typeFace = new nG());
            }
          }
          class B1 {
            static [rj](A, t) {
              if (B1.hasOwnProperty(A)) return B1[A](t);
            }
            static calendarSymbols(A) {
              return new BG(A);
            }
            static currencySymbol(A) {
              return new BN(A);
            }
            static currencySymbols(A) {
              return new Bx(A);
            }
            static datePattern(A) {
              return new BU(A);
            }
            static datePatterns(A) {
              return new BM(A);
            }
            static dateTimeSymbols(A) {
              return new BJ(A);
            }
            static day(A) {
              return new BL(A);
            }
            static dayNames(A) {
              return new BH(A);
            }
            static era(A) {
              return new BY(A);
            }
            static eraNames(A) {
              return new BK(A);
            }
            static locale(A) {
              return new Bv(A);
            }
            static localeSet(A) {
              return new Bq(A);
            }
            static meridiem(A) {
              return new BT(A);
            }
            static meridiemNames(A) {
              return new BP(A);
            }
            static month(A) {
              return new BW(A);
            }
            static monthNames(A) {
              return new BZ(A);
            }
            static numberPattern(A) {
              return new BO(A);
            }
            static numberPatterns(A) {
              return new BX(A);
            }
            static numberSymbol(A) {
              return new BV(A);
            }
            static numberSymbols(A) {
              return new Bj(A);
            }
            static timePattern(A) {
              return new Bz(A);
            }
            static timePatterns(A) {
              return new B_(A);
            }
            static typeFace(A) {
              return new B$(A);
            }
            static typeFaces(A) {
              return new B0(A);
            }
          }
          let B2 = rz.signature.id;
          class B9 extends nR {
            constructor(A) {
              super(B2, 'signature', !0);
            }
          }
          class B3 {
            static [rj](A, t) {
              if (B3.hasOwnProperty(A)) return B3[A](t);
            }
            static signature(A) {
              return new B9(A);
            }
          }
          let B5 = rz.stylesheet.id;
          class B8 extends nR {
            constructor(A) {
              super(B5, 'stylesheet', !0);
            }
          }
          class B6 {
            static [rj](A, t) {
              if (B6.hasOwnProperty(A)) return B6[A](t);
            }
            static stylesheet(A) {
              return new B8(A);
            }
          }
          let B7 = rz.xdp.id;
          class B4 extends nR {
            constructor(A) {
              super(B7, 'xdp', !0),
                (this.uuid = A.uuid || ''),
                (this.timeStamp = A.timeStamp || ''),
                (this.config = null),
                (this.connectionSet = null),
                (this.datasets = null),
                (this.localeSet = null),
                (this.stylesheet = new nG()),
                (this.template = null);
            }
            [rG](A) {
              let t = rz[A[rF]];
              return t && A[rk] === t.id;
            }
          }
          class hA {
            static [rj](A, t) {
              if (hA.hasOwnProperty(A)) return hA[A](t);
            }
            static xdp(A) {
              return new B4(A);
            }
          }
          let he = rz.xhtml.id,
            ht = Symbol(),
            hi = new Set([
              'color',
              'font',
              'font-family',
              'font-size',
              'font-stretch',
              'font-style',
              'font-weight',
              'margin',
              'margin-bottom',
              'margin-left',
              'margin-right',
              'margin-top',
              'letter-spacing',
              'line-height',
              'orphans',
              'page-break-after',
              'page-break-before',
              'page-break-inside',
              'tab-interval',
              'tab-stop',
              'text-align',
              'text-decoration',
              'text-indent',
              'vertical-align',
              'widows',
              'kerning-mode',
              'xfa-font-horizontal-scale',
              'xfa-font-vertical-scale',
              'xfa-spacerun',
              'xfa-tab-stops',
            ]),
            ha = new Map([
              ['page-break-after', 'breakAfter'],
              ['page-break-before', 'breakBefore'],
              ['page-break-inside', 'breakInside'],
              ['kerning-mode', (A) => ('none' === A ? 'none' : 'normal')],
              [
                'xfa-font-horizontal-scale',
                (A) =>
                  `scaleX(${Math.max(0, Math.min(parseInt(A) / 100)).toFixed(2)})`,
              ],
              [
                'xfa-font-vertical-scale',
                (A) =>
                  `scaleY(${Math.max(0, Math.min(parseInt(A) / 100)).toFixed(2)})`,
              ],
              ['xfa-spacerun', ''],
              ['xfa-tab-stops', ''],
              ['font-size', (A, t) => nK(0.99 * (A = t.fontSize = r5(A)))],
              ['letter-spacing', (A) => nK(r5(A))],
              ['line-height', (A) => nK(r5(A))],
              ['margin', (A) => nK(r5(A))],
              ['margin-bottom', (A) => nK(r5(A))],
              ['margin-left', (A) => nK(r5(A))],
              ['margin-right', (A) => nK(r5(A))],
              ['margin-top', (A) => nK(r5(A))],
              ['text-indent', (A) => nK(r5(A))],
              ['font-family', (A) => A],
              ['vertical-align', (A) => nK(r5(A))],
            ]),
            hs = /\s+/g,
            hg = /[\r\n]+/g,
            hr = /\r\n?/g,
            hn = new Set(['body', 'html']);
          class ho extends nx {
            constructor(A, t) {
              super(he, t), (this[ht] = !1), (this.style = A.style || '');
            }
            [gj](A) {
              var t;
              super[gj](A),
                (this.style =
                  ((t = this),
                  t.style
                    ? t.style
                        .trim()
                        .split(/\s*;\s*/)
                        .filter((A) => !!A)
                        .map((A) => A.split(/\s*:\s*/, 2))
                        .filter(
                          ([A, i]) => (
                            'font-family' === A && t[rC].usedTypefaces.add(i),
                            hi.has(A)
                          )
                        )
                        .map((A) => A.join(':'))
                        .join(';')
                    : ''));
            }
            [gZ]() {
              return !hn.has(this[rF]);
            }
            [rN](A, t = !1) {
              t
                ? (this[ht] = !0)
                : ((A = A.replaceAll(hg, '')),
                  this.style.includes('xfa-spacerun:yes') ||
                    (A = A.replaceAll(hs, ' '))),
                A && (this[g1] += A);
            }
            [rx](A, t = !0) {
              let i = Object.create(null),
                a = { top: NaN, bottom: NaN, left: NaN, right: NaN },
                s = null;
              for (let [A, t] of this.style
                .split(';')
                .map((A) => A.split(':', 2)))
                switch (A) {
                  case 'font-family':
                    i.typeface = r0(t);
                    break;
                  case 'font-size':
                    i.size = r5(t);
                    break;
                  case 'font-weight':
                    i.weight = t;
                    break;
                  case 'font-style':
                    i.posture = t;
                    break;
                  case 'letter-spacing':
                    i.letterSpacing = r5(t);
                    break;
                  case 'margin':
                    let g = t.split(/ \t/).map((A) => r5(A));
                    switch (g.length) {
                      case 1:
                        a.top = a.bottom = a.left = a.right = g[0];
                        break;
                      case 2:
                        (a.top = a.bottom = g[0]), (a.left = a.right = g[1]);
                        break;
                      case 3:
                        (a.top = g[0]),
                          (a.bottom = g[2]),
                          (a.left = a.right = g[1]);
                        break;
                      case 4:
                        (a.top = g[0]),
                          (a.left = g[1]),
                          (a.bottom = g[2]),
                          (a.right = g[3]);
                    }
                    break;
                  case 'margin-top':
                    a.top = r5(t);
                    break;
                  case 'margin-bottom':
                    a.bottom = r5(t);
                    break;
                  case 'margin-left':
                    a.left = r5(t);
                    break;
                  case 'margin-right':
                    a.right = r5(t);
                    break;
                  case 'line-height':
                    s = r5(t);
                }
              if ((A.pushData(i, a, s), this[g1])) A.addString(this[g1]);
              else
                for (let t of this[rg]())
                  '#text' !== t[rF] ? t[rx](A) : A.addString(t[g1]);
              t && A.popFont();
            }
            [rZ](A) {
              let t;
              let i = [];
              return ((this[g3] = { children: i }),
              this[gV]({}),
              0 !== i.length || this[g1])
                ? ((t = this[ht]
                    ? this[g1]
                      ? this[g1].replaceAll(hr, '\n')
                      : void 0
                    : this[g1] || void 0),
                  r7.success({
                    name: this[rF],
                    attributes: {
                      href: this.href,
                      style: (function (A, t, i) {
                        let a = Object.create(null);
                        if (!A) return a;
                        let s = Object.create(null);
                        for (let [t, i] of A.split(';').map((A) =>
                          A.split(':', 2)
                        )) {
                          let A = ha.get(t);
                          if ('' === A) continue;
                          let g = i;
                          A && (g = 'string' == typeof A ? A : A(i, s)),
                            t.endsWith('scale')
                              ? (a.transform = a.transform ? `${a[t]} ${g}` : g)
                              : (a[
                                  t.replaceAll(/-([a-zA-Z])/g, (A, t) =>
                                    t.toUpperCase()
                                  )
                                ] = g);
                        }
                        if (
                          (a.fontFamily &&
                            n1(
                              {
                                typeface: a.fontFamily,
                                weight: a.fontWeight || 'normal',
                                posture: a.fontStyle || 'normal',
                                size: s.fontSize || 0,
                              },
                              t,
                              t[rC].fontFinder,
                              a
                            ),
                          i &&
                            a.verticalAlign &&
                            '0px' !== a.verticalAlign &&
                            a.fontSize)
                        ) {
                          let A = r5(a.fontSize);
                          (a.fontSize = nK(0.583 * A)),
                            (a.verticalAlign = nK(
                              Math.sign(r5(a.verticalAlign)) * A * 0.333
                            ));
                        }
                        return (
                          i &&
                            a.fontSize &&
                            (a.fontSize = `calc(${a.fontSize} * var(--scale-factor))`),
                          nj(a),
                          a
                        );
                      })(this.style, this, this[ht]),
                    },
                    children: i,
                    value: t,
                  }))
                : r7.EMPTY;
            }
          }
          class hI extends ho {
            constructor(A) {
              super(A, 'a'), (this.href = n2(A.href) || '');
            }
          }
          class hl extends ho {
            constructor(A) {
              super(A, 'b');
            }
            [rx](A) {
              A.pushFont({ weight: 'bold' }), super[rx](A), A.popFont();
            }
          }
          class hC extends ho {
            constructor(A) {
              super(A, 'body');
            }
            [rZ](A) {
              let t = super[rZ](A),
                { html: i } = t;
              return i
                ? ((i.name = 'div'), (i.attributes.class = ['xfaRich']), t)
                : r7.EMPTY;
            }
          }
          class hB extends ho {
            constructor(A) {
              super(A, 'br');
            }
            [rP]() {
              return '\n';
            }
            [rx](A) {
              A.addString('\n');
            }
            [rZ](A) {
              return r7.success({ name: 'br' });
            }
          }
          class hh extends ho {
            constructor(A) {
              super(A, 'html');
            }
            [rZ](A) {
              let t = [];
              if (((this[g3] = { children: t }), this[gV]({}), 0 === t.length))
                return r7.success({
                  name: 'div',
                  attributes: { class: ['xfaRich'], style: {} },
                  value: this[g1] || '',
                });
              if (1 === t.length) {
                let A = t[0];
                if (A.attributes?.class.includes('xfaRich'))
                  return r7.success(A);
              }
              return r7.success({
                name: 'div',
                attributes: { class: ['xfaRich'], style: {} },
                children: t,
              });
            }
          }
          class hQ extends ho {
            constructor(A) {
              super(A, 'i');
            }
            [rx](A) {
              A.pushFont({ posture: 'italic' }), super[rx](A), A.popFont();
            }
          }
          class hc extends ho {
            constructor(A) {
              super(A, 'li');
            }
          }
          class hE extends ho {
            constructor(A) {
              super(A, 'ol');
            }
          }
          class hu extends ho {
            constructor(A) {
              super(A, 'p');
            }
            [rx](A) {
              super[rx](A, !1), A.addString('\n'), A.addPara(), A.popFont();
            }
            [rP]() {
              return this[rI]()[rg]().at(-1) === this
                ? super[rP]()
                : super[rP]() + '\n';
            }
          }
          class hd extends ho {
            constructor(A) {
              super(A, 'span');
            }
          }
          class hf extends ho {
            constructor(A) {
              super(A, 'sub');
            }
          }
          class hp extends ho {
            constructor(A) {
              super(A, 'sup');
            }
          }
          class hm extends ho {
            constructor(A) {
              super(A, 'ul');
            }
          }
          class hy {
            static [rj](A, t) {
              if (hy.hasOwnProperty(A)) return hy[A](t);
            }
            static a(A) {
              return new hI(A);
            }
            static b(A) {
              return new hl(A);
            }
            static body(A) {
              return new hC(A);
            }
            static br(A) {
              return new hB(A);
            }
            static html(A) {
              return new hh(A);
            }
            static i(A) {
              return new hQ(A);
            }
            static li(A) {
              return new hc(A);
            }
            static ol(A) {
              return new hE(A);
            }
            static p(A) {
              return new hu(A);
            }
            static span(A) {
              return new hd(A);
            }
            static sub(A) {
              return new hf(A);
            }
            static sup(A) {
              return new hp(A);
            }
            static ul(A) {
              return new hm(A);
            }
          }
          let hw = {
            config: Bl,
            connection: BD,
            datasets: BS,
            localeSet: B1,
            signature: B3,
            stylesheet: B6,
            template: I7,
            xdp: hA,
            xhtml: hy,
          };
          class hD {
            constructor(A) {
              this.namespaceId = A;
            }
            [rj](A, t) {
              return new nx(this.namespaceId, A, t);
            }
          }
          class hb extends nR {
            constructor(A) {
              super(-1, 'root', Object.create(null)),
                (this.element = null),
                (this[rh] = A);
            }
            [rR](A) {
              return (this.element = A), !0;
            }
            [g5]() {
              super[g5](),
                this.element.template instanceof Iz &&
                  (this[rh].set(rL, this.element),
                  this.element.template[rH](this[rh]),
                  (this.element.template[rh] = this[rh]));
            }
          }
          class hk extends nR {
            constructor() {
              super(-1, '', Object.create(null));
            }
            [rR](A) {
              return !1;
            }
          }
          class hF {
            constructor(A = null) {
              (this._namespaceStack = []),
                (this._nsAgnosticLevel = 0),
                (this._namespacePrefixes = new Map()),
                (this._namespaces = new Map()),
                (this._nextNsId = Math.max(
                  ...Object.values(rz).map(({ id: A }) => A)
                )),
                (this._currentNamespace = A || new hD(++this._nextNsId));
            }
            buildRoot(A) {
              return new hb(A);
            }
            build({
              nsPrefix: A,
              name: t,
              attributes: i,
              namespace: a,
              prefixes: s,
            }) {
              let g = null !== a;
              if (
                (g &&
                  (this._namespaceStack.push(this._currentNamespace),
                  (this._currentNamespace = this._searchNamespace(a))),
                s && this._addNamespacePrefix(s),
                i.hasOwnProperty(rS))
              ) {
                let A = hw.datasets,
                  t = i[rS],
                  a = null;
                for (let [i, s] of Object.entries(t))
                  if (this._getNamespaceToUse(i) === A) {
                    a = { xfa: s };
                    break;
                  }
                a ? (i[rS] = a) : delete i[rS];
              }
              let r = this._getNamespaceToUse(A),
                n = r?.[rj](t, i) || new hk();
              return (
                n[rp]() && this._nsAgnosticLevel++,
                (g || s || n[rp]()) &&
                  (n[g_] = {
                    hasNamespace: g,
                    prefixes: s,
                    nsAgnostic: n[rp](),
                  }),
                n
              );
            }
            isNsAgnostic() {
              return this._nsAgnosticLevel > 0;
            }
            _searchNamespace(A) {
              let t = this._namespaces.get(A);
              if (t) return t;
              for (let [i, { check: a }] of Object.entries(rz))
                if (a(A)) {
                  if ((t = hw[i])) return this._namespaces.set(A, t), t;
                  break;
                }
              return (
                (t = new hD(++this._nextNsId)), this._namespaces.set(A, t), t
              );
            }
            _addNamespacePrefix(A) {
              for (let { prefix: t, value: i } of A) {
                let A = this._searchNamespace(i),
                  a = this._namespacePrefixes.get(t);
                a || ((a = []), this._namespacePrefixes.set(t, a)), a.push(A);
              }
            }
            _getNamespaceToUse(A) {
              if (!A) return this._currentNamespace;
              let t = this._namespacePrefixes.get(A);
              return t?.length > 0
                ? t.at(-1)
                : (m(`Unknown namespace prefix: ${A}.`), null);
            }
            clean(A) {
              let { hasNamespace: t, prefixes: i, nsAgnostic: a } = A;
              t && (this._currentNamespace = this._namespaceStack.pop()),
                i &&
                  i.forEach(({ prefix: A }) => {
                    this._namespacePrefixes.get(A).pop();
                  }),
                a && this._nsAgnosticLevel--;
            }
          }
          class hS extends go {
            constructor(A = null, t = !1) {
              super(),
                (this._builder = new hF(A)),
                (this._stack = []),
                (this._globalData = { usedTypefaces: new Set() }),
                (this._ids = new Map()),
                (this._current = this._builder.buildRoot(this._ids)),
                (this._errorCode = 0),
                (this._whiteRegex = /^\s+$/),
                (this._nbsps = /\xa0+/g),
                (this._richText = t);
            }
            parse(A) {
              if ((this.parseXml(A), 0 === this._errorCode))
                return this._current[g5](), this._current.element;
            }
            onText(A) {
              (A = A.replace(this._nbsps, (A) => A.slice(1) + ' ')),
                this._richText || this._current[gZ]()
                  ? this._current[rN](A, this._richText)
                  : this._whiteRegex.test(A) || this._current[rN](A.trim());
            }
            onCdata(A) {
              this._current[rN](A);
            }
            _mkAttributes(A, t) {
              let i = null,
                a = null,
                s = Object.create({});
              for (let { name: g, value: r } of A)
                if ('xmlns' === g)
                  i
                    ? m(`XFA - multiple namespace definition in <${t}>`)
                    : (i = r);
                else if (g.startsWith('xmlns:')) {
                  let A = g.substring(6);
                  a || (a = []), a.push({ prefix: A, value: r });
                } else {
                  let A = g.indexOf(':');
                  if (-1 === A) s[g] = r;
                  else {
                    let t = s[rS];
                    t || (t = s[rS] = Object.create(null));
                    let [i, a] = [g.slice(0, A), g.slice(A + 1)];
                    (t[i] ||= Object.create(null))[a] = r;
                  }
                }
              return [i, a, s];
            }
            _getNameAndPrefix(A, t) {
              let i = A.indexOf(':');
              return -1 === i
                ? [A, null]
                : [A.substring(i + 1), t ? '' : A.substring(0, i)];
            }
            onBeginElement(A, t, i) {
              let [a, s, g] = this._mkAttributes(t, A),
                [r, n] = this._getNameAndPrefix(
                  A,
                  this._builder.isNsAgnostic()
                ),
                o = this._builder.build({
                  nsPrefix: n,
                  name: r,
                  attributes: g,
                  namespace: a,
                  prefixes: s,
                });
              (o[rC] = this._globalData),
                i
                  ? (o[g5](),
                    this._current[rR](o) && o[rK](this._ids),
                    o[gj](this._builder))
                  : (this._stack.push(this._current), (this._current = o));
            }
            onEndElement(A) {
              let t = this._current;
              if (t[rE]() && 'string' == typeof t[g1]) {
                let A = new hS();
                A._globalData = this._globalData;
                let i = A.parse(t[g1]);
                (t[g1] = null), t[rR](i);
              }
              t[g5](),
                (this._current = this._stack.pop()),
                this._current[rR](t) && t[rK](this._ids),
                t[gj](this._builder);
            }
            onError(A) {
              this._errorCode = A;
            }
          }
          class hR {
            constructor(A) {
              try {
                this.root = new hS().parse(hR._createDocument(A));
                let t = new le(this.root);
                (this.form = t.bind()),
                  (this.dataHandler = new lt(this.root, t.getData())),
                  (this.form[rC].template = this.form);
              } catch (A) {
                m(`XFA - an error occurred during parsing and binding: ${A}`);
              }
            }
            isValid() {
              return this.root && this.form;
            }
            _createPagesHelper() {
              let A = this.form[rW]();
              return new Promise((t, i) => {
                let a = () => {
                  try {
                    let i = A.next();
                    i.done ? t(i.value) : setTimeout(a, 0);
                  } catch (A) {
                    i(A);
                  }
                };
                setTimeout(a, 0);
              });
            }
            async _createPages() {
              try {
                (this.pages = await this._createPagesHelper()),
                  (this.dims = this.pages.children.map((A) => {
                    let { width: t, height: i } = A.attributes.style;
                    return [0, 0, parseInt(t), parseInt(i)];
                  }));
              } catch (A) {
                m(`XFA - an error occurred during layout: ${A}`);
              }
            }
            getBoundingBox(A) {
              return this.dims[A];
            }
            async getNumPages() {
              return (
                this.pages || (await this._createPages()), this.dims.length
              );
            }
            setImages(A) {
              this.form[rC].images = A;
            }
            setFonts(A) {
              this.form[rC].fontFinder = new r4(A);
              let t = [];
              for (let A of this.form[rC].usedTypefaces)
                (A = r0(A)), this.form[rC].fontFinder.find(A) || t.push(A);
              return t.length > 0 ? t : null;
            }
            appendFonts(A, t) {
              this.form[rC].fontFinder.add(A, t);
            }
            async getPages() {
              this.pages || (await this._createPages());
              let A = this.pages;
              return (this.pages = null), A;
            }
            serializeData(A) {
              return this.dataHandler.serialize(A);
            }
            static _createDocument(A) {
              return A['/xdp:xdp'] ? Object.values(A).join('') : A['xdp:xdp'];
            }
            static getRichTextAsHtml(A) {
              if (!A || 'string' != typeof A) return null;
              try {
                let t = new hS(hy, !0).parse(A);
                if (!['body', 'xhtml'].includes(t[rF])) {
                  let A = hy.body({});
                  A[gX](t), (t = A);
                }
                let i = t[rZ]();
                if (!i.success) return null;
                let { html: a } = i,
                  { attributes: s } = a;
                return (
                  s &&
                    (s.class &&
                      (s.class = s.class.filter((A) => !A.startsWith('xfa'))),
                    (s.dir = 'auto')),
                  { html: a, str: t[rP]() }
                );
              } catch (A) {
                m(`XFA - an error occurred during parsing of rich text: ${A}`);
              }
              return null;
            }
          }
          class hG {
            static createGlobals(A) {
              return Promise.all([
                A.ensureCatalog('acroForm'),
                A.ensureDoc('xfaDatasets'),
                A.ensureCatalog('structTreeRoot'),
                A.ensureCatalog('baseUrl'),
                A.ensureCatalog('attachments'),
              ]).then(
                ([t, i, a, s, g]) => ({
                  pdfManager: A,
                  acroForm: t instanceof Aa ? t : Aa.empty,
                  xfaDatasets: i,
                  structTreeRoot: a,
                  baseUrl: s,
                  attachments: g,
                }),
                (A) => (m(`createGlobals: "${A}".`), null)
              );
            }
            static async create(A, t, i, a, s, g, r) {
              let n = s ? await this._getPageIndex(A, t, i.pdfManager) : null;
              return i.pdfManager.ensure(this, '_create', [
                A,
                t,
                i,
                a,
                s,
                g,
                n,
                r,
              ]);
            }
            static _create(A, t, i, a, s = !1, g = null, r = null, n = null) {
              let o = A.fetchIfRef(t);
              if (!(o instanceof Aa)) return;
              let { acroForm: I, pdfManager: l } = i,
                C = t instanceof As ? t.toString() : `annot_${a.createObjId()}`,
                B = o.get('Subtype');
              B = B instanceof Ae ? B.name : null;
              let h = {
                xref: A,
                ref: t,
                dict: o,
                subtype: B,
                id: C,
                annotationGlobals: i,
                collectFields: s,
                orphanFields: g,
                needAppearances: !s && !0 === I.get('NeedAppearances'),
                pageIndex: r,
                evaluatorOptions: l.evaluatorOptions,
                pageRef: n,
              };
              switch (B) {
                case 'Link':
                  return new hW(h);
                case 'Text':
                  return new hP(h);
                case 'Widget':
                  let Q = Af({ dict: o, key: 'FT' });
                  switch ((Q = Q instanceof Ae ? Q.name : null)) {
                    case 'Tx':
                      return new hK(h);
                    case 'Btn':
                      return new hv(h);
                    case 'Ch':
                      return new hq(h);
                    case 'Sig':
                      return new hT(h);
                  }
                  return (
                    m(
                      `Unimplemented widget field type "${Q}", falling back to base field type.`
                    ),
                    new hY(h)
                  );
                case 'Popup':
                  return new hZ(h);
                case 'FreeText':
                  return new hO(h);
                case 'Line':
                  return new hX(h);
                case 'Square':
                  return new hV(h);
                case 'Circle':
                  return new hj(h);
                case 'PolyLine':
                  return new hz(h);
                case 'Polygon':
                  return new h_(h);
                case 'Caret':
                  return new h$(h);
                case 'Ink':
                  return new h0(h);
                case 'Highlight':
                  return new h1(h);
                case 'Underline':
                  return new h2(h);
                case 'Squiggly':
                  return new h9(h);
                case 'StrikeOut':
                  return new h3(h);
                case 'Stamp':
                  return new h5(h);
                case 'FileAttachment':
                  return new h8(h);
                default:
                  return (
                    s ||
                      m(
                        B
                          ? `Unimplemented annotation type "${B}", falling back to base annotation.`
                          : 'Annotation is missing the required /Subtype.'
                      ),
                    new hJ(h)
                  );
              }
            }
            static async _getPageIndex(A, t, i) {
              try {
                let a = await A.fetchIfRefAsync(t);
                if (!(a instanceof Aa)) return -1;
                let s = a.getRaw('P');
                if (s instanceof As)
                  try {
                    return await i.ensureCatalog('getPageIndex', [s]);
                  } catch (A) {
                    p(`_getPageIndex -- not a valid page reference: "${A}".`);
                  }
                if (a.has('Kids')) return -1;
                let g = await i.ensureDoc('numPages');
                for (let A = 0; A < g; A++) {
                  let a = await i.getPage(A),
                    s = await i.ensure(a, 'annotations');
                  for (let i of s) if (i instanceof As && Al(i, t)) return A;
                }
              } catch (A) {
                m(`_getPageIndex: "${A}".`);
              }
              return -1;
            }
            static generateImages(A, t, i) {
              let a;
              if (!i)
                return (
                  m(
                    'generateImages: OffscreenCanvas is not supported, cannot save or print some annotations with images.'
                  ),
                  null
                );
              for (let { bitmapId: i, bitmap: s } of A)
                s && (a ||= new Map()).set(i, h5.createImage(s, t));
              return a;
            }
            static async saveNewAnnotations(A, t, i, a) {
              let s;
              let g = A.xref,
                r = [],
                n = [],
                { isOffscreenCanvasSupported: o } = A.options;
              for (let I of i)
                if (!I.deleted)
                  switch (I.annotationType) {
                    case 3:
                      if (!s) {
                        let A = new Aa(g);
                        A.set('BaseFont', Ae.get('Helvetica')),
                          A.set('Type', Ae.get('Font')),
                          A.set('Subtype', Ae.get('Type1')),
                          A.set('Encoding', Ae.get('WinAnsiEncoding'));
                        let t = [];
                        (s = g.getNewTemporaryRef()),
                          await gk(s, A, t, g),
                          r.push({ ref: s, data: t.join('') });
                      }
                      n.push(
                        hO.createNewAnnotation(g, I, r, {
                          evaluator: A,
                          task: t,
                          baseFontRef: s,
                        })
                      );
                      break;
                    case 9:
                      I.quadPoints
                        ? n.push(h1.createNewAnnotation(g, I, r))
                        : n.push(h0.createNewAnnotation(g, I, r));
                      break;
                    case 15:
                      n.push(h0.createNewAnnotation(g, I, r));
                      break;
                    case 13:
                      let i = o ? await a?.get(I.bitmapId) : null;
                      if (i?.imageStream) {
                        let { imageStream: A, smaskStream: t } = i,
                          a = [];
                        if (t) {
                          let i = g.getNewTemporaryRef();
                          await gk(i, t, a, g),
                            r.push({ ref: i, data: a.join('') }),
                            A.dict.set('SMask', i),
                            (a.length = 0);
                        }
                        let s = (i.imageRef = g.getNewTemporaryRef());
                        await gk(s, A, a, g),
                          r.push({ ref: s, data: a.join('') }),
                          (i.imageStream = i.smaskStream = null);
                      }
                      n.push(h5.createNewAnnotation(g, I, r, { image: i }));
                  }
              return { annotations: await Promise.all(n), dependencies: r };
            }
            static async printNewAnnotations(A, t, i, a, s) {
              if (!a) return null;
              let { options: g, xref: r } = t,
                n = [];
              for (let o of a)
                if (!o.deleted)
                  switch (o.annotationType) {
                    case 3:
                      n.push(
                        hO.createNewPrintAnnotation(A, r, o, {
                          evaluator: t,
                          task: i,
                          evaluatorOptions: g,
                        })
                      );
                      break;
                    case 9:
                      o.quadPoints
                        ? n.push(
                            h1.createNewPrintAnnotation(A, r, o, {
                              evaluatorOptions: g,
                            })
                          )
                        : n.push(
                            h0.createNewPrintAnnotation(A, r, o, {
                              evaluatorOptions: g,
                            })
                          );
                      break;
                    case 15:
                      n.push(
                        h0.createNewPrintAnnotation(A, r, o, {
                          evaluatorOptions: g,
                        })
                      );
                      break;
                    case 13:
                      let a = g.isOffscreenCanvasSupported
                        ? await s?.get(o.bitmapId)
                        : null;
                      if (a?.imageStream) {
                        let { imageStream: A, smaskStream: t } = a;
                        t && A.dict.set('SMask', t),
                          (a.imageRef = new e5(A, A.length)),
                          (a.imageStream = a.smaskStream = null);
                      }
                      n.push(
                        h5.createNewPrintAnnotation(A, r, o, {
                          image: a,
                          evaluatorOptions: g,
                        })
                      );
                  }
              return Promise.all(n);
            }
          }
          function hN(A, t = new Uint8ClampedArray(3)) {
            if (!Array.isArray(A)) return t;
            let i = t || new Uint8ClampedArray(3);
            switch (A.length) {
              case 0:
                return null;
              case 1:
                return Az.singletons.gray.getRgbItem(A, 0, i, 0), i;
              case 3:
                return Az.singletons.rgb.getRgbItem(A, 0, i, 0), i;
              case 4:
                return Az.singletons.cmyk.getRgbItem(A, 0, i, 0), i;
              default:
                return t;
            }
          }
          function hx(A) {
            return Array.from(A, (A) => A / 255);
          }
          function hU(A, t) {
            let i = A.getArray('QuadPoints');
            if (!Ak(i, null) || 0 === i.length || i.length % 8 > 0) return null;
            let a = new Float32Array(i.length);
            for (let A = 0, s = i.length; A < s; A += 8) {
              let [s, g, r, n, o, I, l, C] = i.slice(A, A + 8),
                B = Math.min(s, r, o, l),
                h = Math.max(s, r, o, l),
                Q = Math.min(g, n, I, C),
                c = Math.max(g, n, I, C);
              if (null !== t && (B < t[0] || h > t[2] || Q < t[1] || c > t[3]))
                return null;
              a.set([B, c, h, c, B, Q, h, Q], A);
            }
            return a;
          }
          function hM(A, t, i) {
            let [a, s, g, r] = v.getAxialAlignedBoundingBox(t, i);
            if (a === g || s === r) return [1, 0, 0, 1, A[0], A[1]];
            let n = (A[2] - A[0]) / (g - a),
              o = (A[3] - A[1]) / (r - s);
            return [n, 0, 0, o, A[0] - a * n, A[1] - s * o];
          }
          class hJ {
            constructor(A) {
              let {
                  dict: t,
                  xref: i,
                  annotationGlobals: a,
                  ref: s,
                  orphanFields: g,
                } = A,
                r = g?.get(s);
              r && t.set('Parent', r),
                this.setTitle(t.get('T')),
                this.setContents(t.get('Contents')),
                this.setModificationDate(t.get('M')),
                this.setFlags(t.get('F')),
                this.setRectangle(t.getArray('Rect')),
                this.setColor(t.getArray('C')),
                this.setBorderStyle(t),
                this.setAppearance(t),
                this.setOptionalContent(t);
              let n = t.get('MK');
              this.setBorderAndBackgroundColors(n),
                this.setRotation(n, t),
                (this.ref = A.ref instanceof As ? A.ref : null),
                (this._streams = []),
                this.appearance && this._streams.push(this.appearance);
              let o = !!(128 & this.flags),
                I = !!(512 & this.flags);
              if (
                ((this.data = {
                  annotationFlags: this.flags,
                  borderStyle: this.borderStyle,
                  color: this.color,
                  backgroundColor: this.backgroundColor,
                  borderColor: this.borderColor,
                  rotation: this.rotation,
                  contentsObj: this._contents,
                  hasAppearance: !!this.appearance,
                  id: A.id,
                  modificationDate: this.modificationDate,
                  rect: this.rectangle,
                  subtype: A.subtype,
                  hasOwnCanvas: !1,
                  noRotate: !!(16 & this.flags),
                  noHTML: o && I,
                  isEditable: !1,
                  structParent: -1,
                }),
                a.structTreeRoot)
              ) {
                let i = t.get('StructParent');
                (this.data.structParent = i =
                  Number.isInteger(i) && i >= 0 ? i : -1),
                  a.structTreeRoot.addAnnotationIdToPage(A.pageRef, i);
              }
              if (A.collectFields) {
                let a = t.get('Kids');
                if (Array.isArray(a)) {
                  let A = [];
                  for (let t of a) t instanceof As && A.push(t.toString());
                  0 !== A.length && (this.data.kidIds = A);
                }
                (this.data.actions = AM(i, t, Q)),
                  (this.data.fieldName = this._constructFieldName(t)),
                  (this.data.pageIndex = A.pageIndex);
              }
              let l = t.get('IT');
              l instanceof Ae && (this.data.it = l.name),
                (this._isOffscreenCanvasSupported =
                  A.evaluatorOptions.isOffscreenCanvasSupported),
                (this._fallbackFontDict = null),
                (this._needAppearances = !1);
            }
            _hasFlag(A, t) {
              return !!(A & t);
            }
            _buildFlags(A, t) {
              let { flags: i } = this;
              if (void 0 === A) {
                if (void 0 === t) return;
                return t ? -5 & i : (-3 & i) | 4;
              }
              return A
                ? ((i |= 4), t ? (-33 & i) | 2 : (-3 & i) | 32)
                : ((i &= -35), t ? -5 & i : 4 | i);
            }
            _isViewable(A) {
              return !this._hasFlag(A, 1) && !this._hasFlag(A, 32);
            }
            _isPrintable(A) {
              return (
                this._hasFlag(A, 4) &&
                !this._hasFlag(A, 2) &&
                !this._hasFlag(A, 1)
              );
            }
            mustBeViewed(A, t) {
              let i = A?.get(this.data.id)?.noView;
              return void 0 !== i
                ? !i
                : this.viewable && !this._hasFlag(this.flags, 2);
            }
            mustBePrinted(A) {
              let t = A?.get(this.data.id)?.noPrint;
              return void 0 !== t ? !t : this.printable;
            }
            mustBeViewedWhenEditing(A, t = null) {
              return A ? !this.data.isEditable : !t?.has(this.data.id);
            }
            get viewable() {
              return (
                null !== this.data.quadPoints &&
                (0 === this.flags || this._isViewable(this.flags))
              );
            }
            get printable() {
              return (
                null !== this.data.quadPoints &&
                0 !== this.flags &&
                this._isPrintable(this.flags)
              );
            }
            _parseStringHelper(A) {
              let t = 'string' == typeof A ? T(A) : '';
              return { str: t, dir: t && 'rtl' === sx(t).dir ? 'rtl' : 'ltr' };
            }
            setDefaultAppearance(A) {
              let { dict: t, annotationGlobals: i } = A,
                a = Af({ dict: t, key: 'DA' }) || i.acroForm.get('DA');
              (this._defaultAppearance = 'string' == typeof a ? a : ''),
                (this.data.defaultAppearanceData = s7(this._defaultAppearance));
            }
            setTitle(A) {
              this._title = this._parseStringHelper(A);
            }
            setContents(A) {
              this._contents = this._parseStringHelper(A);
            }
            setModificationDate(A) {
              this.modificationDate = 'string' == typeof A ? A : null;
            }
            setFlags(A) {
              (this.flags = Number.isInteger(A) && A > 0 ? A : 0),
                1 & this.flags &&
                  'Annotation' !== this.constructor.name &&
                  (this.flags ^= 1);
            }
            hasFlag(A) {
              return this._hasFlag(this.flags, A);
            }
            setRectangle(A) {
              this.rectangle = AR(A, [0, 0, 0, 0]);
            }
            setColor(A) {
              this.color = hN(A);
            }
            setLineEndings(A) {
              if (
                ((this.lineEndings = ['None', 'None']),
                Array.isArray(A) && 2 === A.length)
              )
                for (let t = 0; t < 2; t++) {
                  let i = A[t];
                  if (i instanceof Ae)
                    switch (i.name) {
                      case 'None':
                        continue;
                      case 'Square':
                      case 'Circle':
                      case 'Diamond':
                      case 'OpenArrow':
                      case 'ClosedArrow':
                      case 'Butt':
                      case 'ROpenArrow':
                      case 'RClosedArrow':
                      case 'Slash':
                        this.lineEndings[t] = i.name;
                        continue;
                    }
                  m(`Ignoring invalid lineEnding: ${i}`);
                }
            }
            setRotation(A, t) {
              this.rotation = 0;
              let i = A instanceof Aa ? A.get('R') || 0 : t.get('Rotate') || 0;
              Number.isInteger(i) &&
                0 !== i &&
                ((i %= 360) < 0 && (i += 360),
                i % 90 == 0 && (this.rotation = i));
            }
            setBorderAndBackgroundColors(A) {
              A instanceof Aa
                ? ((this.borderColor = hN(A.getArray('BC'), null)),
                  (this.backgroundColor = hN(A.getArray('BG'), null)))
                : (this.borderColor = this.backgroundColor = null);
            }
            setBorderStyle(A) {
              if (((this.borderStyle = new hL()), A instanceof Aa)) {
                if (A.has('BS')) {
                  let t = A.get('BS');
                  if (t instanceof Aa) {
                    let A = t.get('Type');
                    (!A || An(A, 'Border')) &&
                      (this.borderStyle.setWidth(t.get('W'), this.rectangle),
                      this.borderStyle.setStyle(t.get('S')),
                      this.borderStyle.setDashArray(t.getArray('D')));
                  }
                } else if (A.has('Border')) {
                  let t = A.getArray('Border');
                  Array.isArray(t) &&
                    t.length >= 3 &&
                    (this.borderStyle.setHorizontalCornerRadius(t[0]),
                    this.borderStyle.setVerticalCornerRadius(t[1]),
                    this.borderStyle.setWidth(t[2], this.rectangle),
                    4 === t.length && this.borderStyle.setDashArray(t[3], !0));
                } else this.borderStyle.setWidth(0);
              }
            }
            setAppearance(A) {
              this.appearance = null;
              let t = A.get('AP');
              if (!(t instanceof Aa)) return;
              let i = t.get('N');
              if (i instanceof AC) {
                this.appearance = i;
                return;
              }
              if (!(i instanceof Aa)) return;
              let a = A.get('AS');
              if (!(a instanceof Ae && i.has(a.name))) return;
              let s = i.get(a.name);
              s instanceof AC && (this.appearance = s);
            }
            setOptionalContent(A) {
              this.oc = null;
              let t = A.get('OC');
              t instanceof Ae
                ? m(
                    'setOptionalContent: Support for /Name-entry is not implemented.'
                  )
                : t instanceof Aa && (this.oc = t);
            }
            loadResources(A, t) {
              return t.dict.getAsync('Resources').then((t) => {
                if (t)
                  return new gW(t, A, t.xref).load().then(function () {
                    return t;
                  });
              });
            }
            async getOperatorList(A, t, i, a) {
              let s;
              let { hasOwnCanvas: g, id: r, rect: n } = this.data,
                o = this.appearance,
                l = !!(g && 2 & i);
              if (l && (n[0] === n[2] || n[1] === n[3]))
                return (
                  (this.data.hasOwnCanvas = !1),
                  { opList: new sX(), separateForm: !1, separateCanvas: !1 }
                );
              if (!o) {
                if (!l)
                  return {
                    opList: new sX(),
                    separateForm: !1,
                    separateCanvas: !1,
                  };
                (o = new AO('')).dict = new Aa();
              }
              let C = o.dict,
                B = await this.loadResources(
                  [
                    'ExtGState',
                    'ColorSpace',
                    'Pattern',
                    'Shading',
                    'XObject',
                    'Font',
                  ],
                  o
                ),
                h = AS(C.getArray('BBox'), [0, 0, 1, 1]),
                Q = AF(C.getArray('Matrix'), I),
                c = hM(n, h, Q),
                E = new sX();
              return (
                this.oc && (s = await A.parseMarkedContentProps(this.oc, null)),
                void 0 !== s && E.addOp(70, ['OC', s]),
                E.addOp(80, [r, n, c, Q, l]),
                await A.getOperatorList({
                  stream: o,
                  task: t,
                  resources: B,
                  operatorList: E,
                  fallbackFontDict: this._fallbackFontDict,
                }),
                E.addOp(81, []),
                void 0 !== s && E.addOp(71, []),
                this.reset(),
                { opList: E, separateForm: !1, separateCanvas: l }
              );
            }
            async save(A, t, i) {
              return null;
            }
            get hasTextContent() {
              return !1;
            }
            async extractTextContent(A, t, i) {
              if (!this.appearance) return;
              let a = await this.loadResources(
                  ['ExtGState', 'Font', 'Properties', 'XObject'],
                  this.appearance
                ),
                s = [],
                g = [],
                r = null;
              if (
                (await A.getTextContent({
                  stream: this.appearance,
                  task: t,
                  resources: a,
                  includeMarkedContent: !0,
                  keepWhiteSpace: !0,
                  sink: {
                    desiredSize: Math.Infinity,
                    ready: !0,
                    enqueue(A, t) {
                      for (let t of A.items)
                        void 0 !== t.str &&
                          ((r ||= t.transform.slice(-2)),
                          g.push(t.str),
                          t.hasEOL &&
                            (s.push(g.join('').trimEnd()), (g.length = 0)));
                    },
                  },
                  viewBox: i,
                }),
                this.reset(),
                g.length && s.push(g.join('').trimEnd()),
                s.length > 1 || s[0])
              ) {
                let A = this.appearance.dict,
                  t = AS(A.getArray('BBox'), null),
                  i = AF(A.getArray('Matrix'), null);
                (this.data.textPosition = this._transformPoint(r, t, i)),
                  (this.data.textContent = s);
              }
            }
            _transformPoint(A, t, i) {
              let { rect: a } = this.data;
              (t ||= [0, 0, 1, 1]), (i ||= [1, 0, 0, 1, 0, 0]);
              let s = hM(a, t, i);
              return (
                (s[4] -= a[0]),
                (s[5] -= a[1]),
                (A = v.applyTransform(A, s)),
                v.applyTransform(A, i)
              );
            }
            getFieldObject() {
              return this.data.kidIds
                ? {
                    id: this.data.id,
                    actions: this.data.actions,
                    name: this.data.fieldName,
                    strokeColor: this.data.borderColor,
                    fillColor: this.data.backgroundColor,
                    type: '',
                    kidIds: this.data.kidIds,
                    page: this.data.pageIndex,
                    rotation: this.rotation,
                  }
                : null;
            }
            reset() {
              for (let A of this._streams) A.reset();
            }
            _constructFieldName(A) {
              if (!A.has('T') && !A.has('Parent'))
                return (
                  m('Unknown field name, falling back to empty field name.'), ''
                );
              if (!A.has('Parent')) return T(A.get('T'));
              let t = [];
              A.has('T') && t.unshift(T(A.get('T')));
              let i = A,
                a = new Ag();
              for (
                A.objId && a.put(A.objId);
                i.has('Parent') &&
                !(
                  !((i = i.get('Parent')) instanceof Aa) ||
                  (i.objId && a.has(i.objId))
                );

              )
                i.objId && a.put(i.objId),
                  i.has('T') && t.unshift(T(i.get('T')));
              return t.join('.');
            }
          }
          class hL {
            constructor() {
              (this.width = 1),
                (this.rawWidth = 1),
                (this.style = 1),
                (this.dashArray = [3]),
                (this.horizontalCornerRadius = 0),
                (this.verticalCornerRadius = 0);
            }
            setWidth(A, t = [0, 0, 0, 0]) {
              if (A instanceof Ae) this.width = 0;
              else if ('number' == typeof A) {
                if (A > 0) {
                  this.rawWidth = A;
                  let i = (t[2] - t[0]) / 2,
                    a = (t[3] - t[1]) / 2;
                  i > 0 &&
                    a > 0 &&
                    (A > i || A > a) &&
                    (m(`AnnotationBorderStyle.setWidth - ignoring width: ${A}`),
                    (A = 1));
                }
                this.width = A;
              }
            }
            setStyle(A) {
              if (A instanceof Ae)
                switch (A.name) {
                  case 'S':
                    this.style = 1;
                    break;
                  case 'D':
                    this.style = 2;
                    break;
                  case 'B':
                    this.style = 3;
                    break;
                  case 'I':
                    this.style = 4;
                    break;
                  case 'U':
                    this.style = 5;
                }
            }
            setDashArray(A, t = !1) {
              if (Array.isArray(A)) {
                let i = !0,
                  a = !0;
                for (let t of A) {
                  if (!(+t >= 0)) {
                    i = !1;
                    break;
                  }
                  t > 0 && (a = !1);
                }
                0 === A.length || (i && !a)
                  ? ((this.dashArray = A), t && this.setStyle(Ae.get('D')))
                  : (this.width = 0);
              } else A && (this.width = 0);
            }
            setHorizontalCornerRadius(A) {
              Number.isInteger(A) && (this.horizontalCornerRadius = A);
            }
            setVerticalCornerRadius(A) {
              Number.isInteger(A) && (this.verticalCornerRadius = A);
            }
          }
          class hH extends hJ {
            constructor(A) {
              super(A);
              let { dict: t } = A;
              if (t.has('IRT')) {
                let A = t.getRaw('IRT');
                this.data.inReplyTo = A instanceof As ? A.toString() : null;
                let i = t.get('RT');
                this.data.replyType = i instanceof Ae ? i.name : 'R';
              }
              let i = null;
              if (this.data.replyType === h) {
                let A = t.get('IRT');
                this.setTitle(A.get('T')),
                  (this.data.titleObj = this._title),
                  this.setContents(A.get('Contents')),
                  (this.data.contentsObj = this._contents),
                  A.has('CreationDate')
                    ? (this.setCreationDate(A.get('CreationDate')),
                      (this.data.creationDate = this.creationDate))
                    : (this.data.creationDate = null),
                  A.has('M')
                    ? (this.setModificationDate(A.get('M')),
                      (this.data.modificationDate = this.modificationDate))
                    : (this.data.modificationDate = null),
                  (i = A.getRaw('Popup')),
                  A.has('C')
                    ? (this.setColor(A.getArray('C')),
                      (this.data.color = this.color))
                    : (this.data.color = null);
              } else
                (this.data.titleObj = this._title),
                  this.setCreationDate(t.get('CreationDate')),
                  (this.data.creationDate = this.creationDate),
                  (i = t.getRaw('Popup')),
                  t.has('C') || (this.data.color = null);
              (this.data.popupRef = i instanceof As ? i.toString() : null),
                t.has('RC') &&
                  (this.data.richText = hR.getRichTextAsHtml(t.get('RC')));
            }
            setCreationDate(A) {
              this.creationDate = 'string' == typeof A ? A : null;
            }
            _setDefaultAppearance({
              xref: A,
              extra: t,
              strokeColor: i,
              fillColor: a,
              blendMode: s,
              strokeAlpha: g,
              fillAlpha: r,
              pointsCallback: n,
            }) {
              let o = Number.MAX_VALUE,
                I = Number.MAX_VALUE,
                l = Number.MIN_VALUE,
                C = Number.MIN_VALUE,
                B = ['q'];
              t && B.push(t),
                i && B.push(`${i[0]} ${i[1]} ${i[2]} RG`),
                a && B.push(`${a[0]} ${a[1]} ${a[2]} rg`);
              let h = this.data.quadPoints;
              h ||
                (h = Float32Array.from([
                  this.rectangle[0],
                  this.rectangle[3],
                  this.rectangle[2],
                  this.rectangle[3],
                  this.rectangle[0],
                  this.rectangle[1],
                  this.rectangle[2],
                  this.rectangle[1],
                ]));
              for (let A = 0, t = h.length; A < t; A += 8) {
                let [t, i, a, s] = n(B, h.subarray(A, A + 8));
                (o = Math.min(o, t)),
                  (l = Math.max(l, i)),
                  (I = Math.min(I, a)),
                  (C = Math.max(C, s));
              }
              B.push('Q');
              let Q = new Aa(A),
                c = new Aa(A);
              c.set('Subtype', Ae.get('Form'));
              let E = new AO(B.join(' '));
              (E.dict = c), Q.set('Fm0', E);
              let u = new Aa(A);
              s && u.set('BM', Ae.get(s)),
                'number' == typeof g && u.set('CA', g),
                'number' == typeof r && u.set('ca', r);
              let d = new Aa(A);
              d.set('GS0', u);
              let f = new Aa(A);
              f.set('ExtGState', d), f.set('XObject', Q);
              let p = new Aa(A);
              p.set('Resources', f);
              let m = (this.data.rect = [o, I, l, C]);
              p.set('BBox', m),
                (this.appearance = new AO('/GS0 gs /Fm0 Do')),
                (this.appearance.dict = p),
                this._streams.push(this.appearance, E);
            }
            static async createNewAnnotation(A, t, i, a) {
              let s;
              t.ref || (t.ref = A.getNewTemporaryRef());
              let g = t.ref,
                r = await this.createNewAppearanceStream(t, A, a),
                n = [];
              if (r) {
                let a = A.getNewTemporaryRef();
                (s = this.createNewDict(t, A, { apRef: a })),
                  await gk(a, r, n, A),
                  i.push({ ref: a, data: n.join('') });
              } else s = this.createNewDict(t, A, {});
              return (
                Number.isInteger(t.parentTreeId) &&
                  s.set('StructParent', t.parentTreeId),
                (n.length = 0),
                await gk(g, s, n, A),
                { ref: g, data: n.join('') }
              );
            }
            static async createNewPrintAnnotation(A, t, i, a) {
              let s = await this.createNewAppearanceStream(i, t, a),
                g = this.createNewDict(i, t, s ? { ap: s } : {}),
                r = new this.prototype.constructor({
                  dict: g,
                  xref: t,
                  annotationGlobals: A,
                  evaluatorOptions: a.evaluatorOptions,
                });
              return i.ref && (r.ref = r.refToReplace = i.ref), r;
            }
          }
          class hY extends hJ {
            constructor(A) {
              super(A);
              let { dict: t, xref: i, annotationGlobals: a } = A,
                s = this.data;
              (this._needAppearances = A.needAppearances),
                (s.annotationType = 20),
                void 0 === s.fieldName &&
                  (s.fieldName = this._constructFieldName(t)),
                void 0 === s.actions && (s.actions = AM(i, t, Q));
              let g = Af({ dict: t, key: 'V', getArray: !0 });
              s.fieldValue = this._decodeFormValue(g);
              let r = Af({ dict: t, key: 'DV', getArray: !0 });
              if (
                ((s.defaultFieldValue = this._decodeFormValue(r)),
                void 0 === g && a.xfaDatasets)
              ) {
                let A = this._title.str;
                A &&
                  ((this._hasValueFromXFA = !0),
                  (s.fieldValue = g = a.xfaDatasets.getValue(A)));
              }
              void 0 === g &&
                null !== s.defaultFieldValue &&
                (s.fieldValue = s.defaultFieldValue),
                (s.alternativeText = T(t.get('TU') || '')),
                this.setDefaultAppearance(A),
                (s.hasAppearance ||=
                  this._needAppearances &&
                  void 0 !== s.fieldValue &&
                  null !== s.fieldValue);
              let n = Af({ dict: t, key: 'FT' });
              s.fieldType = n instanceof Ae ? n.name : null;
              let o = Af({ dict: t, key: 'DR' }),
                I = a.acroForm.get('DR'),
                l = this.appearance?.dict.get('Resources');
              (this._fieldResources = {
                localResources: o,
                acroFormResources: I,
                appearanceResources: l,
                mergedResources: Aa.merge({
                  xref: i,
                  dictArray: [o, l, I],
                  mergeSubDicts: !0,
                }),
              }),
                (s.fieldFlags = Af({ dict: t, key: 'Ff' })),
                (!Number.isInteger(s.fieldFlags) || s.fieldFlags < 0) &&
                  (s.fieldFlags = 0),
                (s.readOnly = this.hasFieldFlag(1)),
                (s.required = this.hasFieldFlag(2)),
                (s.hidden =
                  this._hasFlag(s.annotationFlags, 2) ||
                  this._hasFlag(s.annotationFlags, 32));
            }
            _decodeFormValue(A) {
              return Array.isArray(A)
                ? A.filter((A) => 'string' == typeof A).map((A) => T(A))
                : A instanceof Ae
                  ? T(A.name)
                  : 'string' == typeof A
                    ? T(A)
                    : null;
            }
            hasFieldFlag(A) {
              return !!(this.data.fieldFlags & A);
            }
            _isViewable(A) {
              return !0;
            }
            mustBeViewed(A, t) {
              return t
                ? this.viewable
                : super.mustBeViewed(A, t) && !this._hasFlag(this.flags, 32);
            }
            getRotationMatrix(A) {
              let t = A?.get(this.data.id)?.rotation;
              return (void 0 === t && (t = this.rotation), 0 === t)
                ? I
                : AP(
                    t,
                    this.data.rect[2] - this.data.rect[0],
                    this.data.rect[3] - this.data.rect[1]
                  );
            }
            getBorderAndBackgroundAppearances(A) {
              let t = A?.get(this.data.id)?.rotation;
              if (
                (void 0 === t && (t = this.rotation),
                !this.backgroundColor && !this.borderColor)
              )
                return '';
              let i = this.data.rect[2] - this.data.rect[0],
                a = this.data.rect[3] - this.data.rect[1],
                s =
                  0 === t || 180 === t
                    ? `0 0 ${i} ${a} re`
                    : `0 0 ${a} ${i} re`,
                g = '';
              return (
                this.backgroundColor &&
                  (g = `${gA(this.backgroundColor, !0)} ${s} f `),
                this.borderColor &&
                  (g += `${this.borderStyle.width || 1} w ${gA(this.borderColor, !1)} ${s} S `),
                g
              );
            }
            async getOperatorList(A, t, i, a) {
              let s;
              if (
                16 & i &&
                !(this instanceof hT) &&
                !this.data.noHTML &&
                !this.data.hasOwnCanvas
              )
                return {
                  opList: new sX(),
                  separateForm: !0,
                  separateCanvas: !1,
                };
              if (!this._hasText) return super.getOperatorList(A, t, i, a);
              let g = await this._getAppearance(A, t, i, a);
              if (this.appearance && null === g)
                return super.getOperatorList(A, t, i, a);
              let r = new sX();
              if (!this._defaultAppearance || null === g)
                return { opList: r, separateForm: !1, separateCanvas: !1 };
              let n = !!(this.data.hasOwnCanvas && 2 & i),
                o = [
                  0,
                  0,
                  this.data.rect[2] - this.data.rect[0],
                  this.data.rect[3] - this.data.rect[1],
                ],
                I = hM(this.data.rect, o, [1, 0, 0, 1, 0, 0]);
              this.oc && (s = await A.parseMarkedContentProps(this.oc, null)),
                void 0 !== s && r.addOp(70, ['OC', s]),
                r.addOp(80, [
                  this.data.id,
                  this.data.rect,
                  I,
                  this.getRotationMatrix(a),
                  n,
                ]);
              let l = new AO(g);
              return (
                await A.getOperatorList({
                  stream: l,
                  task: t,
                  resources: this._fieldResources.mergedResources,
                  operatorList: r,
                }),
                r.addOp(81, []),
                void 0 !== s && r.addOp(71, []),
                { opList: r, separateForm: !1, separateCanvas: n }
              );
            }
            _getMKDict(A) {
              let t = new Aa(null);
              return (
                A && t.set('R', A),
                this.borderColor && t.set('BC', hx(this.borderColor)),
                this.backgroundColor && t.set('BG', hx(this.backgroundColor)),
                t.size > 0 ? t : null
              );
            }
            amendSavedDict(A, t) {}
            async save(A, t, i) {
              let a = i?.get(this.data.id),
                s = this._buildFlags(a?.noView, a?.noPrint),
                g = a?.value,
                r = a?.rotation;
              if (g === this.data.fieldValue || void 0 === g) {
                if (!this._hasValueFromXFA && void 0 === r && void 0 === s)
                  return null;
                g ||= this.data.fieldValue;
              }
              if (
                void 0 === r &&
                !this._hasValueFromXFA &&
                Array.isArray(g) &&
                Array.isArray(this.data.fieldValue) &&
                Z(g, this.data.fieldValue) &&
                void 0 === s
              )
                return null;
              void 0 === r && (r = this.rotation);
              let n = null;
              if (
                !this._needAppearances &&
                null === (n = await this._getAppearance(A, t, 8, i)) &&
                void 0 === s
              )
                return null;
              let o = !1;
              n?.needAppearances && ((o = !0), (n = null));
              let { xref: l } = A,
                C = l.fetchIfRef(this.ref);
              if (!(C instanceof Aa)) return null;
              let B = new Aa(l);
              for (let A of C.getKeys()) 'AP' !== A && B.set(A, C.getRaw(A));
              if (void 0 !== s && (B.set('F', s), null === n && !o)) {
                let A = C.getRaw('AP');
                A && B.set('AP', A);
              }
              let h = { path: this.data.fieldName, value: g };
              B.set('V', Array.isArray(g) ? g.map(Aq) : Aq(g)),
                this.amendSavedDict(i, B);
              let Q = this._getMKDict(r);
              Q && B.set('MK', Q);
              let c = [],
                E = [{ ref: this.ref, data: '', xfa: h, needAppearances: o }];
              if (null !== n) {
                let A = l.getNewTemporaryRef(),
                  t = new Aa(l);
                B.set('AP', t), t.set('N', A);
                let a = this._getSaveFieldResources(l),
                  s = new AO(n),
                  g = (s.dict = new Aa(l));
                g.set('Subtype', Ae.get('Form')),
                  g.set('Resources', a),
                  g.set('BBox', [
                    0,
                    0,
                    this.data.rect[2] - this.data.rect[0],
                    this.data.rect[3] - this.data.rect[1],
                  ]);
                let r = this.getRotationMatrix(i);
                r !== I && g.set('Matrix', r),
                  await gk(A, s, c, l),
                  E.push({
                    ref: A,
                    data: c.join(''),
                    xfa: null,
                    needAppearances: !1,
                  }),
                  (c.length = 0);
              }
              return (
                B.set('M', `D:${O()}`),
                await gk(this.ref, B, c, l),
                (E[0].data = c.join('')),
                E
              );
            }
            async _getAppearance(A, t, i, a) {
              let s, g;
              if (this.hasFieldFlag(8192)) return null;
              let r = a?.get(this.data.id);
              if (
                (r && ((s = r.formattedValue || r.value), (g = r.rotation)),
                void 0 === g &&
                  void 0 === s &&
                  !this._needAppearances &&
                  (!this._hasValueFromXFA || this.appearance))
              )
                return null;
              let n = this.getBorderAndBackgroundAppearances(a);
              if (void 0 === s && !(s = this.data.fieldValue))
                return `/Tx BMC q ${n}Q EMC`;
              if (
                (Array.isArray(s) && 1 === s.length && (s = s[0]),
                w('string' == typeof s, 'Expected `value` to be a string.'),
                (s = s.trimEnd()),
                this.data.combo)
              ) {
                let A = this.data.options.find(({ exportValue: A }) => s === A);
                s = A?.displayValue || s;
              }
              if ('' === s) return `/Tx BMC q ${n}Q EMC`;
              void 0 === g && (g = this.rotation);
              let o,
                I = -1;
              this.data.multiLine
                ? (I = (o = s.split(/\r\n?|\n/).map((A) => A.normalize('NFC')))
                    .length)
                : (o = [s.replace(/\r\n?|\n/, '').normalize('NFC')]);
              let l = this.data.rect[3] - this.data.rect[1],
                C = this.data.rect[2] - this.data.rect[0];
              (90 !== g && 270 !== g) || ([C, l] = [l, C]),
                this._defaultAppearance ||
                  (this.data.defaultAppearanceData = s7(
                    (this._defaultAppearance = '/Helvetica 0 Tf 0 g')
                  ));
              let B,
                h,
                Q,
                c = await hY._getFontData(
                  A,
                  t,
                  this.data.defaultAppearanceData,
                  this._fieldResources.mergedResources
                ),
                E = [],
                u = !1;
              for (let A of o) {
                let t = c.encodeString(A);
                t.length > 1 && (u = !0), E.push(t.join(''));
              }
              if (u && 8 & i) return { needAppearances: !0 };
              if (u && this._isOffscreenCanvasSupported) {
                let i = this.data.comb ? 'monospace' : 'sans-serif',
                  a = new ge(A.xref, i),
                  g = a.createFontResources(o.join('')),
                  r = g.getRaw('Font');
                if (this._fieldResources.mergedResources.has('Font')) {
                  let A = this._fieldResources.mergedResources.get('Font');
                  for (let t of r.getKeys()) A.set(t, r.getRaw(t));
                } else this._fieldResources.mergedResources.set('Font', r);
                let n = a.fontName.name;
                c = await hY._getFontData(
                  A,
                  t,
                  { fontName: n, fontSize: 0 },
                  g
                );
                for (let A = 0, t = E.length; A < t; A++) E[A] = AT(o[A]);
                let u = Object.assign(
                  Object.create(null),
                  this.data.defaultAppearanceData
                );
                (this.data.defaultAppearanceData.fontSize = 0),
                  (this.data.defaultAppearanceData.fontName = n),
                  ([B, h, Q] = this._computeFontSize(l - 2, C - 4, s, c, I)),
                  (this.data.defaultAppearanceData = u);
              } else
                this._isOffscreenCanvasSupported ||
                  m(
                    '_getAppearance: OffscreenCanvas is not supported, annotation may not render correctly.'
                  ),
                  ([B, h, Q] = this._computeFontSize(l - 2, C - 4, s, c, I));
              let d = c.descent;
              d = isNaN(d)
                ? 0.25925925925925924 * Q
                : Math.max(0.25925925925925924 * Q, Math.abs(d) * h);
              let f = Math.min(Math.floor((l - h) / 2), 1),
                p = this.data.textAlignment;
              if (this.data.multiLine)
                return this._getMultilineAppearance(
                  B,
                  E,
                  c,
                  h,
                  C,
                  l,
                  p,
                  2,
                  f,
                  d,
                  Q,
                  a
                );
              if (this.data.comb)
                return this._getCombAppearance(
                  B,
                  c,
                  E[0],
                  h,
                  C,
                  l,
                  2,
                  f,
                  d,
                  Q,
                  a
                );
              let y = f + d;
              return 0 === p || p > 2
                ? `/Tx BMC q ${n}BT ` +
                    B +
                    ` 1 0 0 1 ${AK(2)} ${AK(y)} Tm (${Ax(E[0])}) Tj ET Q EMC`
                : `/Tx BMC q ${n}BT ` +
                    B +
                    ` 1 0 0 1 0 0 Tm ${this._renderText(E[0], c, h, C, p, { shift: 0 }, 2, y)} ET Q EMC`;
            }
            static async _getFontData(A, t, i, a) {
              let s = new sX(),
                g = {
                  font: null,
                  clone() {
                    return this;
                  },
                },
                { fontName: r, fontSize: n } = i;
              return (
                await A.handleSetFont(
                  a,
                  [r && Ae.get(r), n],
                  null,
                  s,
                  t,
                  g,
                  null
                ),
                g.font
              );
            }
            _getTextWidth(A, t) {
              return t.charsToGlyphs(A).reduce((A, t) => A + t.width, 0) / 1e3;
            }
            _computeFontSize(A, t, i, a, s) {
              let { fontSize: g } = this.data.defaultAppearanceData,
                r = 1.35 * (g || 12),
                n = Math.round(A / r);
              if (!g) {
                let o = (A) => Math.floor(100 * A) / 100;
                if (-1 === s) {
                  let s = this._getTextWidth(i, a);
                  (g = o(Math.min(A / 1.35, t / s))), (n = 1);
                } else {
                  let I = i.split(/\r\n?|\n/),
                    l = [];
                  for (let A of I) {
                    let t = a.encodeString(A).join(''),
                      i = a.charsToGlyphs(t),
                      s = a.getCharPositions(t);
                    l.push({ line: t, glyphs: i, positions: s });
                  }
                  let C = (i) => {
                    let s = 0;
                    for (let g of l)
                      if (
                        (s += this._splitLine(null, a, i, t, g).length * i) > A
                      )
                        return !0;
                    return !1;
                  };
                  for (n = Math.max(n, s); C((g = o((r = A / n) / 1.35))); )
                    n++;
                }
                let { fontName: I, fontColor: l } =
                  this.data.defaultAppearanceData;
                this._defaultAppearance = (function ({
                  fontSize: A,
                  fontName: t,
                  fontColor: i,
                }) {
                  return `/${AN(t)} ${A} Tf ${gA(i, !0)}`;
                })({ fontSize: g, fontName: I, fontColor: l });
              }
              return [this._defaultAppearance, g, A / n];
            }
            _renderText(A, t, i, a, s, g, r, n) {
              let o;
              o =
                1 === s
                  ? (a - this._getTextWidth(A, t) * i) / 2
                  : 2 === s
                    ? a - this._getTextWidth(A, t) * i - r
                    : r;
              let I = AK(o - g.shift);
              return (g.shift = o), `${I} ${(n = AK(n))} Td (${Ax(A)}) Tj`;
            }
            _getSaveFieldResources(A) {
              let {
                  localResources: t,
                  appearanceResources: i,
                  acroFormResources: a,
                } = this._fieldResources,
                s = this.data.defaultAppearanceData?.fontName;
              if (!s) return t || Aa.empty;
              for (let A of [t, i])
                if (A instanceof Aa) {
                  let t = A.get('Font');
                  if (t instanceof Aa && t.has(s)) return A;
                }
              if (a instanceof Aa) {
                let i = a.get('Font');
                if (i instanceof Aa && i.has(s)) {
                  let a = new Aa(A);
                  a.set(s, i.getRaw(s));
                  let g = new Aa(A);
                  return (
                    g.set('Font', a),
                    Aa.merge({ xref: A, dictArray: [g, t], mergeSubDicts: !0 })
                  );
                }
              }
              return t || Aa.empty;
            }
            getFieldObject() {
              return null;
            }
          }
          class hK extends hY {
            constructor(A) {
              super(A);
              let { dict: t } = A;
              t.has('PMD') &&
                ((this.flags |= 2),
                (this.data.hidden = !0),
                m('Barcodes are not supported')),
                (this.data.hasOwnCanvas =
                  this.data.readOnly && !this.data.noHTML),
                (this._hasText = !0),
                'string' != typeof this.data.fieldValue &&
                  (this.data.fieldValue = '');
              let i = Af({ dict: t, key: 'Q' });
              (!Number.isInteger(i) || i < 0 || i > 2) && (i = null),
                (this.data.textAlignment = i);
              let a = Af({ dict: t, key: 'MaxLen' });
              (!Number.isInteger(a) || a < 0) && (a = 0),
                (this.data.maxLen = a),
                (this.data.multiLine = this.hasFieldFlag(4096)),
                (this.data.comb =
                  this.hasFieldFlag(16777216) &&
                  !this.hasFieldFlag(4096) &&
                  !this.hasFieldFlag(8192) &&
                  !this.hasFieldFlag(1048576) &&
                  0 !== this.data.maxLen),
                (this.data.doNotScroll = this.hasFieldFlag(8388608));
            }
            get hasTextContent() {
              return !!this.appearance && !this._needAppearances;
            }
            _getCombAppearance(A, t, i, a, s, g, r, n, o, I, l) {
              let C = s / this.data.maxLen,
                B = this.getBorderAndBackgroundAppearances(l),
                h = [],
                Q = t.getCharPositions(i);
              for (let [A, t] of Q) h.push(`(${Ax(i.substring(A, t))}) Tj`);
              let c = h.join(` ${AK(C)} 0 Td `);
              return (
                `/Tx BMC q ${B}BT ` +
                A +
                ` 1 0 0 1 ${AK(r)} ${AK(n + o)} Tm ${c} ET Q EMC`
              );
            }
            _getMultilineAppearance(A, t, i, a, s, g, r, n, o, I, l, C) {
              let B = [],
                h = s - 2 * n,
                Q = { shift: 0 };
              for (let A = 0, g = t.length; A < g; A++) {
                let g = t[A],
                  C = this._splitLine(g, i, a, h);
                for (let t = 0, g = C.length; t < g; t++) {
                  let g = C[t],
                    h = 0 === A && 0 === t ? -o - (l - I) : -l;
                  B.push(this._renderText(g, i, a, s, r, Q, n, h));
                }
              }
              let c = this.getBorderAndBackgroundAppearances(C),
                E = B.join('\n');
              return (
                `/Tx BMC q ${c}BT ` + A + ` 1 0 0 1 0 ${AK(g)} Tm ${E} ET Q EMC`
              );
            }
            _splitLine(A, t, i, a, s = {}) {
              A = s.line || A;
              let g = s.glyphs || t.charsToGlyphs(A);
              if (g.length <= 1) return [A];
              let r = s.positions || t.getCharPositions(A),
                n = i / 1e3,
                o = [],
                I = -1,
                l = -1,
                C = -1,
                B = 0,
                h = 0;
              for (let t = 0, i = g.length; t < i; t++) {
                let [i, s] = r[t],
                  Q = g[t],
                  c = Q.width * n;
                ' ' === Q.unicode
                  ? h + c > a
                    ? (o.push(A.substring(B, i)),
                      (B = i),
                      (h = c),
                      (I = -1),
                      (C = -1))
                    : ((h += c), (I = i), (l = s), (C = t))
                  : h + c > a
                    ? -1 !== I
                      ? (o.push(A.substring(B, l)),
                        (B = l),
                        (t = C + 1),
                        (I = -1),
                        (h = 0))
                      : (o.push(A.substring(B, i)), (B = i), (h = c))
                    : (h += c);
              }
              return B < A.length && o.push(A.substring(B, A.length)), o;
            }
            async extractTextContent(A, t, i) {
              await super.extractTextContent(A, t, i);
              let a = this.data.textContent;
              if (!a) return;
              let s = a.join('\n');
              if (s === this.data.fieldValue) return;
              let g = s.replaceAll(/([.*+?^${}()|[\]\\])|(\s+)/g, (A, t) =>
                t ? `\\${t}` : '\\s+'
              );
              RegExp(`^\\s*${g}\\s*$`).test(this.data.fieldValue) &&
                (this.data.textContent = this.data.fieldValue.split('\n'));
            }
            getFieldObject() {
              return {
                id: this.data.id,
                value: this.data.fieldValue,
                defaultValue: this.data.defaultFieldValue || '',
                multiline: this.data.multiLine,
                password: this.hasFieldFlag(8192),
                charLimit: this.data.maxLen,
                comb: this.data.comb,
                editable: !this.data.readOnly,
                hidden: this.data.hidden,
                name: this.data.fieldName,
                rect: this.data.rect,
                actions: this.data.actions,
                page: this.data.pageIndex,
                strokeColor: this.data.borderColor,
                fillColor: this.data.backgroundColor,
                rotation: this.rotation,
                type: 'text',
              };
            }
          }
          class hv extends hY {
            constructor(A) {
              super(A),
                (this.checkedAppearance = null),
                (this.uncheckedAppearance = null),
                (this.data.checkBox =
                  !this.hasFieldFlag(32768) && !this.hasFieldFlag(65536)),
                (this.data.radioButton =
                  this.hasFieldFlag(32768) && !this.hasFieldFlag(65536)),
                (this.data.pushButton = this.hasFieldFlag(65536)),
                (this.data.isTooltipOnly = !1),
                this.data.checkBox
                  ? this._processCheckBox(A)
                  : this.data.radioButton
                    ? this._processRadioButton(A)
                    : this.data.pushButton
                      ? ((this.data.hasOwnCanvas = !0),
                        (this.data.noHTML = !1),
                        this._processPushButton(A))
                      : m('Invalid field flags for button widget annotation');
            }
            async getOperatorList(A, t, i, a) {
              if (this.data.pushButton)
                return super.getOperatorList(A, t, i, !1, a);
              let s = null,
                g = null;
              if (a) {
                let A = a.get(this.data.id);
                (s = A ? A.value : null), (g = A ? A.rotation : null);
              }
              if (null === s && this.appearance)
                return super.getOperatorList(A, t, i, a);
              null == s &&
                (s = this.data.checkBox
                  ? this.data.fieldValue === this.data.exportValue
                  : this.data.fieldValue === this.data.buttonValue);
              let r = s ? this.checkedAppearance : this.uncheckedAppearance;
              if (r) {
                let s = this.appearance,
                  n = AF(r.dict.getArray('Matrix'), I);
                g && r.dict.set('Matrix', this.getRotationMatrix(a)),
                  (this.appearance = r);
                let o = super.getOperatorList(A, t, i, a);
                return (this.appearance = s), r.dict.set('Matrix', n), o;
              }
              return { opList: new sX(), separateForm: !1, separateCanvas: !1 };
            }
            async save(A, t, i) {
              return this.data.checkBox
                ? this._saveCheckbox(A, t, i)
                : this.data.radioButton
                  ? this._saveRadioButton(A, t, i)
                  : null;
            }
            async _saveCheckbox(A, t, i) {
              if (!i) return null;
              let a = i.get(this.data.id),
                s = this._buildFlags(a?.noView, a?.noPrint),
                g = a?.rotation,
                r = a?.value;
              if (
                void 0 === g &&
                void 0 === s &&
                (void 0 === r ||
                  (this.data.fieldValue === this.data.exportValue) === r)
              )
                return null;
              let n = A.xref.fetchIfRef(this.ref);
              if (!(n instanceof Aa)) return null;
              (n = n.clone()),
                void 0 === g && (g = this.rotation),
                void 0 === r &&
                  (r = this.data.fieldValue === this.data.exportValue);
              let o = {
                  path: this.data.fieldName,
                  value: r ? this.data.exportValue : '',
                },
                I = Ae.get(r ? this.data.exportValue : 'Off');
              n.set('V', I),
                n.set('AS', I),
                n.set('M', `D:${O()}`),
                void 0 !== s && n.set('F', s);
              let l = this._getMKDict(g);
              l && n.set('MK', l);
              let C = [];
              return (
                await gk(this.ref, n, C, A.xref),
                [{ ref: this.ref, data: C.join(''), xfa: o }]
              );
            }
            async _saveRadioButton(A, t, i) {
              if (!i) return null;
              let a = i.get(this.data.id),
                s = this._buildFlags(a?.noView, a?.noPrint),
                g = a?.rotation,
                r = a?.value;
              if (
                void 0 === g &&
                void 0 === s &&
                (void 0 === r ||
                  (this.data.fieldValue === this.data.buttonValue) === r)
              )
                return null;
              let n = A.xref.fetchIfRef(this.ref);
              if (!(n instanceof Aa)) return null;
              (n = n.clone()),
                void 0 === r &&
                  (r = this.data.fieldValue === this.data.buttonValue),
                void 0 === g && (g = this.rotation);
              let o = {
                  path: this.data.fieldName,
                  value: r ? this.data.buttonValue : '',
                },
                I = Ae.get(r ? this.data.buttonValue : 'Off'),
                l = [],
                C = null;
              if (r) {
                if (this.parent instanceof As) {
                  let t = A.xref.fetch(this.parent);
                  t.set('V', I),
                    await gk(this.parent, t, l, A.xref),
                    (C = l.join('')),
                    (l.length = 0);
                } else this.parent instanceof Aa && this.parent.set('V', I);
              }
              this.parent || n.set('V', I),
                n.set('AS', I),
                n.set('M', `D:${O()}`),
                void 0 !== s && n.set('F', s);
              let B = this._getMKDict(g);
              B && n.set('MK', B), await gk(this.ref, n, l, A.xref);
              let h = [{ ref: this.ref, data: l.join(''), xfa: o }];
              return C && h.push({ ref: this.parent, data: C, xfa: null }), h;
            }
            _getDefaultCheckedAppearance(A, t) {
              let i, a;
              let s = this.data.rect[2] - this.data.rect[0],
                g = this.data.rect[3] - this.data.rect[1],
                r = 0.8 * Math.min(s, g);
              'check' === t
                ? ((i = { width: 0.755 * r, height: 0.705 * r }), (a = '3'))
                : 'disc' === t
                  ? ((i = { width: 0.791 * r, height: 0.705 * r }), (a = 'l'))
                  : y(`_getDefaultCheckedAppearance - unsupported type: ${t}`);
              let n = `q BT /PdfJsZaDb ${r} Tf 0 g ${AK((s - i.width) / 2)} ${AK((g - i.height) / 2)} Td (${a}) Tj ET Q`,
                o = new Aa(A.xref);
              o.set('FormType', 1),
                o.set('Subtype', Ae.get('Form')),
                o.set('Type', Ae.get('XObject')),
                o.set('BBox', [0, 0, s, g]),
                o.set('Matrix', [1, 0, 0, 1, 0, 0]),
                o.set('Length', n.length);
              let I = new Aa(A.xref),
                l = new Aa(A.xref);
              l.set('PdfJsZaDb', this.fallbackFontDict),
                I.set('Font', l),
                o.set('Resources', I),
                (this.checkedAppearance = new AO(n)),
                (this.checkedAppearance.dict = o),
                this._streams.push(this.checkedAppearance);
            }
            _processCheckBox(A) {
              let t = A.dict.get('AP');
              if (!(t instanceof Aa)) return;
              let i = t.get('N');
              if (!(i instanceof Aa)) return;
              let a = this._decodeFormValue(A.dict.get('AS'));
              'string' == typeof a && (this.data.fieldValue = a);
              let s =
                  null !== this.data.fieldValue &&
                  'Off' !== this.data.fieldValue
                    ? this.data.fieldValue
                    : 'Yes',
                g = i.getKeys();
              if (0 === g.length) g.push('Off', s);
              else if (1 === g.length)
                'Off' === g[0] ? g.push(s) : g.unshift('Off');
              else if (g.includes(s)) (g.length = 0), g.push('Off', s);
              else {
                let A = g.find((A) => 'Off' !== A);
                (g.length = 0), g.push('Off', A);
              }
              g.includes(this.data.fieldValue) ||
                (this.data.fieldValue = 'Off'),
                (this.data.exportValue = g[1]);
              let r = i.get(this.data.exportValue);
              this.checkedAppearance = r instanceof AC ? r : null;
              let n = i.get('Off');
              (this.uncheckedAppearance = n instanceof AC ? n : null),
                this.checkedAppearance
                  ? this._streams.push(this.checkedAppearance)
                  : this._getDefaultCheckedAppearance(A, 'check'),
                this.uncheckedAppearance &&
                  this._streams.push(this.uncheckedAppearance),
                (this._fallbackFontDict = this.fallbackFontDict),
                null === this.data.defaultFieldValue &&
                  (this.data.defaultFieldValue = 'Off');
            }
            _processRadioButton(A) {
              this.data.buttonValue = null;
              let t = A.dict.get('Parent');
              if (t instanceof Aa) {
                this.parent = A.dict.getRaw('Parent');
                let i = t.get('V');
                i instanceof Ae &&
                  (this.data.fieldValue = this._decodeFormValue(i));
              }
              let i = A.dict.get('AP');
              if (!(i instanceof Aa)) return;
              let a = i.get('N');
              if (!(a instanceof Aa)) return;
              for (let A of a.getKeys())
                if ('Off' !== A) {
                  this.data.buttonValue = this._decodeFormValue(A);
                  break;
                }
              let s = a.get(this.data.buttonValue);
              this.checkedAppearance = s instanceof AC ? s : null;
              let g = a.get('Off');
              (this.uncheckedAppearance = g instanceof AC ? g : null),
                this.checkedAppearance
                  ? this._streams.push(this.checkedAppearance)
                  : this._getDefaultCheckedAppearance(A, 'disc'),
                this.uncheckedAppearance &&
                  this._streams.push(this.uncheckedAppearance),
                (this._fallbackFontDict = this.fallbackFontDict),
                null === this.data.defaultFieldValue &&
                  (this.data.defaultFieldValue = 'Off');
            }
            _processPushButton(A) {
              let { dict: t, annotationGlobals: i } = A;
              t.has('A') || t.has('AA') || this.data.alternativeText
                ? ((this.data.isTooltipOnly = !t.has('A') && !t.has('AA')),
                  gP.parseDestDictionary({
                    destDict: t,
                    resultObj: this.data,
                    docBaseUrl: i.baseUrl,
                    docAttachments: i.attachments,
                  }))
                : m(
                    'Push buttons without action dictionaries are not supported'
                  );
            }
            getFieldObject() {
              let A,
                t = 'button';
              return (
                this.data.checkBox
                  ? ((t = 'checkbox'), (A = this.data.exportValue))
                  : this.data.radioButton &&
                    ((t = 'radiobutton'), (A = this.data.buttonValue)),
                {
                  id: this.data.id,
                  value: this.data.fieldValue || 'Off',
                  defaultValue: this.data.defaultFieldValue,
                  exportValues: A,
                  editable: !this.data.readOnly,
                  name: this.data.fieldName,
                  rect: this.data.rect,
                  hidden: this.data.hidden,
                  actions: this.data.actions,
                  page: this.data.pageIndex,
                  strokeColor: this.data.borderColor,
                  fillColor: this.data.backgroundColor,
                  rotation: this.rotation,
                  type: t,
                }
              );
            }
            get fallbackFontDict() {
              let A = new Aa();
              return (
                A.set('BaseFont', Ae.get('ZapfDingbats')),
                A.set('Type', Ae.get('FallbackType')),
                A.set('Subtype', Ae.get('FallbackType')),
                A.set('Encoding', Ae.get('ZapfDingbatsEncoding')),
                b(this, 'fallbackFontDict', A)
              );
            }
          }
          class hq extends hY {
            constructor(A) {
              super(A);
              let { dict: t, xref: i } = A;
              (this.indices = t.getArray('I')),
                (this.hasIndices =
                  Array.isArray(this.indices) && this.indices.length > 0),
                (this.data.options = []);
              let a = Af({ dict: t, key: 'Opt' });
              if (Array.isArray(a))
                for (let A = 0, t = a.length; A < t; A++) {
                  let t = i.fetchIfRef(a[A]),
                    s = Array.isArray(t);
                  this.data.options[A] = {
                    exportValue: this._decodeFormValue(
                      s ? i.fetchIfRef(t[0]) : t
                    ),
                    displayValue: this._decodeFormValue(
                      s ? i.fetchIfRef(t[1]) : t
                    ),
                  };
                }
              if (this.hasIndices) {
                this.data.fieldValue = [];
                let A = this.data.options.length;
                for (let t of this.indices)
                  Number.isInteger(t) &&
                    t >= 0 &&
                    t < A &&
                    this.data.fieldValue.push(this.data.options[t].exportValue);
              } else
                'string' == typeof this.data.fieldValue
                  ? (this.data.fieldValue = [this.data.fieldValue])
                  : this.data.fieldValue || (this.data.fieldValue = []);
              (this.data.combo = this.hasFieldFlag(131072)),
                (this.data.multiSelect = this.hasFieldFlag(2097152)),
                (this._hasText = !0);
            }
            getFieldObject() {
              let A = this.data.combo ? 'combobox' : 'listbox',
                t =
                  this.data.fieldValue.length > 0
                    ? this.data.fieldValue[0]
                    : null;
              return {
                id: this.data.id,
                value: t,
                defaultValue: this.data.defaultFieldValue,
                editable: !this.data.readOnly,
                name: this.data.fieldName,
                rect: this.data.rect,
                numItems: this.data.fieldValue.length,
                multipleSelection: this.data.multiSelect,
                hidden: this.data.hidden,
                actions: this.data.actions,
                items: this.data.options,
                page: this.data.pageIndex,
                strokeColor: this.data.borderColor,
                fillColor: this.data.backgroundColor,
                rotation: this.rotation,
                type: A,
              };
            }
            amendSavedDict(A, t) {
              if (!this.hasIndices) return;
              let i = A?.get(this.data.id)?.value;
              Array.isArray(i) || (i = [i]);
              let a = [],
                { options: s } = this.data;
              for (let A = 0, t = 0, g = s.length; A < g; A++)
                s[A].exportValue === i[t] && (a.push(A), (t += 1));
              t.set('I', a);
            }
            async _getAppearance(A, t, i, a) {
              let s, g;
              if (this.data.combo) return super._getAppearance(A, t, i, a);
              let r = a?.get(this.data.id);
              if (
                (r && ((g = r.rotation), (s = r.value)),
                void 0 === g && void 0 === s && !this._needAppearances)
              )
                return null;
              void 0 === s
                ? (s = this.data.fieldValue)
                : Array.isArray(s) || (s = [s]);
              let n = this.data.rect[3] - this.data.rect[1],
                o = this.data.rect[2] - this.data.rect[0];
              (90 !== g && 270 !== g) || ([o, n] = [n, o]);
              let I = this.data.options.length,
                l = [];
              for (let A = 0; A < I; A++) {
                let { exportValue: t } = this.data.options[A];
                s.includes(t) && l.push(A);
              }
              this._defaultAppearance ||
                (this.data.defaultAppearanceData = s7(
                  (this._defaultAppearance = '/Helvetica 0 Tf 0 g')
                ));
              let C = await hY._getFontData(
                  A,
                  t,
                  this.data.defaultAppearanceData,
                  this._fieldResources.mergedResources
                ),
                B,
                { fontSize: h } = this.data.defaultAppearanceData;
              if (h) B = this._defaultAppearance;
              else {
                let A = (n - 1) / I,
                  t,
                  i = -1;
                for (let { displayValue: A } of this.data.options) {
                  let a = this._getTextWidth(A, C);
                  a > i && ((i = a), (t = A));
                }
                [B, h] = this._computeFontSize(A, o - 4, t, C, -1);
              }
              let Q = 1.35 * h,
                c = (Q - h) / 2,
                E = Math.floor(n / Q),
                u = 0;
              if (l.length > 0) {
                let A = Math.min(...l);
                (u = Math.max(0, Math.max(...l) - E + 1)) > A && (u = A);
              }
              let d = Math.min(u + E + 1, I),
                f = ['/Tx BMC q', `1 1 ${o} ${n} re W n`];
              if (l.length)
                for (let A of (f.push('0.600006 0.756866 0.854904 rg'), l))
                  u <= A &&
                    A < d &&
                    f.push(`1 ${n - (A - u + 1) * Q} ${o} ${Q} re f`);
              f.push('BT', B, `1 0 0 1 0 ${n} Tm`);
              let p = { shift: 0 };
              for (let A = u; A < d; A++) {
                let { displayValue: t } = this.data.options[A],
                  i = A === u ? c : 0;
                f.push(this._renderText(t, C, h, o, 0, p, 2, -Q + i));
              }
              return f.push('ET Q EMC'), f.join('\n');
            }
          }
          class hT extends hY {
            constructor(A) {
              super(A),
                (this.data.fieldValue = null),
                (this.data.hasOwnCanvas = this.data.noRotate),
                (this.data.noHTML = !this.data.hasOwnCanvas);
            }
            getFieldObject() {
              return {
                id: this.data.id,
                value: null,
                page: this.data.pageIndex,
                type: 'signature',
              };
            }
          }
          class hP extends hH {
            constructor(A) {
              super(A),
                (this.data.noRotate = !0),
                (this.data.hasOwnCanvas = this.data.noRotate),
                (this.data.noHTML = !1);
              let { dict: t } = A;
              (this.data.annotationType = 1),
                this.data.hasAppearance
                  ? (this.data.name = 'NoIcon')
                  : ((this.data.rect[1] = this.data.rect[3] - 22),
                    (this.data.rect[2] = this.data.rect[0] + 22),
                    (this.data.name = t.has('Name')
                      ? t.get('Name').name
                      : 'Note')),
                t.has('State')
                  ? ((this.data.state = t.get('State') || null),
                    (this.data.stateModel = t.get('StateModel') || null))
                  : ((this.data.state = null), (this.data.stateModel = null));
            }
          }
          class hW extends hJ {
            constructor(A) {
              super(A);
              let { dict: t, annotationGlobals: i } = A;
              (this.data.annotationType = 2), (this.data.noHTML = !1);
              let a = hU(t, this.rectangle);
              a && (this.data.quadPoints = a),
                (this.data.borderColor ||= this.data.color),
                gP.parseDestDictionary({
                  destDict: t,
                  resultObj: this.data,
                  docBaseUrl: i.baseUrl,
                  docAttachments: i.attachments,
                });
            }
          }
          class hZ extends hJ {
            constructor(A) {
              super(A);
              let { dict: t } = A;
              (this.data.annotationType = 16),
                (this.data.noHTML = !1),
                (this.data.rect[0] !== this.data.rect[2] &&
                  this.data.rect[1] !== this.data.rect[3]) ||
                  (this.data.rect = null);
              let i = t.get('Parent');
              if (!i) {
                m(
                  'Popup annotation has a missing or invalid parent annotation.'
                );
                return;
              }
              if (
                ((this.data.parentRect = AR(i.getArray('Rect'), null)),
                An(i.get('RT'), h) && (i = i.get('IRT')),
                i.has('M')
                  ? (this.setModificationDate(i.get('M')),
                    (this.data.modificationDate = this.modificationDate))
                  : (this.data.modificationDate = null),
                i.has('C')
                  ? (this.setColor(i.getArray('C')),
                    (this.data.color = this.color))
                  : (this.data.color = null),
                !this.viewable)
              ) {
                let A = i.get('F');
                this._isViewable(A) && this.setFlags(A);
              }
              this.setTitle(i.get('T')),
                (this.data.titleObj = this._title),
                this.setContents(i.get('Contents')),
                (this.data.contentsObj = this._contents),
                i.has('RC') &&
                  (this.data.richText = hR.getRichTextAsHtml(i.get('RC'))),
                (this.data.open = !!t.get('Open'));
            }
          }
          class hO extends hH {
            constructor(A) {
              super(A),
                (this.data.hasOwnCanvas = this.data.noRotate),
                (this.data.isEditable = !this.data.noHTML),
                (this.data.noHTML = !1);
              let { evaluatorOptions: t, xref: i } = A;
              if (
                ((this.data.annotationType = 3),
                this.setDefaultAppearance(A),
                (this._hasAppearance = !!this.appearance),
                this._hasAppearance)
              ) {
                let { fontColor: A, fontSize: a } = new s4(
                  this.appearance,
                  t,
                  i
                ).parse();
                (this.data.defaultAppearanceData.fontColor = A),
                  (this.data.defaultAppearanceData.fontSize = a || 10);
              } else {
                this.data.defaultAppearanceData.fontSize ||= 10;
                let { fontColor: t, fontSize: a } =
                  this.data.defaultAppearanceData;
                if (this._contents.str) {
                  this.data.textContent = this._contents.str
                    .split(/\r\n?|\n/)
                    .map((A) => A.trimEnd());
                  let {
                    coords: A,
                    bbox: t,
                    matrix: i,
                  } = ge.getFirstPositionInfo(this.rectangle, this.rotation, a);
                  this.data.textPosition = this._transformPoint(A, t, i);
                }
                if (this._isOffscreenCanvasSupported) {
                  let s = A.dict.get('CA'),
                    g = new ge(i, 'sans-serif');
                  (this.appearance = g.createAppearance(
                    this._contents.str,
                    this.rectangle,
                    this.rotation,
                    a,
                    t,
                    s
                  )),
                    this._streams.push(this.appearance);
                } else
                  m(
                    'FreeTextAnnotation: OffscreenCanvas is not supported, annotation may not render correctly.'
                  );
              }
            }
            get hasTextContent() {
              return this._hasAppearance;
            }
            static createNewDict(A, t, { apRef: i, ap: a }) {
              let {
                  color: s,
                  fontSize: g,
                  oldAnnotation: r,
                  rect: n,
                  rotation: o,
                  user: I,
                  value: l,
                } = A,
                C = r || new Aa(t);
              C.set('Type', Ae.get('Annot')),
                C.set('Subtype', Ae.get('FreeText')),
                r
                  ? (C.set('M', `D:${O()}`), C.delete('RC'))
                  : C.set('CreationDate', `D:${O()}`),
                C.set('Rect', n);
              let B = `/Helv ${g} Tf ${gA(s, !0)}`;
              if (
                (C.set('DA', B),
                C.set('Contents', Aq(l)),
                C.set('F', 4),
                C.set('Border', [0, 0, 0]),
                C.set('Rotate', o),
                I && C.set('T', Aq(I)),
                i || a)
              ) {
                let A = new Aa(t);
                C.set('AP', A), i ? A.set('N', i) : A.set('N', a);
              }
              return C;
            }
            static async createNewAppearanceStream(A, t, i) {
              let a, s, g;
              let { baseFontRef: r, evaluator: n, task: o } = i,
                { color: I, fontSize: l, rect: C, rotation: B, value: h } = A,
                Q = new Aa(t),
                c = new Aa(t);
              if (r) c.set('Helv', r);
              else {
                let A = new Aa(t);
                A.set('BaseFont', Ae.get('Helvetica')),
                  A.set('Type', Ae.get('Font')),
                  A.set('Subtype', Ae.get('Type1')),
                  A.set('Encoding', Ae.get('WinAnsiEncoding')),
                  c.set('Helv', A);
              }
              Q.set('Font', c);
              let E = await hY._getFontData(
                  n,
                  o,
                  { fontName: 'Helv', fontSize: l },
                  Q
                ),
                [u, d, f, p] = C,
                m = f - u,
                y = p - d;
              B % 180 != 0 && ([m, y] = [y, m]);
              let w = h.split('\n'),
                D = l / 1e3,
                b = -1 / 0,
                k = [];
              for (let A of w) {
                let t = E.encodeString(A);
                if (t.length > 1) return null;
                (A = t.join('')), k.push(A);
                let i = 0,
                  a = E.charsToGlyphs(A);
                for (let A of a) i += A.width * D;
                b = Math.max(b, i);
              }
              let F = 1;
              b > m && (F = m / b);
              let S = 1,
                R = 1.35 * l,
                G = 1 * l,
                N = R * w.length;
              N > y && (S = y / N);
              let x = l * Math.min(F, S);
              switch (B) {
                case 0:
                  (g = [1, 0, 0, 1]),
                    (s = [C[0], C[1], m, y]),
                    (a = [C[0], C[3] - G]);
                  break;
                case 90:
                  (g = [0, 1, -1, 0]),
                    (s = [C[1], -C[2], m, y]),
                    (a = [C[1], -C[0] - G]);
                  break;
                case 180:
                  (g = [-1, 0, 0, -1]),
                    (s = [-C[2], -C[3], m, y]),
                    (a = [-C[2], -C[1] - G]);
                  break;
                case 270:
                  (g = [0, -1, 1, 0]),
                    (s = [-C[3], C[0], m, y]),
                    (a = [-C[3], C[2] - G]);
              }
              let U = [
                'q',
                `${g.join(' ')} 0 0 cm`,
                `${s.join(' ')} re W n`,
                'BT',
                `${gA(I, !0)}`,
                `0 Tc /Helv ${AK(x)} Tf`,
              ];
              U.push(`${a.join(' ')} Td (${Ax(k[0])}) Tj`);
              let M = AK(R);
              for (let A = 1, t = k.length; A < t; A++) {
                let t = k[A];
                U.push(`0 -${M} Td (${Ax(t)}) Tj`);
              }
              U.push('ET', 'Q');
              let J = U.join('\n'),
                L = new Aa(t);
              L.set('FormType', 1),
                L.set('Subtype', Ae.get('Form')),
                L.set('Type', Ae.get('XObject')),
                L.set('BBox', C),
                L.set('Resources', Q),
                L.set('Matrix', [1, 0, 0, 1, -C[0], -C[1]]);
              let H = new AO(J);
              return (H.dict = L), H;
            }
          }
          class hX extends hH {
            constructor(A) {
              super(A);
              let { dict: t, xref: i } = A;
              (this.data.annotationType = 4),
                (this.data.hasOwnCanvas = this.data.noRotate),
                (this.data.noHTML = !1);
              let a = AS(t.getArray('L'), [0, 0, 0, 0]);
              if (
                ((this.data.lineCoordinates = v.normalizeRect(a)),
                this.setLineEndings(t.getArray('LE')),
                (this.data.lineEndings = this.lineEndings),
                !this.appearance)
              ) {
                let A = this.color ? hx(this.color) : [0, 0, 0],
                  s = t.get('CA'),
                  g = hN(t.getArray('IC'), null),
                  r = g ? hx(g) : null,
                  n = r ? s : null,
                  o = this.borderStyle.width || 1,
                  I = 2 * o,
                  l = [
                    this.data.lineCoordinates[0] - I,
                    this.data.lineCoordinates[1] - I,
                    this.data.lineCoordinates[2] + I,
                    this.data.lineCoordinates[3] + I,
                  ];
                v.intersect(this.rectangle, l) || (this.rectangle = l),
                  this._setDefaultAppearance({
                    xref: i,
                    extra: `${o} w`,
                    strokeColor: A,
                    fillColor: r,
                    strokeAlpha: s,
                    fillAlpha: n,
                    pointsCallback: (A, t) => (
                      A.push(`${a[0]} ${a[1]} m`, `${a[2]} ${a[3]} l`, 'S'),
                      [t[0] - o, t[2] + o, t[7] - o, t[3] + o]
                    ),
                  });
              }
            }
          }
          class hV extends hH {
            constructor(A) {
              super(A);
              let { dict: t, xref: i } = A;
              if (
                ((this.data.annotationType = 5),
                (this.data.hasOwnCanvas = this.data.noRotate),
                (this.data.noHTML = !1),
                !this.appearance)
              ) {
                let A = this.color ? hx(this.color) : [0, 0, 0],
                  a = t.get('CA'),
                  s = hN(t.getArray('IC'), null),
                  g = s ? hx(s) : null,
                  r = g ? a : null;
                if (0 === this.borderStyle.width && !g) return;
                this._setDefaultAppearance({
                  xref: i,
                  extra: `${this.borderStyle.width} w`,
                  strokeColor: A,
                  fillColor: g,
                  strokeAlpha: a,
                  fillAlpha: r,
                  pointsCallback: (A, t) => {
                    let i = t[4] + this.borderStyle.width / 2,
                      a = t[5] + this.borderStyle.width / 2,
                      s = t[6] - t[4] - this.borderStyle.width,
                      r = t[3] - t[7] - this.borderStyle.width;
                    return (
                      A.push(`${i} ${a} ${s} ${r} re`),
                      g ? A.push('B') : A.push('S'),
                      [t[0], t[2], t[7], t[3]]
                    );
                  },
                });
              }
            }
          }
          class hj extends hH {
            constructor(A) {
              super(A);
              let { dict: t, xref: i } = A;
              if (((this.data.annotationType = 6), !this.appearance)) {
                let A = this.color ? hx(this.color) : [0, 0, 0],
                  a = t.get('CA'),
                  s = hN(t.getArray('IC'), null),
                  g = s ? hx(s) : null,
                  r = g ? a : null;
                if (0 === this.borderStyle.width && !g) return;
                let n = (4 / 3) * Math.tan(Math.PI / 8);
                this._setDefaultAppearance({
                  xref: i,
                  extra: `${this.borderStyle.width} w`,
                  strokeColor: A,
                  fillColor: g,
                  strokeAlpha: a,
                  fillAlpha: r,
                  pointsCallback: (A, t) => {
                    let i = t[0] + this.borderStyle.width / 2,
                      a = t[1] - this.borderStyle.width / 2,
                      s = t[6] - this.borderStyle.width / 2,
                      r = t[7] + this.borderStyle.width / 2,
                      o = i + (s - i) / 2,
                      I = a + (r - a) / 2,
                      l = ((s - i) / 2) * n,
                      C = ((r - a) / 2) * n;
                    return (
                      A.push(
                        `${o} ${r} m`,
                        `${o + l} ${r} ${s} ${I + C} ${s} ${I} c`,
                        `${s} ${I - C} ${o + l} ${a} ${o} ${a} c`,
                        `${o - l} ${a} ${i} ${I - C} ${i} ${I} c`,
                        `${i} ${I + C} ${o - l} ${r} ${o} ${r} c`,
                        'h'
                      ),
                      g ? A.push('B') : A.push('S'),
                      [t[0], t[2], t[7], t[3]]
                    );
                  },
                });
              }
            }
          }
          class hz extends hH {
            constructor(A) {
              super(A);
              let { dict: t, xref: i } = A;
              (this.data.annotationType = 8),
                (this.data.hasOwnCanvas = this.data.noRotate),
                (this.data.noHTML = !1),
                (this.data.vertices = null),
                this instanceof h_ ||
                  (this.setLineEndings(t.getArray('LE')),
                  (this.data.lineEndings = this.lineEndings));
              let a = t.getArray('Vertices');
              if (!Ak(a, null)) return;
              let s = (this.data.vertices = Float32Array.from(a));
              if (!this.appearance) {
                let A = this.color ? hx(this.color) : [0, 0, 0],
                  a = t.get('CA'),
                  g = this.borderStyle.width || 1,
                  r = 2 * g,
                  n = [1 / 0, 1 / 0, -1 / 0, -1 / 0];
                for (let A = 0, t = s.length; A < t; A += 2)
                  (n[0] = Math.min(n[0], s[A] - r)),
                    (n[1] = Math.min(n[1], s[A + 1] - r)),
                    (n[2] = Math.max(n[2], s[A] + r)),
                    (n[3] = Math.max(n[3], s[A + 1] + r));
                v.intersect(this.rectangle, n) || (this.rectangle = n),
                  this._setDefaultAppearance({
                    xref: i,
                    extra: `${g} w`,
                    strokeColor: A,
                    strokeAlpha: a,
                    pointsCallback: (A, t) => {
                      for (let t = 0, i = s.length; t < i; t += 2)
                        A.push(`${s[t]} ${s[t + 1]} ${0 === t ? 'm' : 'l'}`);
                      return A.push('S'), [t[0], t[2], t[7], t[3]];
                    },
                  });
              }
            }
          }
          class h_ extends hz {
            constructor(A) {
              super(A), (this.data.annotationType = 7);
            }
          }
          class h$ extends hH {
            constructor(A) {
              super(A), (this.data.annotationType = 14);
            }
          }
          class h0 extends hH {
            constructor(A) {
              super(A),
                (this.data.hasOwnCanvas = this.data.noRotate),
                (this.data.noHTML = !1);
              let { dict: t, xref: i } = A;
              (this.data.annotationType = 15),
                (this.data.inkLists = []),
                (this.data.isEditable =
                  !this.data.noHTML && 'InkHighlight' === this.data.it),
                (this.data.noHTML = !1),
                (this.data.opacity = t.get('CA') || 1);
              let a = t.getArray('InkList');
              if (Array.isArray(a)) {
                for (let A = 0, t = a.length; A < t; ++A) {
                  if (!Array.isArray(a[A])) continue;
                  let t = new Float32Array(a[A].length);
                  this.data.inkLists.push(t);
                  for (let s = 0, g = a[A].length; s < g; s += 2) {
                    let g = i.fetchIfRef(a[A][s]),
                      r = i.fetchIfRef(a[A][s + 1]);
                    'number' == typeof g &&
                      'number' == typeof r &&
                      ((t[s] = g), (t[s + 1] = r));
                  }
                }
                if (!this.appearance) {
                  let A = this.color ? hx(this.color) : [0, 0, 0],
                    a = t.get('CA'),
                    s = this.borderStyle.width || 1,
                    g = 2 * s,
                    r = [1 / 0, 1 / 0, -1 / 0, -1 / 0];
                  for (let A of this.data.inkLists)
                    for (let t = 0, i = A.length; t < i; t += 2)
                      (r[0] = Math.min(r[0], A[t] - g)),
                        (r[1] = Math.min(r[1], A[t + 1] - g)),
                        (r[2] = Math.max(r[2], A[t] + g)),
                        (r[3] = Math.max(r[3], A[t + 1] + g));
                  v.intersect(this.rectangle, r) || (this.rectangle = r),
                    this._setDefaultAppearance({
                      xref: i,
                      extra: `${s} w`,
                      strokeColor: A,
                      strokeAlpha: a,
                      pointsCallback: (A, t) => {
                        for (let t of this.data.inkLists) {
                          for (let i = 0, a = t.length; i < a; i += 2)
                            A.push(
                              `${t[i]} ${t[i + 1]} ${0 === i ? 'm' : 'l'}`
                            );
                          A.push('S');
                        }
                        return [t[0], t[2], t[7], t[3]];
                      },
                    });
                }
              }
            }
            static createNewDict(A, t, { apRef: i, ap: a }) {
              let {
                  color: s,
                  opacity: g,
                  paths: r,
                  outlines: n,
                  rect: o,
                  rotation: I,
                  thickness: l,
                } = A,
                C = new Aa(t);
              C.set('Type', Ae.get('Annot')),
                C.set('Subtype', Ae.get('Ink')),
                C.set('CreationDate', `D:${O()}`),
                C.set('Rect', o),
                C.set('InkList', n?.points || r.map((A) => A.points)),
                C.set('F', 4),
                C.set('Rotate', I),
                n && C.set('IT', Ae.get('InkHighlight'));
              let B = new Aa(t);
              C.set('BS', B),
                B.set('W', l),
                C.set(
                  'C',
                  Array.from(s, (A) => A / 255)
                ),
                C.set('CA', g);
              let h = new Aa(t);
              return C.set('AP', h), i ? h.set('N', i) : h.set('N', a), C;
            }
            static async createNewAppearanceStream(A, t, i) {
              if (A.outlines)
                return this.createNewAppearanceStreamForHighlight(A, t, i);
              let { color: a, rect: s, paths: g, thickness: r, opacity: n } = A,
                o = [`${r} w 1 J 1 j`, `${gA(a, !1)}`];
              1 !== n && o.push('/R0 gs');
              let I = [];
              for (let { bezier: A } of g) {
                if (
                  ((I.length = 0),
                  I.push(`${AK(A[0])} ${AK(A[1])} m`),
                  2 === A.length)
                )
                  I.push(`${AK(A[0])} ${AK(A[1])} l S`);
                else {
                  for (let t = 2, i = A.length; t < i; t += 6) {
                    let i = A.slice(t, t + 6)
                      .map(AK)
                      .join(' ');
                    I.push(`${i} c`);
                  }
                  I.push('S');
                }
                o.push(I.join('\n'));
              }
              let l = o.join('\n'),
                C = new Aa(t);
              if (
                (C.set('FormType', 1),
                C.set('Subtype', Ae.get('Form')),
                C.set('Type', Ae.get('XObject')),
                C.set('BBox', s),
                C.set('Length', l.length),
                1 !== n)
              ) {
                let A = new Aa(t),
                  i = new Aa(t),
                  a = new Aa(t);
                a.set('CA', n),
                  a.set('Type', Ae.get('ExtGState')),
                  i.set('R0', a),
                  A.set('ExtGState', i),
                  C.set('Resources', A);
              }
              let B = new AO(l);
              return (B.dict = C), B;
            }
            static async createNewAppearanceStreamForHighlight(A, t, i) {
              let {
                  color: a,
                  rect: s,
                  outlines: { outline: g },
                  opacity: r,
                } = A,
                n = [`${gA(a, !0)}`, '/R0 gs'];
              n.push(`${AK(g[4])} ${AK(g[5])} m`);
              for (let A = 6, t = g.length; A < t; A += 6)
                if (isNaN(g[A]) || null === g[A])
                  n.push(`${AK(g[A + 4])} ${AK(g[A + 5])} l`);
                else {
                  let t = g
                    .slice(A, A + 6)
                    .map(AK)
                    .join(' ');
                  n.push(`${t} c`);
                }
              n.push('h f');
              let o = n.join('\n'),
                I = new Aa(t);
              I.set('FormType', 1),
                I.set('Subtype', Ae.get('Form')),
                I.set('Type', Ae.get('XObject')),
                I.set('BBox', s),
                I.set('Length', o.length);
              let l = new Aa(t),
                C = new Aa(t);
              l.set('ExtGState', C), I.set('Resources', l);
              let B = new Aa(t);
              C.set('R0', B),
                B.set('BM', Ae.get('Multiply')),
                1 !== r && (B.set('ca', r), B.set('Type', Ae.get('ExtGState')));
              let h = new AO(o);
              return (h.dict = I), h;
            }
          }
          class h1 extends hH {
            constructor(A) {
              super(A);
              let { dict: t, xref: i } = A;
              if (
                ((this.data.annotationType = 9),
                (this.data.isEditable = !this.data.noHTML),
                (this.data.noHTML = !1),
                (this.data.opacity = t.get('CA') || 1),
                (this.data.quadPoints = hU(t, null)))
              ) {
                let A = this.appearance?.dict.get('Resources');
                if (!this.appearance || !A?.has('ExtGState')) {
                  this.appearance &&
                    m(
                      'HighlightAnnotation - ignoring built-in appearance stream.'
                    );
                  let A = this.color ? hx(this.color) : [1, 1, 0],
                    a = t.get('CA');
                  this._setDefaultAppearance({
                    xref: i,
                    fillColor: A,
                    blendMode: 'Multiply',
                    fillAlpha: a,
                    pointsCallback: (A, t) => (
                      A.push(
                        `${t[0]} ${t[1]} m`,
                        `${t[2]} ${t[3]} l`,
                        `${t[6]} ${t[7]} l`,
                        `${t[4]} ${t[5]} l`,
                        'f'
                      ),
                      [t[0], t[2], t[7], t[3]]
                    ),
                  });
                }
              } else this.data.popupRef = null;
            }
            static createNewDict(A, t, { apRef: i, ap: a }) {
              let {
                  color: s,
                  oldAnnotation: g,
                  opacity: r,
                  rect: n,
                  rotation: o,
                  user: I,
                  quadPoints: l,
                } = A,
                C = g || new Aa(t);
              if (
                (C.set('Type', Ae.get('Annot')),
                C.set('Subtype', Ae.get('Highlight')),
                C.set(g ? 'M' : 'CreationDate', `D:${O()}`),
                C.set('CreationDate', `D:${O()}`),
                C.set('Rect', n),
                C.set('F', 4),
                C.set('Border', [0, 0, 0]),
                C.set('Rotate', o),
                C.set('QuadPoints', l),
                C.set(
                  'C',
                  Array.from(s, (A) => A / 255)
                ),
                C.set('CA', r),
                I && C.set('T', Aq(I)),
                i || a)
              ) {
                let A = new Aa(t);
                C.set('AP', A), A.set('N', i || a);
              }
              return C;
            }
            static async createNewAppearanceStream(A, t, i) {
              let { color: a, rect: s, outlines: g, opacity: r } = A,
                n = [`${gA(a, !0)}`, '/R0 gs'],
                o = [];
              for (let A of g) {
                (o.length = 0), o.push(`${AK(A[0])} ${AK(A[1])} m`);
                for (let t = 2, i = A.length; t < i; t += 2)
                  o.push(`${AK(A[t])} ${AK(A[t + 1])} l`);
                o.push('h'), n.push(o.join('\n'));
              }
              n.push('f*');
              let I = n.join('\n'),
                l = new Aa(t);
              l.set('FormType', 1),
                l.set('Subtype', Ae.get('Form')),
                l.set('Type', Ae.get('XObject')),
                l.set('BBox', s),
                l.set('Length', I.length);
              let C = new Aa(t),
                B = new Aa(t);
              C.set('ExtGState', B), l.set('Resources', C);
              let h = new Aa(t);
              B.set('R0', h),
                h.set('BM', Ae.get('Multiply')),
                1 !== r && (h.set('ca', r), h.set('Type', Ae.get('ExtGState')));
              let Q = new AO(I);
              return (Q.dict = l), Q;
            }
          }
          class h2 extends hH {
            constructor(A) {
              super(A);
              let { dict: t, xref: i } = A;
              if (
                ((this.data.annotationType = 10),
                (this.data.quadPoints = hU(t, null)))
              ) {
                if (!this.appearance) {
                  let A = this.color ? hx(this.color) : [0, 0, 0],
                    a = t.get('CA');
                  this._setDefaultAppearance({
                    xref: i,
                    extra: '[] 0 d 0.571 w',
                    strokeColor: A,
                    strokeAlpha: a,
                    pointsCallback: (A, t) => (
                      A.push(
                        `${t[4]} ${t[5] + 1.3} m`,
                        `${t[6]} ${t[7] + 1.3} l`,
                        'S'
                      ),
                      [t[0], t[2], t[7], t[3]]
                    ),
                  });
                }
              } else this.data.popupRef = null;
            }
          }
          class h9 extends hH {
            constructor(A) {
              super(A);
              let { dict: t, xref: i } = A;
              if (
                ((this.data.annotationType = 11),
                (this.data.quadPoints = hU(t, null)))
              ) {
                if (!this.appearance) {
                  let A = this.color ? hx(this.color) : [0, 0, 0],
                    a = t.get('CA');
                  this._setDefaultAppearance({
                    xref: i,
                    extra: '[] 0 d 1 w',
                    strokeColor: A,
                    strokeAlpha: a,
                    pointsCallback: (A, t) => {
                      let i = (t[1] - t[5]) / 6,
                        a = i,
                        s = t[4],
                        g = t[5],
                        r = t[6];
                      A.push(`${s} ${g + a} m`);
                      do
                        (s += 2),
                          (a = 0 === a ? i : 0),
                          A.push(`${s} ${g + a} l`);
                      while (s < r);
                      return A.push('S'), [t[4], r, g - 2 * i, g + 2 * i];
                    },
                  });
                }
              } else this.data.popupRef = null;
            }
          }
          class h3 extends hH {
            constructor(A) {
              super(A);
              let { dict: t, xref: i } = A;
              if (
                ((this.data.annotationType = 12),
                (this.data.quadPoints = hU(t, null)))
              ) {
                if (!this.appearance) {
                  let A = this.color ? hx(this.color) : [0, 0, 0],
                    a = t.get('CA');
                  this._setDefaultAppearance({
                    xref: i,
                    extra: '[] 0 d 1 w',
                    strokeColor: A,
                    strokeAlpha: a,
                    pointsCallback: (A, t) => (
                      A.push(
                        (t[0] + t[4]) / 2 + ' ' + (t[1] + t[5]) / 2 + ' m',
                        (t[2] + t[6]) / 2 + ' ' + (t[3] + t[7]) / 2 + ' l',
                        'S'
                      ),
                      [t[0], t[2], t[7], t[3]]
                    ),
                  });
                }
              } else this.data.popupRef = null;
            }
          }
          class h5 extends hH {
            #q;
            constructor(A) {
              super(A),
                (this.data.annotationType = 13),
                (this.#q = this.data.hasOwnCanvas = this.data.noRotate),
                (this.data.isEditable = !this.data.noHTML),
                (this.data.noHTML = !1);
            }
            mustBeViewedWhenEditing(A, t = null) {
              return A
                ? !!this.data.isEditable &&
                    ((this.#q = this.data.hasOwnCanvas),
                    (this.data.hasOwnCanvas = !0),
                    !0)
                : ((this.data.hasOwnCanvas = this.#q), !t?.has(this.data.id));
            }
            static async createImage(A, t) {
              let { width: i, height: a } = A,
                s = new OffscreenCanvas(i, a),
                g = s.getContext('2d', { alpha: !0 });
              g.drawImage(A, 0, 0);
              let r = g.getImageData(0, 0, i, a).data,
                n = new Uint32Array(r.buffer),
                o = n.some(
                  Y.isLittleEndian
                    ? (A) => A >>> 24 != 255
                    : (A) => 255 != (255 & A)
                );
              o &&
                ((g.fillStyle = 'white'),
                g.fillRect(0, 0, i, a),
                g.drawImage(A, 0, 0));
              let I = s
                  .convertToBlob({ type: 'image/jpeg', quality: 1 })
                  .then((A) => A.arrayBuffer()),
                l = Ae.get('XObject'),
                C = Ae.get('Image'),
                B = new Aa(t);
              B.set('Type', l),
                B.set('Subtype', C),
                B.set('BitsPerComponent', 8),
                B.set('ColorSpace', Ae.get('DeviceRGB')),
                B.set('Filter', Ae.get('DCTDecode')),
                B.set('BBox', [0, 0, i, a]),
                B.set('Width', i),
                B.set('Height', a);
              let h = null;
              if (o) {
                let A = new Uint8Array(n.length);
                if (Y.isLittleEndian)
                  for (let t = 0, i = n.length; t < i; t++) A[t] = n[t] >>> 24;
                else
                  for (let t = 0, i = n.length; t < i; t++) A[t] = 255 & n[t];
                let s = new Aa(t);
                s.set('Type', l),
                  s.set('Subtype', C),
                  s.set('BitsPerComponent', 8),
                  s.set('ColorSpace', Ae.get('DeviceGray')),
                  s.set('Width', i),
                  s.set('Height', a),
                  (h = new AZ(A, 0, 0, s));
              }
              return {
                imageStream: new AZ(await I, 0, 0, B),
                smaskStream: h,
                width: i,
                height: a,
              };
            }
            static createNewDict(A, t, { apRef: i, ap: a }) {
              let { oldAnnotation: s, rect: g, rotation: r, user: n } = A,
                o = s || new Aa(t);
              if (
                (o.set('Type', Ae.get('Annot')),
                o.set('Subtype', Ae.get('Stamp')),
                o.set(s ? 'M' : 'CreationDate', `D:${O()}`),
                o.set('CreationDate', `D:${O()}`),
                o.set('Rect', g),
                o.set('F', 4),
                o.set('Border', [0, 0, 0]),
                o.set('Rotate', r),
                n && o.set('T', Aq(n)),
                i || a)
              ) {
                let A = new Aa(t);
                o.set('AP', A), i ? A.set('N', i) : A.set('N', a);
              }
              return o;
            }
            static async createNewAppearanceStream(A, t, i) {
              if (A.oldAnnotation) return null;
              let { rotation: a } = A,
                { imageRef: s, width: g, height: r } = i.image,
                n = new Aa(t),
                o = new Aa(t);
              n.set('XObject', o), o.set('Im0', s);
              let I = `q ${g} 0 0 ${r} 0 0 cm /Im0 Do Q`,
                l = new Aa(t);
              if (
                (l.set('FormType', 1),
                l.set('Subtype', Ae.get('Form')),
                l.set('Type', Ae.get('XObject')),
                l.set('BBox', [0, 0, g, r]),
                l.set('Resources', n),
                a)
              ) {
                let A = AP(a, g, r);
                l.set('Matrix', A);
              }
              let C = new AO(I);
              return (C.dict = l), C;
            }
          }
          class h8 extends hH {
            constructor(A) {
              super(A);
              let { dict: t, xref: i } = A,
                a = new gr(t.get('FS'), i);
              (this.data.annotationType = 17),
                (this.data.hasOwnCanvas = this.data.noRotate),
                (this.data.noHTML = !1),
                (this.data.file = a.serializable);
              let s = t.get('Name');
              this.data.name = s instanceof Ae ? T(s.name) : 'PushPin';
              let g = t.get('ca');
              this.data.fillAlpha =
                'number' == typeof g && g >= 0 && g <= 1 ? g : null;
            }
          }
          function h6(A) {
            try {
              return P(A);
            } catch (t) {
              return m(`UTF-8 decoding failed: "${t}".`), A;
            }
          }
          class h7 extends gl {
            constructor(A) {
              super(A), (this.node = null);
            }
            onEndElement(A) {
              let t = super.onEndElement(A);
              if (t && 'xfa:datasets' === A)
                throw ((this.node = t), Error('Aborting DatasetXMLParser.'));
            }
          }
          class h4 {
            constructor(A) {
              if (A.datasets)
                this.node = new gl({ hasAttributes: !0 }).parseFromString(
                  A.datasets
                ).documentElement;
              else {
                let t = new h7({ hasAttributes: !0 });
                try {
                  t.parseFromString(A['xdp:xdp']);
                } catch {}
                this.node = t.node;
              }
            }
            getValue(A) {
              if (!this.node || !A) return '';
              let t = this.node.searchNode(AG(A), 0);
              if (!t) return '';
              let i = t.firstChild;
              return 'value' === i?.nodeName
                ? t.children.map((A) => h6(A.textContent))
                : h6(t.textContent);
            }
          }
          class QA {
            #T = null;
            constructor(A, t) {
              (this.stream = A),
                (this.pdfManager = t),
                (this.entries = []),
                (this._xrefStms = new Set()),
                (this._cacheMap = new Map()),
                (this._pendingRefs = new Ag()),
                (this._newPersistentRefNum = null),
                (this._newTemporaryRefNum = null),
                (this._persistentRefsCache = null);
            }
            getNewPersistentRef(A) {
              null === this._newPersistentRefNum &&
                (this._newPersistentRefNum = this.entries.length || 1);
              let t = this._newPersistentRefNum++;
              return this._cacheMap.set(t, A), As.get(t, 0);
            }
            getNewTemporaryRef() {
              if (
                null === this._newTemporaryRefNum &&
                ((this._newTemporaryRefNum = this.entries.length || 1),
                this._newPersistentRefNum)
              ) {
                this._persistentRefsCache = new Map();
                for (
                  let A = this._newTemporaryRefNum;
                  A < this._newPersistentRefNum;
                  A++
                )
                  this._persistentRefsCache.set(A, this._cacheMap.get(A)),
                    this._cacheMap.delete(A);
              }
              return As.get(this._newTemporaryRefNum++, 0);
            }
            resetNewTemporaryRef() {
              if (
                ((this._newTemporaryRefNum = null), this._persistentRefsCache)
              )
                for (let [A, t] of this._persistentRefsCache)
                  this._cacheMap.set(A, t);
              this._persistentRefsCache = null;
            }
            setStartXRef(A) {
              this.startXRefQueue = [A];
            }
            parse(A = !1) {
              let t, i, a;
              A
                ? (m('Indexing all PDF objects'), (t = this.indexObjects()))
                : (t = this.readXRef()),
                t.assignXref(this),
                (this.trailer = t);
              try {
                i = t.get('Encrypt');
              } catch (A) {
                if (A instanceof AQ) throw A;
                m(`XRef.parse - Invalid "Encrypt" reference: "${A}".`);
              }
              if (i instanceof Aa) {
                let A = t.get('ID'),
                  a = A?.length ? A[0] : '';
                (i.suppressEncryption = !0),
                  (this.encrypt = new gb(i, a, this.pdfManager.password));
              }
              try {
                a = t.get('Root');
              } catch (A) {
                if (A instanceof AQ) throw A;
                m(`XRef.parse - Invalid "Root" reference: "${A}".`);
              }
              if (a instanceof Aa)
                try {
                  if (a.get('Pages') instanceof Aa) {
                    this.root = a;
                    return;
                  }
                } catch (A) {
                  if (A instanceof AQ) throw A;
                  m(`XRef.parse - Invalid "Pages" reference: "${A}".`);
                }
              if (!A) throw new Au();
              throw new R('Invalid Root reference.');
            }
            processXRefTable(A) {
              if (
                ('tableState' in this ||
                  (this.tableState = {
                    entryNum: 0,
                    streamPos: A.lexer.stream.pos,
                    parserBuf1: A.buf1,
                    parserBuf2: A.buf2,
                  }),
                !Ao(this.readXRefTable(A), 'trailer'))
              )
                throw new x(
                  'Invalid XRef table: could not find trailer dictionary'
                );
              let t = A.getObj();
              if (
                (t instanceof Aa || !t.dict || (t = t.dict), !(t instanceof Aa))
              )
                throw new x(
                  'Invalid XRef table: could not parse trailer dictionary'
                );
              return delete this.tableState, t;
            }
            readXRefTable(A) {
              let t;
              let i = A.lexer.stream,
                a = this.tableState;
              for (
                i.pos = a.streamPos,
                  A.buf1 = a.parserBuf1,
                  A.buf2 = a.parserBuf2;
                ;

              ) {
                if (!('firstEntryNum' in a) || !('entryCount' in a)) {
                  if (Ao((t = A.getObj()), 'trailer')) break;
                  (a.firstEntryNum = t), (a.entryCount = A.getObj());
                }
                let s = a.firstEntryNum,
                  g = a.entryCount;
                if (!Number.isInteger(s) || !Number.isInteger(g))
                  throw new x(
                    'Invalid XRef table: wrong types in subsection header'
                  );
                for (let t = a.entryNum; t < g; t++) {
                  (a.streamPos = i.pos),
                    (a.entryNum = t),
                    (a.parserBuf1 = A.buf1),
                    (a.parserBuf2 = A.buf2);
                  let r = {};
                  (r.offset = A.getObj()), (r.gen = A.getObj());
                  let n = A.getObj();
                  if (n instanceof At)
                    switch (n.cmd) {
                      case 'f':
                        r.free = !0;
                        break;
                      case 'n':
                        r.uncompressed = !0;
                    }
                  if (
                    !Number.isInteger(r.offset) ||
                    !Number.isInteger(r.gen) ||
                    (!r.free && !r.uncompressed)
                  )
                    throw new x(`Invalid entry in XRef subsection: ${s}, ${g}`);
                  0 === t && r.free && 1 === s && (s = 0),
                    this.entries[t + s] || (this.entries[t + s] = r);
                }
                (a.entryNum = 0),
                  (a.streamPos = i.pos),
                  (a.parserBuf1 = A.buf1),
                  (a.parserBuf2 = A.buf2),
                  delete a.firstEntryNum,
                  delete a.entryCount;
              }
              if (this.entries[0] && !this.entries[0].free)
                throw new x('Invalid XRef table: unexpected first object');
              return t;
            }
            processXRefStream(A) {
              if (!('streamState' in this)) {
                let t = A.dict,
                  i = t.get('W'),
                  a = t.get('Index');
                a || (a = [0, t.get('Size')]),
                  (this.streamState = {
                    entryRanges: a,
                    byteWidths: i,
                    entryNum: 0,
                    streamPos: A.pos,
                  });
              }
              return this.readXRefStream(A), delete this.streamState, A.dict;
            }
            readXRefStream(A) {
              let t = this.streamState;
              A.pos = t.streamPos;
              let [i, a, s] = t.byteWidths,
                g = t.entryRanges;
              for (; g.length > 0; ) {
                let [r, n] = g;
                if (!Number.isInteger(r) || !Number.isInteger(n))
                  throw new x(`Invalid XRef range fields: ${r}, ${n}`);
                if (
                  !Number.isInteger(i) ||
                  !Number.isInteger(a) ||
                  !Number.isInteger(s)
                )
                  throw new x(`Invalid XRef entry fields length: ${r}, ${n}`);
                for (let g = t.entryNum; g < n; ++g) {
                  (t.entryNum = g), (t.streamPos = A.pos);
                  let n = 0,
                    o = 0,
                    I = 0;
                  for (let t = 0; t < i; ++t) {
                    let t = A.getByte();
                    if (-1 === t)
                      throw new x("Invalid XRef byteWidths 'type'.");
                    n = (n << 8) | t;
                  }
                  0 === i && (n = 1);
                  for (let t = 0; t < a; ++t) {
                    let t = A.getByte();
                    if (-1 === t)
                      throw new x("Invalid XRef byteWidths 'offset'.");
                    o = (o << 8) | t;
                  }
                  for (let t = 0; t < s; ++t) {
                    let t = A.getByte();
                    if (-1 === t)
                      throw new x("Invalid XRef byteWidths 'generation'.");
                    I = (I << 8) | t;
                  }
                  let l = {};
                  switch (((l.offset = o), (l.gen = I), n)) {
                    case 0:
                      l.free = !0;
                      break;
                    case 1:
                      l.uncompressed = !0;
                      break;
                    case 2:
                      break;
                    default:
                      throw new x(`Invalid XRef entry type: ${n}`);
                  }
                  this.entries[r + g] || (this.entries[r + g] = l);
                }
                (t.entryNum = 0), (t.streamPos = A.pos), g.splice(0, 2);
              }
            }
            indexObjects() {
              function A(A, t, i) {
                let a = i.length,
                  s = A.length,
                  g = 0;
                for (; t < s; ) {
                  let s = 0;
                  for (; s < a && A[t + s] === i[s]; ) ++s;
                  if (s >= a) break;
                  t++, g++;
                }
                return g;
              }
              let t = /\b(endobj|\d+\s+\d+\s+obj|xref|trailer\s*<<)\b/g,
                i = /\b(startxref|\d+\s+\d+\s+obj)\b/g,
                a = /^(\d+)\s+(\d+)\s+obj\b/,
                s = new Uint8Array([116, 114, 97, 105, 108, 101, 114]),
                g = new Uint8Array([
                  115, 116, 97, 114, 116, 120, 114, 101, 102,
                ]),
                r = new Uint8Array([47, 88, 82, 101, 102]);
              (this.entries.length = 0), this._cacheMap.clear();
              let n = this.stream;
              n.pos = 0;
              let o = n.getBytes(),
                I = M(o),
                l = o.length,
                C = n.start,
                B = [],
                h = [];
              for (; C < l; ) {
                let Q,
                  c = o[C];
                if (9 === c || 10 === c || 13 === c || 32 === c) {
                  ++C;
                  continue;
                }
                if (37 === c) {
                  do {
                    if (++C >= l) break;
                    c = o[C];
                  } while (10 !== c && 13 !== c);
                  continue;
                }
                let E = (function (A, t) {
                  let i = '',
                    a = A[t];
                  for (
                    ;
                    10 !== a && 13 !== a && 60 !== a && !(++t >= A.length);

                  )
                    (i += String.fromCharCode(a)), (a = A[t]);
                  return i;
                })(o, C);
                if (E.startsWith('xref') && (4 === E.length || /\s/.test(E[4])))
                  (C += A(o, C, s)), B.push(C), (C += A(o, C, g));
                else if ((Q = a.exec(E))) {
                  let i = 0 | Q[1],
                    a = 0 | Q[2],
                    s = C + E.length,
                    g,
                    B = !1;
                  if (this.entries[i]) {
                    if (this.entries[i].gen === a)
                      try {
                        new ta({ lexer: new tr(n.makeSubStream(s)) }).getObj(),
                          (B = !0);
                      } catch (A) {
                        A instanceof Ac
                          ? m(`indexObjects -- checking object (${E}): "${A}".`)
                          : (B = !0);
                      }
                  } else B = !0;
                  B &&
                    (this.entries[i] = {
                      offset: C - n.start,
                      gen: a,
                      uncompressed: !0,
                    }),
                    (t.lastIndex = s);
                  let c = t.exec(I);
                  c
                    ? ((g = t.lastIndex + 1 - C),
                      'endobj' !== c[1] &&
                        (m(
                          `indexObjects: Found "${c[1]}" inside of another "obj", caused by missing "endobj" -- trying to recover.`
                        ),
                        (g -= c[1].length + 1)))
                    : (g = l - C);
                  let u = o.subarray(C, C + g),
                    d = A(u, 0, r);
                  d < g &&
                    u[d + 5] < 64 &&
                    (h.push(C - n.start), this._xrefStms.add(C - n.start)),
                    (C += g);
                } else if (
                  E.startsWith('trailer') &&
                  (7 === E.length || /\s/.test(E[7]))
                ) {
                  let A;
                  B.push(C);
                  let t = C + E.length;
                  i.lastIndex = t;
                  let a = i.exec(I);
                  a
                    ? ((A = i.lastIndex + 1 - C),
                      'startxref' !== a[1] &&
                        (m(
                          `indexObjects: Found "${a[1]}" after "trailer", caused by missing "startxref" -- trying to recover.`
                        ),
                        (A -= a[1].length + 1)))
                    : (A = l - C),
                    (C += A);
                } else C += E.length + 1;
              }
              for (let A of h) this.startXRefQueue.push(A), this.readXRef(!0);
              let Q = [],
                c,
                E,
                u = !1;
              for (let A of B) {
                n.pos = A;
                let t = new ta({
                  lexer: new tr(n),
                  xref: this,
                  allowStreams: !0,
                  recoveryMode: !0,
                });
                if (!Ao(t.getObj(), 'trailer')) continue;
                let i = t.getObj();
                i instanceof Aa && (Q.push(i), i.has('Encrypt') && (u = !0));
              }
              for (let A of [...Q, 'genFallback', ...Q]) {
                if ('genFallback' === A) {
                  if (!E) break;
                  this._generationFallback = !0;
                  continue;
                }
                let t = !1;
                try {
                  let i = A.get('Root');
                  if (!(i instanceof Aa)) continue;
                  let a = i.get('Pages');
                  if (!(a instanceof Aa)) continue;
                  let s = a.get('Count');
                  Number.isInteger(s) && (t = !0);
                } catch (A) {
                  E = A;
                  continue;
                }
                if (t && (!u || A.has('Encrypt')) && A.has('ID')) return A;
                c = A;
              }
              if (c) return c;
              if (this.topDict) return this.topDict;
              throw new R('Invalid PDF structure.');
            }
            readXRef(A = !1) {
              let t = this.stream,
                i = new Set();
              for (; this.startXRefQueue.length; ) {
                try {
                  let A = this.startXRefQueue[0];
                  if (i.has(A)) {
                    m(
                      'readXRef - skipping XRef table since it was already parsed.'
                    ),
                      this.startXRefQueue.shift();
                    continue;
                  }
                  i.add(A), (t.pos = A + t.start);
                  let a = new ta({
                      lexer: new tr(t),
                      xref: this,
                      allowStreams: !0,
                    }),
                    s,
                    g = a.getObj();
                  if (Ao(g, 'xref'))
                    (s = this.processXRefTable(a)),
                      this.topDict || (this.topDict = s),
                      (g = s.get('XRefStm')),
                      Number.isInteger(g) &&
                        !this._xrefStms.has(g) &&
                        (this._xrefStms.add(g),
                        this.startXRefQueue.push(g),
                        (this.#T ??= g));
                  else {
                    if (!Number.isInteger(g))
                      throw new x('Invalid XRef stream header');
                    if (
                      !(
                        Number.isInteger(a.getObj()) &&
                        Ao(a.getObj(), 'obj') &&
                        (g = a.getObj()) instanceof AC
                      )
                    )
                      throw new x('Invalid XRef stream');
                    if (
                      ((s = this.processXRefStream(g)),
                      this.topDict || (this.topDict = s),
                      !s)
                    )
                      throw new x('Failed to read XRef stream');
                  }
                  (g = s.get('Prev')),
                    Number.isInteger(g)
                      ? this.startXRefQueue.push(g)
                      : g instanceof As && this.startXRefQueue.push(g.num);
                } catch (A) {
                  if (A instanceof AQ) throw A;
                  p('(while reading XRef): ' + A);
                }
                this.startXRefQueue.shift();
              }
              if (this.topDict) return this.topDict;
              if (!A) throw new Au();
            }
            get lastXRefStreamPos() {
              return (
                this.#T ??
                (this._xrefStms.size > 0 ? Math.max(...this._xrefStms) : null)
              );
            }
            getEntry(A) {
              let t = this.entries[A];
              return t && !t.free && t.offset ? t : null;
            }
            fetchIfRef(A, t = !1) {
              return A instanceof As ? this.fetch(A, t) : A;
            }
            fetch(A, t = !1) {
              if (!(A instanceof As))
                throw Error('ref object is not a reference');
              let i = A.num,
                a = this._cacheMap.get(i);
              if (void 0 !== a)
                return (
                  a instanceof Aa && !a.objId && (a.objId = A.toString()), a
                );
              let s = this.getEntry(i);
              if (null === s) return this._cacheMap.set(i, s), s;
              if (this._pendingRefs.has(A))
                return (
                  this._pendingRefs.remove(A),
                  m(`Ignoring circular reference: ${A}.`),
                  j
                );
              this._pendingRefs.put(A);
              try {
                (s = s.uncompressed
                  ? this.fetchUncompressed(A, s, t)
                  : this.fetchCompressed(A, s, t)),
                  this._pendingRefs.remove(A);
              } catch (t) {
                throw (this._pendingRefs.remove(A), t);
              }
              return (
                s instanceof Aa
                  ? (s.objId = A.toString())
                  : s instanceof AC && (s.dict.objId = A.toString()),
                s
              );
            }
            fetchUncompressed(A, t, i = !1) {
              let a = A.gen,
                s = A.num;
              if (t.gen !== a) {
                let g = `Inconsistent generation in XRef: ${A}`;
                if (this._generationFallback && t.gen < a)
                  return m(g), this.fetchUncompressed(As.get(s, t.gen), t, i);
                throw new AE(g);
              }
              let g = this.stream.makeSubStream(t.offset + this.stream.start),
                r = new ta({ lexer: new tr(g), xref: this, allowStreams: !0 }),
                n = r.getObj(),
                o = r.getObj(),
                I = r.getObj();
              if (n !== s || o !== a || !(I instanceof At))
                throw new AE(`Bad (uncompressed) XRef entry: ${A}`);
              if ('obj' !== I.cmd) {
                if (
                  I.cmd.startsWith('obj') &&
                  !Number.isNaN((s = parseInt(I.cmd.substring(3), 10)))
                )
                  return s;
                throw new AE(`Bad (uncompressed) XRef entry: ${A}`);
              }
              return (
                (t =
                  this.encrypt && !i
                    ? r.getObj(this.encrypt.createCipherTransform(s, a))
                    : r.getObj()) instanceof AC || this._cacheMap.set(s, t),
                t
              );
            }
            fetchCompressed(A, t, i = !1) {
              let a = t.offset,
                s = this.fetch(As.get(a, 0));
              if (!(s instanceof AC)) throw new x('bad ObjStm stream');
              let g = s.dict.get('First'),
                r = s.dict.get('N');
              if (!Number.isInteger(g) || !Number.isInteger(r))
                throw new x('invalid first and n parameters for ObjStm stream');
              let n = new ta({
                  lexer: new tr(s),
                  xref: this,
                  allowStreams: !0,
                }),
                o = Array(r),
                I = Array(r);
              for (let A = 0; A < r; ++A) {
                let t = n.getObj();
                if (!Number.isInteger(t))
                  throw new x(
                    `invalid object number in the ObjStm stream: ${t}`
                  );
                let i = n.getObj();
                if (!Number.isInteger(i))
                  throw new x(
                    `invalid object offset in the ObjStm stream: ${i}`
                  );
                (o[A] = t), (I[A] = i);
              }
              let l = (s.start || 0) + g,
                C = Array(r);
              for (let A = 0; A < r; ++A) {
                let t = A < r - 1 ? I[A + 1] - I[A] : void 0;
                if (t < 0) throw new x('Invalid offset in the ObjStm stream.');
                n = new ta({
                  lexer: new tr(s.makeSubStream(l + I[A], t, s.dict)),
                  xref: this,
                  allowStreams: !0,
                });
                let i = n.getObj();
                if (((C[A] = i), i instanceof AC)) continue;
                let g = o[A],
                  B = this.entries[g];
                B && B.offset === a && B.gen === A && this._cacheMap.set(g, i);
              }
              if (void 0 === (t = C[t.gen]))
                throw new AE(`Bad (compressed) XRef entry: ${A}`);
              return t;
            }
            async fetchIfRefAsync(A, t) {
              return A instanceof As ? this.fetchAsync(A, t) : A;
            }
            async fetchAsync(A, t) {
              try {
                return this.fetch(A, t);
              } catch (i) {
                if (!(i instanceof AQ)) throw i;
                return (
                  await this.pdfManager.requestRange(i.begin, i.end),
                  this.fetchAsync(A, t)
                );
              }
            }
            getCatalogObj() {
              return this.root;
            }
          }
          let Qe = [0, 0, 612, 792];
          class Qt {
            constructor({
              pdfManager: A,
              xref: t,
              pageIndex: i,
              pageDict: a,
              ref: s,
              globalIdFactory: g,
              fontCache: r,
              builtInCMapCache: n,
              standardFontDataCache: o,
              globalImageCache: I,
              systemFontCache: l,
              nonBlendModesSet: C,
              xfaFactory: B,
            }) {
              (this.pdfManager = A),
                (this.pageIndex = i),
                (this.pageDict = a),
                (this.xref = t),
                (this.ref = s),
                (this.fontCache = r),
                (this.builtInCMapCache = n),
                (this.standardFontDataCache = o),
                (this.globalImageCache = I),
                (this.systemFontCache = l),
                (this.nonBlendModesSet = C),
                (this.evaluatorOptions = A.evaluatorOptions),
                (this.resourcesPromise = null),
                (this.xfaFactory = B);
              let h = { obj: 0 };
              this._localIdFactory = class extends g {
                static createObjId() {
                  return `p${i}_${++h.obj}`;
                }
                static getPageObjId() {
                  return `p${s.toString()}`;
                }
              };
            }
            _getInheritableProperty(A, t = !1) {
              let i = Af({
                dict: this.pageDict,
                key: A,
                getArray: t,
                stopWhenFound: !1,
              });
              return Array.isArray(i)
                ? 1 !== i.length && i[0] instanceof Aa
                  ? Aa.merge({ xref: this.xref, dictArray: i })
                  : i[0]
                : i;
            }
            get content() {
              return this.pageDict.getArray('Contents');
            }
            get resources() {
              let A = this._getInheritableProperty('Resources');
              return b(this, 'resources', A instanceof Aa ? A : Aa.empty);
            }
            _getBoundingBox(A) {
              if (this.xfaData) return this.xfaData.bbox;
              let t = AR(this._getInheritableProperty(A, !0), null);
              if (t) {
                if (t[2] - t[0] > 0 && t[3] - t[1] > 0) return t;
                m(`Empty, or invalid, /${A} entry.`);
              }
              return null;
            }
            get mediaBox() {
              return b(
                this,
                'mediaBox',
                this._getBoundingBox('MediaBox') || Qe
              );
            }
            get cropBox() {
              return b(
                this,
                'cropBox',
                this._getBoundingBox('CropBox') || this.mediaBox
              );
            }
            get userUnit() {
              let A = this.pageDict.get('UserUnit');
              return (
                ('number' != typeof A || A <= 0) && (A = 1),
                b(this, 'userUnit', A)
              );
            }
            get view() {
              let { cropBox: A, mediaBox: t } = this;
              if (A !== t && !Z(A, t)) {
                let i = v.intersect(A, t);
                if (i && i[2] - i[0] > 0 && i[3] - i[1] > 0)
                  return b(this, 'view', i);
                m('Empty /CropBox and /MediaBox intersection.');
              }
              return b(this, 'view', t);
            }
            get rotate() {
              let A = this._getInheritableProperty('Rotate') || 0;
              return (
                A % 90 != 0
                  ? (A = 0)
                  : A >= 360
                    ? (A %= 360)
                    : A < 0 && (A = ((A % 360) + 360) % 360),
                b(this, 'rotate', A)
              );
            }
            _onSubStreamError(A, t) {
              if (!this.evaluatorOptions.ignoreErrors) throw A;
              m(`getContentStream - ignoring sub-stream (${t}): "${A}".`);
            }
            getContentStream() {
              return this.pdfManager
                .ensure(this, 'content')
                .then((A) =>
                  A instanceof AC
                    ? A
                    : Array.isArray(A)
                      ? new eg(A, this._onSubStreamError.bind(this))
                      : new AX()
                );
            }
            get xfaData() {
              return b(
                this,
                'xfaData',
                this.xfaFactory
                  ? { bbox: this.xfaFactory.getBoundingBox(this.pageIndex) }
                  : null
              );
            }
            async #P(A, t, i) {
              let a = [];
              for (let s of A)
                if (s.id) {
                  let A = As.fromString(s.id);
                  if (!A) {
                    m(`A non-linked annotation cannot be modified: ${s.id}`);
                    continue;
                  }
                  if (s.deleted) {
                    if ((t.put(A, A), s.popupRef)) {
                      let A = As.fromString(s.popupRef);
                      A && t.put(A, A);
                    }
                    continue;
                  }
                  i?.put(A),
                    (s.ref = A),
                    a.push(
                      this.xref.fetchAsync(A).then(
                        (A) => {
                          A instanceof Aa && (s.oldAnnotation = A.clone());
                        },
                        () => {
                          m(`Cannot fetch \`oldAnnotation\` for: ${A}.`);
                        }
                      )
                    ),
                    delete s.id;
                }
              await Promise.all(a);
            }
            async saveNewAnnotations(A, t, i, a) {
              if (this.xfaFactory)
                throw Error('XFA: Cannot save new annotations.');
              let s = new s1({
                  xref: this.xref,
                  handler: A,
                  pageIndex: this.pageIndex,
                  idFactory: this._localIdFactory,
                  fontCache: this.fontCache,
                  builtInCMapCache: this.builtInCMapCache,
                  standardFontDataCache: this.standardFontDataCache,
                  globalImageCache: this.globalImageCache,
                  systemFontCache: this.systemFontCache,
                  options: this.evaluatorOptions,
                }),
                g = new Ar(),
                r = new Ag();
              await this.#P(i, g, r);
              let n = this.pageDict,
                o = this.annotations.filter(
                  (A) => !(A instanceof As && g.has(A))
                ),
                I = await hG.saveNewAnnotations(s, t, i, a);
              for (let { ref: A } of I.annotations)
                A instanceof As && !r.has(A) && o.push(A);
              let l = n.get('Annots');
              n.set('Annots', o);
              let C = [];
              await gk(this.ref, n, C, this.xref), l && n.set('Annots', l);
              let B = I.dependencies;
              for (let A of (B.push(
                { ref: this.ref, data: C.join('') },
                ...I.annotations
              ),
              g))
                B.push({ ref: A, data: null });
              return B;
            }
            save(A, t, i) {
              let a = new s1({
                xref: this.xref,
                handler: A,
                pageIndex: this.pageIndex,
                idFactory: this._localIdFactory,
                fontCache: this.fontCache,
                builtInCMapCache: this.builtInCMapCache,
                standardFontDataCache: this.standardFontDataCache,
                globalImageCache: this.globalImageCache,
                systemFontCache: this.systemFontCache,
                options: this.evaluatorOptions,
              });
              return this._parsedAnnotations.then(function (A) {
                let s = [];
                for (let g of A)
                  s.push(
                    g.save(a, t, i).catch(function (A) {
                      return (
                        m(
                          `save - ignoring annotation data during "${t.name}" task: "${A}".`
                        ),
                        null
                      );
                    })
                  );
                return Promise.all(s).then(function (A) {
                  return A.filter((A) => !!A);
                });
              });
            }
            loadResources(A) {
              return (
                (this.resourcesPromise ||= this.pdfManager.ensure(
                  this,
                  'resources'
                )),
                this.resourcesPromise.then(() =>
                  new gW(this.resources, A, this.xref).load()
                )
              );
            }
            getOperatorList({
              handler: A,
              sink: t,
              task: i,
              intent: a,
              cacheKey: s,
              annotationStorage: g = null,
              modifiedIds: r = null,
            }) {
              let n = this.getContentStream(),
                o = this.loadResources([
                  'ColorSpace',
                  'ExtGState',
                  'Font',
                  'Pattern',
                  'Properties',
                  'Shading',
                  'XObject',
                ]),
                I = new s1({
                  xref: this.xref,
                  handler: A,
                  pageIndex: this.pageIndex,
                  idFactory: this._localIdFactory,
                  fontCache: this.fontCache,
                  builtInCMapCache: this.builtInCMapCache,
                  standardFontDataCache: this.standardFontDataCache,
                  globalImageCache: this.globalImageCache,
                  systemFontCache: this.systemFontCache,
                  options: this.evaluatorOptions,
                }),
                l = this.xfaFactory ? null : Av(g),
                B = l?.get(this.pageIndex),
                h = Promise.resolve(null),
                Q = null;
              if (B) {
                let A;
                let t = this.pdfManager.ensureDoc('annotationGlobals'),
                  a = new Set();
                for (let { bitmapId: A, bitmap: t } of B)
                  !A || t || a.has(A) || a.add(A);
                let { isOffscreenCanvasSupported: s } = this.evaluatorOptions;
                if (a.size > 0) {
                  let t = B.slice();
                  for (let [A, i] of g)
                    A.startsWith(C) &&
                      i.bitmap &&
                      a.has(i.bitmapId) &&
                      t.push(i);
                  A = hG.generateImages(t, this.xref, s);
                } else A = hG.generateImages(B, this.xref, s);
                (Q = new Ag()),
                  (h = Promise.all([t, this.#P(B, Q, null)]).then(([t]) =>
                    t ? hG.printNewAnnotations(t, I, i, B, A) : null
                  ));
              }
              let c = Promise.all([n, o]).then(([g]) => {
                let r = new sX(a, t);
                return (
                  A.send('StartRenderPage', {
                    transparency: I.hasBlendModes(
                      this.resources,
                      this.nonBlendModesSet
                    ),
                    pageIndex: this.pageIndex,
                    cacheKey: s,
                  }),
                  I.getOperatorList({
                    stream: g,
                    task: i,
                    resources: this.resources,
                    operatorList: r,
                  }).then(function () {
                    return r;
                  })
                );
              });
              return Promise.all([c, this._parsedAnnotations, h]).then(
                function ([A, t, s]) {
                  if (s) {
                    t = t.filter((A) => !(A.ref && Q.has(A.ref)));
                    for (let A = 0, i = s.length; A < i; A++) {
                      let a = s[A];
                      if (a.refToReplace) {
                        let g = t.findIndex(
                          (A) => A.ref && Al(A.ref, a.refToReplace)
                        );
                        g >= 0 && (t.splice(g, 1, a), s.splice(A--, 1), i--);
                      }
                    }
                    t = t.concat(s);
                  }
                  if (0 === t.length || 64 & a)
                    return A.flush(!0), { length: A.totalLength };
                  let n = !!(16 & a),
                    o = !!(128 & a),
                    l = !!(1 & a),
                    C = !!(2 & a),
                    B = !!(4 & a),
                    h = [];
                  for (let A of t)
                    (l ||
                      (C &&
                        A.mustBeViewed(g, n) &&
                        A.mustBeViewedWhenEditing(o, r)) ||
                      (B && A.mustBePrinted(g))) &&
                      h.push(
                        A.getOperatorList(I, i, a, g).catch(function (A) {
                          return (
                            m(
                              `getOperatorList - ignoring annotation data during "${i.name}" task: "${A}".`
                            ),
                            {
                              opList: null,
                              separateForm: !1,
                              separateCanvas: !1,
                            }
                          );
                        })
                      );
                  return Promise.all(h).then(function (t) {
                    let i = !1,
                      a = !1;
                    for (let {
                      opList: s,
                      separateForm: g,
                      separateCanvas: r,
                    } of t)
                      A.addOpList(s), (i ||= g), (a ||= r);
                    return (
                      A.flush(!0, { form: i, canvas: a }),
                      { length: A.totalLength }
                    );
                  });
                }
              );
            }
            async extractTextContent({
              handler: A,
              task: t,
              includeMarkedContent: i,
              disableNormalization: a,
              sink: s,
            }) {
              let g = this.getContentStream(),
                r = this.loadResources([
                  'ExtGState',
                  'Font',
                  'Properties',
                  'XObject',
                ]),
                n = this.pdfManager.ensureCatalog('lang'),
                [o, , I] = await Promise.all([g, r, n]);
              return new s1({
                xref: this.xref,
                handler: A,
                pageIndex: this.pageIndex,
                idFactory: this._localIdFactory,
                fontCache: this.fontCache,
                builtInCMapCache: this.builtInCMapCache,
                standardFontDataCache: this.standardFontDataCache,
                globalImageCache: this.globalImageCache,
                systemFontCache: this.systemFontCache,
                options: this.evaluatorOptions,
              }).getTextContent({
                stream: o,
                task: t,
                resources: this.resources,
                includeMarkedContent: i,
                disableNormalization: a,
                sink: s,
                viewBox: this.view,
                lang: I,
              });
            }
            async getStructTree() {
              let A = await this.pdfManager.ensureCatalog('structTreeRoot');
              return A
                ? (await this._parsedAnnotations,
                  (await this.pdfManager.ensure(this, '_parseStructTree', [A]))
                    .serializable)
                : null;
            }
            _parseStructTree(A) {
              let t = new gK(A, this.pageDict);
              return t.parse(this.ref), t;
            }
            async getAnnotationsData(A, t, i) {
              let a;
              let s = await this._parsedAnnotations;
              if (0 === s.length) return s;
              let g = [],
                r = [],
                n = !!(1 & i),
                o = !!(2 & i),
                I = !!(4 & i);
              for (let i of s) {
                let s = n || (o && i.viewable);
                (s || (I && i.printable)) && g.push(i.data),
                  i.hasTextContent &&
                    s &&
                    ((a ||= new s1({
                      xref: this.xref,
                      handler: A,
                      pageIndex: this.pageIndex,
                      idFactory: this._localIdFactory,
                      fontCache: this.fontCache,
                      builtInCMapCache: this.builtInCMapCache,
                      standardFontDataCache: this.standardFontDataCache,
                      globalImageCache: this.globalImageCache,
                      systemFontCache: this.systemFontCache,
                      options: this.evaluatorOptions,
                    })),
                    r.push(
                      i
                        .extractTextContent(a, t, [
                          -1 / 0,
                          -1 / 0,
                          1 / 0,
                          1 / 0,
                        ])
                        .catch(function (A) {
                          m(
                            `getAnnotationsData - ignoring textContent during "${t.name}" task: "${A}".`
                          );
                        })
                    ));
              }
              return await Promise.all(r), g;
            }
            get annotations() {
              let A = this._getInheritableProperty('Annots');
              return b(this, 'annotations', Array.isArray(A) ? A : []);
            }
            get _parsedAnnotations() {
              return b(
                this,
                '_parsedAnnotations',
                this.pdfManager.ensure(this, 'annotations').then(async (A) => {
                  let t, i;
                  if (0 === A.length) return A;
                  let [a, s] = await Promise.all([
                    this.pdfManager.ensureDoc('annotationGlobals'),
                    this.pdfManager.ensureDoc('fieldObjects'),
                  ]);
                  if (!a) return [];
                  let g = s?.orphanFields,
                    r = [];
                  for (let t of A)
                    r.push(
                      hG
                        .create(
                          this.xref,
                          t,
                          a,
                          this._localIdFactory,
                          !1,
                          g,
                          this.ref
                        )
                        .catch(function (A) {
                          return m(`_parsedAnnotations: "${A}".`), null;
                        })
                    );
                  let n = [];
                  for (let A of await Promise.all(r))
                    A &&
                      (A instanceof hY
                        ? (i ||= []).push(A)
                        : A instanceof hZ
                          ? (t ||= []).push(A)
                          : n.push(A));
                  return i && n.push(...i), t && n.push(...t), n;
                })
              );
            }
            get jsActions() {
              return b(this, 'jsActions', AM(this.xref, this.pageDict, E));
            }
          }
          let Qi = new Uint8Array([37, 80, 68, 70, 45]),
            Qa = new Uint8Array([115, 116, 97, 114, 116, 120, 114, 101, 102]),
            Qs = new Uint8Array([101, 110, 100, 111, 98, 106]);
          function Qg(A, t, i = 1024, a = !1) {
            let s = t.length,
              g = A.peekBytes(i),
              r = g.length - s;
            if (r <= 0) return !1;
            if (a) {
              let i = s - 1,
                a = g.length - 1;
              for (; a >= i; ) {
                let r = 0;
                for (; r < s && g[a - r] === t[i - r]; ) r++;
                if (r >= s) return (A.pos += a - i), !0;
                a--;
              }
            } else {
              let i = 0;
              for (; i <= r; ) {
                let a = 0;
                for (; a < s && g[i + a] === t[a]; ) a++;
                if (a >= s) return (A.pos += i), !0;
                i++;
              }
            }
            return !1;
          }
          class Qr {
            constructor(A, t) {
              if (t.length <= 0)
                throw new R(
                  'The PDF file is empty, i.e. its size is zero bytes.'
                );
              (this.pdfManager = A),
                (this.stream = t),
                (this.xref = new QA(t, A)),
                (this._pagePromises = new Map()),
                (this._version = null);
              let i = { font: 0 };
              this._globalIdFactory = class {
                static getDocId() {
                  return `g_${A.docId}`;
                }
                static createFontId() {
                  return 'f' + ++i.font;
                }
                static createObjId() {
                  y('Abstract method `createObjId` called.');
                }
                static getPageObjId() {
                  y('Abstract method `getPageObjId` called.');
                }
              };
            }
            parse(A) {
              this.xref.parse(A),
                (this.catalog = new gP(this.pdfManager, this.xref));
            }
            get linearization() {
              let A = null;
              try {
                A = tn.create(this.stream);
              } catch (A) {
                if (A instanceof AQ) throw A;
                p(A);
              }
              return b(this, 'linearization', A);
            }
            get startXRef() {
              let A = this.stream,
                t = 0;
              if (this.linearization) {
                if ((A.reset(), Qg(A, Qs))) {
                  A.skip(6);
                  let i = A.peekByte();
                  for (; Ab(i); ) A.pos++, (i = A.peekByte());
                  t = A.pos - A.start;
                }
              } else {
                let i = Qa.length,
                  a = !1,
                  s = A.end;
                for (; !a && s > 0; )
                  (s -= 1024 - i) < 0 && (s = 0),
                    (A.pos = s),
                    (a = Qg(A, Qa, 1024, !0));
                if (a) {
                  let i;
                  A.skip(9);
                  do i = A.getByte();
                  while (Ab(i));
                  let a = '';
                  for (; i >= 32 && i <= 57; )
                    (a += String.fromCharCode(i)), (i = A.getByte());
                  isNaN((t = parseInt(a, 10))) && (t = 0);
                }
              }
              return b(this, 'startXRef', t);
            }
            checkHeader() {
              let A = this.stream;
              if ((A.reset(), !Qg(A, Qi))) return;
              A.moveStart(), A.skip(Qi.length);
              let t,
                i = '';
              for (; (t = A.getByte()) > 32 && i.length < 7; )
                i += String.fromCharCode(t);
              AB.test(i)
                ? (this._version = i)
                : m(`Invalid PDF header version: ${i}`);
            }
            parseStartXRef() {
              this.xref.setStartXRef(this.startXRef);
            }
            get numPages() {
              return b(
                this,
                'numPages',
                this.catalog.hasActualNumPages
                  ? this.catalog.numPages
                  : this.xfaFactory
                    ? this.xfaFactory.getNumPages()
                    : this.linearization
                      ? this.linearization.numPages
                      : this.catalog.numPages
              );
            }
            _hasOnlyDocumentSignatures(A, t = 0) {
              return (
                !!Array.isArray(A) &&
                A.every((A) => {
                  if (!((A = this.xref.fetchIfRef(A)) instanceof Aa)) return !1;
                  if (A.has('Kids'))
                    return ++t > 10
                      ? (m(
                          '_hasOnlyDocumentSignatures: maximum recursion depth reached'
                        ),
                        !1)
                      : this._hasOnlyDocumentSignatures(A.get('Kids'), t);
                  let i = An(A.get('FT'), 'Sig'),
                    a = A.get('Rect'),
                    s = Array.isArray(a) && a.every((A) => 0 === A);
                  return i && s;
                })
              );
            }
            get _xfaStreams() {
              let A = this.catalog.acroForm;
              if (!A) return null;
              let t = A.get('XFA'),
                i = {
                  'xdp:xdp': '',
                  template: '',
                  datasets: '',
                  config: '',
                  connectionSet: '',
                  localeSet: '',
                  stylesheet: '',
                  '/xdp:xdp': '',
                };
              if (t instanceof AC && !t.isEmpty) return (i['xdp:xdp'] = t), i;
              if (!Array.isArray(t) || 0 === t.length) return null;
              for (let A = 0, a = t.length; A < a; A += 2) {
                let s;
                if (
                  ((s = 0 === A ? 'xdp:xdp' : A === a - 2 ? '/xdp:xdp' : t[A]),
                  !i.hasOwnProperty(s))
                )
                  continue;
                let g = this.xref.fetchIfRef(t[A + 1]);
                g instanceof AC && !g.isEmpty && (i[s] = g);
              }
              return i;
            }
            get xfaDatasets() {
              let A = this._xfaStreams;
              if (!A) return b(this, 'xfaDatasets', null);
              for (let t of ['datasets', 'xdp:xdp']) {
                let i = A[t];
                if (i)
                  try {
                    let A = P(i.getString());
                    return b(this, 'xfaDatasets', new h4({ [t]: A }));
                  } catch {
                    m('XFA - Invalid utf-8 string.');
                    break;
                  }
              }
              return b(this, 'xfaDatasets', null);
            }
            get xfaData() {
              let A = this._xfaStreams;
              if (!A) return null;
              let t = Object.create(null);
              for (let [i, a] of Object.entries(A))
                if (a)
                  try {
                    t[i] = P(a.getString());
                  } catch {
                    return m('XFA - Invalid utf-8 string.'), null;
                  }
              return t;
            }
            get xfaFactory() {
              let A;
              return (
                this.pdfManager.enableXfa &&
                  this.catalog.needsRendering &&
                  this.formInfo.hasXfa &&
                  !this.formInfo.hasAcroForm &&
                  (A = this.xfaData),
                b(this, 'xfaFactory', A ? new hR(A) : null)
              );
            }
            get isPureXfa() {
              return !!this.xfaFactory && this.xfaFactory.isValid();
            }
            get htmlForXfa() {
              return this.xfaFactory ? this.xfaFactory.getPages() : null;
            }
            async loadXfaImages() {
              let A = await this.pdfManager.ensureCatalog('xfaImages');
              if (!A) return;
              let t = A.getKeys(),
                i = new gW(A, t, this.xref);
              await i.load();
              let a = new Map();
              for (let i of t) {
                let t = A.get(i);
                t instanceof AC && a.set(i, t.getBytes());
              }
              this.xfaFactory.setImages(a);
            }
            async loadXfaFonts(A, t) {
              let i = await this.pdfManager.ensureCatalog('acroForm');
              if (!i) return;
              let a = await i.getAsync('DR');
              if (!(a instanceof Aa)) return;
              let s = new gW(a, ['Font'], this.xref);
              await s.load();
              let g = a.get('Font');
              if (!(g instanceof Aa)) return;
              let r = Object.assign(
                Object.create(null),
                this.pdfManager.evaluatorOptions
              );
              r.useSystemFonts = !1;
              let n = new s1({
                  xref: this.xref,
                  handler: A,
                  pageIndex: -1,
                  idFactory: this._globalIdFactory,
                  fontCache: this.catalog.fontCache,
                  builtInCMapCache: this.catalog.builtInCMapCache,
                  standardFontDataCache: this.catalog.standardFontDataCache,
                  options: r,
                }),
                o = new sX(),
                I = [],
                l = {
                  get font() {
                    return I.at(-1);
                  },
                  set font(e) {
                    I.push(e);
                  },
                  clone() {
                    return this;
                  },
                },
                C = new Map();
              g.forEach((A, t) => {
                C.set(A, t);
              });
              let B = [];
              for (let [A, i] of C) {
                let s = i.get('FontDescriptor');
                if (!(s instanceof Aa)) continue;
                let g = s.get('FontFamily');
                g = g.replaceAll(/[ ]+(\d)/g, '$1');
                let r = {
                  fontFamily: g,
                  fontWeight: s.get('FontWeight'),
                  italicAngle: -s.get('ItalicAngle'),
                };
                (function (A) {
                  let t = new Set([
                      '100',
                      '200',
                      '300',
                      '400',
                      '500',
                      '600',
                      '700',
                      '800',
                      '900',
                      '1000',
                      'normal',
                      'bold',
                      'bolder',
                      'lighter',
                    ]),
                    { fontFamily: i, fontWeight: a, italicAngle: s } = A;
                  if (!AH(i, !0)) return !1;
                  let g = a ? a.toString() : '';
                  A.fontWeight = t.has(g) ? g : '400';
                  let r = parseFloat(s);
                  return (
                    (A.italicAngle =
                      isNaN(r) || r < -90 || r > 90 ? '14' : s.toString()),
                    !0
                  );
                })(r) &&
                  B.push(
                    n
                      .handleSetFont(a, [Ae.get(A), 1], null, o, t, l, null, r)
                      .catch(function (A) {
                        return m(`loadXfaFonts: "${A}".`), null;
                      })
                  );
              }
              await Promise.all(B);
              let h = this.xfaFactory.setFonts(I);
              if (!h) return;
              (r.ignoreErrors = !0), (B.length = 0), (I.length = 0);
              let Q = new Set();
              for (let A of h) a7(`${A}-Regular`) || Q.add(A);
              for (let A of (Q.size && h.push('PdfJS-Fallback'), h))
                if (!Q.has(A))
                  for (let i of [
                    { name: 'Regular', fontWeight: 400, italicAngle: 0 },
                    { name: 'Bold', fontWeight: 700, italicAngle: 0 },
                    { name: 'Italic', fontWeight: 400, italicAngle: 12 },
                    { name: 'BoldItalic', fontWeight: 700, italicAngle: 12 },
                  ]) {
                    let s = `${A}-${i.name}`,
                      g = a4(s);
                    B.push(
                      n
                        .handleSetFont(a, [Ae.get(s), 1], null, o, t, l, g, {
                          fontFamily: A,
                          fontWeight: i.fontWeight,
                          italicAngle: i.italicAngle,
                        })
                        .catch(function (A) {
                          return m(`loadXfaFonts: "${A}".`), null;
                        })
                    );
                  }
              await Promise.all(B), this.xfaFactory.appendFonts(I, Q);
            }
            async serializeXfaData(A) {
              return this.xfaFactory ? this.xfaFactory.serializeData(A) : null;
            }
            get version() {
              return this.catalog.version || this._version;
            }
            get formInfo() {
              let A = {
                  hasFields: !1,
                  hasAcroForm: !1,
                  hasXfa: !1,
                  hasSignatures: !1,
                },
                t = this.catalog.acroForm;
              if (!t) return b(this, 'formInfo', A);
              try {
                let i = t.get('Fields'),
                  a = Array.isArray(i) && i.length > 0;
                A.hasFields = a;
                let s = t.get('XFA');
                A.hasXfa =
                  (Array.isArray(s) && s.length > 0) ||
                  (s instanceof AC && !s.isEmpty);
                let g = !!(1 & t.get('SigFlags')),
                  r = g && this._hasOnlyDocumentSignatures(i);
                (A.hasAcroForm = a && !r), (A.hasSignatures = g);
              } catch (A) {
                if (A instanceof AQ) throw A;
                m(`Cannot fetch form information: "${A}".`);
              }
              return b(this, 'formInfo', A);
            }
            get documentInfo() {
              let A;
              let t = {
                PDFFormatVersion: this.version,
                Language: this.catalog.lang,
                EncryptFilterName: this.xref.encrypt
                  ? this.xref.encrypt.filterName
                  : null,
                IsLinearized: !!this.linearization,
                IsAcroFormPresent: this.formInfo.hasAcroForm,
                IsXFAPresent: this.formInfo.hasXfa,
                IsCollectionPresent: !!this.catalog.collection,
                IsSignaturesPresent: this.formInfo.hasSignatures,
              };
              try {
                A = this.xref.trailer.get('Info');
              } catch (A) {
                if (A instanceof AQ) throw A;
                p('The document information dictionary is invalid.');
              }
              if (!(A instanceof Aa)) return b(this, 'documentInfo', t);
              for (let i of A.getKeys()) {
                let a = A.get(i);
                switch (i) {
                  case 'Title':
                  case 'Author':
                  case 'Subject':
                  case 'Keywords':
                  case 'Creator':
                  case 'Producer':
                  case 'CreationDate':
                  case 'ModDate':
                    if ('string' == typeof a) {
                      t[i] = T(a);
                      continue;
                    }
                    break;
                  case 'Trapped':
                    if (a instanceof Ae) {
                      t[i] = a;
                      continue;
                    }
                    break;
                  default:
                    let s;
                    switch (typeof a) {
                      case 'string':
                        s = T(a);
                        break;
                      case 'number':
                      case 'boolean':
                        s = a;
                        break;
                      default:
                        a instanceof Ae && (s = a);
                    }
                    if (void 0 === s) {
                      m(`Bad value, for custom key "${i}", in Info: ${a}.`);
                      continue;
                    }
                    t.Custom || (t.Custom = Object.create(null)),
                      (t.Custom[i] = s);
                    continue;
                }
                m(`Bad value, for key "${i}", in Info: ${a}.`);
              }
              return b(this, 'documentInfo', t);
            }
            get fingerprints() {
              let A, t;
              function i(A) {
                return (
                  'string' == typeof A &&
                  A.length > 0 &&
/*
  Pattern: hexStrings
*/
                  '\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00' !==
                    A
                );
              }
              function a(A) {
                let t = [];
                for (let i of A) {
                  let A = i.toString(16);
                  t.push(A.padStart(2, '0'));
                }
                return t.join('');
              }
              let s = this.xref.trailer.get('ID');
              return (
                Array.isArray(s) && i(s[0])
                  ? ((A = J(s[0])), s[1] !== s[0] && i(s[1]) && (t = J(s[1])))
                  : (A = gQ(this.stream.getByteRange(0, 1024), 0, 1024)),
                b(this, 'fingerprints', [a(A), t ? a(t) : null])
              );
            }
            async _getLinearizationPage(A) {
              let { catalog: t, linearization: i, xref: a } = this,
                s = As.get(i.objectNumberFirst, 0);
              try {
                let A = await a.fetchAsync(s);
                if (A instanceof Aa) {
                  let i = A.getRaw('Type');
                  if (
                    (i instanceof As && (i = await a.fetchAsync(i)),
                    An(i, 'Page') ||
                      (!A.has('Type') && !A.has('Kids') && A.has('Contents')))
                  )
                    return (
                      t.pageKidsCountCache.has(s) ||
                        t.pageKidsCountCache.put(s, 1),
                      t.pageIndexCache.has(s) || t.pageIndexCache.put(s, 0),
                      [A, s]
                    );
                }
                throw new x(
                  "The Linearization dictionary doesn't point to a valid Page dictionary."
                );
              } catch (i) {
                return (
                  m(`_getLinearizationPage: "${i.message}".`), t.getPageDict(A)
                );
              }
            }
            getPage(A) {
              let t;
              let i = this._pagePromises.get(A);
              if (i) return i;
              let { catalog: a, linearization: s, xfaFactory: g } = this;
              return (
                (t = (t = g
                  ? Promise.resolve([Aa.empty, null])
                  : s?.pageFirst === A
                    ? this._getLinearizationPage(A)
                    : a.getPageDict(A)).then(
                  ([t, i]) =>
                    new Qt({
                      pdfManager: this.pdfManager,
                      xref: this.xref,
                      pageIndex: A,
                      pageDict: t,
                      ref: i,
                      globalIdFactory: this._globalIdFactory,
                      fontCache: a.fontCache,
                      builtInCMapCache: a.builtInCMapCache,
                      standardFontDataCache: a.standardFontDataCache,
                      globalImageCache: a.globalImageCache,
                      systemFontCache: a.systemFontCache,
                      nonBlendModesSet: a.nonBlendModesSet,
                      xfaFactory: g,
                    })
                )),
                this._pagePromises.set(A, t),
                t
              );
            }
            async checkFirstPage(A = !1) {
              if (!A)
                try {
                  await this.getPage(0);
                } catch (A) {
                  if (A instanceof AE)
                    throw (
                      (this._pagePromises.delete(0),
                      await this.cleanup(),
                      new Au())
                    );
                }
            }
            async checkLastPage(A = !1) {
              let t;
              let { catalog: i, pdfManager: a } = this;
              i.setActualNumPages();
              try {
                if (
                  (await Promise.all([
                    a.ensureDoc('xfaFactory'),
                    a.ensureDoc('linearization'),
                    a.ensureCatalog('numPages'),
                  ]),
                  this.xfaFactory)
                )
                  return;
                if (
                  ((t = this.linearization
                    ? this.linearization.numPages
                    : i.numPages),
                  !Number.isInteger(t))
                )
                  throw new x('Page count is not an integer.');
                if (t <= 1) return;
                await this.getPage(t - 1);
              } catch (g) {
                let s;
                if (
                  (this._pagePromises.delete(t - 1),
                  await this.cleanup(),
                  g instanceof AE && !A)
                )
                  throw new Au();
                m(`checkLastPage - invalid /Pages tree /Count: ${t}.`);
                try {
                  s = await i.getAllPageDicts(A);
                } catch (t) {
                  if (t instanceof AE && !A) throw new Au();
                  i.setActualNumPages(1);
                  return;
                }
                for (let [A, [t, g]] of s) {
                  let s;
                  t instanceof Error
                    ? (s = Promise.reject(t)).catch(() => {})
                    : (s = Promise.resolve(
                        new Qt({
                          pdfManager: a,
                          xref: this.xref,
                          pageIndex: A,
                          pageDict: t,
                          ref: g,
                          globalIdFactory: this._globalIdFactory,
                          fontCache: i.fontCache,
                          builtInCMapCache: i.builtInCMapCache,
                          standardFontDataCache: i.standardFontDataCache,
                          globalImageCache: i.globalImageCache,
                          systemFontCache: i.systemFontCache,
                          nonBlendModesSet: i.nonBlendModesSet,
                          xfaFactory: null,
                        })
                      )),
                    this._pagePromises.set(A, s);
                }
                i.setActualNumPages(s.size);
              }
            }
            fontFallback(A, t) {
              return this.catalog.fontFallback(A, t);
            }
            async cleanup(A = !1) {
              return this.catalog ? this.catalog.cleanup(A) : gs();
            }
            async #W(A, t, i, a, s, g, r) {
              let { xref: n } = this;
              if (!(i instanceof As) || g.has(i)) return;
              g.put(i);
              let o = await n.fetchAsync(i);
              if (!(o instanceof Aa)) return;
              if (o.has('T')) {
                let t = T(await o.getAsync('T'));
                A = '' === A ? t : `${A}.${t}`;
              } else {
                let i = o;
                for (;;) {
                  if ((i = i.getRaw('Parent') || t) instanceof As) {
                    if (g.has(i)) break;
                    i = await n.fetchAsync(i);
                  }
                  if (!(i instanceof Aa)) break;
                  if (i.has('T')) {
                    let t = T(await i.getAsync('T'));
                    A = '' === A ? t : `${A}.${t}`;
                    break;
                  }
                }
              }
              if (
                (t &&
                  !o.has('Parent') &&
                  An(o.get('Subtype'), 'Widget') &&
                  r.put(i, t),
                a.has(A) || a.set(A, []),
                a.get(A).push(
                  hG
                    .create(n, i, s, null, !0, r, null)
                    .then((A) => A?.getFieldObject())
                    .catch(function (A) {
                      return m(`#collectFieldObjects: "${A}".`), null;
                    })
                ),
                !o.has('Kids'))
              )
                return;
              let I = await o.getAsync('Kids');
              if (Array.isArray(I))
                for (let t of I) await this.#W(A, i, t, a, s, g, r);
            }
            get fieldObjects() {
              return this.formInfo.hasFields
                ? b(
                    this,
                    'fieldObjects',
                    Promise.all([
                      this.pdfManager.ensureDoc('annotationGlobals'),
                      this.pdfManager.ensureCatalog('acroForm'),
                    ]).then(async ([A, t]) => {
                      if (!A) return null;
                      let i = new Ag(),
                        a = Object.create(null),
                        s = new Map(),
                        g = new Ar();
                      for (let a of await t.getAsync('Fields'))
                        await this.#W('', null, a, s, A, i, g);
                      let r = [];
                      for (let [A, t] of s)
                        r.push(
                          Promise.all(t).then((t) => {
                            (t = t.filter((A) => !!A)).length > 0 && (a[A] = t);
                          })
                        );
                      return (
                        await Promise.all(r), { allFields: a, orphanFields: g }
                      );
                    })
                  )
                : b(this, 'fieldObjects', Promise.resolve(null));
            }
            get hasJSActions() {
              return b(
                this,
                'hasJSActions',
                this.pdfManager.ensureDoc('_parseHasJSActions')
              );
            }
            async _parseHasJSActions() {
              let [A, t] = await Promise.all([
                this.pdfManager.ensureCatalog('jsActions'),
                this.pdfManager.ensureDoc('fieldObjects'),
              ]);
              return (
                !!A ||
                (!!t &&
                  Object.values(t.allFields).some((A) =>
                    A.some((A) => null !== A.actions)
                  ))
              );
            }
            get calculationOrderIds() {
              let A = this.catalog.acroForm;
              if (!A?.has('CO')) return b(this, 'calculationOrderIds', null);
              let t = A.get('CO');
              if (!Array.isArray(t) || 0 === t.length)
                return b(this, 'calculationOrderIds', null);
              let i = [];
              for (let A of t) A instanceof As && i.push(A.toString());
              return 0 === i.length
                ? b(this, 'calculationOrderIds', null)
                : b(this, 'calculationOrderIds', i);
            }
            get annotationGlobals() {
              return b(
                this,
                'annotationGlobals',
                hG.createGlobals(this.pdfManager)
              );
            }
          }
          class Qn {
            constructor(A) {
              (this._docBaseUrl = (function (A) {
                if (A) {
                  let t = D(A);
                  if (t) return t.href;
                  m(`Invalid absolute docBaseUrl: "${A}".`);
                }
                return null;
              })(A.docBaseUrl)),
                (this._docId = A.docId),
                (this._password = A.password),
                (this.enableXfa = A.enableXfa),
                (A.evaluatorOptions.isOffscreenCanvasSupported &&=
                  Y.isOffscreenCanvasSupported),
                (this.evaluatorOptions = Object.freeze(A.evaluatorOptions));
            }
            get docId() {
              return this._docId;
            }
            get password() {
              return this._password;
            }
            get docBaseUrl() {
              return this._docBaseUrl;
            }
            get catalog() {
              return this.pdfDocument.catalog;
            }
            ensureDoc(A, t) {
              return this.ensure(this.pdfDocument, A, t);
            }
            ensureXRef(A, t) {
              return this.ensure(this.pdfDocument.xref, A, t);
            }
            ensureCatalog(A, t) {
              return this.ensure(this.pdfDocument.catalog, A, t);
            }
            getPage(A) {
              return this.pdfDocument.getPage(A);
            }
            fontFallback(A, t) {
              return this.pdfDocument.fontFallback(A, t);
            }
            loadXfaFonts(A, t) {
              return this.pdfDocument.loadXfaFonts(A, t);
            }
            loadXfaImages() {
              return this.pdfDocument.loadXfaImages();
            }
            serializeXfaData(A) {
              return this.pdfDocument.serializeXfaData(A);
            }
            cleanup(A = !1) {
              return this.pdfDocument.cleanup(A);
            }
            async ensure(A, t, i) {
              y('Abstract method `ensure` called');
            }
            requestRange(A, t) {
              y('Abstract method `requestRange` called');
            }
            requestLoadedStream(A = !1) {
              y('Abstract method `requestLoadedStream` called');
            }
            sendProgressiveData(A) {
              y('Abstract method `sendProgressiveData` called');
            }
            updatePassword(A) {
              this._password = A;
            }
            terminate(A) {
              y('Abstract method `terminate` called');
            }
          }
          class Qo extends Qn {
            constructor(A) {
              super(A);
              let t = new AZ(A.source);
              (this.pdfDocument = new Qr(this, t)),
                (this._loadedStreamPromise = Promise.resolve(t));
            }
            async ensure(A, t, i) {
              let a = A[t];
              return 'function' == typeof a ? a.apply(A, i) : a;
            }
            requestRange(A, t) {
              return Promise.resolve();
            }
            requestLoadedStream(A = !1) {
              return this._loadedStreamPromise;
            }
            terminate(A) {}
          }
          class QI extends Qn {
            constructor(A) {
              super(A),
                (this.streamManager = new Aj(A.source, {
                  msgHandler: A.handler,
                  length: A.length,
                  disableAutoFetch: A.disableAutoFetch,
                  rangeChunkSize: A.rangeChunkSize,
                })),
                (this.pdfDocument = new Qr(
                  this,
                  this.streamManager.getStream()
                ));
            }
            async ensure(A, t, i) {
              try {
                let a = A[t];
                return 'function' == typeof a ? a.apply(A, i) : a;
              } catch (a) {
                if (!(a instanceof AQ)) throw a;
                return (
                  await this.requestRange(a.begin, a.end), this.ensure(A, t, i)
                );
              }
            }
            requestRange(A, t) {
              return this.streamManager.requestRange(A, t);
            }
            requestLoadedStream(A = !1) {
              return this.streamManager.requestAllChunks(A);
            }
            sendProgressiveData(A) {
              this.streamManager.onReceiveData({ chunk: A });
            }
            terminate(A) {
              this.streamManager.abort(A);
            }
          }
          function Ql(A) {
            switch (
              (A instanceof Error ||
                ('object' == typeof A && null !== A) ||
                y(
                  'wrapReason: Expected "reason" to be a (possibly cloned) Error.'
                ),
              A.name)
            ) {
              case 'AbortException':
                return new U(A.message);
              case 'MissingPDFException':
                return new G(A.message);
              case 'PasswordException':
                return new F(A.message, A.code);
              case 'UnexpectedResponseException':
                return new N(A.message, A.status);
              case 'UnknownErrorException':
                return new S(A.message, A.details);
              default:
                return new S(A.message, A.toString());
            }
          }
          class QC {
            constructor(A, t, i) {
              (this.sourceName = A),
                (this.targetName = t),
                (this.comObj = i),
                (this.callbackId = 1),
                (this.streamId = 1),
                (this.streamSinks = Object.create(null)),
                (this.streamControllers = Object.create(null)),
                (this.callbackCapabilities = Object.create(null)),
                (this.actionHandler = Object.create(null)),
                (this._onComObjOnMessage = (A) => {
                  let t = A.data;
                  if (t.targetName !== this.sourceName) return;
                  if (t.stream) {
                    this.#Z(t);
                    return;
                  }
                  if (t.callback) {
                    let A = t.callbackId,
                      i = this.callbackCapabilities[A];
                    if (!i) throw Error(`Cannot resolve callback ${A}`);
                    if ((delete this.callbackCapabilities[A], 1 === t.callback))
                      i.resolve(t.data);
                    else {
                      if (2 !== t.callback)
                        throw Error('Unexpected callback case');
                      i.reject(Ql(t.reason));
                    }
                    return;
                  }
                  let a = this.actionHandler[t.action];
                  if (!a)
                    throw Error(`Unknown action from worker: ${t.action}`);
                  if (t.callbackId) {
                    let A = this.sourceName,
                      s = t.sourceName;
                    new Promise(function (A) {
                      A(a(t.data));
                    }).then(
                      function (a) {
                        i.postMessage({
                          sourceName: A,
                          targetName: s,
                          callback: 1,
                          callbackId: t.callbackId,
                          data: a,
                        });
                      },
                      function (a) {
                        i.postMessage({
                          sourceName: A,
                          targetName: s,
                          callback: 2,
                          callbackId: t.callbackId,
                          reason: Ql(a),
                        });
                      }
                    );
                  } else t.streamId ? this.#O(t) : a(t.data);
                }),
                i.addEventListener('message', this._onComObjOnMessage);
            }
            on(A, t) {
              let i = this.actionHandler;
              if (i[A])
                throw Error(`There is already an actionName called "${A}"`);
              i[A] = t;
            }
            send(A, t, i) {
              this.comObj.postMessage(
                {
                  sourceName: this.sourceName,
                  targetName: this.targetName,
                  action: A,
                  data: t,
                },
                i
              );
            }
            sendWithPromise(A, t, i) {
              let a = this.callbackId++,
                s = Promise.withResolvers();
              this.callbackCapabilities[a] = s;
              try {
                this.comObj.postMessage(
                  {
                    sourceName: this.sourceName,
                    targetName: this.targetName,
                    action: A,
                    callbackId: a,
                    data: t,
                  },
                  i
                );
              } catch (A) {
                s.reject(A);
              }
              return s.promise;
            }
            sendWithStream(A, t, i, a) {
              let s = this.streamId++,
                g = this.sourceName,
                r = this.targetName,
                n = this.comObj;
              return new ReadableStream(
                {
                  start: (i) => {
                    let o = Promise.withResolvers();
                    return (
                      (this.streamControllers[s] = {
                        controller: i,
                        startCall: o,
                        pullCall: null,
                        cancelCall: null,
                        isClosed: !1,
                      }),
                      n.postMessage(
                        {
                          sourceName: g,
                          targetName: r,
                          action: A,
                          streamId: s,
                          data: t,
                          desiredSize: i.desiredSize,
                        },
                        a
                      ),
                      o.promise
                    );
                  },
                  pull: (A) => {
                    let t = Promise.withResolvers();
                    return (
                      (this.streamControllers[s].pullCall = t),
                      n.postMessage({
                        sourceName: g,
                        targetName: r,
                        stream: 6,
                        streamId: s,
                        desiredSize: A.desiredSize,
                      }),
                      t.promise
                    );
                  },
                  cancel: (A) => {
                    w(A instanceof Error, 'cancel must have a valid reason');
                    let t = Promise.withResolvers();
                    return (
                      (this.streamControllers[s].cancelCall = t),
                      (this.streamControllers[s].isClosed = !0),
                      n.postMessage({
                        sourceName: g,
                        targetName: r,
                        stream: 1,
                        streamId: s,
                        reason: Ql(A),
                      }),
                      t.promise
                    );
                  },
                },
                i
              );
            }
            #O(A) {
              let t = A.streamId,
                i = this.sourceName,
                a = A.sourceName,
                s = this.comObj,
                g = this,
                r = this.actionHandler[A.action],
                n = {
                  enqueue(A, g = 1, r) {
                    if (this.isCancelled) return;
                    let n = this.desiredSize;
                    (this.desiredSize -= g),
                      n > 0 &&
                        this.desiredSize <= 0 &&
                        ((this.sinkCapability = Promise.withResolvers()),
                        (this.ready = this.sinkCapability.promise)),
                      s.postMessage(
                        {
                          sourceName: i,
                          targetName: a,
                          stream: 4,
                          streamId: t,
                          chunk: A,
                        },
                        r
                      );
                  },
                  close() {
                    this.isCancelled ||
                      ((this.isCancelled = !0),
                      s.postMessage({
                        sourceName: i,
                        targetName: a,
                        stream: 3,
                        streamId: t,
                      }),
                      delete g.streamSinks[t]);
                  },
                  error(A) {
                    w(A instanceof Error, 'error must have a valid reason'),
                      this.isCancelled ||
                        ((this.isCancelled = !0),
                        s.postMessage({
                          sourceName: i,
                          targetName: a,
                          stream: 5,
                          streamId: t,
                          reason: Ql(A),
                        }));
                  },
                  sinkCapability: Promise.withResolvers(),
                  onPull: null,
                  onCancel: null,
                  isCancelled: !1,
                  desiredSize: A.desiredSize,
                  ready: null,
                };
              n.sinkCapability.resolve(),
                (n.ready = n.sinkCapability.promise),
                (this.streamSinks[t] = n),
                new Promise(function (t) {
                  t(r(A.data, n));
                }).then(
                  function () {
                    s.postMessage({
                      sourceName: i,
                      targetName: a,
                      stream: 8,
                      streamId: t,
                      success: !0,
                    });
                  },
                  function (A) {
                    s.postMessage({
                      sourceName: i,
                      targetName: a,
                      stream: 8,
                      streamId: t,
                      reason: Ql(A),
                    });
                  }
                );
            }
            #Z(A) {
              let t = A.streamId,
                i = this.sourceName,
                a = A.sourceName,
                s = this.comObj,
                g = this.streamControllers[t],
                r = this.streamSinks[t];
              switch (A.stream) {
                case 8:
                  A.success
                    ? g.startCall.resolve()
                    : g.startCall.reject(Ql(A.reason));
                  break;
                case 7:
                  A.success
                    ? g.pullCall.resolve()
                    : g.pullCall.reject(Ql(A.reason));
                  break;
                case 6:
                  if (!r) {
                    s.postMessage({
                      sourceName: i,
                      targetName: a,
                      stream: 7,
                      streamId: t,
                      success: !0,
                    });
                    break;
                  }
                  r.desiredSize <= 0 &&
                    A.desiredSize > 0 &&
                    r.sinkCapability.resolve(),
                    (r.desiredSize = A.desiredSize),
                    new Promise(function (A) {
                      A(r.onPull?.());
                    }).then(
                      function () {
                        s.postMessage({
                          sourceName: i,
                          targetName: a,
                          stream: 7,
                          streamId: t,
                          success: !0,
                        });
                      },
                      function (A) {
                        s.postMessage({
                          sourceName: i,
                          targetName: a,
                          stream: 7,
                          streamId: t,
                          reason: Ql(A),
                        });
                      }
                    );
                  break;
                case 4:
                  if (
                    (w(g, 'enqueue should have stream controller'), g.isClosed)
                  )
                    break;
                  g.controller.enqueue(A.chunk);
                  break;
                case 3:
                  if ((w(g, 'close should have stream controller'), g.isClosed))
                    break;
                  (g.isClosed = !0), g.controller.close(), this.#X(g, t);
                  break;
                case 5:
                  w(g, 'error should have stream controller'),
                    g.controller.error(Ql(A.reason)),
                    this.#X(g, t);
                  break;
                case 2:
                  A.success
                    ? g.cancelCall.resolve()
                    : g.cancelCall.reject(Ql(A.reason)),
                    this.#X(g, t);
                  break;
                case 1:
                  if (!r) break;
                  new Promise(function (t) {
                    t(r.onCancel?.(Ql(A.reason)));
                  }).then(
                    function () {
                      s.postMessage({
                        sourceName: i,
                        targetName: a,
                        stream: 2,
                        streamId: t,
                        success: !0,
                      });
                    },
                    function (A) {
                      s.postMessage({
                        sourceName: i,
                        targetName: a,
                        stream: 2,
                        streamId: t,
                        reason: Ql(A),
                      });
                    }
                  ),
                    r.sinkCapability.reject(Ql(A.reason)),
                    (r.isCancelled = !0),
                    delete this.streamSinks[t];
                  break;
                default:
                  throw Error('Unexpected stream case');
              }
            }
            async #X(A, t) {
              await Promise.allSettled([
                A.startCall?.promise,
                A.pullCall?.promise,
                A.cancelCall?.promise,
              ]),
                delete this.streamControllers[t];
            }
            destroy() {
              this.comObj.removeEventListener(
                'message',
                this._onComObjOnMessage
              );
            }
          }
          class QB {
            constructor(A) {
              (this._msgHandler = A),
                (this._contentLength = null),
                (this._fullRequestReader = null),
                (this._rangeRequestReaders = []);
            }
            getFullReader() {
              return (
                w(
                  !this._fullRequestReader,
                  'PDFWorkerStream.getFullReader can only be called once.'
                ),
                (this._fullRequestReader = new Qh(this._msgHandler)),
                this._fullRequestReader
              );
            }
            getRangeReader(A, t) {
              let i = new QQ(A, t, this._msgHandler);
              return this._rangeRequestReaders.push(i), i;
            }
            cancelAllRequests(A) {
              for (let t of (this._fullRequestReader?.cancel(A),
              this._rangeRequestReaders.slice(0)))
                t.cancel(A);
            }
          }
          class Qh {
            constructor(A) {
              (this._msgHandler = A),
                (this.onProgress = null),
                (this._contentLength = null),
                (this._isRangeSupported = !1),
                (this._isStreamingSupported = !1);
              let t = this._msgHandler.sendWithStream('GetReader');
              (this._reader = t.getReader()),
                (this._headersReady = this._msgHandler
                  .sendWithPromise('ReaderHeadersReady')
                  .then((A) => {
                    (this._isStreamingSupported = A.isStreamingSupported),
                      (this._isRangeSupported = A.isRangeSupported),
                      (this._contentLength = A.contentLength);
                  }));
            }
            get headersReady() {
              return this._headersReady;
            }
            get contentLength() {
              return this._contentLength;
            }
            get isStreamingSupported() {
              return this._isStreamingSupported;
            }
            get isRangeSupported() {
              return this._isRangeSupported;
            }
            async read() {
              let { value: A, done: t } = await this._reader.read();
              return t
                ? { value: void 0, done: !0 }
                : { value: A.buffer, done: !1 };
            }
            cancel(A) {
              this._reader.cancel(A);
            }
          }
          class QQ {
            constructor(A, t, i) {
              (this._msgHandler = i), (this.onProgress = null);
              let a = this._msgHandler.sendWithStream('GetRangeReader', {
                begin: A,
                end: t,
              });
              this._reader = a.getReader();
            }
            get isStreamingSupported() {
              return !1;
            }
            async read() {
              let { value: A, done: t } = await this._reader.read();
              return t
                ? { value: void 0, done: !0 }
                : { value: A.buffer, done: !1 };
            }
            cancel(A) {
              this._reader.cancel(A);
            }
          }
          class Qc {
            constructor(A) {
              (this.name = A),
                (this.terminated = !1),
                (this._capability = Promise.withResolvers());
            }
            get finished() {
              return this._capability.promise;
            }
            finish() {
              this._capability.resolve();
            }
            terminate() {
              this.terminated = !0;
            }
            ensureNotTerminated() {
              if (this.terminated) throw Error('Worker task was terminated');
            }
          }
          class QE {
            static setup(A, t) {
              let i = !1;
              A.on('test', function (t) {
                i || ((i = !0), A.send('test', t instanceof Uint8Array));
              }),
                A.on('configure', function (A) {
                  var t;
                  Number.isInteger((t = A.verbosity)) && (f = t);
                }),
                A.on('GetDocRequest', function (A) {
                  return QE.createDocumentHandler(A, t);
                });
            }
            static createDocumentHandler(A, t) {
              let i,
                a = !1,
                s = null,
                g = new Set(),
                r = f,
                { docId: n, apiVersion: o } = A,
                I = '4.7.76';
              if (o !== I)
                throw Error(
                  `The API version "${o}" does not match the Worker version "${I}".`
                );
              let l = [];
              for (let A in []) l.push(A);
              if (l.length)
                throw Error(
                  'The `Array.prototype` contains unexpected enumerable properties: ' +
                    l.join(', ') +
                    '; thus breaking e.g. `for...in` iteration of `Array`s.'
                );
              let C = n + '_worker',
                B = new QC(C, n, t);
              function h() {
                if (a) throw Error('Worker was terminated');
              }
              function Q(A) {
                g.add(A);
              }
              function c(A) {
                A.finish(), g.delete(A);
              }
              async function E(A) {
                await i.ensureDoc('checkHeader'),
                  await i.ensureDoc('parseStartXRef'),
                  await i.ensureDoc('parse', [A]),
                  await i.ensureDoc('checkFirstPage', [A]),
                  await i.ensureDoc('checkLastPage', [A]);
                let t = await i.ensureDoc('isPureXfa');
                if (t) {
                  let A = new Qc('loadXfaFonts');
                  Q(A),
                    await Promise.all([
                      i
                        .loadXfaFonts(B, A)
                        .catch((A) => {})
                        .then(() => c(A)),
                      i.loadXfaImages(),
                    ]);
                }
                let [a, s] = await Promise.all([
                  i.ensureDoc('numPages'),
                  i.ensureDoc('fingerprints'),
                ]);
                return {
                  numPages: a,
                  fingerprints: s,
                  htmlForXfa: t ? await i.ensureDoc('htmlForXfa') : null,
                };
              }
              return (
                B.on('GetPage', function (A) {
                  return i.getPage(A.pageIndex).then(function (A) {
                    return Promise.all([
                      i.ensure(A, 'rotate'),
                      i.ensure(A, 'ref'),
                      i.ensure(A, 'userUnit'),
                      i.ensure(A, 'view'),
                    ]).then(function ([A, t, i, a]) {
                      return {
                        rotate: A,
                        ref: t,
                        refStr: t?.toString() ?? null,
                        userUnit: i,
                        view: a,
                      };
                    });
                  });
                }),
                B.on('GetPageIndex', function (A) {
                  let t = As.get(A.num, A.gen);
                  return i.ensureCatalog('getPageIndex', [t]);
                }),
                B.on('GetDestinations', function (A) {
                  return i.ensureCatalog('destinations');
                }),
                B.on('GetDestination', function (A) {
                  return i.ensureCatalog('getDestination', [A.id]);
                }),
                B.on('GetPageLabels', function (A) {
                  return i.ensureCatalog('pageLabels');
                }),
                B.on('GetPageLayout', function (A) {
                  return i.ensureCatalog('pageLayout');
                }),
                B.on('GetPageMode', function (A) {
                  return i.ensureCatalog('pageMode');
                }),
                B.on('GetViewerPreferences', function (A) {
                  return i.ensureCatalog('viewerPreferences');
                }),
                B.on('GetOpenAction', function (A) {
                  return i.ensureCatalog('openAction');
                }),
                B.on('GetAttachments', function (A) {
                  return i.ensureCatalog('attachments');
                }),
                B.on('GetDocJSActions', function (A) {
                  return i.ensureCatalog('jsActions');
                }),
                B.on('GetPageJSActions', function ({ pageIndex: A }) {
                  return i.getPage(A).then(function (A) {
                    return i.ensure(A, 'jsActions');
                  });
                }),
                B.on('GetOutline', function (A) {
                  return i.ensureCatalog('documentOutline');
                }),
                B.on('GetOptionalContentConfig', function (A) {
                  return i.ensureCatalog('optionalContentConfig');
                }),
                B.on('GetPermissions', function (A) {
                  return i.ensureCatalog('permissions');
                }),
                B.on('GetMetadata', function (A) {
                  return Promise.all([
                    i.ensureDoc('documentInfo'),
                    i.ensureCatalog('metadata'),
                  ]);
                }),
                B.on('GetMarkInfo', function (A) {
                  return i.ensureCatalog('markInfo');
                }),
                B.on('GetData', function (A) {
                  return i.requestLoadedStream().then(function (A) {
                    return A.bytes;
                  });
                }),
                B.on('GetAnnotations', function ({ pageIndex: A, intent: t }) {
                  return i.getPage(A).then(function (i) {
                    let a = new Qc(`GetAnnotations: page ${A}`);
                    return (
                      Q(a),
                      i.getAnnotationsData(B, a, t).then(
                        (A) => (c(a), A),
                        (A) => {
                          throw (c(a), A);
                        }
                      )
                    );
                  });
                }),
                B.on('GetFieldObjects', function (A) {
                  return i
                    .ensureDoc('fieldObjects')
                    .then((A) => A?.allFields || null);
                }),
                B.on('HasJSActions', function (A) {
                  return i.ensureDoc('hasJSActions');
                }),
                B.on('GetCalculationOrderIds', function (A) {
                  return i.ensureDoc('calculationOrderIds');
                }),
                B.on(
                  'SaveDocument',
                  async function ({
                    isPureXfa: A,
                    numPages: t,
                    annotationStorage: a,
                    filename: s,
                  }) {
                    let g;
                    let r = [
                        i.requestLoadedStream(),
                        i.ensureCatalog('acroForm'),
                        i.ensureCatalog('acroFormRef'),
                        i.ensureDoc('startXRef'),
                        i.ensureDoc('xref'),
                        i.ensureDoc('linearization'),
                        i.ensureCatalog('structTreeRoot'),
                      ],
                      n = [],
                      o = A ? null : Av(a),
                      [I, l, C, h, Q, E, u] = await Promise.all(r),
                      d = Q.trailer.getRaw('Root') || null;
                    if (o) {
                      u
                        ? (await u.canUpdateStructTree({
                            pdfManager: i,
                            xref: Q,
                            newAnnotationsByPage: o,
                          })) && (g = u)
                        : (await gL.canCreateStructureTree({
                            catalogRef: d,
                            pdfManager: i,
                            newAnnotationsByPage: o,
                          })) && (g = null);
                      let A = hG.generateImages(
                          a.values(),
                          Q,
                          i.evaluatorOptions.isOffscreenCanvasSupported
                        ),
                        t = void 0 === g ? n : [];
                      for (let [a, s] of o)
                        t.push(
                          i.getPage(a).then((t) => {
                            let i = new Qc(`Save (editor): page ${a}`);
                            return t
                              .saveNewAnnotations(B, i, s, A)
                              .finally(function () {
                                c(i);
                              });
                          })
                        );
                      null === g
                        ? n.push(
                            Promise.all(t).then(
                              async (A) => (
                                await gL.createStructureTree({
                                  newAnnotationsByPage: o,
                                  xref: Q,
                                  catalogRef: d,
                                  pdfManager: i,
                                  newRefs: A,
                                }),
                                A
                              )
                            )
                          )
                        : g &&
                          n.push(
                            Promise.all(t).then(
                              async (A) => (
                                await g.updateStructureTree({
                                  newAnnotationsByPage: o,
                                  pdfManager: i,
                                  newRefs: A,
                                }),
                                A
                              )
                            )
                          );
                    }
                    if (A) n.push(i.serializeXfaData(a));
                    else
                      for (let A = 0; A < t; A++)
                        n.push(
                          i.getPage(A).then(function (t) {
                            let i = new Qc(`Save: page ${A}`);
                            return t.save(B, i, a).finally(function () {
                              c(i);
                            });
                          })
                        );
                    let f = await Promise.all(n),
                      p = [],
                      y = null;
                    if (A) {
                      if (!(y = f[0])) return I.bytes;
                    } else if (0 === (p = f.flat(2)).length) return I.bytes;
                    let w =
                        C &&
                        l instanceof Aa &&
                        p.some((A) => A.needAppearances),
                      D = (l instanceof Aa && l.get('XFA')) || null,
                      b = null,
                      k = !1;
                    if (Array.isArray(D)) {
                      for (let A = 0, t = D.length; A < t; A += 2)
                        'datasets' === D[A] && ((b = D[A + 1]), (k = !0));
                      null === b && (b = Q.getNewTemporaryRef());
                    } else D && m('Unsupported XFA type.');
                    let F = Object.create(null);
                    if (Q.trailer) {
                      let A = Object.create(null),
                        t = Q.trailer.get('Info') || null;
                      t instanceof Aa &&
                        t.forEach((t, i) => {
                          'string' == typeof i && (A[t] = T(i));
                        }),
                        (F = {
                          rootRef: d,
                          encryptRef: Q.trailer.getRaw('Encrypt') || null,
                          newRef: Q.getNewTemporaryRef(),
                          infoRef: Q.trailer.getRaw('Info') || null,
                          info: A,
                          fileIds: Q.trailer.get('ID') || null,
                          startXRef: E ? h : (Q.lastXRefStreamPos ?? h),
                          filename: s,
                        });
                    }
                    return gJ({
                      originalData: I.bytes,
                      xrefInfo: F,
                      newRefs: p,
                      xref: Q,
                      hasXfa: !!D,
                      xfaDatasetsRef: b,
                      hasXfaDatasetsEntry: k,
                      needAppearances: w,
                      acroFormRef: C,
                      acroForm: l,
                      xfaData: y,
                      useXrefStream: AI(Q.topDict, 'XRef'),
                    }).finally(() => {
                      Q.resetNewTemporaryRef();
                    });
                  }
                ),
                B.on('GetOperatorList', function (A, t) {
                  let a = A.pageIndex;
                  i.getPage(a).then(function (i) {
                    let s = new Qc(`GetOperatorList: page ${a}`);
                    Q(s);
                    let g = r >= u.INFOS ? Date.now() : 0;
                    i.getOperatorList({
                      handler: B,
                      sink: t,
                      task: s,
                      intent: A.intent,
                      cacheKey: A.cacheKey,
                      annotationStorage: A.annotationStorage,
                      modifiedIds: A.modifiedIds,
                    }).then(
                      function (A) {
                        c(s),
                          g &&
                            p(
                              `page=${a + 1} - getOperatorList: time=${Date.now() - g}ms, len=${A.length}`
                            ),
                          t.close();
                      },
                      function (A) {
                        c(s), s.terminated || t.error(A);
                      }
                    );
                  });
                }),
                B.on('GetTextContent', function (A, t) {
                  let {
                    pageIndex: a,
                    includeMarkedContent: s,
                    disableNormalization: g,
                  } = A;
                  i.getPage(a).then(function (A) {
                    let i = new Qc('GetTextContent: page ' + a);
                    Q(i);
                    let n = r >= u.INFOS ? Date.now() : 0;
                    A.extractTextContent({
                      handler: B,
                      task: i,
                      sink: t,
                      includeMarkedContent: s,
                      disableNormalization: g,
                    }).then(
                      function () {
                        c(i),
                          n &&
                            p(
                              `page=${a + 1} - getTextContent: time=` +
                                (Date.now() - n) +
                                'ms'
                            ),
                          t.close();
                      },
                      function (A) {
                        c(i), i.terminated || t.error(A);
                      }
                    );
                  });
                }),
                B.on('GetStructTree', function (A) {
                  return i.getPage(A.pageIndex).then(function (A) {
                    return i.ensure(A, 'getStructTree');
                  });
                }),
                B.on('FontFallback', function (A) {
                  return i.fontFallback(A.id, B);
                }),
                B.on('Cleanup', function (A) {
                  return i.cleanup(!0);
                }),
                B.on('Terminate', function (A) {
                  a = !0;
                  let t = [];
                  if (i) {
                    i.terminate(new U('Worker was terminated.'));
                    let A = i.cleanup();
                    t.push(A), (i = null);
                  } else gs();
                  for (let A of (s && s(new U('Worker was terminated.')), g))
                    t.push(A.finished), A.terminate();
                  return Promise.all(t).then(function () {
                    B.destroy(), (B = null);
                  });
                }),
                B.on('Ready', function (t) {
                  (function (A) {
                    function t(A) {
                      h(), B.send('GetDoc', { pdfInfo: A });
                    }
                    function g(A) {
                      if ((h(), A instanceof F)) {
                        let t = new Qc(`PasswordException: response ${A.code}`);
                        Q(t),
                          B.sendWithPromise('PasswordRequest', A)
                            .then(function ({ password: A }) {
                              c(t), i.updatePassword(A), r();
                            })
                            .catch(function () {
                              c(t), B.send('DocException', A);
                            });
                      } else
                        A instanceof R ||
                        A instanceof G ||
                        A instanceof N ||
                        A instanceof S
                          ? B.send('DocException', A)
                          : B.send(
                              'DocException',
                              new S(A.message, A.toString())
                            );
                    }
                    function r() {
                      h(),
                        E(!1).then(t, function (A) {
                          h(),
                            A instanceof Au
                              ? i.requestLoadedStream().then(function () {
                                  h(), E(!0).then(t, g);
                                })
                              : g(A);
                        });
                    }
                    h(),
                      (function ({
                        data: A,
                        password: t,
                        disableAutoFetch: i,
                        rangeChunkSize: a,
                        length: g,
                        docBaseUrl: r,
                        enableXfa: o,
                        evaluatorOptions: I,
                      }) {
                        let l;
                        let C = {
                            source: null,
                            disableAutoFetch: i,
                            docBaseUrl: r,
                            docId: n,
                            enableXfa: o,
                            evaluatorOptions: I,
                            handler: B,
                            length: g,
                            password: t,
                            rangeChunkSize: a,
                          },
                          Q = Promise.withResolvers();
                        if (A) {
                          try {
                            (C.source = A), (l = new Qo(C)), Q.resolve(l);
                          } catch (A) {
                            Q.reject(A);
                          }
                          return Q.promise;
                        }
                        let c,
                          E = [];
                        try {
                          c = new QB(B);
                        } catch (A) {
                          return Q.reject(A), Q.promise;
                        }
                        let u = c.getFullReader();
                        u.headersReady
                          .then(function () {
                            if (u.isRangeSupported) {
                              for (let A of ((C.source = c),
                              (C.length = u.contentLength),
                              (C.disableAutoFetch ||= u.isStreamingSupported),
                              (l = new QI(C)),
                              E))
                                l.sendProgressiveData(A);
                              (E = []), Q.resolve(l), (s = null);
                            }
                          })
                          .catch(function (A) {
                            Q.reject(A), (s = null);
                          });
                        let d = 0;
                        return (
                          new Promise(function (A, t) {
                            let i = function ({ value: A, done: a }) {
                              try {
                                if ((h(), a)) {
                                  l ||
                                    (function () {
                                      let A = Ad(E);
                                      g &&
                                        A.length !== g &&
                                        m(
                                          'reported HTTP length is different from actual'
                                        );
                                      try {
                                        (C.source = A),
                                          (l = new Qo(C)),
                                          Q.resolve(l);
                                      } catch (A) {
                                        Q.reject(A);
                                      }
                                      E = [];
                                    })(),
                                    (s = null);
                                  return;
                                }
                                (d += A.byteLength),
                                  u.isStreamingSupported ||
                                    B.send('DocProgress', {
                                      loaded: d,
                                      total: Math.max(d, u.contentLength || 0),
                                    }),
                                  l ? l.sendProgressiveData(A) : E.push(A),
                                  u.read().then(i, t);
                              } catch (A) {
                                t(A);
                              }
                            };
                            u.read().then(i, t);
                          }).catch(function (A) {
                            Q.reject(A), (s = null);
                          }),
                          (s = function (A) {
                            c.cancelAllRequests(A);
                          }),
                          Q.promise
                        );
                      })(A)
                        .then(function (A) {
                          if (a)
                            throw (
                              (A.terminate(new U('Worker was terminated.')),
                              Error('Worker was terminated'))
                            );
                          (i = A).requestLoadedStream(!0).then((A) => {
                            B.send('DataLoaded', {
                              length: A.bytes.byteLength,
                            });
                          });
                        })
                        .then(r, g);
                  })(A),
                    (A = null);
                }),
                C
              );
            }
            static initializeFromPort(A) {
              let t = new QC('worker', 'main', A);
              QE.setup(t, A), t.send('ready', null);
            }
          }
          'undefined' == typeof window &&
            !o &&
            'undefined' != typeof self &&
            'function' == typeof (a = self).postMessage &&
            'onmessage' in a &&
            QE.initializeFromPort(self);
          var Qu = n.WorkerMessageHandler;
        },
        {
          '54ed68488cd0215b': '7bs1J',
          '@parcel/transformer-js/src/esmodule-helpers.js': 'cHUbl',
        },
      ],
      '7bs1J': [
        function (A, t, i) {
          var a,
            s,
            g,
            r,
            n = Object.create,
            o = Object.defineProperty,
            I = Object.getOwnPropertyDescriptor,
            l = Object.getOwnPropertyNames,
            C = Object.getPrototypeOf,
            B = Object.prototype.hasOwnProperty,
            h = (A, t, i, a) => {
              if ((t && 'object' == typeof t) || 'function' == typeof t)
                for (let s of l(t))
                  B.call(A, s) ||
                    s === i ||
                    o(A, s, {
                      get: () => t[s],
                      enumerable: !(a = I(t, s)) || a.enumerable,
                    });
              return A;
            },
            Q = (A, t, i) => (
              (i = null != A ? n(C(A)) : {}),
              h(
                !t && A && A.__esModule
                  ? i
                  : o(i, 'default', { value: A, enumerable: !0 }),
                A
              )
            ),
            c =
              ((a = (A, t) => {
                var i,
                  a,
                  s = (t.exports = {});
                function g() {
                  throw Error('setTimeout has not been defined');
                }
                function r() {
                  throw Error('clearTimeout has not been defined');
                }
                function n(A) {
                  if (i === setTimeout) return setTimeout(A, 0);
                  if ((i === g || !i) && setTimeout)
                    return (i = setTimeout), setTimeout(A, 0);
                  try {
                    return i(A, 0);
                  } catch (t) {
                    try {
                      return i.call(null, A, 0);
                    } catch (t) {
                      return i.call(this, A, 0);
                    }
                  }
                }
                !(function () {
                  try {
                    i = 'function' == typeof setTimeout ? setTimeout : g;
                  } catch (A) {
                    i = g;
                  }
                  try {
                    a = 'function' == typeof clearTimeout ? clearTimeout : r;
                  } catch (A) {
                    a = r;
                  }
                })();
                var o,
                  I = [],
                  l = !1,
                  C = -1;
                function B() {
                  l &&
                    o &&
                    ((l = !1),
                    o.length ? (I = o.concat(I)) : (C = -1),
                    I.length && h());
                }
                function h() {
                  if (!l) {
                    var A = n(B);
                    l = !0;
                    for (var t = I.length; t; ) {
                      for (o = I, I = []; ++C < t; ) o && o[C].run();
                      (C = -1), (t = I.length);
                    }
                    (o = null),
                      (l = !1),
                      (function (A) {
                        if (a === clearTimeout) return clearTimeout(A);
                        if ((a === r || !a) && clearTimeout)
                          return (a = clearTimeout), clearTimeout(A);
                        try {
                          a(A);
                        } catch (t) {
                          try {
                            return a.call(null, A);
                          } catch (t) {
                            return a.call(this, A);
                          }
                        }
                      })(A);
                  }
                }
                function Q(A, t) {
                  (this.fun = A), (this.array = t);
                }
                function c() {}
                (s.nextTick = function (A) {
                  var t = Array(arguments.length - 1);
                  if (arguments.length > 1)
                    for (var i = 1; i < arguments.length; i++)
                      t[i - 1] = arguments[i];
                  I.push(new Q(A, t)), 1 !== I.length || l || n(h);
                }),
                  (Q.prototype.run = function () {
                    this.fun.apply(null, this.array);
                  }),
                  (s.title = 'browser'),
                  (s.browser = !0),
                  (s.env = {}),
                  (s.argv = []),
                  (s.version = ''),
                  (s.versions = {}),
                  (s.on = c),
                  (s.addListener = c),
                  (s.once = c),
                  (s.off = c),
                  (s.removeListener = c),
                  (s.removeAllListeners = c),
                  (s.emit = c),
                  (s.prependListener = c),
                  (s.prependOnceListener = c),
                  (s.listeners = function (A) {
                    return [];
                  }),
                  (s.binding = function (A) {
                    throw Error('process.binding is not supported');
                  }),
                  (s.cwd = function () {
                    return '/';
                  }),
                  (s.chdir = function (A) {
                    throw Error('process.chdir is not supported');
                  }),
                  (s.umask = function () {
                    return 0;
                  });
              }),
              () => (s || a((s = { exports: {} }).exports, s), s.exports)),
            E = {};
          ((A, t) => {
            for (var i in t) o(A, i, { get: t[i], enumerable: !0 });
          })(E, { default: () => d }),
            (t.exports = h(o({}, '__esModule', { value: !0 }), E));
          var u = Q(c());
          (g = Q(c())),
            (r = t.exports),
            h(E, g, 'default'),
            r && h(r, g, 'default');
          var d = u.default;
        },
        {},
      ],
      cHUbl: [
        function (A, t, i) {
          (i.interopDefault = function (A) {
            return A && A.__esModule ? A : { default: A };
          }),
            (i.defineInteropFlag = function (A) {
              Object.defineProperty(A, '__esModule', { value: !0 });
            }),
            (i.exportAll = function (A, t) {
              return (
                Object.keys(A).forEach(function (i) {
                  'default' === i ||
                    '__esModule' === i ||
                    t.hasOwnProperty(i) ||
                    Object.defineProperty(t, i, {
                      enumerable: !0,
                      get: function () {
                        return A[i];
                      },
                    });
                }),
                t
              );
            }),
            (i.export = function (A, t, i) {
              Object.defineProperty(A, t, { enumerable: !0, get: i });
            });
        },
        {},
      ],
    },
    ['fAhLJ'],
    'fAhLJ',
    'parcelRequire0df2'
  ),
  (globalThis.define = t);
