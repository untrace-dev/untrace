/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

const fileMap = {
  
  "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> CustomGPT4o {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    multiplier 1.5\n    max_delay_ms 10000\n  }\n}",
  "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"typescript/react\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.89.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode async\n}\n",
  "improvement_suggestions.baml": "// Suggestions for improvement\nclass ImprovementSuggestions {\n  seo string[] @description(\"Actionable SEO improvement suggestions.\")\n  accessibility string[] @description(\"Actionable accessibility improvement suggestions.\")\n  performance string[] @description(\"Actionable performance improvement suggestions.\")\n  overall_priority string[] @description(\"Prioritized list of most important actions.\")\n}\n\nfunction SuggestImprovements(\n  seo: string,\n  accessibility: string,\n  structure: string\n) -> ImprovementSuggestions {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    {{_.role(\"user\")}}\n    Given the following website analysis:\n    SEO Metadata: {{ seo }}\n    Accessibility: {{ accessibility }}\n    Content Structure: {{ structure }}\n\n    Provide actionable suggestions for:\n    - SEO improvements\n    - Accessibility enhancements\n    - Performance optimizations\n\n    Prioritize the most important actions for a developer to take.\n    {{ ctx.output_format }}\n  \"#\n}\n\ntest suggest_improvements_example {\n  functions [SuggestImprovements]\n  args {\n    seo {\n      meta_title \"GitHub: Where the world builds software\"\n      meta_description \"GitHub is where over 100 million developers shape the future of software.\"\n      canonical_url \"https://github.com/\"\n      og_title \"GitHub\"\n      og_description \"Build software better, together.\"\n      twitter_card \"summary_large_image\"\n    }\n    accessibility {\n      missing_alt_text false\n      contrast_issues []\n      aria_labels_missing false\n      summary \"No major accessibility issues detected.\"\n    }\n    structure {\n      headings { h1 1, h2 3 }\n      semantic_tags [\"nav\", \"main\", \"footer\"]\n      main_sections [\"Header\", \"Main content\", \"Footer\"]\n    }\n  }\n}",
}
export const getBamlFiles = () => {
    return fileMap;
}