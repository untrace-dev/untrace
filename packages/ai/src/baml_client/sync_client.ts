/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { BamlCtxManager, BamlRuntime, ClientRegistry, Collector, FunctionLog, } from "@boundaryml/baml"
import { BamlAbortError, toBamlError } from '@boundaryml/baml';
import {
  DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX,
  DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME,
} from './globals';
import { LlmResponseParser, LlmStreamParser } from './parser';
import { HttpRequest, HttpStreamRequest } from './sync_request';
import type TypeBuilder from './type_builder';
import type * as types from './types';
import type { MovedRecursivePartialNull } from './types';

/**
 * @deprecated Use RecursivePartialNull from 'baml_client/types' instead.
 * Example:
 * ```ts
 * import { RecursivePartialNull } from './baml_client/types'
 * ```
 */
export type RecursivePartialNull<T> = MovedRecursivePartialNull<T>;

type TickReason = 'Unknown';

type BamlCallOptions = {
  tb?: TypeBuilder;
  clientRegistry?: ClientRegistry;
  collector?: Collector | Collector[];
  env?: Record<string, string | undefined>;
  signal?: AbortSignal;
  onTick?: (reason: TickReason, log: FunctionLog | null) => void;
};

export class BamlSyncClient {
  private httpRequest: HttpRequest;
  private httpStreamRequest: HttpStreamRequest;
  private llmResponseParser: LlmResponseParser;
  private llmStreamParser: LlmStreamParser;
  private bamlOptions: BamlCallOptions;

  constructor(
    private runtime: BamlRuntime,
    private ctxManager: BamlCtxManager,
    bamlOptions?: BamlCallOptions,
  ) {
    this.httpRequest = new HttpRequest(runtime, ctxManager);
    this.httpStreamRequest = new HttpStreamRequest(runtime, ctxManager);
    this.llmResponseParser = new LlmResponseParser(runtime, ctxManager);
    this.llmStreamParser = new LlmStreamParser(runtime, ctxManager);
    this.bamlOptions = bamlOptions || {};
  }

  withOptions(bamlOptions: BamlCallOptions) {
    return new BamlSyncClient(this.runtime, this.ctxManager, bamlOptions);
  }

  /*
   * @deprecated NOT IMPLEMENTED as streaming must by async. We
   * are not providing an async version as we want to reserve the
   * right to provide a sync version in the future.
   */
  get stream() {
    throw new Error(
      "stream is not available in BamlSyncClient. Use `import { b } from 'baml_client/async_client",
    );
  }

  get request() {
    return this.httpRequest;
  }

  get streamRequest() {
    return this.httpStreamRequest;
  }

  get parse() {
    return this.llmResponseParser;
  }

  get parseStream() {
    return this.llmStreamParser;
  }

  SuggestImprovements(
    seo: string,
    accessibility: string,
    structure: string,
    __baml_options__?: BamlCallOptions,
  ): types.ImprovementSuggestions {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) };
      const signal = options.signal;

      if (signal?.aborted) {
        throw new BamlAbortError('Operation was aborted', signal.reason);
      }

      // Check if onTick is provided and reject for sync operations
      if (options.onTick) {
        throw new Error(
          'onTick is not supported for synchronous functions. Please use the async client instead.',
        );
      }

      const collector = options.collector
        ? Array.isArray(options.collector)
          ? options.collector
          : [options.collector]
        : [];
      const rawEnv = __baml_options__?.env
        ? { ...process.env, ...__baml_options__.env }
        : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [
          string,
          string,
        ][],
      );
      const raw = this.runtime.callFunctionSync(
        'SuggestImprovements',
        { accessibility: accessibility, seo: seo, structure: structure },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
        env,
        signal,
      );
      return raw.parsed(false) as types.ImprovementSuggestions;
    } catch (error: unknown) {
      throw toBamlError(error);
    }
  }
}

export const b = new BamlSyncClient(
  DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME,
  DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX,
);
