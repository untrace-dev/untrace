/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { BamlCtxManager, BamlRuntime, ClientRegistry, } from "@boundaryml/baml"
import { toBamlError } from '@boundaryml/baml';
import type { partial_types } from './partial_types';
import type TypeBuilder from './type_builder';
import type * as types from './types';

export class LlmResponseParser {
  constructor(
    private runtime: BamlRuntime,
    private ctxManager: BamlCtxManager,
  ) {}

  SuggestImprovements(
    llmResponse: string,
    __baml_options__?: {
      tb?: TypeBuilder;
      clientRegistry?: ClientRegistry;
      env?: Record<string, string | undefined>;
    },
  ): types.ImprovementSuggestions {
    try {
      const rawEnv = __baml_options__?.env
        ? { ...process.env, ...__baml_options__.env }
        : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [
          string,
          string,
        ][],
      );
      return this.runtime.parseLlmResponse(
        'SuggestImprovements',
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        env,
      ) as types.ImprovementSuggestions;
    } catch (error) {
      throw toBamlError(error);
    }
  }
}

export class LlmStreamParser {
  constructor(
    private runtime: BamlRuntime,
    private ctxManager: BamlCtxManager,
  ) {}

  SuggestImprovements(
    llmResponse: string,
    __baml_options__?: {
      tb?: TypeBuilder;
      clientRegistry?: ClientRegistry;
      env?: Record<string, string | undefined>;
    },
  ): partial_types.ImprovementSuggestions {
    try {
      const rawEnv = __baml_options__?.env
        ? { ...process.env, ...__baml_options__.env }
        : { ...process.env };
      const env: Record<string, string> = Object.fromEntries(
        Object.entries(rawEnv).filter(([_, value]) => value !== undefined) as [
          string,
          string,
        ][],
      );
      return this.runtime.parseLlmResponse(
        'SuggestImprovements',
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        env,
      ) as partial_types.ImprovementSuggestions;
    } catch (error) {
      throw toBamlError(error);
    }
  }
}
