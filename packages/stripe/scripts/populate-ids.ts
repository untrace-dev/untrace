#!/usr/bin/env bun

import { readFileSync, writeFileSync } from 'node:fs';
import { join } from 'node:path';
import Stripe from 'stripe';
import { env } from '../src/env.server';
import { PRICE_LOOKUP_KEYS } from './billing-ids.template';

// Initialize Stripe
const stripe = new Stripe(env.STRIPE_SECRET_KEY, {
  typescript: true,
});

// Define the mapping of lookup keys to their corresponding product names
const LOOKUP_KEY_MAPPINGS = {
  untrace_dedicated_support_2025_01_monthly: {
    name: 'DEDICATED_SUPPORT',
    type: 'product',
  },
  untrace_dedicated_support_2025_01_yearly: {
    name: 'DEDICATED_SUPPORT',
    type: 'product',
  },
  // Product mappings
  untrace_free_2025_01_monthly: { name: 'FREE_PLAN', type: 'product' },
  untrace_team_2025_01_monthly: { name: 'TEAM_PLAN', type: 'product' },
  untrace_team_2025_01_yearly: { name: 'TEAM_PLAN', type: 'product' },
} as const;

async function fetchStripeIds() {
  console.log('üîç Fetching Stripe IDs...');

  const productIds: Record<string, string> = {};
  const priceIds: Record<string, string> = {};

  // Get all lookup keys from the imported PRICE_LOOKUP_KEYS
  const lookupKeys = Object.values(PRICE_LOOKUP_KEYS);

  console.log('üìã Found lookup keys:', lookupKeys);

  // Fetch all prices by lookup keys
  for (const lookupKey of lookupKeys) {
    try {
      const prices = await stripe.prices.list({
        active: true,
        limit: 1,
        lookup_keys: [lookupKey],
      });

      if (prices.data.length > 0) {
        const price = prices.data[0];
        if (!price) {
          console.warn(`‚ö†Ô∏è  No price found for lookup key: ${lookupKey}`);
          continue;
        }
        priceIds[lookupKey] = price.id;

        // Also get the product ID if this is a base price (not metered)
        const mapping =
          LOOKUP_KEY_MAPPINGS[lookupKey as keyof typeof LOOKUP_KEY_MAPPINGS];
        if (mapping?.type === 'product') {
          productIds[mapping.name] = price.product as string;
        }
      } else {
        console.warn(`‚ö†Ô∏è  No price found for lookup key: ${lookupKey}`);
      }
    } catch (error) {
      console.error(`‚ùå Error fetching price for ${lookupKey}:`, error);
    }
  }

  return { priceIds, productIds };
}

function generateBillingTypesFile(
  productIds: Record<string, string>,
  priceIds: Record<string, string>,
) {
  console.log('üìù Generating billing-ids.ts file...');

  const templatePath = join(import.meta.dir, 'billing-ids.template.ts');
  const outputPath = join(import.meta.dir, '../src/billing-ids.generated.ts');

  let template = readFileSync(templatePath, 'utf-8');

  // Replace product IDs
  Object.entries(productIds).forEach(([key, id]) => {
    const placeholder = `'GENERATED_PRODUCT_ID'`;
    const replacement = `'${id}'`;
    template = template.replace(
      new RegExp(`${key}: ${placeholder}`),
      `${key}: ${replacement}`,
    );
  });

  // Replace price IDs
  Object.entries(priceIds).forEach(([lookupKey, id]) => {
    // Convert lookup key to the constant name format
    const priceName = lookupKey
      .toUpperCase()
      .replace(/UNTRACE_/, '')
      .replace(/_2025_01_/, '_')
      .replace(/_/g, '_');

    const placeholder = `'GENERATED_PRICE_ID'`;
    const replacement = `'${id}'`;

    // Create a more specific regex to match the exact line
    const regex = new RegExp(`(${priceName}:\\s*)${placeholder}`, 'g');
    template = template.replace(regex, `$1${replacement}`);
  });

  // Add generation timestamp
  const timestamp = new Date().toISOString();
  template = template.replace(
    '// This file is generated by the build script - DO NOT EDIT MANUALLY',
    `// This file is generated by the build script - DO NOT EDIT MANUALLY
// Generated at: ${timestamp}`,
  );

  writeFileSync(outputPath, template);
  console.log('‚úÖ Generated billing-ids.generated.ts successfully!');
}

async function main() {
  try {
    console.log('üöÄ Starting billing ids generation...');

    const { productIds, priceIds } = await fetchStripeIds();

    console.log('üìä Found IDs:');
    console.log('Products:', productIds);
    console.log('Prices:', priceIds);

    generateBillingTypesFile(productIds, priceIds);

    console.log('üéâ Billing ids generation completed!');
  } catch (error) {
    console.error('‚ùå Error generating billing ids:', error);
    process.exit(1);
  }
}

if (import.meta.main) {
  main();
}
