name: CLI Github Release

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Changeset NPM Release"]
    types:
      - completed
    branches:
      - main

permissions:
  contents: write
  packages: write
  actions: read

env:
  FORCE_COLOR: 3
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
  NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
  NEXT_PUBLIC_POSTHOG_KEY: ${{ secrets.NEXT_PUBLIC_POSTHOG_KEY }}
  NEXT_PUBLIC_POSTHOG_HOST: ${{ secrets.NEXT_PUBLIC_POSTHOG_HOST }}
  POSTHOG_PERSONAL_API_KEY: ${{ secrets.POSTHOG_PERSONAL_API_KEY }}
  NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
  NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
  NEXT_PUBLIC_APP_ENV: production
  MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
  MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
  APPLE_ID: ${{ secrets.APPLE_ID }}
  APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
  APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
  MACOS_IDENTITY: ${{ secrets.MACOS_IDENTITY }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  COMMITTER_TOKEN: ${{ secrets.COMMITTER_TOKEN }}
  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

jobs:
  check-version:
    runs-on: ubuntu-latest
    if: false  # Skip this workflow
    outputs:
      is_version_bump: ${{ steps.check.outputs.is_version_bump }}
    steps:
      - uses: actions/checkout@v4
      - id: check
        run: |
          if [[ "${{ github.event.workflow_run.head_commit.message }}" == *"chore: version packages"* ]]; then
            echo "is_version_bump=true" >> $GITHUB_OUTPUT
          else
            echo "is_version_bump=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check-version
    if: needs.check-version.outputs.is_version_bump == 'true'
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          # Linux builds (glibc)
          - os: ubuntu-latest
            platform: linux
            target: x64
            binary_ext: ""
          - os: ubuntu-latest
            platform: linux
            target: arm64
            binary_ext: ""
          # Linux builds (musl)
          - os: ubuntu-latest
            platform: linux
            target: x64-musl
            binary_ext: ""
          - os: ubuntu-latest
            platform: linux
            target: arm64-musl
            binary_ext: ""
          # macOS builds
          - os: macos-latest
            platform: darwin
            target: x64
            binary_ext: ""
            needs_codesign: true
          - os: macos-latest
            platform: darwin
            target: arm64
            binary_ext: ""
            needs_codesign: true

    runs-on: ${{ matrix.os }}
    outputs:
      version: ${{ github.run_number }}

    steps:
      - uses: actions/checkout@v4

      - uses: ./tooling/github/cli/build
        with:
          platform: ${{ matrix.platform }}
          target: ${{ matrix.target }}
          binary_ext: ${{ matrix.binary_ext }}
          needs_codesign: ${{ matrix.needs_codesign || false }}

      - uses: ./tooling/github/cli/codesign
        if: matrix.needs_codesign
        with:
          platform: ${{ matrix.platform }}
          target: ${{ matrix.target }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: acme-${{ matrix.platform }}-${{ matrix.target }}
          path: apps/cli/bin/acme-${{ matrix.platform }}-${{ matrix.target }}${{ matrix.binary_ext }}

  release:
    name: Release CLI
    needs: [check-version, build]
    runs-on: ubuntu-latest
    if: needs.check-version.outputs.is_version_bump == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          # Need full history for Changesets
          fetch-depth: 0

      - name: Setup Environment
        uses: ./tooling/github/setup

      - name: Get version from package.json
        id: version
        run: |
          VERSION=$(node -p "require('./apps/cli/package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: acme-*
          path: dist
          run-id: ${{ github.run_id }}
          repository: ${{ github.repository }}
          github-token: ${{ github.token }}

      - name: Create GitHub Release
        uses: ./tooling/github/cli/github-release
        with:
          version: ${{ steps.version.outputs.version }}

      # - name: Update Monitoring
      #   uses: ./tooling/github/cli/monitoring
      #   with:
      #     version: ${{ steps.version.outputs.version }}
      #     posthog_host: ${{ env.NEXT_PUBLIC_POSTHOG_HOST }}
      #     posthog_api_key: ${{ env.POSTHOG_PERSONAL_API_KEY }}